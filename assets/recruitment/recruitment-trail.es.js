function VS(s) {
  return s && s.__esModule && Object.prototype.hasOwnProperty.call(s, "default") ? s.default : s;
}
var e_ = { exports: {} }, mp = {};
/**
 * @license React
 * react-jsx-runtime.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var d1;
function XA() {
  if (d1) return mp;
  d1 = 1;
  var s = Symbol.for("react.transitional.element"), e = Symbol.for("react.fragment");
  function n(i, r, c) {
    var h = null;
    if (c !== void 0 && (h = "" + c), r.key !== void 0 && (h = "" + r.key), "key" in r) {
      c = {};
      for (var d in r)
        d !== "key" && (c[d] = r[d]);
    } else c = r;
    return r = c.ref, {
      $$typeof: s,
      type: i,
      key: h,
      ref: r !== void 0 ? r : null,
      props: c
    };
  }
  return mp.Fragment = e, mp.jsx = n, mp.jsxs = n, mp;
}
var p1;
function qA() {
  return p1 || (p1 = 1, e_.exports = XA()), e_.exports;
}
var Ot = qA(), t_ = { exports: {} }, vp = {}, n_ = { exports: {} }, i_ = {};
/**
 * @license React
 * scheduler.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var m1;
function YA() {
  return m1 || (m1 = 1, function(s) {
    function e(P, K) {
      var Q = P.length;
      P.push(K);
      e: for (; 0 < Q; ) {
        var fe = Q - 1 >>> 1, q = P[fe];
        if (0 < r(q, K))
          P[fe] = K, P[Q] = q, Q = fe;
        else break e;
      }
    }
    function n(P) {
      return P.length === 0 ? null : P[0];
    }
    function i(P) {
      if (P.length === 0) return null;
      var K = P[0], Q = P.pop();
      if (Q !== K) {
        P[0] = Q;
        e: for (var fe = 0, q = P.length, te = q >>> 1; fe < te; ) {
          var Me = 2 * (fe + 1) - 1, Re = P[Me], Ne = Me + 1, he = P[Ne];
          if (0 > r(Re, Q))
            Ne < q && 0 > r(he, Re) ? (P[fe] = he, P[Ne] = Q, fe = Ne) : (P[fe] = Re, P[Me] = Q, fe = Me);
          else if (Ne < q && 0 > r(he, Q))
            P[fe] = he, P[Ne] = Q, fe = Ne;
          else break e;
        }
      }
      return K;
    }
    function r(P, K) {
      var Q = P.sortIndex - K.sortIndex;
      return Q !== 0 ? Q : P.id - K.id;
    }
    if (s.unstable_now = void 0, typeof performance == "object" && typeof performance.now == "function") {
      var c = performance;
      s.unstable_now = function() {
        return c.now();
      };
    } else {
      var h = Date, d = h.now();
      s.unstable_now = function() {
        return h.now() - d;
      };
    }
    var v = [], g = [], S = 1, x = null, M = 3, b = !1, R = !1, w = !1, C = !1, E = typeof setTimeout == "function" ? setTimeout : null, U = typeof clearTimeout == "function" ? clearTimeout : null, N = typeof setImmediate < "u" ? setImmediate : null;
    function O(P) {
      for (var K = n(g); K !== null; ) {
        if (K.callback === null) i(g);
        else if (K.startTime <= P)
          i(g), K.sortIndex = K.expirationTime, e(v, K);
        else break;
        K = n(g);
      }
    }
    function I(P) {
      if (w = !1, O(P), !R)
        if (n(v) !== null)
          R = !0, V || (V = !0, le());
        else {
          var K = n(g);
          K !== null && pe(I, K.startTime - P);
        }
    }
    var V = !1, Y = -1, k = 5, B = -1;
    function z() {
      return C ? !0 : !(s.unstable_now() - B < k);
    }
    function W() {
      if (C = !1, V) {
        var P = s.unstable_now();
        B = P;
        var K = !0;
        try {
          e: {
            R = !1, w && (w = !1, U(Y), Y = -1), b = !0;
            var Q = M;
            try {
              t: {
                for (O(P), x = n(v); x !== null && !(x.expirationTime > P && z()); ) {
                  var fe = x.callback;
                  if (typeof fe == "function") {
                    x.callback = null, M = x.priorityLevel;
                    var q = fe(
                      x.expirationTime <= P
                    );
                    if (P = s.unstable_now(), typeof q == "function") {
                      x.callback = q, O(P), K = !0;
                      break t;
                    }
                    x === n(v) && i(v), O(P);
                  } else i(v);
                  x = n(v);
                }
                if (x !== null) K = !0;
                else {
                  var te = n(g);
                  te !== null && pe(
                    I,
                    te.startTime - P
                  ), K = !1;
                }
              }
              break e;
            } finally {
              x = null, M = Q, b = !1;
            }
            K = void 0;
          }
        } finally {
          K ? le() : V = !1;
        }
      }
    }
    var le;
    if (typeof N == "function")
      le = function() {
        N(W);
      };
    else if (typeof MessageChannel < "u") {
      var ae = new MessageChannel(), oe = ae.port2;
      ae.port1.onmessage = W, le = function() {
        oe.postMessage(null);
      };
    } else
      le = function() {
        E(W, 0);
      };
    function pe(P, K) {
      Y = E(function() {
        P(s.unstable_now());
      }, K);
    }
    s.unstable_IdlePriority = 5, s.unstable_ImmediatePriority = 1, s.unstable_LowPriority = 4, s.unstable_NormalPriority = 3, s.unstable_Profiling = null, s.unstable_UserBlockingPriority = 2, s.unstable_cancelCallback = function(P) {
      P.callback = null;
    }, s.unstable_forceFrameRate = function(P) {
      0 > P || 125 < P ? console.error(
        "forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"
      ) : k = 0 < P ? Math.floor(1e3 / P) : 5;
    }, s.unstable_getCurrentPriorityLevel = function() {
      return M;
    }, s.unstable_next = function(P) {
      switch (M) {
        case 1:
        case 2:
        case 3:
          var K = 3;
          break;
        default:
          K = M;
      }
      var Q = M;
      M = K;
      try {
        return P();
      } finally {
        M = Q;
      }
    }, s.unstable_requestPaint = function() {
      C = !0;
    }, s.unstable_runWithPriority = function(P, K) {
      switch (P) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
          break;
        default:
          P = 3;
      }
      var Q = M;
      M = P;
      try {
        return K();
      } finally {
        M = Q;
      }
    }, s.unstable_scheduleCallback = function(P, K, Q) {
      var fe = s.unstable_now();
      switch (typeof Q == "object" && Q !== null ? (Q = Q.delay, Q = typeof Q == "number" && 0 < Q ? fe + Q : fe) : Q = fe, P) {
        case 1:
          var q = -1;
          break;
        case 2:
          q = 250;
          break;
        case 5:
          q = 1073741823;
          break;
        case 4:
          q = 1e4;
          break;
        default:
          q = 5e3;
      }
      return q = Q + q, P = {
        id: S++,
        callback: K,
        priorityLevel: P,
        startTime: Q,
        expirationTime: q,
        sortIndex: -1
      }, Q > fe ? (P.sortIndex = Q, e(g, P), n(v) === null && P === n(g) && (w ? (U(Y), Y = -1) : w = !0, pe(I, Q - fe))) : (P.sortIndex = q, e(v, P), R || b || (R = !0, V || (V = !0, le()))), P;
    }, s.unstable_shouldYield = z, s.unstable_wrapCallback = function(P) {
      var K = M;
      return function() {
        var Q = M;
        M = K;
        try {
          return P.apply(this, arguments);
        } finally {
          M = Q;
        }
      };
    };
  }(i_)), i_;
}
var v1;
function kA() {
  return v1 || (v1 = 1, n_.exports = YA()), n_.exports;
}
var a_ = { exports: {} }, en = {};
/**
 * @license React
 * react.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var g1;
function WA() {
  if (g1) return en;
  g1 = 1;
  var s = Symbol.for("react.transitional.element"), e = Symbol.for("react.portal"), n = Symbol.for("react.fragment"), i = Symbol.for("react.strict_mode"), r = Symbol.for("react.profiler"), c = Symbol.for("react.consumer"), h = Symbol.for("react.context"), d = Symbol.for("react.forward_ref"), v = Symbol.for("react.suspense"), g = Symbol.for("react.memo"), S = Symbol.for("react.lazy"), x = Symbol.iterator;
  function M(q) {
    return q === null || typeof q != "object" ? null : (q = x && q[x] || q["@@iterator"], typeof q == "function" ? q : null);
  }
  var b = {
    isMounted: function() {
      return !1;
    },
    enqueueForceUpdate: function() {
    },
    enqueueReplaceState: function() {
    },
    enqueueSetState: function() {
    }
  }, R = Object.assign, w = {};
  function C(q, te, Me) {
    this.props = q, this.context = te, this.refs = w, this.updater = Me || b;
  }
  C.prototype.isReactComponent = {}, C.prototype.setState = function(q, te) {
    if (typeof q != "object" && typeof q != "function" && q != null)
      throw Error(
        "takes an object of state variables to update or a function which returns an object of state variables."
      );
    this.updater.enqueueSetState(this, q, te, "setState");
  }, C.prototype.forceUpdate = function(q) {
    this.updater.enqueueForceUpdate(this, q, "forceUpdate");
  };
  function E() {
  }
  E.prototype = C.prototype;
  function U(q, te, Me) {
    this.props = q, this.context = te, this.refs = w, this.updater = Me || b;
  }
  var N = U.prototype = new E();
  N.constructor = U, R(N, C.prototype), N.isPureReactComponent = !0;
  var O = Array.isArray, I = { H: null, A: null, T: null, S: null, V: null }, V = Object.prototype.hasOwnProperty;
  function Y(q, te, Me, Re, Ne, he) {
    return Me = he.ref, {
      $$typeof: s,
      type: q,
      key: te,
      ref: Me !== void 0 ? Me : null,
      props: he
    };
  }
  function k(q, te) {
    return Y(
      q.type,
      te,
      void 0,
      void 0,
      void 0,
      q.props
    );
  }
  function B(q) {
    return typeof q == "object" && q !== null && q.$$typeof === s;
  }
  function z(q) {
    var te = { "=": "=0", ":": "=2" };
    return "$" + q.replace(/[=:]/g, function(Me) {
      return te[Me];
    });
  }
  var W = /\/+/g;
  function le(q, te) {
    return typeof q == "object" && q !== null && q.key != null ? z("" + q.key) : te.toString(36);
  }
  function ae() {
  }
  function oe(q) {
    switch (q.status) {
      case "fulfilled":
        return q.value;
      case "rejected":
        throw q.reason;
      default:
        switch (typeof q.status == "string" ? q.then(ae, ae) : (q.status = "pending", q.then(
          function(te) {
            q.status === "pending" && (q.status = "fulfilled", q.value = te);
          },
          function(te) {
            q.status === "pending" && (q.status = "rejected", q.reason = te);
          }
        )), q.status) {
          case "fulfilled":
            return q.value;
          case "rejected":
            throw q.reason;
        }
    }
    throw q;
  }
  function pe(q, te, Me, Re, Ne) {
    var he = typeof q;
    (he === "undefined" || he === "boolean") && (q = null);
    var we = !1;
    if (q === null) we = !0;
    else
      switch (he) {
        case "bigint":
        case "string":
        case "number":
          we = !0;
          break;
        case "object":
          switch (q.$$typeof) {
            case s:
            case e:
              we = !0;
              break;
            case S:
              return we = q._init, pe(
                we(q._payload),
                te,
                Me,
                Re,
                Ne
              );
          }
      }
    if (we)
      return Ne = Ne(q), we = Re === "" ? "." + le(q, 0) : Re, O(Ne) ? (Me = "", we != null && (Me = we.replace(W, "$&/") + "/"), pe(Ne, te, Me, "", function(ut) {
        return ut;
      })) : Ne != null && (B(Ne) && (Ne = k(
        Ne,
        Me + (Ne.key == null || q && q.key === Ne.key ? "" : ("" + Ne.key).replace(
          W,
          "$&/"
        ) + "/") + we
      )), te.push(Ne)), 1;
    we = 0;
    var Fe = Re === "" ? "." : Re + ":";
    if (O(q))
      for (var $e = 0; $e < q.length; $e++)
        Re = q[$e], he = Fe + le(Re, $e), we += pe(
          Re,
          te,
          Me,
          he,
          Ne
        );
    else if ($e = M(q), typeof $e == "function")
      for (q = $e.call(q), $e = 0; !(Re = q.next()).done; )
        Re = Re.value, he = Fe + le(Re, $e++), we += pe(
          Re,
          te,
          Me,
          he,
          Ne
        );
    else if (he === "object") {
      if (typeof q.then == "function")
        return pe(
          oe(q),
          te,
          Me,
          Re,
          Ne
        );
      throw te = String(q), Error(
        "Objects are not valid as a React child (found: " + (te === "[object Object]" ? "object with keys {" + Object.keys(q).join(", ") + "}" : te) + "). If you meant to render a collection of children, use an array instead."
      );
    }
    return we;
  }
  function P(q, te, Me) {
    if (q == null) return q;
    var Re = [], Ne = 0;
    return pe(q, Re, "", "", function(he) {
      return te.call(Me, he, Ne++);
    }), Re;
  }
  function K(q) {
    if (q._status === -1) {
      var te = q._result;
      te = te(), te.then(
        function(Me) {
          (q._status === 0 || q._status === -1) && (q._status = 1, q._result = Me);
        },
        function(Me) {
          (q._status === 0 || q._status === -1) && (q._status = 2, q._result = Me);
        }
      ), q._status === -1 && (q._status = 0, q._result = te);
    }
    if (q._status === 1) return q._result.default;
    throw q._result;
  }
  var Q = typeof reportError == "function" ? reportError : function(q) {
    if (typeof window == "object" && typeof window.ErrorEvent == "function") {
      var te = new window.ErrorEvent("error", {
        bubbles: !0,
        cancelable: !0,
        message: typeof q == "object" && q !== null && typeof q.message == "string" ? String(q.message) : String(q),
        error: q
      });
      if (!window.dispatchEvent(te)) return;
    } else if (typeof process == "object" && typeof process.emit == "function") {
      process.emit("uncaughtException", q);
      return;
    }
    console.error(q);
  };
  function fe() {
  }
  return en.Children = {
    map: P,
    forEach: function(q, te, Me) {
      P(
        q,
        function() {
          te.apply(this, arguments);
        },
        Me
      );
    },
    count: function(q) {
      var te = 0;
      return P(q, function() {
        te++;
      }), te;
    },
    toArray: function(q) {
      return P(q, function(te) {
        return te;
      }) || [];
    },
    only: function(q) {
      if (!B(q))
        throw Error(
          "React.Children.only expected to receive a single React element child."
        );
      return q;
    }
  }, en.Component = C, en.Fragment = n, en.Profiler = r, en.PureComponent = U, en.StrictMode = i, en.Suspense = v, en.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = I, en.__COMPILER_RUNTIME = {
    __proto__: null,
    c: function(q) {
      return I.H.useMemoCache(q);
    }
  }, en.cache = function(q) {
    return function() {
      return q.apply(null, arguments);
    };
  }, en.cloneElement = function(q, te, Me) {
    if (q == null)
      throw Error(
        "The argument must be a React element, but you passed " + q + "."
      );
    var Re = R({}, q.props), Ne = q.key, he = void 0;
    if (te != null)
      for (we in te.ref !== void 0 && (he = void 0), te.key !== void 0 && (Ne = "" + te.key), te)
        !V.call(te, we) || we === "key" || we === "__self" || we === "__source" || we === "ref" && te.ref === void 0 || (Re[we] = te[we]);
    var we = arguments.length - 2;
    if (we === 1) Re.children = Me;
    else if (1 < we) {
      for (var Fe = Array(we), $e = 0; $e < we; $e++)
        Fe[$e] = arguments[$e + 2];
      Re.children = Fe;
    }
    return Y(q.type, Ne, void 0, void 0, he, Re);
  }, en.createContext = function(q) {
    return q = {
      $$typeof: h,
      _currentValue: q,
      _currentValue2: q,
      _threadCount: 0,
      Provider: null,
      Consumer: null
    }, q.Provider = q, q.Consumer = {
      $$typeof: c,
      _context: q
    }, q;
  }, en.createElement = function(q, te, Me) {
    var Re, Ne = {}, he = null;
    if (te != null)
      for (Re in te.key !== void 0 && (he = "" + te.key), te)
        V.call(te, Re) && Re !== "key" && Re !== "__self" && Re !== "__source" && (Ne[Re] = te[Re]);
    var we = arguments.length - 2;
    if (we === 1) Ne.children = Me;
    else if (1 < we) {
      for (var Fe = Array(we), $e = 0; $e < we; $e++)
        Fe[$e] = arguments[$e + 2];
      Ne.children = Fe;
    }
    if (q && q.defaultProps)
      for (Re in we = q.defaultProps, we)
        Ne[Re] === void 0 && (Ne[Re] = we[Re]);
    return Y(q, he, void 0, void 0, null, Ne);
  }, en.createRef = function() {
    return { current: null };
  }, en.forwardRef = function(q) {
    return { $$typeof: d, render: q };
  }, en.isValidElement = B, en.lazy = function(q) {
    return {
      $$typeof: S,
      _payload: { _status: -1, _result: q },
      _init: K
    };
  }, en.memo = function(q, te) {
    return {
      $$typeof: g,
      type: q,
      compare: te === void 0 ? null : te
    };
  }, en.startTransition = function(q) {
    var te = I.T, Me = {};
    I.T = Me;
    try {
      var Re = q(), Ne = I.S;
      Ne !== null && Ne(Me, Re), typeof Re == "object" && Re !== null && typeof Re.then == "function" && Re.then(fe, Q);
    } catch (he) {
      Q(he);
    } finally {
      I.T = te;
    }
  }, en.unstable_useCacheRefresh = function() {
    return I.H.useCacheRefresh();
  }, en.use = function(q) {
    return I.H.use(q);
  }, en.useActionState = function(q, te, Me) {
    return I.H.useActionState(q, te, Me);
  }, en.useCallback = function(q, te) {
    return I.H.useCallback(q, te);
  }, en.useContext = function(q) {
    return I.H.useContext(q);
  }, en.useDebugValue = function() {
  }, en.useDeferredValue = function(q, te) {
    return I.H.useDeferredValue(q, te);
  }, en.useEffect = function(q, te, Me) {
    var Re = I.H;
    if (typeof Me == "function")
      throw Error(
        "useEffect CRUD overload is not enabled in this build of React."
      );
    return Re.useEffect(q, te);
  }, en.useId = function() {
    return I.H.useId();
  }, en.useImperativeHandle = function(q, te, Me) {
    return I.H.useImperativeHandle(q, te, Me);
  }, en.useInsertionEffect = function(q, te) {
    return I.H.useInsertionEffect(q, te);
  }, en.useLayoutEffect = function(q, te) {
    return I.H.useLayoutEffect(q, te);
  }, en.useMemo = function(q, te) {
    return I.H.useMemo(q, te);
  }, en.useOptimistic = function(q, te) {
    return I.H.useOptimistic(q, te);
  }, en.useReducer = function(q, te, Me) {
    return I.H.useReducer(q, te, Me);
  }, en.useRef = function(q) {
    return I.H.useRef(q);
  }, en.useState = function(q) {
    return I.H.useState(q);
  }, en.useSyncExternalStore = function(q, te, Me) {
    return I.H.useSyncExternalStore(
      q,
      te,
      Me
    );
  }, en.useTransition = function() {
    return I.H.useTransition();
  }, en.version = "19.1.1", en;
}
var y1;
function jh() {
  return y1 || (y1 = 1, a_.exports = WA()), a_.exports;
}
var s_ = { exports: {} }, Ea = {};
/**
 * @license React
 * react-dom.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var _1;
function ZA() {
  if (_1) return Ea;
  _1 = 1;
  var s = jh();
  function e(v) {
    var g = "https://react.dev/errors/" + v;
    if (1 < arguments.length) {
      g += "?args[]=" + encodeURIComponent(arguments[1]);
      for (var S = 2; S < arguments.length; S++)
        g += "&args[]=" + encodeURIComponent(arguments[S]);
    }
    return "Minified React error #" + v + "; visit " + g + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
  }
  function n() {
  }
  var i = {
    d: {
      f: n,
      r: function() {
        throw Error(e(522));
      },
      D: n,
      C: n,
      L: n,
      m: n,
      X: n,
      S: n,
      M: n
    },
    p: 0,
    findDOMNode: null
  }, r = Symbol.for("react.portal");
  function c(v, g, S) {
    var x = 3 < arguments.length && arguments[3] !== void 0 ? arguments[3] : null;
    return {
      $$typeof: r,
      key: x == null ? null : "" + x,
      children: v,
      containerInfo: g,
      implementation: S
    };
  }
  var h = s.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;
  function d(v, g) {
    if (v === "font") return "";
    if (typeof g == "string")
      return g === "use-credentials" ? g : "";
  }
  return Ea.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = i, Ea.createPortal = function(v, g) {
    var S = 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : null;
    if (!g || g.nodeType !== 1 && g.nodeType !== 9 && g.nodeType !== 11)
      throw Error(e(299));
    return c(v, g, null, S);
  }, Ea.flushSync = function(v) {
    var g = h.T, S = i.p;
    try {
      if (h.T = null, i.p = 2, v) return v();
    } finally {
      h.T = g, i.p = S, i.d.f();
    }
  }, Ea.preconnect = function(v, g) {
    typeof v == "string" && (g ? (g = g.crossOrigin, g = typeof g == "string" ? g === "use-credentials" ? g : "" : void 0) : g = null, i.d.C(v, g));
  }, Ea.prefetchDNS = function(v) {
    typeof v == "string" && i.d.D(v);
  }, Ea.preinit = function(v, g) {
    if (typeof v == "string" && g && typeof g.as == "string") {
      var S = g.as, x = d(S, g.crossOrigin), M = typeof g.integrity == "string" ? g.integrity : void 0, b = typeof g.fetchPriority == "string" ? g.fetchPriority : void 0;
      S === "style" ? i.d.S(
        v,
        typeof g.precedence == "string" ? g.precedence : void 0,
        {
          crossOrigin: x,
          integrity: M,
          fetchPriority: b
        }
      ) : S === "script" && i.d.X(v, {
        crossOrigin: x,
        integrity: M,
        fetchPriority: b,
        nonce: typeof g.nonce == "string" ? g.nonce : void 0
      });
    }
  }, Ea.preinitModule = function(v, g) {
    if (typeof v == "string")
      if (typeof g == "object" && g !== null) {
        if (g.as == null || g.as === "script") {
          var S = d(
            g.as,
            g.crossOrigin
          );
          i.d.M(v, {
            crossOrigin: S,
            integrity: typeof g.integrity == "string" ? g.integrity : void 0,
            nonce: typeof g.nonce == "string" ? g.nonce : void 0
          });
        }
      } else g == null && i.d.M(v);
  }, Ea.preload = function(v, g) {
    if (typeof v == "string" && typeof g == "object" && g !== null && typeof g.as == "string") {
      var S = g.as, x = d(S, g.crossOrigin);
      i.d.L(v, S, {
        crossOrigin: x,
        integrity: typeof g.integrity == "string" ? g.integrity : void 0,
        nonce: typeof g.nonce == "string" ? g.nonce : void 0,
        type: typeof g.type == "string" ? g.type : void 0,
        fetchPriority: typeof g.fetchPriority == "string" ? g.fetchPriority : void 0,
        referrerPolicy: typeof g.referrerPolicy == "string" ? g.referrerPolicy : void 0,
        imageSrcSet: typeof g.imageSrcSet == "string" ? g.imageSrcSet : void 0,
        imageSizes: typeof g.imageSizes == "string" ? g.imageSizes : void 0,
        media: typeof g.media == "string" ? g.media : void 0
      });
    }
  }, Ea.preloadModule = function(v, g) {
    if (typeof v == "string")
      if (g) {
        var S = d(g.as, g.crossOrigin);
        i.d.m(v, {
          as: typeof g.as == "string" && g.as !== "script" ? g.as : void 0,
          crossOrigin: S,
          integrity: typeof g.integrity == "string" ? g.integrity : void 0
        });
      } else i.d.m(v);
  }, Ea.requestFormReset = function(v) {
    i.d.r(v);
  }, Ea.unstable_batchedUpdates = function(v, g) {
    return v(g);
  }, Ea.useFormState = function(v, g, S) {
    return h.H.useFormState(v, g, S);
  }, Ea.useFormStatus = function() {
    return h.H.useHostTransitionStatus();
  }, Ea.version = "19.1.1", Ea;
}
var S1;
function jA() {
  if (S1) return s_.exports;
  S1 = 1;
  function s() {
    if (!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ > "u" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE != "function"))
      try {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(s);
      } catch (e) {
        console.error(e);
      }
  }
  return s(), s_.exports = ZA(), s_.exports;
}
var x1;
function QA() {
  if (x1) return vp;
  x1 = 1;
  /**
   * @license React
   * react-dom-client.production.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */
  var s = kA(), e = jh(), n = jA();
  function i(a) {
    var o = "https://react.dev/errors/" + a;
    if (1 < arguments.length) {
      o += "?args[]=" + encodeURIComponent(arguments[1]);
      for (var f = 2; f < arguments.length; f++)
        o += "&args[]=" + encodeURIComponent(arguments[f]);
    }
    return "Minified React error #" + a + "; visit " + o + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
  }
  function r(a) {
    return !(!a || a.nodeType !== 1 && a.nodeType !== 9 && a.nodeType !== 11);
  }
  function c(a) {
    var o = a, f = a;
    if (a.alternate) for (; o.return; ) o = o.return;
    else {
      a = o;
      do
        o = a, (o.flags & 4098) !== 0 && (f = o.return), a = o.return;
      while (a);
    }
    return o.tag === 3 ? f : null;
  }
  function h(a) {
    if (a.tag === 13) {
      var o = a.memoizedState;
      if (o === null && (a = a.alternate, a !== null && (o = a.memoizedState)), o !== null) return o.dehydrated;
    }
    return null;
  }
  function d(a) {
    if (c(a) !== a)
      throw Error(i(188));
  }
  function v(a) {
    var o = a.alternate;
    if (!o) {
      if (o = c(a), o === null) throw Error(i(188));
      return o !== a ? null : a;
    }
    for (var f = a, p = o; ; ) {
      var y = f.return;
      if (y === null) break;
      var T = y.alternate;
      if (T === null) {
        if (p = y.return, p !== null) {
          f = p;
          continue;
        }
        break;
      }
      if (y.child === T.child) {
        for (T = y.child; T; ) {
          if (T === f) return d(y), a;
          if (T === p) return d(y), o;
          T = T.sibling;
        }
        throw Error(i(188));
      }
      if (f.return !== p.return) f = y, p = T;
      else {
        for (var L = !1, G = y.child; G; ) {
          if (G === f) {
            L = !0, f = y, p = T;
            break;
          }
          if (G === p) {
            L = !0, p = y, f = T;
            break;
          }
          G = G.sibling;
        }
        if (!L) {
          for (G = T.child; G; ) {
            if (G === f) {
              L = !0, f = T, p = y;
              break;
            }
            if (G === p) {
              L = !0, p = T, f = y;
              break;
            }
            G = G.sibling;
          }
          if (!L) throw Error(i(189));
        }
      }
      if (f.alternate !== p) throw Error(i(190));
    }
    if (f.tag !== 3) throw Error(i(188));
    return f.stateNode.current === f ? a : o;
  }
  function g(a) {
    var o = a.tag;
    if (o === 5 || o === 26 || o === 27 || o === 6) return a;
    for (a = a.child; a !== null; ) {
      if (o = g(a), o !== null) return o;
      a = a.sibling;
    }
    return null;
  }
  var S = Object.assign, x = Symbol.for("react.element"), M = Symbol.for("react.transitional.element"), b = Symbol.for("react.portal"), R = Symbol.for("react.fragment"), w = Symbol.for("react.strict_mode"), C = Symbol.for("react.profiler"), E = Symbol.for("react.provider"), U = Symbol.for("react.consumer"), N = Symbol.for("react.context"), O = Symbol.for("react.forward_ref"), I = Symbol.for("react.suspense"), V = Symbol.for("react.suspense_list"), Y = Symbol.for("react.memo"), k = Symbol.for("react.lazy"), B = Symbol.for("react.activity"), z = Symbol.for("react.memo_cache_sentinel"), W = Symbol.iterator;
  function le(a) {
    return a === null || typeof a != "object" ? null : (a = W && a[W] || a["@@iterator"], typeof a == "function" ? a : null);
  }
  var ae = Symbol.for("react.client.reference");
  function oe(a) {
    if (a == null) return null;
    if (typeof a == "function")
      return a.$$typeof === ae ? null : a.displayName || a.name || null;
    if (typeof a == "string") return a;
    switch (a) {
      case R:
        return "Fragment";
      case C:
        return "Profiler";
      case w:
        return "StrictMode";
      case I:
        return "Suspense";
      case V:
        return "SuspenseList";
      case B:
        return "Activity";
    }
    if (typeof a == "object")
      switch (a.$$typeof) {
        case b:
          return "Portal";
        case N:
          return (a.displayName || "Context") + ".Provider";
        case U:
          return (a._context.displayName || "Context") + ".Consumer";
        case O:
          var o = a.render;
          return a = a.displayName, a || (a = o.displayName || o.name || "", a = a !== "" ? "ForwardRef(" + a + ")" : "ForwardRef"), a;
        case Y:
          return o = a.displayName || null, o !== null ? o : oe(a.type) || "Memo";
        case k:
          o = a._payload, a = a._init;
          try {
            return oe(a(o));
          } catch {
          }
      }
    return null;
  }
  var pe = Array.isArray, P = e.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, K = n.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, Q = {
    pending: !1,
    data: null,
    method: null,
    action: null
  }, fe = [], q = -1;
  function te(a) {
    return { current: a };
  }
  function Me(a) {
    0 > q || (a.current = fe[q], fe[q] = null, q--);
  }
  function Re(a, o) {
    q++, fe[q] = a.current, a.current = o;
  }
  var Ne = te(null), he = te(null), we = te(null), Fe = te(null);
  function $e(a, o) {
    switch (Re(we, o), Re(he, a), Re(Ne, null), o.nodeType) {
      case 9:
      case 11:
        a = (a = o.documentElement) && (a = a.namespaceURI) ? Gx(a) : 0;
        break;
      default:
        if (a = o.tagName, o = o.namespaceURI)
          o = Gx(o), a = Fx(o, a);
        else
          switch (a) {
            case "svg":
              a = 1;
              break;
            case "math":
              a = 2;
              break;
            default:
              a = 0;
          }
    }
    Me(Ne), Re(Ne, a);
  }
  function ut() {
    Me(Ne), Me(he), Me(we);
  }
  function Tt(a) {
    a.memoizedState !== null && Re(Fe, a);
    var o = Ne.current, f = Fx(o, a.type);
    o !== f && (Re(he, a), Re(Ne, f));
  }
  function gn(a) {
    he.current === a && (Me(Ne), Me(he)), Fe.current === a && (Me(Fe), up._currentValue = Q);
  }
  var Ct = Object.prototype.hasOwnProperty, ee = s.unstable_scheduleCallback, He = s.unstable_cancelCallback, Ue = s.unstable_shouldYield, Xe = s.unstable_requestPaint, Ce = s.unstable_now, et = s.unstable_getCurrentPriorityLevel, Ge = s.unstable_ImmediatePriority, Ze = s.unstable_UserBlockingPriority, At = s.unstable_NormalPriority, Bt = s.unstable_LowPriority, Z = s.unstable_IdlePriority, H = s.log, me = s.unstable_setDisableYieldValue, Te = null, ze = null;
  function Ae(a) {
    if (typeof H == "function" && me(a), ze && typeof ze.setStrictMode == "function")
      try {
        ze.setStrictMode(Te, a);
      } catch {
      }
  }
  var at = Math.clz32 ? Math.clz32 : pt, Qe = Math.log, dt = Math.LN2;
  function pt(a) {
    return a >>>= 0, a === 0 ? 32 : 31 - (Qe(a) / dt | 0) | 0;
  }
  var Ve = 256, tt = 4194304;
  function St(a) {
    var o = a & 42;
    if (o !== 0) return o;
    switch (a & -a) {
      case 1:
        return 1;
      case 2:
        return 2;
      case 4:
        return 4;
      case 8:
        return 8;
      case 16:
        return 16;
      case 32:
        return 32;
      case 64:
        return 64;
      case 128:
        return 128;
      case 256:
      case 512:
      case 1024:
      case 2048:
      case 4096:
      case 8192:
      case 16384:
      case 32768:
      case 65536:
      case 131072:
      case 262144:
      case 524288:
      case 1048576:
      case 2097152:
        return a & 4194048;
      case 4194304:
      case 8388608:
      case 16777216:
      case 33554432:
        return a & 62914560;
      case 67108864:
        return 67108864;
      case 134217728:
        return 134217728;
      case 268435456:
        return 268435456;
      case 536870912:
        return 536870912;
      case 1073741824:
        return 0;
      default:
        return a;
    }
  }
  function mt(a, o, f) {
    var p = a.pendingLanes;
    if (p === 0) return 0;
    var y = 0, T = a.suspendedLanes, L = a.pingedLanes;
    a = a.warmLanes;
    var G = p & 134217727;
    return G !== 0 ? (p = G & ~T, p !== 0 ? y = St(p) : (L &= G, L !== 0 ? y = St(L) : f || (f = G & ~a, f !== 0 && (y = St(f))))) : (G = p & ~T, G !== 0 ? y = St(G) : L !== 0 ? y = St(L) : f || (f = p & ~a, f !== 0 && (y = St(f)))), y === 0 ? 0 : o !== 0 && o !== y && (o & T) === 0 && (T = y & -y, f = o & -o, T >= f || T === 32 && (f & 4194048) !== 0) ? o : y;
  }
  function nt(a, o) {
    return (a.pendingLanes & ~(a.suspendedLanes & ~a.pingedLanes) & o) === 0;
  }
  function Pt(a, o) {
    switch (a) {
      case 1:
      case 2:
      case 4:
      case 8:
      case 64:
        return o + 250;
      case 16:
      case 32:
      case 128:
      case 256:
      case 512:
      case 1024:
      case 2048:
      case 4096:
      case 8192:
      case 16384:
      case 32768:
      case 65536:
      case 131072:
      case 262144:
      case 524288:
      case 1048576:
      case 2097152:
        return o + 5e3;
      case 4194304:
      case 8388608:
      case 16777216:
      case 33554432:
        return -1;
      case 67108864:
      case 134217728:
      case 268435456:
      case 536870912:
      case 1073741824:
        return -1;
      default:
        return -1;
    }
  }
  function se() {
    var a = Ve;
    return Ve <<= 1, (Ve & 4194048) === 0 && (Ve = 256), a;
  }
  function ke() {
    var a = tt;
    return tt <<= 1, (tt & 62914560) === 0 && (tt = 4194304), a;
  }
  function Ke(a) {
    for (var o = [], f = 0; 31 > f; f++) o.push(a);
    return o;
  }
  function ct(a, o) {
    a.pendingLanes |= o, o !== 268435456 && (a.suspendedLanes = 0, a.pingedLanes = 0, a.warmLanes = 0);
  }
  function qe(a, o, f, p, y, T) {
    var L = a.pendingLanes;
    a.pendingLanes = f, a.suspendedLanes = 0, a.pingedLanes = 0, a.warmLanes = 0, a.expiredLanes &= f, a.entangledLanes &= f, a.errorRecoveryDisabledLanes &= f, a.shellSuspendCounter = 0;
    var G = a.entanglements, J = a.expirationTimes, ye = a.hiddenUpdates;
    for (f = L & ~f; 0 < f; ) {
      var Le = 31 - at(f), Ie = 1 << Le;
      G[Le] = 0, J[Le] = -1;
      var Se = ye[Le];
      if (Se !== null)
        for (ye[Le] = null, Le = 0; Le < Se.length; Le++) {
          var be = Se[Le];
          be !== null && (be.lane &= -536870913);
        }
      f &= ~Ie;
    }
    p !== 0 && Pe(a, p, 0), T !== 0 && y === 0 && a.tag !== 0 && (a.suspendedLanes |= T & ~(L & ~o));
  }
  function Pe(a, o, f) {
    a.pendingLanes |= o, a.suspendedLanes &= ~o;
    var p = 31 - at(o);
    a.entangledLanes |= o, a.entanglements[p] = a.entanglements[p] | 1073741824 | f & 4194090;
  }
  function vt(a, o) {
    var f = a.entangledLanes |= o;
    for (a = a.entanglements; f; ) {
      var p = 31 - at(f), y = 1 << p;
      y & o | a[p] & o && (a[p] |= o), f &= ~y;
    }
  }
  function Ut(a) {
    switch (a) {
      case 2:
        a = 1;
        break;
      case 8:
        a = 4;
        break;
      case 32:
        a = 16;
        break;
      case 256:
      case 512:
      case 1024:
      case 2048:
      case 4096:
      case 8192:
      case 16384:
      case 32768:
      case 65536:
      case 131072:
      case 262144:
      case 524288:
      case 1048576:
      case 2097152:
      case 4194304:
      case 8388608:
      case 16777216:
      case 33554432:
        a = 128;
        break;
      case 268435456:
        a = 134217728;
        break;
      default:
        a = 0;
    }
    return a;
  }
  function un(a) {
    return a &= -a, 2 < a ? 8 < a ? (a & 134217727) !== 0 ? 32 : 268435456 : 8 : 2;
  }
  function rn() {
    var a = K.p;
    return a !== 0 ? a : (a = window.event, a === void 0 ? 32 : o1(a.type));
  }
  function is(a, o) {
    var f = K.p;
    try {
      return K.p = a, o();
    } finally {
      K.p = f;
    }
  }
  var pi = Math.random().toString(36).slice(2), mi = "__reactFiber$" + pi, jn = "__reactProps$" + pi, as = "__reactContainer$" + pi, Na = "__reactEvents$" + pi, Lc = "__reactListeners$" + pi, Oa = "__reactHandles$" + pi, La = "__reactResources$" + pi, za = "__reactMarker$" + pi;
  function In(a) {
    delete a[mi], delete a[jn], delete a[Na], delete a[Lc], delete a[Oa];
  }
  function As(a) {
    var o = a[mi];
    if (o) return o;
    for (var f = a.parentNode; f; ) {
      if (o = f[as] || f[mi]) {
        if (f = o.alternate, o.child !== null || f !== null && f.child !== null)
          for (a = kx(a); a !== null; ) {
            if (f = a[mi]) return f;
            a = kx(a);
          }
        return o;
      }
      a = f, f = a.parentNode;
    }
    return null;
  }
  function Ys(a) {
    if (a = a[mi] || a[as]) {
      var o = a.tag;
      if (o === 5 || o === 6 || o === 13 || o === 26 || o === 27 || o === 3)
        return a;
    }
    return null;
  }
  function Qr(a) {
    var o = a.tag;
    if (o === 5 || o === 26 || o === 27 || o === 6) return a.stateNode;
    throw Error(i(33));
  }
  function mr(a) {
    var o = a[La];
    return o || (o = a[La] = { hoistableStyles: /* @__PURE__ */ new Map(), hoistableScripts: /* @__PURE__ */ new Map() }), o;
  }
  function vi(a) {
    a[za] = !0;
  }
  var Ml = /* @__PURE__ */ new Set(), bl = {};
  function F(a, o) {
    re(a, o), re(a + "Capture", o);
  }
  function re(a, o) {
    for (bl[a] = o, a = 0; a < o.length; a++)
      Ml.add(o[a]);
  }
  var ve = RegExp(
    "^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"
  ), xe = {}, ce = {};
  function Ye(a) {
    return Ct.call(ce, a) ? !0 : Ct.call(xe, a) ? !1 : ve.test(a) ? ce[a] = !0 : (xe[a] = !0, !1);
  }
  function Je(a, o, f) {
    if (Ye(o))
      if (f === null) a.removeAttribute(o);
      else {
        switch (typeof f) {
          case "undefined":
          case "function":
          case "symbol":
            a.removeAttribute(o);
            return;
          case "boolean":
            var p = o.toLowerCase().slice(0, 5);
            if (p !== "data-" && p !== "aria-") {
              a.removeAttribute(o);
              return;
            }
        }
        a.setAttribute(o, "" + f);
      }
  }
  function ft(a, o, f) {
    if (f === null) a.removeAttribute(o);
    else {
      switch (typeof f) {
        case "undefined":
        case "function":
        case "symbol":
        case "boolean":
          a.removeAttribute(o);
          return;
      }
      a.setAttribute(o, "" + f);
    }
  }
  function it(a, o, f, p) {
    if (p === null) a.removeAttribute(f);
    else {
      switch (typeof p) {
        case "undefined":
        case "function":
        case "symbol":
        case "boolean":
          a.removeAttribute(f);
          return;
      }
      a.setAttributeNS(o, f, "" + p);
    }
  }
  var Mt, wt;
  function _t(a) {
    if (Mt === void 0)
      try {
        throw Error();
      } catch (f) {
        var o = f.stack.trim().match(/\n( *(at )?)/);
        Mt = o && o[1] || "", wt = -1 < f.stack.indexOf(`
    at`) ? " (<anonymous>)" : -1 < f.stack.indexOf("@") ? "@unknown:0:0" : "";
      }
    return `
` + Mt + a + wt;
  }
  var Zt = !1;
  function hn(a, o) {
    if (!a || Zt) return "";
    Zt = !0;
    var f = Error.prepareStackTrace;
    Error.prepareStackTrace = void 0;
    try {
      var p = {
        DetermineComponentFrameRoot: function() {
          try {
            if (o) {
              var Ie = function() {
                throw Error();
              };
              if (Object.defineProperty(Ie.prototype, "props", {
                set: function() {
                  throw Error();
                }
              }), typeof Reflect == "object" && Reflect.construct) {
                try {
                  Reflect.construct(Ie, []);
                } catch (be) {
                  var Se = be;
                }
                Reflect.construct(a, [], Ie);
              } else {
                try {
                  Ie.call();
                } catch (be) {
                  Se = be;
                }
                a.call(Ie.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (be) {
                Se = be;
              }
              (Ie = a()) && typeof Ie.catch == "function" && Ie.catch(function() {
              });
            }
          } catch (be) {
            if (be && Se && typeof be.stack == "string")
              return [be.stack, Se.stack];
          }
          return [null, null];
        }
      };
      p.DetermineComponentFrameRoot.displayName = "DetermineComponentFrameRoot";
      var y = Object.getOwnPropertyDescriptor(
        p.DetermineComponentFrameRoot,
        "name"
      );
      y && y.configurable && Object.defineProperty(
        p.DetermineComponentFrameRoot,
        "name",
        { value: "DetermineComponentFrameRoot" }
      );
      var T = p.DetermineComponentFrameRoot(), L = T[0], G = T[1];
      if (L && G) {
        var J = L.split(`
`), ye = G.split(`
`);
        for (y = p = 0; p < J.length && !J[p].includes("DetermineComponentFrameRoot"); )
          p++;
        for (; y < ye.length && !ye[y].includes(
          "DetermineComponentFrameRoot"
        ); )
          y++;
        if (p === J.length || y === ye.length)
          for (p = J.length - 1, y = ye.length - 1; 1 <= p && 0 <= y && J[p] !== ye[y]; )
            y--;
        for (; 1 <= p && 0 <= y; p--, y--)
          if (J[p] !== ye[y]) {
            if (p !== 1 || y !== 1)
              do
                if (p--, y--, 0 > y || J[p] !== ye[y]) {
                  var Le = `
` + J[p].replace(" at new ", " at ");
                  return a.displayName && Le.includes("<anonymous>") && (Le = Le.replace("<anonymous>", a.displayName)), Le;
                }
              while (1 <= p && 0 <= y);
            break;
          }
      }
    } finally {
      Zt = !1, Error.prepareStackTrace = f;
    }
    return (f = a ? a.displayName || a.name : "") ? _t(f) : "";
  }
  function Yn(a) {
    switch (a.tag) {
      case 26:
      case 27:
      case 5:
        return _t(a.type);
      case 16:
        return _t("Lazy");
      case 13:
        return _t("Suspense");
      case 19:
        return _t("SuspenseList");
      case 0:
      case 15:
        return hn(a.type, !1);
      case 11:
        return hn(a.type.render, !1);
      case 1:
        return hn(a.type, !0);
      case 31:
        return _t("Activity");
      default:
        return "";
    }
  }
  function Cn(a) {
    try {
      var o = "";
      do
        o += Yn(a), a = a.return;
      while (a);
      return o;
    } catch (f) {
      return `
Error generating stack: ` + f.message + `
` + f.stack;
    }
  }
  function Yt(a) {
    switch (typeof a) {
      case "bigint":
      case "boolean":
      case "number":
      case "string":
      case "undefined":
        return a;
      case "object":
        return a;
      default:
        return "";
    }
  }
  function bt(a) {
    var o = a.type;
    return (a = a.nodeName) && a.toLowerCase() === "input" && (o === "checkbox" || o === "radio");
  }
  function kn(a) {
    var o = bt(a) ? "checked" : "value", f = Object.getOwnPropertyDescriptor(
      a.constructor.prototype,
      o
    ), p = "" + a[o];
    if (!a.hasOwnProperty(o) && typeof f < "u" && typeof f.get == "function" && typeof f.set == "function") {
      var y = f.get, T = f.set;
      return Object.defineProperty(a, o, {
        configurable: !0,
        get: function() {
          return y.call(this);
        },
        set: function(L) {
          p = "" + L, T.call(this, L);
        }
      }), Object.defineProperty(a, o, {
        enumerable: f.enumerable
      }), {
        getValue: function() {
          return p;
        },
        setValue: function(L) {
          p = "" + L;
        },
        stopTracking: function() {
          a._valueTracker = null, delete a[o];
        }
      };
    }
  }
  function nn(a) {
    a._valueTracker || (a._valueTracker = kn(a));
  }
  function Bi(a) {
    if (!a) return !1;
    var o = a._valueTracker;
    if (!o) return !0;
    var f = o.getValue(), p = "";
    return a && (p = bt(a) ? a.checked ? "true" : "false" : a.value), a = p, a !== f ? (o.setValue(a), !0) : !1;
  }
  function ss(a) {
    if (a = a || (typeof document < "u" ? document : void 0), typeof a > "u") return null;
    try {
      return a.activeElement || a.body;
    } catch {
      return a.body;
    }
  }
  var Pi = /[\n"\\]/g;
  function xi(a) {
    return a.replace(
      Pi,
      function(o) {
        return "\\" + o.charCodeAt(0).toString(16) + " ";
      }
    );
  }
  function Dn(a, o, f, p, y, T, L, G) {
    a.name = "", L != null && typeof L != "function" && typeof L != "symbol" && typeof L != "boolean" ? a.type = L : a.removeAttribute("type"), o != null ? L === "number" ? (o === 0 && a.value === "" || a.value != o) && (a.value = "" + Yt(o)) : a.value !== "" + Yt(o) && (a.value = "" + Yt(o)) : L !== "submit" && L !== "reset" || a.removeAttribute("value"), o != null ? Ii(a, L, Yt(o)) : f != null ? Ii(a, L, Yt(f)) : p != null && a.removeAttribute("value"), y == null && T != null && (a.defaultChecked = !!T), y != null && (a.checked = y && typeof y != "function" && typeof y != "symbol"), G != null && typeof G != "function" && typeof G != "symbol" && typeof G != "boolean" ? a.name = "" + Yt(G) : a.removeAttribute("name");
  }
  function Ji(a, o, f, p, y, T, L, G) {
    if (T != null && typeof T != "function" && typeof T != "symbol" && typeof T != "boolean" && (a.type = T), o != null || f != null) {
      if (!(T !== "submit" && T !== "reset" || o != null))
        return;
      f = f != null ? "" + Yt(f) : "", o = o != null ? "" + Yt(o) : f, G || o === a.value || (a.value = o), a.defaultValue = o;
    }
    p = p ?? y, p = typeof p != "function" && typeof p != "symbol" && !!p, a.checked = G ? a.checked : !!p, a.defaultChecked = !!p, L != null && typeof L != "function" && typeof L != "symbol" && typeof L != "boolean" && (a.name = L);
  }
  function Ii(a, o, f) {
    o === "number" && ss(a.ownerDocument) === a || a.defaultValue === "" + f || (a.defaultValue = "" + f);
  }
  function Kn(a, o, f, p) {
    if (a = a.options, o) {
      o = {};
      for (var y = 0; y < f.length; y++)
        o["$" + f[y]] = !0;
      for (f = 0; f < a.length; f++)
        y = o.hasOwnProperty("$" + a[f].value), a[f].selected !== y && (a[f].selected = y), y && p && (a[f].defaultSelected = !0);
    } else {
      for (f = "" + Yt(f), o = null, y = 0; y < a.length; y++) {
        if (a[y].value === f) {
          a[y].selected = !0, p && (a[y].defaultSelected = !0);
          return;
        }
        o !== null || a[y].disabled || (o = a[y]);
      }
      o !== null && (o.selected = !0);
    }
  }
  function Hi(a, o, f) {
    if (o != null && (o = "" + Yt(o), o !== a.value && (a.value = o), f == null)) {
      a.defaultValue !== o && (a.defaultValue = o);
      return;
    }
    a.defaultValue = f != null ? "" + Yt(f) : "";
  }
  function Go(a, o, f, p) {
    if (o == null) {
      if (p != null) {
        if (f != null) throw Error(i(92));
        if (pe(p)) {
          if (1 < p.length) throw Error(i(93));
          p = p[0];
        }
        f = p;
      }
      f == null && (f = ""), o = f;
    }
    f = Yt(o), a.defaultValue = f, p = a.textContent, p === f && p !== "" && p !== null && (a.value = p);
  }
  function Mi(a, o) {
    if (o) {
      var f = a.firstChild;
      if (f && f === a.lastChild && f.nodeType === 3) {
        f.nodeValue = o;
        return;
      }
    }
    a.textContent = o;
  }
  var xm = new Set(
    "animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(
      " "
    )
  );
  function zc(a, o, f) {
    var p = o.indexOf("--") === 0;
    f == null || typeof f == "boolean" || f === "" ? p ? a.setProperty(o, "") : o === "float" ? a.cssFloat = "" : a[o] = "" : p ? a.setProperty(o, f) : typeof f != "number" || f === 0 || xm.has(o) ? o === "float" ? a.cssFloat = f : a[o] = ("" + f).trim() : a[o] = f + "px";
  }
  function Bc(a, o, f) {
    if (o != null && typeof o != "object")
      throw Error(i(62));
    if (a = a.style, f != null) {
      for (var p in f)
        !f.hasOwnProperty(p) || o != null && o.hasOwnProperty(p) || (p.indexOf("--") === 0 ? a.setProperty(p, "") : p === "float" ? a.cssFloat = "" : a[p] = "");
      for (var y in o)
        p = o[y], o.hasOwnProperty(y) && f[y] !== p && zc(a, y, p);
    } else
      for (var T in o)
        o.hasOwnProperty(T) && zc(a, T, o[T]);
  }
  function of(a) {
    if (a.indexOf("-") === -1) return !1;
    switch (a) {
      case "annotation-xml":
      case "color-profile":
      case "font-face":
      case "font-face-src":
      case "font-face-uri":
      case "font-face-format":
      case "font-face-name":
      case "missing-glyph":
        return !1;
      default:
        return !0;
    }
  }
  var nd = /* @__PURE__ */ new Map([
    ["acceptCharset", "accept-charset"],
    ["htmlFor", "for"],
    ["httpEquiv", "http-equiv"],
    ["crossOrigin", "crossorigin"],
    ["accentHeight", "accent-height"],
    ["alignmentBaseline", "alignment-baseline"],
    ["arabicForm", "arabic-form"],
    ["baselineShift", "baseline-shift"],
    ["capHeight", "cap-height"],
    ["clipPath", "clip-path"],
    ["clipRule", "clip-rule"],
    ["colorInterpolation", "color-interpolation"],
    ["colorInterpolationFilters", "color-interpolation-filters"],
    ["colorProfile", "color-profile"],
    ["colorRendering", "color-rendering"],
    ["dominantBaseline", "dominant-baseline"],
    ["enableBackground", "enable-background"],
    ["fillOpacity", "fill-opacity"],
    ["fillRule", "fill-rule"],
    ["floodColor", "flood-color"],
    ["floodOpacity", "flood-opacity"],
    ["fontFamily", "font-family"],
    ["fontSize", "font-size"],
    ["fontSizeAdjust", "font-size-adjust"],
    ["fontStretch", "font-stretch"],
    ["fontStyle", "font-style"],
    ["fontVariant", "font-variant"],
    ["fontWeight", "font-weight"],
    ["glyphName", "glyph-name"],
    ["glyphOrientationHorizontal", "glyph-orientation-horizontal"],
    ["glyphOrientationVertical", "glyph-orientation-vertical"],
    ["horizAdvX", "horiz-adv-x"],
    ["horizOriginX", "horiz-origin-x"],
    ["imageRendering", "image-rendering"],
    ["letterSpacing", "letter-spacing"],
    ["lightingColor", "lighting-color"],
    ["markerEnd", "marker-end"],
    ["markerMid", "marker-mid"],
    ["markerStart", "marker-start"],
    ["overlinePosition", "overline-position"],
    ["overlineThickness", "overline-thickness"],
    ["paintOrder", "paint-order"],
    ["panose-1", "panose-1"],
    ["pointerEvents", "pointer-events"],
    ["renderingIntent", "rendering-intent"],
    ["shapeRendering", "shape-rendering"],
    ["stopColor", "stop-color"],
    ["stopOpacity", "stop-opacity"],
    ["strikethroughPosition", "strikethrough-position"],
    ["strikethroughThickness", "strikethrough-thickness"],
    ["strokeDasharray", "stroke-dasharray"],
    ["strokeDashoffset", "stroke-dashoffset"],
    ["strokeLinecap", "stroke-linecap"],
    ["strokeLinejoin", "stroke-linejoin"],
    ["strokeMiterlimit", "stroke-miterlimit"],
    ["strokeOpacity", "stroke-opacity"],
    ["strokeWidth", "stroke-width"],
    ["textAnchor", "text-anchor"],
    ["textDecoration", "text-decoration"],
    ["textRendering", "text-rendering"],
    ["transformOrigin", "transform-origin"],
    ["underlinePosition", "underline-position"],
    ["underlineThickness", "underline-thickness"],
    ["unicodeBidi", "unicode-bidi"],
    ["unicodeRange", "unicode-range"],
    ["unitsPerEm", "units-per-em"],
    ["vAlphabetic", "v-alphabetic"],
    ["vHanging", "v-hanging"],
    ["vIdeographic", "v-ideographic"],
    ["vMathematical", "v-mathematical"],
    ["vectorEffect", "vector-effect"],
    ["vertAdvY", "vert-adv-y"],
    ["vertOriginX", "vert-origin-x"],
    ["vertOriginY", "vert-origin-y"],
    ["wordSpacing", "word-spacing"],
    ["writingMode", "writing-mode"],
    ["xmlnsXlink", "xmlns:xlink"],
    ["xHeight", "x-height"]
  ]), Mm = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i;
  function Pc(a) {
    return Mm.test("" + a) ? "javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')" : a;
  }
  var lf = null;
  function cf(a) {
    return a = a.target || a.srcElement || window, a.correspondingUseElement && (a = a.correspondingUseElement), a.nodeType === 3 ? a.parentNode : a;
  }
  var Kr = null, Fo = null;
  function id(a) {
    var o = Ys(a);
    if (o && (a = o.stateNode)) {
      var f = a[jn] || null;
      e: switch (a = o.stateNode, o.type) {
        case "input":
          if (Dn(
            a,
            f.value,
            f.defaultValue,
            f.defaultValue,
            f.checked,
            f.defaultChecked,
            f.type,
            f.name
          ), o = f.name, f.type === "radio" && o != null) {
            for (f = a; f.parentNode; ) f = f.parentNode;
            for (f = f.querySelectorAll(
              'input[name="' + xi(
                "" + o
              ) + '"][type="radio"]'
            ), o = 0; o < f.length; o++) {
              var p = f[o];
              if (p !== a && p.form === a.form) {
                var y = p[jn] || null;
                if (!y) throw Error(i(90));
                Dn(
                  p,
                  y.value,
                  y.defaultValue,
                  y.defaultValue,
                  y.checked,
                  y.defaultChecked,
                  y.type,
                  y.name
                );
              }
            }
            for (o = 0; o < f.length; o++)
              p = f[o], p.form === a.form && Bi(p);
          }
          break e;
        case "textarea":
          Hi(a, f.value, f.defaultValue);
          break e;
        case "select":
          o = f.value, o != null && Kn(a, !!f.multiple, o, !1);
      }
    }
  }
  var Ic = !1;
  function ad(a, o, f) {
    if (Ic) return a(o, f);
    Ic = !0;
    try {
      var p = a(o);
      return p;
    } finally {
      if (Ic = !1, (Kr !== null || Fo !== null) && (or(), Kr && (o = Kr, a = Fo, Fo = Kr = null, id(o), a)))
        for (o = 0; o < a.length; o++) id(a[o]);
    }
  }
  function El(a, o) {
    var f = a.stateNode;
    if (f === null) return null;
    var p = f[jn] || null;
    if (p === null) return null;
    f = p[o];
    e: switch (o) {
      case "onClick":
      case "onClickCapture":
      case "onDoubleClick":
      case "onDoubleClickCapture":
      case "onMouseDown":
      case "onMouseDownCapture":
      case "onMouseMove":
      case "onMouseMoveCapture":
      case "onMouseUp":
      case "onMouseUpCapture":
      case "onMouseEnter":
        (p = !p.disabled) || (a = a.type, p = !(a === "button" || a === "input" || a === "select" || a === "textarea")), a = !p;
        break e;
      default:
        a = !1;
    }
    if (a) return null;
    if (f && typeof f != "function")
      throw Error(
        i(231, o, typeof f)
      );
    return f;
  }
  var ks = !(typeof window > "u" || typeof window.document > "u" || typeof window.document.createElement > "u"), Hc = !1;
  if (ks)
    try {
      var Tl = {};
      Object.defineProperty(Tl, "passive", {
        get: function() {
          Hc = !0;
        }
      }), window.addEventListener("test", Tl, Tl), window.removeEventListener("test", Tl, Tl);
    } catch {
      Hc = !1;
    }
  var vr = null, sd = null, uf = null;
  function rd() {
    if (uf) return uf;
    var a, o = sd, f = o.length, p, y = "value" in vr ? vr.value : vr.textContent, T = y.length;
    for (a = 0; a < f && o[a] === y[a]; a++) ;
    var L = f - a;
    for (p = 1; p <= L && o[f - p] === y[T - p]; p++) ;
    return uf = y.slice(a, 1 < p ? 1 - p : void 0);
  }
  function Jr(a) {
    var o = a.keyCode;
    return "charCode" in a ? (a = a.charCode, a === 0 && o === 13 && (a = 13)) : a = o, a === 10 && (a = 13), 32 <= a || a === 13 ? a : 0;
  }
  function Al() {
    return !0;
  }
  function Vc() {
    return !1;
  }
  function ra(a) {
    function o(f, p, y, T, L) {
      this._reactName = f, this._targetInst = y, this.type = p, this.nativeEvent = T, this.target = L, this.currentTarget = null;
      for (var G in a)
        a.hasOwnProperty(G) && (f = a[G], this[G] = f ? f(T) : T[G]);
      return this.isDefaultPrevented = (T.defaultPrevented != null ? T.defaultPrevented : T.returnValue === !1) ? Al : Vc, this.isPropagationStopped = Vc, this;
    }
    return S(o.prototype, {
      preventDefault: function() {
        this.defaultPrevented = !0;
        var f = this.nativeEvent;
        f && (f.preventDefault ? f.preventDefault() : typeof f.returnValue != "unknown" && (f.returnValue = !1), this.isDefaultPrevented = Al);
      },
      stopPropagation: function() {
        var f = this.nativeEvent;
        f && (f.stopPropagation ? f.stopPropagation() : typeof f.cancelBubble != "unknown" && (f.cancelBubble = !0), this.isPropagationStopped = Al);
      },
      persist: function() {
      },
      isPersistent: Al
    }), o;
  }
  var $r = {
    eventPhase: 0,
    bubbles: 0,
    cancelable: 0,
    timeStamp: function(a) {
      return a.timeStamp || Date.now();
    },
    defaultPrevented: 0,
    isTrusted: 0
  }, Rl = ra($r), Cl = S({}, $r, { view: 0, detail: 0 }), bm = ra(Cl), gr, wl, Dl, Ul = S({}, Cl, {
    screenX: 0,
    screenY: 0,
    clientX: 0,
    clientY: 0,
    pageX: 0,
    pageY: 0,
    ctrlKey: 0,
    shiftKey: 0,
    altKey: 0,
    metaKey: 0,
    getModifierState: Fc,
    button: 0,
    buttons: 0,
    relatedTarget: function(a) {
      return a.relatedTarget === void 0 ? a.fromElement === a.srcElement ? a.toElement : a.fromElement : a.relatedTarget;
    },
    movementX: function(a) {
      return "movementX" in a ? a.movementX : (a !== Dl && (Dl && a.type === "mousemove" ? (gr = a.screenX - Dl.screenX, wl = a.screenY - Dl.screenY) : wl = gr = 0, Dl = a), gr);
    },
    movementY: function(a) {
      return "movementY" in a ? a.movementY : wl;
    }
  }), od = ra(Ul), Em = S({}, Ul, { dataTransfer: 0 }), yy = ra(Em), Vi = S({}, Cl, { relatedTarget: 0 }), ff = ra(Vi), Tm = S({}, $r, {
    animationName: 0,
    elapsedTime: 0,
    pseudoElement: 0
  }), Am = ra(Tm), Rm = S({}, $r, {
    clipboardData: function(a) {
      return "clipboardData" in a ? a.clipboardData : window.clipboardData;
    }
  }), Cm = ra(Rm), Gc = S({}, $r, { data: 0 }), hf = ra(Gc), wm = {
    Esc: "Escape",
    Spacebar: " ",
    Left: "ArrowLeft",
    Up: "ArrowUp",
    Right: "ArrowRight",
    Down: "ArrowDown",
    Del: "Delete",
    Win: "OS",
    Menu: "ContextMenu",
    Apps: "ContextMenu",
    Scroll: "ScrollLock",
    MozPrintableKey: "Unidentified"
  }, Dm = {
    8: "Backspace",
    9: "Tab",
    12: "Clear",
    13: "Enter",
    16: "Shift",
    17: "Control",
    18: "Alt",
    19: "Pause",
    20: "CapsLock",
    27: "Escape",
    32: " ",
    33: "PageUp",
    34: "PageDown",
    35: "End",
    36: "Home",
    37: "ArrowLeft",
    38: "ArrowUp",
    39: "ArrowRight",
    40: "ArrowDown",
    45: "Insert",
    46: "Delete",
    112: "F1",
    113: "F2",
    114: "F3",
    115: "F4",
    116: "F5",
    117: "F6",
    118: "F7",
    119: "F8",
    120: "F9",
    121: "F10",
    122: "F11",
    123: "F12",
    144: "NumLock",
    145: "ScrollLock",
    224: "Meta"
  }, Um = {
    Alt: "altKey",
    Control: "ctrlKey",
    Meta: "metaKey",
    Shift: "shiftKey"
  };
  function ld(a) {
    var o = this.nativeEvent;
    return o.getModifierState ? o.getModifierState(a) : (a = Um[a]) ? !!o[a] : !1;
  }
  function Fc() {
    return ld;
  }
  var Nm = S({}, Cl, {
    key: function(a) {
      if (a.key) {
        var o = wm[a.key] || a.key;
        if (o !== "Unidentified") return o;
      }
      return a.type === "keypress" ? (a = Jr(a), a === 13 ? "Enter" : String.fromCharCode(a)) : a.type === "keydown" || a.type === "keyup" ? Dm[a.keyCode] || "Unidentified" : "";
    },
    code: 0,
    location: 0,
    ctrlKey: 0,
    shiftKey: 0,
    altKey: 0,
    metaKey: 0,
    repeat: 0,
    locale: 0,
    getModifierState: Fc,
    charCode: function(a) {
      return a.type === "keypress" ? Jr(a) : 0;
    },
    keyCode: function(a) {
      return a.type === "keydown" || a.type === "keyup" ? a.keyCode : 0;
    },
    which: function(a) {
      return a.type === "keypress" ? Jr(a) : a.type === "keydown" || a.type === "keyup" ? a.keyCode : 0;
    }
  }), cd = ra(Nm), ud = S({}, Ul, {
    pointerId: 0,
    width: 0,
    height: 0,
    pressure: 0,
    tangentialPressure: 0,
    tiltX: 0,
    tiltY: 0,
    twist: 0,
    pointerType: 0,
    isPrimary: 0
  }), df = ra(ud), Om = S({}, Cl, {
    touches: 0,
    targetTouches: 0,
    changedTouches: 0,
    altKey: 0,
    metaKey: 0,
    ctrlKey: 0,
    shiftKey: 0,
    getModifierState: Fc
  }), fd = ra(Om), Lm = S({}, $r, {
    propertyName: 0,
    elapsedTime: 0,
    pseudoElement: 0
  }), yr = ra(Lm), hd = S({}, Ul, {
    deltaX: function(a) {
      return "deltaX" in a ? a.deltaX : "wheelDeltaX" in a ? -a.wheelDeltaX : 0;
    },
    deltaY: function(a) {
      return "deltaY" in a ? a.deltaY : "wheelDeltaY" in a ? -a.wheelDeltaY : "wheelDelta" in a ? -a.wheelDelta : 0;
    },
    deltaZ: 0,
    deltaMode: 0
  }), _y = ra(hd), zm = S({}, $r, {
    newState: 0,
    oldState: 0
  }), eo = ra(zm), _r = [9, 13, 27, 32], Xc = ks && "CompositionEvent" in window, Xo = null;
  ks && "documentMode" in document && (Xo = document.documentMode);
  var qc = ks && "TextEvent" in window && !Xo, Yc = ks && (!Xc || Xo && 8 < Xo && 11 >= Xo), to = " ", Gi = !1;
  function kc(a, o) {
    switch (a) {
      case "keyup":
        return _r.indexOf(o.keyCode) !== -1;
      case "keydown":
        return o.keyCode !== 229;
      case "keypress":
      case "mousedown":
      case "focusout":
        return !0;
      default:
        return !1;
    }
  }
  function dd(a) {
    return a = a.detail, typeof a == "object" && "data" in a ? a.data : null;
  }
  var no = !1;
  function Wc(a, o) {
    switch (a) {
      case "compositionend":
        return dd(o);
      case "keypress":
        return o.which !== 32 ? null : (Gi = !0, to);
      case "textInput":
        return a = o.data, a === to && Gi ? null : a;
      default:
        return null;
    }
  }
  function pd(a, o) {
    if (no)
      return a === "compositionend" || !Xc && kc(a, o) ? (a = rd(), uf = sd = vr = null, no = !1, a) : null;
    switch (a) {
      case "paste":
        return null;
      case "keypress":
        if (!(o.ctrlKey || o.altKey || o.metaKey) || o.ctrlKey && o.altKey) {
          if (o.char && 1 < o.char.length)
            return o.char;
          if (o.which) return String.fromCharCode(o.which);
        }
        return null;
      case "compositionend":
        return Yc && o.locale !== "ko" ? null : o.data;
      default:
        return null;
    }
  }
  var pf = {
    color: !0,
    date: !0,
    datetime: !0,
    "datetime-local": !0,
    email: !0,
    month: !0,
    number: !0,
    password: !0,
    range: !0,
    search: !0,
    tel: !0,
    text: !0,
    time: !0,
    url: !0,
    week: !0
  };
  function md(a) {
    var o = a && a.nodeName && a.nodeName.toLowerCase();
    return o === "input" ? !!pf[a.type] : o === "textarea";
  }
  function va(a, o, f, p) {
    Kr ? Fo ? Fo.push(p) : Fo = [p] : Kr = p, o = Lv(o, "onChange"), 0 < o.length && (f = new Rl(
      "onChange",
      "change",
      null,
      f,
      p
    ), a.push({ event: f, listeners: o }));
  }
  var Nl = null, qo = null;
  function Bm(a) {
    Bx(a, 0);
  }
  function Zc(a) {
    var o = Qr(a);
    if (Bi(o)) return a;
  }
  function mf(a, o) {
    if (a === "change") return o;
  }
  var vf = !1;
  if (ks) {
    var gf;
    if (ks) {
      var Ol = "oninput" in document;
      if (!Ol) {
        var Ll = document.createElement("div");
        Ll.setAttribute("oninput", "return;"), Ol = typeof Ll.oninput == "function";
      }
      gf = Ol;
    } else gf = !1;
    vf = gf && (!document.documentMode || 9 < document.documentMode);
  }
  function Qn() {
    Nl && (Nl.detachEvent("onpropertychange", Pm), qo = Nl = null);
  }
  function Pm(a) {
    if (a.propertyName === "value" && Zc(qo)) {
      var o = [];
      va(
        o,
        qo,
        a,
        cf(a)
      ), ad(Bm, o);
    }
  }
  function Sy(a, o, f) {
    a === "focusin" ? (Qn(), Nl = o, qo = f, Nl.attachEvent("onpropertychange", Pm)) : a === "focusout" && Qn();
  }
  function Im(a) {
    if (a === "selectionchange" || a === "keyup" || a === "keydown")
      return Zc(qo);
  }
  function jc(a, o) {
    if (a === "click") return Zc(o);
  }
  function io(a, o) {
    if (a === "input" || a === "change")
      return Zc(o);
  }
  function Hm(a, o) {
    return a === o && (a !== 0 || 1 / a === 1 / o) || a !== a && o !== o;
  }
  var ga = typeof Object.is == "function" ? Object.is : Hm;
  function Rs(a, o) {
    if (ga(a, o)) return !0;
    if (typeof a != "object" || a === null || typeof o != "object" || o === null)
      return !1;
    var f = Object.keys(a), p = Object.keys(o);
    if (f.length !== p.length) return !1;
    for (p = 0; p < f.length; p++) {
      var y = f[p];
      if (!Ct.call(o, y) || !ga(a[y], o[y]))
        return !1;
    }
    return !0;
  }
  function ya(a) {
    for (; a && a.firstChild; ) a = a.firstChild;
    return a;
  }
  function vd(a, o) {
    var f = ya(a);
    a = 0;
    for (var p; f; ) {
      if (f.nodeType === 3) {
        if (p = a + f.textContent.length, a <= o && p >= o)
          return { node: f, offset: o - a };
        a = p;
      }
      e: {
        for (; f; ) {
          if (f.nextSibling) {
            f = f.nextSibling;
            break e;
          }
          f = f.parentNode;
        }
        f = void 0;
      }
      f = ya(f);
    }
  }
  function gd(a, o) {
    return a && o ? a === o ? !0 : a && a.nodeType === 3 ? !1 : o && o.nodeType === 3 ? gd(a, o.parentNode) : "contains" in a ? a.contains(o) : a.compareDocumentPosition ? !!(a.compareDocumentPosition(o) & 16) : !1 : !1;
  }
  function yd(a) {
    a = a != null && a.ownerDocument != null && a.ownerDocument.defaultView != null ? a.ownerDocument.defaultView : window;
    for (var o = ss(a.document); o instanceof a.HTMLIFrameElement; ) {
      try {
        var f = typeof o.contentWindow.location.href == "string";
      } catch {
        f = !1;
      }
      if (f) a = o.contentWindow;
      else break;
      o = ss(a.document);
    }
    return o;
  }
  function Qc(a) {
    var o = a && a.nodeName && a.nodeName.toLowerCase();
    return o && (o === "input" && (a.type === "text" || a.type === "search" || a.type === "tel" || a.type === "url" || a.type === "password") || o === "textarea" || a.contentEditable === "true");
  }
  var _d = ks && "documentMode" in document && 11 >= document.documentMode, Sr = null, yf = null, Kc = null, _f = !1;
  function Sd(a, o, f) {
    var p = f.window === f ? f.document : f.nodeType === 9 ? f : f.ownerDocument;
    _f || Sr == null || Sr !== ss(p) || (p = Sr, "selectionStart" in p && Qc(p) ? p = { start: p.selectionStart, end: p.selectionEnd } : (p = (p.ownerDocument && p.ownerDocument.defaultView || window).getSelection(), p = {
      anchorNode: p.anchorNode,
      anchorOffset: p.anchorOffset,
      focusNode: p.focusNode,
      focusOffset: p.focusOffset
    }), Kc && Rs(Kc, p) || (Kc = p, p = Lv(yf, "onSelect"), 0 < p.length && (o = new Rl(
      "onSelect",
      "select",
      null,
      o,
      f
    ), a.push({ event: o, listeners: p }), o.target = Sr)));
  }
  function Fi(a, o) {
    var f = {};
    return f[a.toLowerCase()] = o.toLowerCase(), f["Webkit" + a] = "webkit" + o, f["Moz" + a] = "moz" + o, f;
  }
  var ao = {
    animationend: Fi("Animation", "AnimationEnd"),
    animationiteration: Fi("Animation", "AnimationIteration"),
    animationstart: Fi("Animation", "AnimationStart"),
    transitionrun: Fi("Transition", "TransitionRun"),
    transitionstart: Fi("Transition", "TransitionStart"),
    transitioncancel: Fi("Transition", "TransitionCancel"),
    transitionend: Fi("Transition", "TransitionEnd")
  }, Sf = {}, Vm = {};
  ks && (Vm = document.createElement("div").style, "AnimationEvent" in window || (delete ao.animationend.animation, delete ao.animationiteration.animation, delete ao.animationstart.animation), "TransitionEvent" in window || delete ao.transitionend.transition);
  function xr(a) {
    if (Sf[a]) return Sf[a];
    if (!ao[a]) return a;
    var o = ao[a], f;
    for (f in o)
      if (o.hasOwnProperty(f) && f in Vm)
        return Sf[a] = o[f];
    return a;
  }
  var oa = xr("animationend"), xd = xr("animationiteration"), _a = xr("animationstart"), Gm = xr("transitionrun"), Mr = xr("transitionstart"), zl = xr("transitioncancel"), br = xr("transitionend"), xf = /* @__PURE__ */ new Map(), Jc = "abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(
    " "
  );
  Jc.push("scrollEnd");
  function Di(a, o) {
    xf.set(a, o), F(o, [a]);
  }
  var Md = /* @__PURE__ */ new WeakMap();
  function Xi(a, o) {
    if (typeof a == "object" && a !== null) {
      var f = Md.get(a);
      return f !== void 0 ? f : (o = {
        value: a,
        source: o,
        stack: Cn(o)
      }, Md.set(a, o), o);
    }
    return {
      value: a,
      source: o,
      stack: Cn(o)
    };
  }
  var $i = [], rs = 0, Mf = 0;
  function $c() {
    for (var a = rs, o = Mf = rs = 0; o < a; ) {
      var f = $i[o];
      $i[o++] = null;
      var p = $i[o];
      $i[o++] = null;
      var y = $i[o];
      $i[o++] = null;
      var T = $i[o];
      if ($i[o++] = null, p !== null && y !== null) {
        var L = p.pending;
        L === null ? y.next = y : (y.next = L.next, L.next = y), p.pending = y;
      }
      T !== 0 && bd(f, y, T);
    }
  }
  function so(a, o, f, p) {
    $i[rs++] = a, $i[rs++] = o, $i[rs++] = f, $i[rs++] = p, Mf |= p, a.lanes |= p, a = a.alternate, a !== null && (a.lanes |= p);
  }
  function bf(a, o, f, p) {
    return so(a, o, f, p), Bl(a);
  }
  function Er(a, o) {
    return so(a, null, null, o), Bl(a);
  }
  function bd(a, o, f) {
    a.lanes |= f;
    var p = a.alternate;
    p !== null && (p.lanes |= f);
    for (var y = !1, T = a.return; T !== null; )
      T.childLanes |= f, p = T.alternate, p !== null && (p.childLanes |= f), T.tag === 22 && (a = T.stateNode, a === null || a._visibility & 1 || (y = !0)), a = T, T = T.return;
    return a.tag === 3 ? (T = a.stateNode, y && o !== null && (y = 31 - at(f), a = T.hiddenUpdates, p = a[y], p === null ? a[y] = [o] : p.push(o), o.lane = f | 536870912), T) : null;
  }
  function Bl(a) {
    if (50 < rr)
      throw rr = 0, ll = null, Error(i(185));
    for (var o = a.return; o !== null; )
      a = o, o = a.return;
    return a.tag === 3 ? a.stateNode : null;
  }
  var ro = {};
  function Ed(a, o, f, p) {
    this.tag = a, this.key = f, this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null, this.index = 0, this.refCleanup = this.ref = null, this.pendingProps = o, this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null, this.mode = p, this.subtreeFlags = this.flags = 0, this.deletions = null, this.childLanes = this.lanes = 0, this.alternate = null;
  }
  function Sa(a, o, f, p) {
    return new Ed(a, o, f, p);
  }
  function eu(a) {
    return a = a.prototype, !(!a || !a.isReactComponent);
  }
  function ri(a, o) {
    var f = a.alternate;
    return f === null ? (f = Sa(
      a.tag,
      o,
      a.key,
      a.mode
    ), f.elementType = a.elementType, f.type = a.type, f.stateNode = a.stateNode, f.alternate = a, a.alternate = f) : (f.pendingProps = o, f.type = a.type, f.flags = 0, f.subtreeFlags = 0, f.deletions = null), f.flags = a.flags & 65011712, f.childLanes = a.childLanes, f.lanes = a.lanes, f.child = a.child, f.memoizedProps = a.memoizedProps, f.memoizedState = a.memoizedState, f.updateQueue = a.updateQueue, o = a.dependencies, f.dependencies = o === null ? null : { lanes: o.lanes, firstContext: o.firstContext }, f.sibling = a.sibling, f.index = a.index, f.ref = a.ref, f.refCleanup = a.refCleanup, f;
  }
  function Td(a, o) {
    a.flags &= 65011714;
    var f = a.alternate;
    return f === null ? (a.childLanes = 0, a.lanes = o, a.child = null, a.subtreeFlags = 0, a.memoizedProps = null, a.memoizedState = null, a.updateQueue = null, a.dependencies = null, a.stateNode = null) : (a.childLanes = f.childLanes, a.lanes = f.lanes, a.child = f.child, a.subtreeFlags = 0, a.deletions = null, a.memoizedProps = f.memoizedProps, a.memoizedState = f.memoizedState, a.updateQueue = f.updateQueue, a.type = f.type, o = f.dependencies, a.dependencies = o === null ? null : {
      lanes: o.lanes,
      firstContext: o.firstContext
    }), a;
  }
  function Ui(a, o, f, p, y, T) {
    var L = 0;
    if (p = a, typeof a == "function") eu(a) && (L = 1);
    else if (typeof a == "string")
      L = DA(
        a,
        f,
        Ne.current
      ) ? 26 : a === "html" || a === "head" || a === "body" ? 27 : 5;
    else
      e: switch (a) {
        case B:
          return a = Sa(31, f, o, y), a.elementType = B, a.lanes = T, a;
        case R:
          return oo(f.children, y, T, o);
        case w:
          L = 8, y |= 24;
          break;
        case C:
          return a = Sa(12, f, o, y | 2), a.elementType = C, a.lanes = T, a;
        case I:
          return a = Sa(13, f, o, y), a.elementType = I, a.lanes = T, a;
        case V:
          return a = Sa(19, f, o, y), a.elementType = V, a.lanes = T, a;
        default:
          if (typeof a == "object" && a !== null)
            switch (a.$$typeof) {
              case E:
              case N:
                L = 10;
                break e;
              case U:
                L = 9;
                break e;
              case O:
                L = 11;
                break e;
              case Y:
                L = 14;
                break e;
              case k:
                L = 16, p = null;
                break e;
            }
          L = 29, f = Error(
            i(130, a === null ? "null" : typeof a, "")
          ), p = null;
      }
    return o = Sa(L, f, o, y), o.elementType = a, o.type = p, o.lanes = T, o;
  }
  function oo(a, o, f, p) {
    return a = Sa(7, a, p, o), a.lanes = f, a;
  }
  function tu(a, o, f) {
    return a = Sa(6, a, null, o), a.lanes = f, a;
  }
  function Ef(a, o, f) {
    return o = Sa(
      4,
      a.children !== null ? a.children : [],
      a.key,
      o
    ), o.lanes = f, o.stateNode = {
      containerInfo: a.containerInfo,
      pendingChildren: null,
      implementation: a.implementation
    }, o;
  }
  var Pl = [], xa = 0, nu = null, Il = 0, qi = [], Ba = 0, lo = null, Ws = 1, Zs = "";
  function Tr(a, o) {
    Pl[xa++] = Il, Pl[xa++] = nu, nu = a, Il = o;
  }
  function Tf(a, o, f) {
    qi[Ba++] = Ws, qi[Ba++] = Zs, qi[Ba++] = lo, lo = a;
    var p = Ws;
    a = Zs;
    var y = 32 - at(p) - 1;
    p &= ~(1 << y), f += 1;
    var T = 32 - at(o) + y;
    if (30 < T) {
      var L = y - y % 5;
      T = (p & (1 << L) - 1).toString(32), p >>= L, y -= L, Ws = 1 << 32 - at(o) + y | f << y | p, Zs = T + a;
    } else
      Ws = 1 << T | f << y | p, Zs = a;
  }
  function Ad(a) {
    a.return !== null && (Tr(a, 1), Tf(a, 1, 0));
  }
  function Rd(a) {
    for (; a === nu; )
      nu = Pl[--xa], Pl[xa] = null, Il = Pl[--xa], Pl[xa] = null;
    for (; a === lo; )
      lo = qi[--Ba], qi[Ba] = null, Zs = qi[--Ba], qi[Ba] = null, Ws = qi[--Ba], qi[Ba] = null;
  }
  var la = null, Jn = null, yn = !1, os = null, Pa = !1, Af = Error(i(519));
  function co(a) {
    var o = Error(i(418, ""));
    throw Yo(Xi(o, a)), Af;
  }
  function Fm(a) {
    var o = a.stateNode, f = a.type, p = a.memoizedProps;
    switch (o[mi] = a, o[jn] = p, f) {
      case "dialog":
        cn("cancel", o), cn("close", o);
        break;
      case "iframe":
      case "object":
      case "embed":
        cn("load", o);
        break;
      case "video":
      case "audio":
        for (f = 0; f < ap.length; f++)
          cn(ap[f], o);
        break;
      case "source":
        cn("error", o);
        break;
      case "img":
      case "image":
      case "link":
        cn("error", o), cn("load", o);
        break;
      case "details":
        cn("toggle", o);
        break;
      case "input":
        cn("invalid", o), Ji(
          o,
          p.value,
          p.defaultValue,
          p.checked,
          p.defaultChecked,
          p.type,
          p.name,
          !0
        ), nn(o);
        break;
      case "select":
        cn("invalid", o);
        break;
      case "textarea":
        cn("invalid", o), Go(o, p.value, p.defaultValue, p.children), nn(o);
    }
    f = p.children, typeof f != "string" && typeof f != "number" && typeof f != "bigint" || o.textContent === "" + f || p.suppressHydrationWarning === !0 || Vx(o.textContent, f) ? (p.popover != null && (cn("beforetoggle", o), cn("toggle", o)), p.onScroll != null && cn("scroll", o), p.onScrollEnd != null && cn("scrollend", o), p.onClick != null && (o.onclick = zv), o = !0) : o = !1, o || co(a);
  }
  function Cd(a) {
    for (la = a.return; la; )
      switch (la.tag) {
        case 5:
        case 13:
          Pa = !1;
          return;
        case 27:
        case 3:
          Pa = !0;
          return;
        default:
          la = la.return;
      }
  }
  function Cs(a) {
    if (a !== la) return !1;
    if (!yn) return Cd(a), yn = !0, !1;
    var o = a.tag, f;
    if ((f = o !== 3 && o !== 27) && ((f = o === 5) && (f = a.type, f = !(f !== "form" && f !== "button") || Vy(a.type, a.memoizedProps)), f = !f), f && Jn && co(a), Cd(a), o === 13) {
      if (a = a.memoizedState, a = a !== null ? a.dehydrated : null, !a) throw Error(i(317));
      e: {
        for (a = a.nextSibling, o = 0; a; ) {
          if (a.nodeType === 8)
            if (f = a.data, f === "/$") {
              if (o === 0) {
                Jn = Hr(a.nextSibling);
                break e;
              }
              o--;
            } else
              f !== "$" && f !== "$!" && f !== "$?" || o++;
          a = a.nextSibling;
        }
        Jn = null;
      }
    } else
      o === 27 ? (o = Jn, cc(a.type) ? (a = qy, qy = null, Jn = a) : Jn = o) : Jn = la ? Hr(a.stateNode.nextSibling) : null;
    return !0;
  }
  function Hl() {
    Jn = la = null, yn = !1;
  }
  function bn() {
    var a = os;
    return a !== null && (Nt === null ? Nt = a : Nt.push.apply(
      Nt,
      a
    ), os = null), a;
  }
  function Yo(a) {
    os === null ? os = [a] : os.push(a);
  }
  var wd = te(null), uo = null, Ar = null;
  function fo(a, o, f) {
    Re(wd, o._currentValue), o._currentValue = f;
  }
  function Rr(a) {
    a._currentValue = wd.current, Me(wd);
  }
  function Dd(a, o, f) {
    for (; a !== null; ) {
      var p = a.alternate;
      if ((a.childLanes & o) !== o ? (a.childLanes |= o, p !== null && (p.childLanes |= o)) : p !== null && (p.childLanes & o) !== o && (p.childLanes |= o), a === f) break;
      a = a.return;
    }
  }
  function iu(a, o, f, p) {
    var y = a.child;
    for (y !== null && (y.return = a); y !== null; ) {
      var T = y.dependencies;
      if (T !== null) {
        var L = y.child;
        T = T.firstContext;
        e: for (; T !== null; ) {
          var G = T;
          T = y;
          for (var J = 0; J < o.length; J++)
            if (G.context === o[J]) {
              T.lanes |= f, G = T.alternate, G !== null && (G.lanes |= f), Dd(
                T.return,
                f,
                a
              ), p || (L = null);
              break e;
            }
          T = G.next;
        }
      } else if (y.tag === 18) {
        if (L = y.return, L === null) throw Error(i(341));
        L.lanes |= f, T = L.alternate, T !== null && (T.lanes |= f), Dd(L, f, a), L = null;
      } else L = y.child;
      if (L !== null) L.return = y;
      else
        for (L = y; L !== null; ) {
          if (L === a) {
            L = null;
            break;
          }
          if (y = L.sibling, y !== null) {
            y.return = L.return, L = y;
            break;
          }
          L = L.return;
        }
      y = L;
    }
  }
  function ls(a, o, f, p) {
    a = null;
    for (var y = o, T = !1; y !== null; ) {
      if (!T) {
        if ((y.flags & 524288) !== 0) T = !0;
        else if ((y.flags & 262144) !== 0) break;
      }
      if (y.tag === 10) {
        var L = y.alternate;
        if (L === null) throw Error(i(387));
        if (L = L.memoizedProps, L !== null) {
          var G = y.type;
          ga(y.pendingProps.value, L.value) || (a !== null ? a.push(G) : a = [G]);
        }
      } else if (y === Fe.current) {
        if (L = y.alternate, L === null) throw Error(i(387));
        L.memoizedState.memoizedState !== y.memoizedState.memoizedState && (a !== null ? a.push(up) : a = [up]);
      }
      y = y.return;
    }
    a !== null && iu(
      o,
      a,
      f,
      p
    ), o.flags |= 262144;
  }
  function au(a) {
    for (a = a.firstContext; a !== null; ) {
      if (!ga(
        a.context._currentValue,
        a.memoizedValue
      ))
        return !0;
      a = a.next;
    }
    return !1;
  }
  function js(a) {
    uo = a, Ar = null, a = a.dependencies, a !== null && (a.firstContext = null);
  }
  function ti(a) {
    return Rf(uo, a);
  }
  function su(a, o) {
    return uo === null && js(a), Rf(a, o);
  }
  function Rf(a, o) {
    var f = o._currentValue;
    if (o = { context: o, memoizedValue: f, next: null }, Ar === null) {
      if (a === null) throw Error(i(308));
      Ar = o, a.dependencies = { lanes: 0, firstContext: o }, a.flags |= 524288;
    } else Ar = Ar.next = o;
    return f;
  }
  var Ud = typeof AbortController < "u" ? AbortController : function() {
    var a = [], o = this.signal = {
      aborted: !1,
      addEventListener: function(f, p) {
        a.push(p);
      }
    };
    this.abort = function() {
      o.aborted = !0, a.forEach(function(f) {
        return f();
      });
    };
  }, xy = s.unstable_scheduleCallback, Xm = s.unstable_NormalPriority, gi = {
    $$typeof: N,
    Consumer: null,
    Provider: null,
    _currentValue: null,
    _currentValue2: null,
    _threadCount: 0
  };
  function Cf() {
    return {
      controller: new Ud(),
      data: /* @__PURE__ */ new Map(),
      refCount: 0
    };
  }
  function Vl(a) {
    a.refCount--, a.refCount === 0 && xy(Xm, function() {
      a.controller.abort();
    });
  }
  var Gl = null, ru = 0, kt = 0, Fl = null;
  function Ia(a, o) {
    if (Gl === null) {
      var f = Gl = [];
      ru = 0, kt = Uy(), Fl = {
        status: "pending",
        value: void 0,
        then: function(p) {
          f.push(p);
        }
      };
    }
    return ru++, o.then(wf, wf), o;
  }
  function wf() {
    if (--ru === 0 && Gl !== null) {
      Fl !== null && (Fl.status = "fulfilled");
      var a = Gl;
      Gl = null, kt = 0, Fl = null;
      for (var o = 0; o < a.length; o++) (0, a[o])();
    }
  }
  function My(a, o) {
    var f = [], p = {
      status: "pending",
      value: null,
      reason: null,
      then: function(y) {
        f.push(y);
      }
    };
    return a.then(
      function() {
        p.status = "fulfilled", p.value = o;
        for (var y = 0; y < f.length; y++) (0, f[y])(o);
      },
      function(y) {
        for (p.status = "rejected", p.reason = y, y = 0; y < f.length; y++)
          (0, f[y])(void 0);
      }
    ), p;
  }
  var ou = P.S;
  P.S = function(a, o) {
    typeof o == "object" && o !== null && typeof o.then == "function" && Ia(a, o), ou !== null && ou(a, o);
  };
  var cs = te(null);
  function ho() {
    var a = cs.current;
    return a !== null ? a : Xt.pooledCache;
  }
  function lu(a, o) {
    o === null ? Re(cs, cs.current) : Re(cs, o.pool);
  }
  function Df() {
    var a = ho();
    return a === null ? null : { parent: gi._currentValue, pool: a };
  }
  var cu = Error(i(460)), Nd = Error(i(474)), ws = Error(i(542)), uu = { then: function() {
  } };
  function Uf(a) {
    return a = a.status, a === "fulfilled" || a === "rejected";
  }
  function Xl() {
  }
  function Nf(a, o, f) {
    switch (f = a[f], f === void 0 ? a.push(o) : f !== o && (o.then(Xl, Xl), o = f), o.status) {
      case "fulfilled":
        return o.value;
      case "rejected":
        throw a = o.reason, qm(a), a;
      default:
        if (typeof o.status == "string") o.then(Xl, Xl);
        else {
          if (a = Xt, a !== null && 100 < a.shellSuspendCounter)
            throw Error(i(482));
          a = o, a.status = "pending", a.then(
            function(p) {
              if (o.status === "pending") {
                var y = o;
                y.status = "fulfilled", y.value = p;
              }
            },
            function(p) {
              if (o.status === "pending") {
                var y = o;
                y.status = "rejected", y.reason = p;
              }
            }
          );
        }
        switch (o.status) {
          case "fulfilled":
            return o.value;
          case "rejected":
            throw a = o.reason, qm(a), a;
        }
        throw us = o, cu;
    }
  }
  var us = null;
  function Od() {
    if (us === null) throw Error(i(459));
    var a = us;
    return us = null, a;
  }
  function qm(a) {
    if (a === cu || a === ws)
      throw Error(i(483));
  }
  var Cr = !1;
  function Ld(a) {
    a.updateQueue = {
      baseState: a.memoizedState,
      firstBaseUpdate: null,
      lastBaseUpdate: null,
      shared: { pending: null, lanes: 0, hiddenCallbacks: null },
      callbacks: null
    };
  }
  function It(a, o) {
    a = a.updateQueue, o.updateQueue === a && (o.updateQueue = {
      baseState: a.baseState,
      firstBaseUpdate: a.firstBaseUpdate,
      lastBaseUpdate: a.lastBaseUpdate,
      shared: a.shared,
      callbacks: null
    });
  }
  function Qs(a) {
    return { lane: a, tag: 0, payload: null, callback: null, next: null };
  }
  function wr(a, o, f) {
    var p = a.updateQueue;
    if (p === null) return null;
    if (p = p.shared, (En & 2) !== 0) {
      var y = p.pending;
      return y === null ? o.next = o : (o.next = y.next, y.next = o), p.pending = o, o = Bl(a), bd(a, null, f), o;
    }
    return so(a, p, o, f), Bl(a);
  }
  function ko(a, o, f) {
    if (o = o.updateQueue, o !== null && (o = o.shared, (f & 4194048) !== 0)) {
      var p = o.lanes;
      p &= a.pendingLanes, f |= p, o.lanes = f, vt(a, f);
    }
  }
  function ql(a, o) {
    var f = a.updateQueue, p = a.alternate;
    if (p !== null && (p = p.updateQueue, f === p)) {
      var y = null, T = null;
      if (f = f.firstBaseUpdate, f !== null) {
        do {
          var L = {
            lane: f.lane,
            tag: f.tag,
            payload: f.payload,
            callback: null,
            next: null
          };
          T === null ? y = T = L : T = T.next = L, f = f.next;
        } while (f !== null);
        T === null ? y = T = o : T = T.next = o;
      } else y = T = o;
      f = {
        baseState: p.baseState,
        firstBaseUpdate: y,
        lastBaseUpdate: T,
        shared: p.shared,
        callbacks: p.callbacks
      }, a.updateQueue = f;
      return;
    }
    a = f.lastBaseUpdate, a === null ? f.firstBaseUpdate = o : a.next = o, f.lastBaseUpdate = o;
  }
  var zd = !1;
  function fu() {
    if (zd) {
      var a = Fl;
      if (a !== null) throw a;
    }
  }
  function Yl(a, o, f, p) {
    zd = !1;
    var y = a.updateQueue;
    Cr = !1;
    var T = y.firstBaseUpdate, L = y.lastBaseUpdate, G = y.shared.pending;
    if (G !== null) {
      y.shared.pending = null;
      var J = G, ye = J.next;
      J.next = null, L === null ? T = ye : L.next = ye, L = J;
      var Le = a.alternate;
      Le !== null && (Le = Le.updateQueue, G = Le.lastBaseUpdate, G !== L && (G === null ? Le.firstBaseUpdate = ye : G.next = ye, Le.lastBaseUpdate = J));
    }
    if (T !== null) {
      var Ie = y.baseState;
      L = 0, Le = ye = J = null, G = T;
      do {
        var Se = G.lane & -536870913, be = Se !== G.lane;
        if (be ? (Rt & Se) === Se : (p & Se) === Se) {
          Se !== 0 && Se === kt && (zd = !0), Le !== null && (Le = Le.next = {
            lane: 0,
            tag: G.tag,
            payload: G.payload,
            callback: null,
            next: null
          });
          e: {
            var Gt = a, Lt = G;
            Se = o;
            var Xn = f;
            switch (Lt.tag) {
              case 1:
                if (Gt = Lt.payload, typeof Gt == "function") {
                  Ie = Gt.call(Xn, Ie, Se);
                  break e;
                }
                Ie = Gt;
                break e;
              case 3:
                Gt.flags = Gt.flags & -65537 | 128;
              case 0:
                if (Gt = Lt.payload, Se = typeof Gt == "function" ? Gt.call(Xn, Ie, Se) : Gt, Se == null) break e;
                Ie = S({}, Ie, Se);
                break e;
              case 2:
                Cr = !0;
            }
          }
          Se = G.callback, Se !== null && (a.flags |= 64, be && (a.flags |= 8192), be = y.callbacks, be === null ? y.callbacks = [Se] : be.push(Se));
        } else
          be = {
            lane: Se,
            tag: G.tag,
            payload: G.payload,
            callback: G.callback,
            next: null
          }, Le === null ? (ye = Le = be, J = Ie) : Le = Le.next = be, L |= Se;
        if (G = G.next, G === null) {
          if (G = y.shared.pending, G === null)
            break;
          be = G, G = be.next, be.next = null, y.lastBaseUpdate = be, y.shared.pending = null;
        }
      } while (!0);
      Le === null && (J = Ie), y.baseState = J, y.firstBaseUpdate = ye, y.lastBaseUpdate = Le, T === null && (y.shared.lanes = 0), Ps |= L, a.lanes = L, a.memoizedState = Ie;
    }
  }
  function kl(a, o) {
    if (typeof a != "function")
      throw Error(i(191, a));
    a.call(o);
  }
  function Ym(a, o) {
    var f = a.callbacks;
    if (f !== null)
      for (a.callbacks = null, a = 0; a < f.length; a++)
        kl(f[a], o);
  }
  var Wl = te(null), Of = te(0);
  function km(a, o) {
    a = vs, Re(Of, a), Re(Wl, o), vs = a | o.baseLanes;
  }
  function Bd() {
    Re(Of, vs), Re(Wl, Wl.current);
  }
  function hu() {
    vs = Of.current, Me(Wl), Me(Of);
  }
  var Dr = 0, Wt = null, wn = null, yi = null, Lf = !1, po = !1, ca = !1, bi = 0, fs = 0, Yi = null, Wm = 0;
  function oi() {
    throw Error(i(321));
  }
  function ea(a, o) {
    if (o === null) return !1;
    for (var f = 0; f < o.length && f < a.length; f++)
      if (!ga(a[f], o[f])) return !1;
    return !0;
  }
  function Ur(a, o, f, p, y, T) {
    return Dr = T, Wt = o, o.memoizedState = null, o.updateQueue = null, o.lanes = 0, P.H = a === null || a.memoizedState === null ? Xf : Jd, ca = !1, T = f(p, y), ca = !1, po && (T = jm(
      o,
      f,
      p,
      y
    )), Zm(a), T;
  }
  function Zm(a) {
    P.H = mu;
    var o = wn !== null && wn.next !== null;
    if (Dr = 0, yi = wn = Wt = null, Lf = !1, fs = 0, Yi = null, o) throw Error(i(300));
    a === null || Ni || (a = a.dependencies, a !== null && au(a) && (Ni = !0));
  }
  function jm(a, o, f, p) {
    Wt = a;
    var y = 0;
    do {
      if (po && (Yi = null), fs = 0, po = !1, 25 <= y) throw Error(i(301));
      if (y += 1, yi = wn = null, a.updateQueue != null) {
        var T = a.updateQueue;
        T.lastEffect = null, T.events = null, T.stores = null, T.memoCache != null && (T.memoCache.index = 0);
      }
      P.H = xv, T = o(f, p);
    } while (po);
    return T;
  }
  function by() {
    var a = P.H, o = a.useState()[0];
    return o = typeof o.then == "function" ? Ds(o) : o, a = a.useState()[0], (wn !== null ? wn.memoizedState : null) !== a && (Wt.flags |= 1024), o;
  }
  function Pd() {
    var a = bi !== 0;
    return bi = 0, a;
  }
  function zf(a, o, f) {
    o.updateQueue = a.updateQueue, o.flags &= -2053, a.lanes &= ~f;
  }
  function Id(a) {
    if (Lf) {
      for (a = a.memoizedState; a !== null; ) {
        var o = a.queue;
        o !== null && (o.pending = null), a = a.next;
      }
      Lf = !1;
    }
    Dr = 0, yi = wn = Wt = null, po = !1, fs = bi = 0, Yi = null;
  }
  function ua() {
    var a = {
      memoizedState: null,
      baseState: null,
      baseQueue: null,
      queue: null,
      next: null
    };
    return yi === null ? Wt.memoizedState = yi = a : yi = yi.next = a, yi;
  }
  function _i() {
    if (wn === null) {
      var a = Wt.alternate;
      a = a !== null ? a.memoizedState : null;
    } else a = wn.next;
    var o = yi === null ? Wt.memoizedState : yi.next;
    if (o !== null)
      yi = o, wn = a;
    else {
      if (a === null)
        throw Wt.alternate === null ? Error(i(467)) : Error(i(310));
      wn = a, a = {
        memoizedState: wn.memoizedState,
        baseState: wn.baseState,
        baseQueue: wn.baseQueue,
        queue: wn.queue,
        next: null
      }, yi === null ? Wt.memoizedState = yi = a : yi = yi.next = a;
    }
    return yi;
  }
  function mo() {
    return { lastEffect: null, events: null, stores: null, memoCache: null };
  }
  function Ds(a) {
    var o = fs;
    return fs += 1, Yi === null && (Yi = []), a = Nf(Yi, a, o), o = Wt, (yi === null ? o.memoizedState : yi.next) === null && (o = o.alternate, P.H = o === null || o.memoizedState === null ? Xf : Jd), a;
  }
  function Bf(a) {
    if (a !== null && typeof a == "object") {
      if (typeof a.then == "function") return Ds(a);
      if (a.$$typeof === N) return ti(a);
    }
    throw Error(i(438, String(a)));
  }
  function Hd(a) {
    var o = null, f = Wt.updateQueue;
    if (f !== null && (o = f.memoCache), o == null) {
      var p = Wt.alternate;
      p !== null && (p = p.updateQueue, p !== null && (p = p.memoCache, p != null && (o = {
        data: p.data.map(function(y) {
          return y.slice();
        }),
        index: 0
      })));
    }
    if (o == null && (o = { data: [], index: 0 }), f === null && (f = mo(), Wt.updateQueue = f), f.memoCache = o, f = o.data[o.index], f === void 0)
      for (f = o.data[o.index] = Array(a), p = 0; p < a; p++)
        f[p] = z;
    return o.index++, f;
  }
  function Nr(a, o) {
    return typeof o == "function" ? o(a) : o;
  }
  function vo(a) {
    var o = _i();
    return Vd(o, wn, a);
  }
  function Vd(a, o, f) {
    var p = a.queue;
    if (p === null) throw Error(i(311));
    p.lastRenderedReducer = f;
    var y = a.baseQueue, T = p.pending;
    if (T !== null) {
      if (y !== null) {
        var L = y.next;
        y.next = T.next, T.next = L;
      }
      o.baseQueue = y = T, p.pending = null;
    }
    if (T = a.baseState, y === null) a.memoizedState = T;
    else {
      o = y.next;
      var G = L = null, J = null, ye = o, Le = !1;
      do {
        var Ie = ye.lane & -536870913;
        if (Ie !== ye.lane ? (Rt & Ie) === Ie : (Dr & Ie) === Ie) {
          var Se = ye.revertLane;
          if (Se === 0)
            J !== null && (J = J.next = {
              lane: 0,
              revertLane: 0,
              action: ye.action,
              hasEagerState: ye.hasEagerState,
              eagerState: ye.eagerState,
              next: null
            }), Ie === kt && (Le = !0);
          else if ((Dr & Se) === Se) {
            ye = ye.next, Se === kt && (Le = !0);
            continue;
          } else
            Ie = {
              lane: 0,
              revertLane: ye.revertLane,
              action: ye.action,
              hasEagerState: ye.hasEagerState,
              eagerState: ye.eagerState,
              next: null
            }, J === null ? (G = J = Ie, L = T) : J = J.next = Ie, Wt.lanes |= Se, Ps |= Se;
          Ie = ye.action, ca && f(T, Ie), T = ye.hasEagerState ? ye.eagerState : f(T, Ie);
        } else
          Se = {
            lane: Ie,
            revertLane: ye.revertLane,
            action: ye.action,
            hasEagerState: ye.hasEagerState,
            eagerState: ye.eagerState,
            next: null
          }, J === null ? (G = J = Se, L = T) : J = J.next = Se, Wt.lanes |= Ie, Ps |= Ie;
        ye = ye.next;
      } while (ye !== null && ye !== o);
      if (J === null ? L = T : J.next = G, !ga(T, a.memoizedState) && (Ni = !0, Le && (f = Fl, f !== null)))
        throw f;
      a.memoizedState = T, a.baseState = L, a.baseQueue = J, p.lastRenderedState = T;
    }
    return y === null && (p.lanes = 0), [a.memoizedState, p.dispatch];
  }
  function Gd(a) {
    var o = _i(), f = o.queue;
    if (f === null) throw Error(i(311));
    f.lastRenderedReducer = a;
    var p = f.dispatch, y = f.pending, T = o.memoizedState;
    if (y !== null) {
      f.pending = null;
      var L = y = y.next;
      do
        T = a(T, L.action), L = L.next;
      while (L !== y);
      ga(T, o.memoizedState) || (Ni = !0), o.memoizedState = T, o.baseQueue === null && (o.baseState = T), f.lastRenderedState = T;
    }
    return [T, p];
  }
  function Qm(a, o, f) {
    var p = Wt, y = _i(), T = yn;
    if (T) {
      if (f === void 0) throw Error(i(407));
      f = f();
    } else f = o();
    var L = !ga(
      (wn || y).memoizedState,
      f
    );
    L && (y.memoizedState = f, Ni = !0), y = y.queue;
    var G = Jm.bind(null, p, y, a);
    if (Ql(2048, 8, G, [a]), y.getSnapshot !== o || L || yi !== null && yi.memoizedState.tag & 1) {
      if (p.flags |= 2048, jl(
        9,
        du(),
        Km.bind(
          null,
          p,
          y,
          f,
          o
        ),
        null
      ), Xt === null) throw Error(i(349));
      T || (Dr & 124) !== 0 || Zl(p, o, f);
    }
    return f;
  }
  function Zl(a, o, f) {
    a.flags |= 16384, a = { getSnapshot: o, value: f }, o = Wt.updateQueue, o === null ? (o = mo(), Wt.updateQueue = o, o.stores = [a]) : (f = o.stores, f === null ? o.stores = [a] : f.push(a));
  }
  function Km(a, o, f, p) {
    o.value = f, o.getSnapshot = p, $m(o) && ev(a);
  }
  function Jm(a, o, f) {
    return f(function() {
      $m(o) && ev(a);
    });
  }
  function $m(a) {
    var o = a.getSnapshot;
    a = a.value;
    try {
      var f = o();
      return !ga(a, f);
    } catch {
      return !0;
    }
  }
  function ev(a) {
    var o = Er(a, 2);
    o !== null && da(o, a, 2);
  }
  function Fd(a) {
    var o = ua();
    if (typeof a == "function") {
      var f = a;
      if (a = f(), ca) {
        Ae(!0);
        try {
          f();
        } finally {
          Ae(!1);
        }
      }
    }
    return o.memoizedState = o.baseState = a, o.queue = {
      pending: null,
      lanes: 0,
      dispatch: null,
      lastRenderedReducer: Nr,
      lastRenderedState: a
    }, o;
  }
  function tv(a, o, f, p) {
    return a.baseState = f, Vd(
      a,
      wn,
      typeof p == "function" ? p : Nr
    );
  }
  function Ey(a, o, f, p, y) {
    if (Ff(a)) throw Error(i(485));
    if (a = o.action, a !== null) {
      var T = {
        payload: y,
        action: a,
        next: null,
        isTransition: !0,
        status: "pending",
        value: null,
        reason: null,
        listeners: [],
        then: function(L) {
          T.listeners.push(L);
        }
      };
      P.T !== null ? f(!0) : T.isTransition = !1, p(T), f = o.pending, f === null ? (T.next = o.pending = T, nv(o, T)) : (T.next = f.next, o.pending = f.next = T);
    }
  }
  function nv(a, o) {
    var f = o.action, p = o.payload, y = a.state;
    if (o.isTransition) {
      var T = P.T, L = {};
      P.T = L;
      try {
        var G = f(y, p), J = P.S;
        J !== null && J(L, G), iv(a, o, G);
      } catch (ye) {
        Xd(a, o, ye);
      } finally {
        P.T = T;
      }
    } else
      try {
        T = f(y, p), iv(a, o, T);
      } catch (ye) {
        Xd(a, o, ye);
      }
  }
  function iv(a, o, f) {
    f !== null && typeof f == "object" && typeof f.then == "function" ? f.then(
      function(p) {
        av(a, o, p);
      },
      function(p) {
        return Xd(a, o, p);
      }
    ) : av(a, o, f);
  }
  function av(a, o, f) {
    o.status = "fulfilled", o.value = f, sv(o), a.state = f, o = a.pending, o !== null && (f = o.next, f === o ? a.pending = null : (f = f.next, o.next = f, nv(a, f)));
  }
  function Xd(a, o, f) {
    var p = a.pending;
    if (a.pending = null, p !== null) {
      p = p.next;
      do
        o.status = "rejected", o.reason = f, sv(o), o = o.next;
      while (o !== p);
    }
    a.action = null;
  }
  function sv(a) {
    a = a.listeners;
    for (var o = 0; o < a.length; o++) (0, a[o])();
  }
  function qd(a, o) {
    return o;
  }
  function rv(a, o) {
    if (yn) {
      var f = Xt.formState;
      if (f !== null) {
        e: {
          var p = Wt;
          if (yn) {
            if (Jn) {
              t: {
                for (var y = Jn, T = Pa; y.nodeType !== 8; ) {
                  if (!T) {
                    y = null;
                    break t;
                  }
                  if (y = Hr(
                    y.nextSibling
                  ), y === null) {
                    y = null;
                    break t;
                  }
                }
                T = y.data, y = T === "F!" || T === "F" ? y : null;
              }
              if (y) {
                Jn = Hr(
                  y.nextSibling
                ), p = y.data === "F!";
                break e;
              }
            }
            co(p);
          }
          p = !1;
        }
        p && (o = f[0]);
      }
    }
    return f = ua(), f.memoizedState = f.baseState = o, p = {
      pending: null,
      lanes: 0,
      dispatch: null,
      lastRenderedReducer: qd,
      lastRenderedState: o
    }, f.queue = p, f = _v.bind(
      null,
      Wt,
      p
    ), p.dispatch = f, p = Fd(!1), T = Gf.bind(
      null,
      Wt,
      !1,
      p.queue
    ), p = ua(), y = {
      state: o,
      dispatch: null,
      action: a,
      pending: null
    }, p.queue = y, f = Ey.bind(
      null,
      Wt,
      y,
      T,
      f
    ), y.dispatch = f, p.memoizedState = a, [o, f, !1];
  }
  function ov(a) {
    var o = _i();
    return lv(o, wn, a);
  }
  function lv(a, o, f) {
    if (o = Vd(
      a,
      o,
      qd
    )[0], a = vo(Nr)[0], typeof o == "object" && o !== null && typeof o.then == "function")
      try {
        var p = Ds(o);
      } catch (L) {
        throw L === cu ? ws : L;
      }
    else p = o;
    o = _i();
    var y = o.queue, T = y.dispatch;
    return f !== o.memoizedState && (Wt.flags |= 2048, jl(
      9,
      du(),
      Ty.bind(null, y, f),
      null
    )), [p, T, a];
  }
  function Ty(a, o) {
    a.action = o;
  }
  function cv(a) {
    var o = _i(), f = wn;
    if (f !== null)
      return lv(o, f, a);
    _i(), o = o.memoizedState, f = _i();
    var p = f.queue.dispatch;
    return f.memoizedState = a, [o, p, !1];
  }
  function jl(a, o, f, p) {
    return a = { tag: a, create: f, deps: p, inst: o, next: null }, o = Wt.updateQueue, o === null && (o = mo(), Wt.updateQueue = o), f = o.lastEffect, f === null ? o.lastEffect = a.next = a : (p = f.next, f.next = a, a.next = p, o.lastEffect = a), a;
  }
  function du() {
    return { destroy: void 0, resource: void 0 };
  }
  function Yd() {
    return _i().memoizedState;
  }
  function Pf(a, o, f, p) {
    var y = ua();
    p = p === void 0 ? null : p, Wt.flags |= a, y.memoizedState = jl(
      1 | o,
      du(),
      f,
      p
    );
  }
  function Ql(a, o, f, p) {
    var y = _i();
    p = p === void 0 ? null : p;
    var T = y.memoizedState.inst;
    wn !== null && p !== null && ea(p, wn.memoizedState.deps) ? y.memoizedState = jl(o, T, f, p) : (Wt.flags |= a, y.memoizedState = jl(
      1 | o,
      T,
      f,
      p
    ));
  }
  function kd(a, o) {
    Pf(8390656, 8, a, o);
  }
  function Wd(a, o) {
    Ql(2048, 8, a, o);
  }
  function If(a, o) {
    return Ql(4, 2, a, o);
  }
  function Hf(a, o) {
    return Ql(4, 4, a, o);
  }
  function uv(a, o) {
    if (typeof o == "function") {
      a = a();
      var f = o(a);
      return function() {
        typeof f == "function" ? f() : o(null);
      };
    }
    if (o != null)
      return a = a(), o.current = a, function() {
        o.current = null;
      };
  }
  function fv(a, o, f) {
    f = f != null ? f.concat([a]) : null, Ql(4, 4, uv.bind(null, o, a), f);
  }
  function Zd() {
  }
  function hv(a, o) {
    var f = _i();
    o = o === void 0 ? null : o;
    var p = f.memoizedState;
    return o !== null && ea(o, p[1]) ? p[0] : (f.memoizedState = [a, o], a);
  }
  function jd(a, o) {
    var f = _i();
    o = o === void 0 ? null : o;
    var p = f.memoizedState;
    if (o !== null && ea(o, p[1]))
      return p[0];
    if (p = a(), ca) {
      Ae(!0);
      try {
        a();
      } finally {
        Ae(!1);
      }
    }
    return f.memoizedState = [p, o], p;
  }
  function Vf(a, o, f) {
    return f === void 0 || (Dr & 1073741824) !== 0 ? a.memoizedState = o : (a.memoizedState = f, a = eh(), Wt.lanes |= a, Ps |= a, f);
  }
  function dv(a, o, f, p) {
    return ga(f, o) ? f : Wl.current !== null ? (a = Vf(a, f, p), ga(a, o) || (Ni = !0), a) : (Dr & 42) === 0 ? (Ni = !0, a.memoizedState = f) : (a = eh(), Wt.lanes |= a, Ps |= a, o);
  }
  function pv(a, o, f, p, y) {
    var T = K.p;
    K.p = T !== 0 && 8 > T ? T : 8;
    var L = P.T, G = {};
    P.T = G, Gf(a, !1, o, f);
    try {
      var J = y(), ye = P.S;
      if (ye !== null && ye(G, J), J !== null && typeof J == "object" && typeof J.then == "function") {
        var Le = My(
          J,
          p
        );
        pu(
          a,
          o,
          Le,
          ai(a)
        );
      } else
        pu(
          a,
          o,
          p,
          ai(a)
        );
    } catch (Ie) {
      pu(
        a,
        o,
        { then: function() {
        }, status: "rejected", reason: Ie },
        ai()
      );
    } finally {
      K.p = T, P.T = L;
    }
  }
  function Ay() {
  }
  function Qd(a, o, f, p) {
    if (a.tag !== 5) throw Error(i(476));
    var y = mv(a).queue;
    pv(
      a,
      y,
      o,
      Q,
      f === null ? Ay : function() {
        return vv(a), f(p);
      }
    );
  }
  function mv(a) {
    var o = a.memoizedState;
    if (o !== null) return o;
    o = {
      memoizedState: Q,
      baseState: Q,
      baseQueue: null,
      queue: {
        pending: null,
        lanes: 0,
        dispatch: null,
        lastRenderedReducer: Nr,
        lastRenderedState: Q
      },
      next: null
    };
    var f = {};
    return o.next = {
      memoizedState: f,
      baseState: f,
      baseQueue: null,
      queue: {
        pending: null,
        lanes: 0,
        dispatch: null,
        lastRenderedReducer: Nr,
        lastRenderedState: f
      },
      next: null
    }, a.memoizedState = o, a = a.alternate, a !== null && (a.memoizedState = o), o;
  }
  function vv(a) {
    var o = mv(a).next.queue;
    pu(a, o, {}, ai());
  }
  function Kd() {
    return ti(up);
  }
  function gv() {
    return _i().memoizedState;
  }
  function yv() {
    return _i().memoizedState;
  }
  function Ry(a) {
    for (var o = a.return; o !== null; ) {
      switch (o.tag) {
        case 24:
        case 3:
          var f = ai();
          a = Qs(f);
          var p = wr(o, a, f);
          p !== null && (da(p, o, f), ko(p, o, f)), o = { cache: Cf() }, a.payload = o;
          return;
      }
      o = o.return;
    }
  }
  function Cy(a, o, f) {
    var p = ai();
    f = {
      lane: p,
      revertLane: 0,
      action: f,
      hasEagerState: !1,
      eagerState: null,
      next: null
    }, Ff(a) ? Sv(o, f) : (f = bf(a, o, f, p), f !== null && (da(f, a, p), Ha(f, o, p)));
  }
  function _v(a, o, f) {
    var p = ai();
    pu(a, o, f, p);
  }
  function pu(a, o, f, p) {
    var y = {
      lane: p,
      revertLane: 0,
      action: f,
      hasEagerState: !1,
      eagerState: null,
      next: null
    };
    if (Ff(a)) Sv(o, y);
    else {
      var T = a.alternate;
      if (a.lanes === 0 && (T === null || T.lanes === 0) && (T = o.lastRenderedReducer, T !== null))
        try {
          var L = o.lastRenderedState, G = T(L, f);
          if (y.hasEagerState = !0, y.eagerState = G, ga(G, L))
            return so(a, o, y, 0), Xt === null && $c(), !1;
        } catch {
        } finally {
        }
      if (f = bf(a, o, y, p), f !== null)
        return da(f, a, p), Ha(f, o, p), !0;
    }
    return !1;
  }
  function Gf(a, o, f, p) {
    if (p = {
      lane: 2,
      revertLane: Uy(),
      action: p,
      hasEagerState: !1,
      eagerState: null,
      next: null
    }, Ff(a)) {
      if (o) throw Error(i(479));
    } else
      o = bf(
        a,
        f,
        p,
        2
      ), o !== null && da(o, a, 2);
  }
  function Ff(a) {
    var o = a.alternate;
    return a === Wt || o !== null && o === Wt;
  }
  function Sv(a, o) {
    po = Lf = !0;
    var f = a.pending;
    f === null ? o.next = o : (o.next = f.next, f.next = o), a.pending = o;
  }
  function Ha(a, o, f) {
    if ((f & 4194048) !== 0) {
      var p = o.lanes;
      p &= a.pendingLanes, f |= p, o.lanes = f, vt(a, f);
    }
  }
  var mu = {
    readContext: ti,
    use: Bf,
    useCallback: oi,
    useContext: oi,
    useEffect: oi,
    useImperativeHandle: oi,
    useLayoutEffect: oi,
    useInsertionEffect: oi,
    useMemo: oi,
    useReducer: oi,
    useRef: oi,
    useState: oi,
    useDebugValue: oi,
    useDeferredValue: oi,
    useTransition: oi,
    useSyncExternalStore: oi,
    useId: oi,
    useHostTransitionStatus: oi,
    useFormState: oi,
    useActionState: oi,
    useOptimistic: oi,
    useMemoCache: oi,
    useCacheRefresh: oi
  }, Xf = {
    readContext: ti,
    use: Bf,
    useCallback: function(a, o) {
      return ua().memoizedState = [
        a,
        o === void 0 ? null : o
      ], a;
    },
    useContext: ti,
    useEffect: kd,
    useImperativeHandle: function(a, o, f) {
      f = f != null ? f.concat([a]) : null, Pf(
        4194308,
        4,
        uv.bind(null, o, a),
        f
      );
    },
    useLayoutEffect: function(a, o) {
      return Pf(4194308, 4, a, o);
    },
    useInsertionEffect: function(a, o) {
      Pf(4, 2, a, o);
    },
    useMemo: function(a, o) {
      var f = ua();
      o = o === void 0 ? null : o;
      var p = a();
      if (ca) {
        Ae(!0);
        try {
          a();
        } finally {
          Ae(!1);
        }
      }
      return f.memoizedState = [p, o], p;
    },
    useReducer: function(a, o, f) {
      var p = ua();
      if (f !== void 0) {
        var y = f(o);
        if (ca) {
          Ae(!0);
          try {
            f(o);
          } finally {
            Ae(!1);
          }
        }
      } else y = o;
      return p.memoizedState = p.baseState = y, a = {
        pending: null,
        lanes: 0,
        dispatch: null,
        lastRenderedReducer: a,
        lastRenderedState: y
      }, p.queue = a, a = a.dispatch = Cy.bind(
        null,
        Wt,
        a
      ), [p.memoizedState, a];
    },
    useRef: function(a) {
      var o = ua();
      return a = { current: a }, o.memoizedState = a;
    },
    useState: function(a) {
      a = Fd(a);
      var o = a.queue, f = _v.bind(null, Wt, o);
      return o.dispatch = f, [a.memoizedState, f];
    },
    useDebugValue: Zd,
    useDeferredValue: function(a, o) {
      var f = ua();
      return Vf(f, a, o);
    },
    useTransition: function() {
      var a = Fd(!1);
      return a = pv.bind(
        null,
        Wt,
        a.queue,
        !0,
        !1
      ), ua().memoizedState = a, [!1, a];
    },
    useSyncExternalStore: function(a, o, f) {
      var p = Wt, y = ua();
      if (yn) {
        if (f === void 0)
          throw Error(i(407));
        f = f();
      } else {
        if (f = o(), Xt === null)
          throw Error(i(349));
        (Rt & 124) !== 0 || Zl(p, o, f);
      }
      y.memoizedState = f;
      var T = { value: f, getSnapshot: o };
      return y.queue = T, kd(Jm.bind(null, p, T, a), [
        a
      ]), p.flags |= 2048, jl(
        9,
        du(),
        Km.bind(
          null,
          p,
          T,
          f,
          o
        ),
        null
      ), f;
    },
    useId: function() {
      var a = ua(), o = Xt.identifierPrefix;
      if (yn) {
        var f = Zs, p = Ws;
        f = (p & ~(1 << 32 - at(p) - 1)).toString(32) + f, o = "«" + o + "R" + f, f = bi++, 0 < f && (o += "H" + f.toString(32)), o += "»";
      } else
        f = Wm++, o = "«" + o + "r" + f.toString(32) + "»";
      return a.memoizedState = o;
    },
    useHostTransitionStatus: Kd,
    useFormState: rv,
    useActionState: rv,
    useOptimistic: function(a) {
      var o = ua();
      o.memoizedState = o.baseState = a;
      var f = {
        pending: null,
        lanes: 0,
        dispatch: null,
        lastRenderedReducer: null,
        lastRenderedState: null
      };
      return o.queue = f, o = Gf.bind(
        null,
        Wt,
        !0,
        f
      ), f.dispatch = o, [a, o];
    },
    useMemoCache: Hd,
    useCacheRefresh: function() {
      return ua().memoizedState = Ry.bind(
        null,
        Wt
      );
    }
  }, Jd = {
    readContext: ti,
    use: Bf,
    useCallback: hv,
    useContext: ti,
    useEffect: Wd,
    useImperativeHandle: fv,
    useInsertionEffect: If,
    useLayoutEffect: Hf,
    useMemo: jd,
    useReducer: vo,
    useRef: Yd,
    useState: function() {
      return vo(Nr);
    },
    useDebugValue: Zd,
    useDeferredValue: function(a, o) {
      var f = _i();
      return dv(
        f,
        wn.memoizedState,
        a,
        o
      );
    },
    useTransition: function() {
      var a = vo(Nr)[0], o = _i().memoizedState;
      return [
        typeof a == "boolean" ? a : Ds(a),
        o
      ];
    },
    useSyncExternalStore: Qm,
    useId: gv,
    useHostTransitionStatus: Kd,
    useFormState: ov,
    useActionState: ov,
    useOptimistic: function(a, o) {
      var f = _i();
      return tv(f, wn, a, o);
    },
    useMemoCache: Hd,
    useCacheRefresh: yv
  }, xv = {
    readContext: ti,
    use: Bf,
    useCallback: hv,
    useContext: ti,
    useEffect: Wd,
    useImperativeHandle: fv,
    useInsertionEffect: If,
    useLayoutEffect: Hf,
    useMemo: jd,
    useReducer: Gd,
    useRef: Yd,
    useState: function() {
      return Gd(Nr);
    },
    useDebugValue: Zd,
    useDeferredValue: function(a, o) {
      var f = _i();
      return wn === null ? Vf(f, a, o) : dv(
        f,
        wn.memoizedState,
        a,
        o
      );
    },
    useTransition: function() {
      var a = Gd(Nr)[0], o = _i().memoizedState;
      return [
        typeof a == "boolean" ? a : Ds(a),
        o
      ];
    },
    useSyncExternalStore: Qm,
    useId: gv,
    useHostTransitionStatus: Kd,
    useFormState: cv,
    useActionState: cv,
    useOptimistic: function(a, o) {
      var f = _i();
      return wn !== null ? tv(f, wn, a, o) : (f.baseState = a, [a, f.queue.dispatch]);
    },
    useMemoCache: Hd,
    useCacheRefresh: yv
  }, Wo = null, vu = 0;
  function gu(a) {
    var o = vu;
    return vu += 1, Wo === null && (Wo = []), Nf(Wo, a, o);
  }
  function Kl(a, o) {
    o = o.props.ref, a.ref = o !== void 0 ? o : null;
  }
  function qf(a, o) {
    throw o.$$typeof === x ? Error(i(525)) : (a = Object.prototype.toString.call(o), Error(
      i(
        31,
        a === "[object Object]" ? "object with keys {" + Object.keys(o).join(", ") + "}" : a
      )
    ));
  }
  function Mv(a) {
    var o = a._init;
    return o(a._payload);
  }
  function bv(a) {
    function o(ue, ie) {
      if (a) {
        var ge = ue.deletions;
        ge === null ? (ue.deletions = [ie], ue.flags |= 16) : ge.push(ie);
      }
    }
    function f(ue, ie) {
      if (!a) return null;
      for (; ie !== null; )
        o(ue, ie), ie = ie.sibling;
      return null;
    }
    function p(ue) {
      for (var ie = /* @__PURE__ */ new Map(); ue !== null; )
        ue.key !== null ? ie.set(ue.key, ue) : ie.set(ue.index, ue), ue = ue.sibling;
      return ie;
    }
    function y(ue, ie) {
      return ue = ri(ue, ie), ue.index = 0, ue.sibling = null, ue;
    }
    function T(ue, ie, ge) {
      return ue.index = ge, a ? (ge = ue.alternate, ge !== null ? (ge = ge.index, ge < ie ? (ue.flags |= 67108866, ie) : ge) : (ue.flags |= 67108866, ie)) : (ue.flags |= 1048576, ie);
    }
    function L(ue) {
      return a && ue.alternate === null && (ue.flags |= 67108866), ue;
    }
    function G(ue, ie, ge, Be) {
      return ie === null || ie.tag !== 6 ? (ie = tu(ge, ue.mode, Be), ie.return = ue, ie) : (ie = y(ie, ge), ie.return = ue, ie);
    }
    function J(ue, ie, ge, Be) {
      var gt = ge.type;
      return gt === R ? Le(
        ue,
        ie,
        ge.props.children,
        Be,
        ge.key
      ) : ie !== null && (ie.elementType === gt || typeof gt == "object" && gt !== null && gt.$$typeof === k && Mv(gt) === ie.type) ? (ie = y(ie, ge.props), Kl(ie, ge), ie.return = ue, ie) : (ie = Ui(
        ge.type,
        ge.key,
        ge.props,
        null,
        ue.mode,
        Be
      ), Kl(ie, ge), ie.return = ue, ie);
    }
    function ye(ue, ie, ge, Be) {
      return ie === null || ie.tag !== 4 || ie.stateNode.containerInfo !== ge.containerInfo || ie.stateNode.implementation !== ge.implementation ? (ie = Ef(ge, ue.mode, Be), ie.return = ue, ie) : (ie = y(ie, ge.children || []), ie.return = ue, ie);
    }
    function Le(ue, ie, ge, Be, gt) {
      return ie === null || ie.tag !== 7 ? (ie = oo(
        ge,
        ue.mode,
        Be,
        gt
      ), ie.return = ue, ie) : (ie = y(ie, ge), ie.return = ue, ie);
    }
    function Ie(ue, ie, ge) {
      if (typeof ie == "string" && ie !== "" || typeof ie == "number" || typeof ie == "bigint")
        return ie = tu(
          "" + ie,
          ue.mode,
          ge
        ), ie.return = ue, ie;
      if (typeof ie == "object" && ie !== null) {
        switch (ie.$$typeof) {
          case M:
            return ge = Ui(
              ie.type,
              ie.key,
              ie.props,
              null,
              ue.mode,
              ge
            ), Kl(ge, ie), ge.return = ue, ge;
          case b:
            return ie = Ef(
              ie,
              ue.mode,
              ge
            ), ie.return = ue, ie;
          case k:
            var Be = ie._init;
            return ie = Be(ie._payload), Ie(ue, ie, ge);
        }
        if (pe(ie) || le(ie))
          return ie = oo(
            ie,
            ue.mode,
            ge,
            null
          ), ie.return = ue, ie;
        if (typeof ie.then == "function")
          return Ie(ue, gu(ie), ge);
        if (ie.$$typeof === N)
          return Ie(
            ue,
            su(ue, ie),
            ge
          );
        qf(ue, ie);
      }
      return null;
    }
    function Se(ue, ie, ge, Be) {
      var gt = ie !== null ? ie.key : null;
      if (typeof ge == "string" && ge !== "" || typeof ge == "number" || typeof ge == "bigint")
        return gt !== null ? null : G(ue, ie, "" + ge, Be);
      if (typeof ge == "object" && ge !== null) {
        switch (ge.$$typeof) {
          case M:
            return ge.key === gt ? J(ue, ie, ge, Be) : null;
          case b:
            return ge.key === gt ? ye(ue, ie, ge, Be) : null;
          case k:
            return gt = ge._init, ge = gt(ge._payload), Se(ue, ie, ge, Be);
        }
        if (pe(ge) || le(ge))
          return gt !== null ? null : Le(ue, ie, ge, Be, null);
        if (typeof ge.then == "function")
          return Se(
            ue,
            ie,
            gu(ge),
            Be
          );
        if (ge.$$typeof === N)
          return Se(
            ue,
            ie,
            su(ue, ge),
            Be
          );
        qf(ue, ge);
      }
      return null;
    }
    function be(ue, ie, ge, Be, gt) {
      if (typeof Be == "string" && Be !== "" || typeof Be == "number" || typeof Be == "bigint")
        return ue = ue.get(ge) || null, G(ie, ue, "" + Be, gt);
      if (typeof Be == "object" && Be !== null) {
        switch (Be.$$typeof) {
          case M:
            return ue = ue.get(
              Be.key === null ? ge : Be.key
            ) || null, J(ie, ue, Be, gt);
          case b:
            return ue = ue.get(
              Be.key === null ? ge : Be.key
            ) || null, ye(ie, ue, Be, gt);
          case k:
            var ln = Be._init;
            return Be = ln(Be._payload), be(
              ue,
              ie,
              ge,
              Be,
              gt
            );
        }
        if (pe(Be) || le(Be))
          return ue = ue.get(ge) || null, Le(ie, ue, Be, gt, null);
        if (typeof Be.then == "function")
          return be(
            ue,
            ie,
            ge,
            gu(Be),
            gt
          );
        if (Be.$$typeof === N)
          return be(
            ue,
            ie,
            ge,
            su(ie, Be),
            gt
          );
        qf(ie, Be);
      }
      return null;
    }
    function Gt(ue, ie, ge, Be) {
      for (var gt = null, ln = null, Et = ie, zt = ie = 0, ia = null; Et !== null && zt < ge.length; zt++) {
        Et.index > zt ? (ia = Et, Et = null) : ia = Et.sibling;
        var An = Se(
          ue,
          Et,
          ge[zt],
          Be
        );
        if (An === null) {
          Et === null && (Et = ia);
          break;
        }
        a && Et && An.alternate === null && o(ue, Et), ie = T(An, ie, zt), ln === null ? gt = An : ln.sibling = An, ln = An, Et = ia;
      }
      if (zt === ge.length)
        return f(ue, Et), yn && Tr(ue, zt), gt;
      if (Et === null) {
        for (; zt < ge.length; zt++)
          Et = Ie(ue, ge[zt], Be), Et !== null && (ie = T(
            Et,
            ie,
            zt
          ), ln === null ? gt = Et : ln.sibling = Et, ln = Et);
        return yn && Tr(ue, zt), gt;
      }
      for (Et = p(Et); zt < ge.length; zt++)
        ia = be(
          Et,
          ue,
          zt,
          ge[zt],
          Be
        ), ia !== null && (a && ia.alternate !== null && Et.delete(
          ia.key === null ? zt : ia.key
        ), ie = T(
          ia,
          ie,
          zt
        ), ln === null ? gt = ia : ln.sibling = ia, ln = ia);
      return a && Et.forEach(function(pc) {
        return o(ue, pc);
      }), yn && Tr(ue, zt), gt;
    }
    function Lt(ue, ie, ge, Be) {
      if (ge == null) throw Error(i(151));
      for (var gt = null, ln = null, Et = ie, zt = ie = 0, ia = null, An = ge.next(); Et !== null && !An.done; zt++, An = ge.next()) {
        Et.index > zt ? (ia = Et, Et = null) : ia = Et.sibling;
        var pc = Se(ue, Et, An.value, Be);
        if (pc === null) {
          Et === null && (Et = ia);
          break;
        }
        a && Et && pc.alternate === null && o(ue, Et), ie = T(pc, ie, zt), ln === null ? gt = pc : ln.sibling = pc, ln = pc, Et = ia;
      }
      if (An.done)
        return f(ue, Et), yn && Tr(ue, zt), gt;
      if (Et === null) {
        for (; !An.done; zt++, An = ge.next())
          An = Ie(ue, An.value, Be), An !== null && (ie = T(An, ie, zt), ln === null ? gt = An : ln.sibling = An, ln = An);
        return yn && Tr(ue, zt), gt;
      }
      for (Et = p(Et); !An.done; zt++, An = ge.next())
        An = be(Et, ue, zt, An.value, Be), An !== null && (a && An.alternate !== null && Et.delete(An.key === null ? zt : An.key), ie = T(An, ie, zt), ln === null ? gt = An : ln.sibling = An, ln = An);
      return a && Et.forEach(function(FA) {
        return o(ue, FA);
      }), yn && Tr(ue, zt), gt;
    }
    function Xn(ue, ie, ge, Be) {
      if (typeof ge == "object" && ge !== null && ge.type === R && ge.key === null && (ge = ge.props.children), typeof ge == "object" && ge !== null) {
        switch (ge.$$typeof) {
          case M:
            e: {
              for (var gt = ge.key; ie !== null; ) {
                if (ie.key === gt) {
                  if (gt = ge.type, gt === R) {
                    if (ie.tag === 7) {
                      f(
                        ue,
                        ie.sibling
                      ), Be = y(
                        ie,
                        ge.props.children
                      ), Be.return = ue, ue = Be;
                      break e;
                    }
                  } else if (ie.elementType === gt || typeof gt == "object" && gt !== null && gt.$$typeof === k && Mv(gt) === ie.type) {
                    f(
                      ue,
                      ie.sibling
                    ), Be = y(ie, ge.props), Kl(Be, ge), Be.return = ue, ue = Be;
                    break e;
                  }
                  f(ue, ie);
                  break;
                } else o(ue, ie);
                ie = ie.sibling;
              }
              ge.type === R ? (Be = oo(
                ge.props.children,
                ue.mode,
                Be,
                ge.key
              ), Be.return = ue, ue = Be) : (Be = Ui(
                ge.type,
                ge.key,
                ge.props,
                null,
                ue.mode,
                Be
              ), Kl(Be, ge), Be.return = ue, ue = Be);
            }
            return L(ue);
          case b:
            e: {
              for (gt = ge.key; ie !== null; ) {
                if (ie.key === gt)
                  if (ie.tag === 4 && ie.stateNode.containerInfo === ge.containerInfo && ie.stateNode.implementation === ge.implementation) {
                    f(
                      ue,
                      ie.sibling
                    ), Be = y(ie, ge.children || []), Be.return = ue, ue = Be;
                    break e;
                  } else {
                    f(ue, ie);
                    break;
                  }
                else o(ue, ie);
                ie = ie.sibling;
              }
              Be = Ef(ge, ue.mode, Be), Be.return = ue, ue = Be;
            }
            return L(ue);
          case k:
            return gt = ge._init, ge = gt(ge._payload), Xn(
              ue,
              ie,
              ge,
              Be
            );
        }
        if (pe(ge))
          return Gt(
            ue,
            ie,
            ge,
            Be
          );
        if (le(ge)) {
          if (gt = le(ge), typeof gt != "function") throw Error(i(150));
          return ge = gt.call(ge), Lt(
            ue,
            ie,
            ge,
            Be
          );
        }
        if (typeof ge.then == "function")
          return Xn(
            ue,
            ie,
            gu(ge),
            Be
          );
        if (ge.$$typeof === N)
          return Xn(
            ue,
            ie,
            su(ue, ge),
            Be
          );
        qf(ue, ge);
      }
      return typeof ge == "string" && ge !== "" || typeof ge == "number" || typeof ge == "bigint" ? (ge = "" + ge, ie !== null && ie.tag === 6 ? (f(ue, ie.sibling), Be = y(ie, ge), Be.return = ue, ue = Be) : (f(ue, ie), Be = tu(ge, ue.mode, Be), Be.return = ue, ue = Be), L(ue)) : f(ue, ie);
    }
    return function(ue, ie, ge, Be) {
      try {
        vu = 0;
        var gt = Xn(
          ue,
          ie,
          ge,
          Be
        );
        return Wo = null, gt;
      } catch (Et) {
        if (Et === cu || Et === ws) throw Et;
        var ln = Sa(29, Et, null, ue.mode);
        return ln.lanes = Be, ln.return = ue, ln;
      } finally {
      }
    };
  }
  var Zo = bv(!0), Ev = bv(!1), On = te(null), Us = null;
  function go(a) {
    var o = a.alternate;
    Re(li, li.current & 1), Re(On, a), Us === null && (o === null || Wl.current !== null || o.memoizedState !== null) && (Us = a);
  }
  function Tv(a) {
    if (a.tag === 22) {
      if (Re(li, li.current), Re(On, a), Us === null) {
        var o = a.alternate;
        o !== null && o.memoizedState !== null && (Us = a);
      }
    } else yo();
  }
  function yo() {
    Re(li, li.current), Re(On, On.current);
  }
  function Ks(a) {
    Me(On), Us === a && (Us = null), Me(li);
  }
  var li = te(0);
  function Or(a) {
    for (var o = a; o !== null; ) {
      if (o.tag === 13) {
        var f = o.memoizedState;
        if (f !== null && (f = f.dehydrated, f === null || f.data === "$?" || Xy(f)))
          return o;
      } else if (o.tag === 19 && o.memoizedProps.revealOrder !== void 0) {
        if ((o.flags & 128) !== 0) return o;
      } else if (o.child !== null) {
        o.child.return = o, o = o.child;
        continue;
      }
      if (o === a) break;
      for (; o.sibling === null; ) {
        if (o.return === null || o.return === a) return null;
        o = o.return;
      }
      o.sibling.return = o.return, o = o.sibling;
    }
    return null;
  }
  function _o(a, o, f, p) {
    o = a.memoizedState, f = f(p, o), f = f == null ? o : S({}, o, f), a.memoizedState = f, a.lanes === 0 && (a.updateQueue.baseState = f);
  }
  var fa = {
    enqueueSetState: function(a, o, f) {
      a = a._reactInternals;
      var p = ai(), y = Qs(p);
      y.payload = o, f != null && (y.callback = f), o = wr(a, y, p), o !== null && (da(o, a, p), ko(o, a, p));
    },
    enqueueReplaceState: function(a, o, f) {
      a = a._reactInternals;
      var p = ai(), y = Qs(p);
      y.tag = 1, y.payload = o, f != null && (y.callback = f), o = wr(a, y, p), o !== null && (da(o, a, p), ko(o, a, p));
    },
    enqueueForceUpdate: function(a, o) {
      a = a._reactInternals;
      var f = ai(), p = Qs(f);
      p.tag = 2, o != null && (p.callback = o), o = wr(a, p, f), o !== null && (da(o, a, f), ko(o, a, f));
    }
  };
  function Av(a, o, f, p, y, T, L) {
    return a = a.stateNode, typeof a.shouldComponentUpdate == "function" ? a.shouldComponentUpdate(p, T, L) : o.prototype && o.prototype.isPureReactComponent ? !Rs(f, p) || !Rs(y, T) : !0;
  }
  function Rv(a, o, f, p) {
    a = o.state, typeof o.componentWillReceiveProps == "function" && o.componentWillReceiveProps(f, p), typeof o.UNSAFE_componentWillReceiveProps == "function" && o.UNSAFE_componentWillReceiveProps(f, p), o.state !== a && fa.enqueueReplaceState(o, o.state, null);
  }
  function Js(a, o) {
    var f = o;
    if ("ref" in o) {
      f = {};
      for (var p in o)
        p !== "ref" && (f[p] = o[p]);
    }
    if (a = a.defaultProps) {
      f === o && (f = S({}, f));
      for (var y in a)
        f[y] === void 0 && (f[y] = a[y]);
    }
    return f;
  }
  var jo = typeof reportError == "function" ? reportError : function(a) {
    if (typeof window == "object" && typeof window.ErrorEvent == "function") {
      var o = new window.ErrorEvent("error", {
        bubbles: !0,
        cancelable: !0,
        message: typeof a == "object" && a !== null && typeof a.message == "string" ? String(a.message) : String(a),
        error: a
      });
      if (!window.dispatchEvent(o)) return;
    } else if (typeof process == "object" && typeof process.emit == "function") {
      process.emit("uncaughtException", a);
      return;
    }
    console.error(a);
  };
  function yu(a) {
    jo(a);
  }
  function Yf(a) {
    console.error(a);
  }
  function Cv(a) {
    jo(a);
  }
  function kf(a, o) {
    try {
      var f = a.onUncaughtError;
      f(o.value, { componentStack: o.stack });
    } catch (p) {
      setTimeout(function() {
        throw p;
      });
    }
  }
  function hs(a, o, f) {
    try {
      var p = a.onCaughtError;
      p(f.value, {
        componentStack: f.stack,
        errorBoundary: o.tag === 1 ? o.stateNode : null
      });
    } catch (y) {
      setTimeout(function() {
        throw y;
      });
    }
  }
  function Wf(a, o, f) {
    return f = Qs(f), f.tag = 3, f.payload = { element: null }, f.callback = function() {
      kf(a, o);
    }, f;
  }
  function wv(a) {
    return a = Qs(a), a.tag = 3, a;
  }
  function Zf(a, o, f, p) {
    var y = f.type.getDerivedStateFromError;
    if (typeof y == "function") {
      var T = p.value;
      a.payload = function() {
        return y(T);
      }, a.callback = function() {
        hs(o, f, p);
      };
    }
    var L = f.stateNode;
    L !== null && typeof L.componentDidCatch == "function" && (a.callback = function() {
      hs(o, f, p), typeof y != "function" && (Wa === null ? Wa = /* @__PURE__ */ new Set([this]) : Wa.add(this));
      var G = p.stack;
      this.componentDidCatch(p.value, {
        componentStack: G !== null ? G : ""
      });
    });
  }
  function wy(a, o, f, p, y) {
    if (f.flags |= 32768, p !== null && typeof p == "object" && typeof p.then == "function") {
      if (o = f.alternate, o !== null && ls(
        o,
        f,
        y,
        !0
      ), f = On.current, f !== null) {
        switch (f.tag) {
          case 13:
            return Us === null ? l() : f.alternate === null && Wn === 0 && (Wn = 3), f.flags &= -257, f.flags |= 65536, f.lanes = y, p === uu ? f.flags |= 16384 : (o = f.updateQueue, o === null ? f.updateQueue = /* @__PURE__ */ new Set([p]) : o.add(p), Ee(a, p, y)), !1;
          case 22:
            return f.flags |= 65536, p === uu ? f.flags |= 16384 : (o = f.updateQueue, o === null ? (o = {
              transitions: null,
              markerInstances: null,
              retryQueue: /* @__PURE__ */ new Set([p])
            }, f.updateQueue = o) : (f = o.retryQueue, f === null ? o.retryQueue = /* @__PURE__ */ new Set([p]) : f.add(p)), Ee(a, p, y)), !1;
        }
        throw Error(i(435, f.tag));
      }
      return Ee(a, p, y), l(), !1;
    }
    if (yn)
      return o = On.current, o !== null ? ((o.flags & 65536) === 0 && (o.flags |= 256), o.flags |= 65536, o.lanes = y, p !== Af && (a = Error(i(422), { cause: p }), Yo(Xi(a, f)))) : (p !== Af && (o = Error(i(423), {
        cause: p
      }), Yo(
        Xi(o, f)
      )), a = a.current.alternate, a.flags |= 65536, y &= -y, a.lanes |= y, p = Xi(p, f), y = Wf(
        a.stateNode,
        p,
        y
      ), ql(a, y), Wn !== 4 && (Wn = 2)), !1;
    var T = Error(i(520), { cause: p });
    if (T = Xi(T, f), Tn === null ? Tn = [T] : Tn.push(T), Wn !== 4 && (Wn = 2), o === null) return !0;
    p = Xi(p, f), f = o;
    do {
      switch (f.tag) {
        case 3:
          return f.flags |= 65536, a = y & -y, f.lanes |= a, a = Wf(f.stateNode, p, a), ql(f, a), !1;
        case 1:
          if (o = f.type, T = f.stateNode, (f.flags & 128) === 0 && (typeof o.getDerivedStateFromError == "function" || T !== null && typeof T.componentDidCatch == "function" && (Wa === null || !Wa.has(T))))
            return f.flags |= 65536, y &= -y, f.lanes |= y, y = wv(y), Zf(
              y,
              a,
              f,
              p
            ), ql(f, y), !1;
      }
      f = f.return;
    } while (f !== null);
    return !1;
  }
  var Dv = Error(i(461)), Ni = !1;
  function ci(a, o, f, p) {
    o.child = a === null ? Ev(o, null, f, p) : Zo(
      o,
      a.child,
      f,
      p
    );
  }
  function Ma(a, o, f, p, y) {
    f = f.render;
    var T = o.ref;
    if ("ref" in p) {
      var L = {};
      for (var G in p)
        G !== "ref" && (L[G] = p[G]);
    } else L = p;
    return js(o), p = Ur(
      a,
      o,
      f,
      L,
      T,
      y
    ), G = Pd(), a !== null && !Ni ? (zf(a, o, y), Oi(a, o, y)) : (yn && G && Ad(o), o.flags |= 1, ci(a, o, p, y), o.child);
  }
  function ba(a, o, f, p, y) {
    if (a === null) {
      var T = f.type;
      return typeof T == "function" && !eu(T) && T.defaultProps === void 0 && f.compare === null ? (o.tag = 15, o.type = T, $d(
        a,
        o,
        T,
        p,
        y
      )) : (a = Ui(
        f.type,
        null,
        p,
        o,
        o.mode,
        y
      ), a.ref = o.ref, a.return = o, o.child = a);
    }
    if (T = a.child, !_u(a, y)) {
      var L = T.memoizedProps;
      if (f = f.compare, f = f !== null ? f : Rs, f(L, p) && a.ref === o.ref)
        return Oi(a, o, y);
    }
    return o.flags |= 1, a = ri(T, p), a.ref = o.ref, a.return = o, o.child = a;
  }
  function $d(a, o, f, p, y) {
    if (a !== null) {
      var T = a.memoizedProps;
      if (Rs(T, p) && a.ref === o.ref)
        if (Ni = !1, o.pendingProps = p = T, _u(a, y))
          (a.flags & 131072) !== 0 && (Ni = !0);
        else
          return o.lanes = a.lanes, Oi(a, o, y);
    }
    return Jl(
      a,
      o,
      f,
      p,
      y
    );
  }
  function Qo(a, o, f) {
    var p = o.pendingProps, y = p.children, T = a !== null ? a.memoizedState : null;
    if (p.mode === "hidden") {
      if ((o.flags & 128) !== 0) {
        if (p = T !== null ? T.baseLanes | f : f, a !== null) {
          for (y = o.child = a.child, T = 0; y !== null; )
            T = T | y.lanes | y.childLanes, y = y.sibling;
          o.childLanes = T & ~p;
        } else o.childLanes = 0, o.child = null;
        return Ko(
          a,
          o,
          p,
          f
        );
      }
      if ((f & 536870912) !== 0)
        o.memoizedState = { baseLanes: 0, cachePool: null }, a !== null && lu(
          o,
          T !== null ? T.cachePool : null
        ), T !== null ? km(o, T) : Bd(), Tv(o);
      else
        return o.lanes = o.childLanes = 536870912, Ko(
          a,
          o,
          T !== null ? T.baseLanes | f : f,
          f
        );
    } else
      T !== null ? (lu(o, T.cachePool), km(o, T), yo(), o.memoizedState = null) : (a !== null && lu(o, null), Bd(), yo());
    return ci(a, o, y, f), o.child;
  }
  function Ko(a, o, f, p) {
    var y = ho();
    return y = y === null ? null : { parent: gi._currentValue, pool: y }, o.memoizedState = {
      baseLanes: f,
      cachePool: y
    }, a !== null && lu(o, null), Bd(), Tv(o), a !== null && ls(a, o, p, !0), null;
  }
  function Jo(a, o) {
    var f = o.ref;
    if (f === null)
      a !== null && a.ref !== null && (o.flags |= 4194816);
    else {
      if (typeof f != "function" && typeof f != "object")
        throw Error(i(284));
      (a === null || a.ref !== f) && (o.flags |= 4194816);
    }
  }
  function Jl(a, o, f, p, y) {
    return js(o), f = Ur(
      a,
      o,
      f,
      p,
      void 0,
      y
    ), p = Pd(), a !== null && !Ni ? (zf(a, o, y), Oi(a, o, y)) : (yn && p && Ad(o), o.flags |= 1, ci(a, o, f, y), o.child);
  }
  function Va(a, o, f, p, y, T) {
    return js(o), o.updateQueue = null, f = jm(
      o,
      p,
      f,
      y
    ), Zm(a), p = Pd(), a !== null && !Ni ? (zf(a, o, T), Oi(a, o, T)) : (yn && p && Ad(o), o.flags |= 1, ci(a, o, f, T), o.child);
  }
  function Ga(a, o, f, p, y) {
    if (js(o), o.stateNode === null) {
      var T = ro, L = f.contextType;
      typeof L == "object" && L !== null && (T = ti(L)), T = new f(p, T), o.memoizedState = T.state !== null && T.state !== void 0 ? T.state : null, T.updater = fa, o.stateNode = T, T._reactInternals = o, T = o.stateNode, T.props = p, T.state = o.memoizedState, T.refs = {}, Ld(o), L = f.contextType, T.context = typeof L == "object" && L !== null ? ti(L) : ro, T.state = o.memoizedState, L = f.getDerivedStateFromProps, typeof L == "function" && (_o(
        o,
        f,
        L,
        p
      ), T.state = o.memoizedState), typeof f.getDerivedStateFromProps == "function" || typeof T.getSnapshotBeforeUpdate == "function" || typeof T.UNSAFE_componentWillMount != "function" && typeof T.componentWillMount != "function" || (L = T.state, typeof T.componentWillMount == "function" && T.componentWillMount(), typeof T.UNSAFE_componentWillMount == "function" && T.UNSAFE_componentWillMount(), L !== T.state && fa.enqueueReplaceState(T, T.state, null), Yl(o, p, T, y), fu(), T.state = o.memoizedState), typeof T.componentDidMount == "function" && (o.flags |= 4194308), p = !0;
    } else if (a === null) {
      T = o.stateNode;
      var G = o.memoizedProps, J = Js(f, G);
      T.props = J;
      var ye = T.context, Le = f.contextType;
      L = ro, typeof Le == "object" && Le !== null && (L = ti(Le));
      var Ie = f.getDerivedStateFromProps;
      Le = typeof Ie == "function" || typeof T.getSnapshotBeforeUpdate == "function", G = o.pendingProps !== G, Le || typeof T.UNSAFE_componentWillReceiveProps != "function" && typeof T.componentWillReceiveProps != "function" || (G || ye !== L) && Rv(
        o,
        T,
        p,
        L
      ), Cr = !1;
      var Se = o.memoizedState;
      T.state = Se, Yl(o, p, T, y), fu(), ye = o.memoizedState, G || Se !== ye || Cr ? (typeof Ie == "function" && (_o(
        o,
        f,
        Ie,
        p
      ), ye = o.memoizedState), (J = Cr || Av(
        o,
        f,
        J,
        p,
        Se,
        ye,
        L
      )) ? (Le || typeof T.UNSAFE_componentWillMount != "function" && typeof T.componentWillMount != "function" || (typeof T.componentWillMount == "function" && T.componentWillMount(), typeof T.UNSAFE_componentWillMount == "function" && T.UNSAFE_componentWillMount()), typeof T.componentDidMount == "function" && (o.flags |= 4194308)) : (typeof T.componentDidMount == "function" && (o.flags |= 4194308), o.memoizedProps = p, o.memoizedState = ye), T.props = p, T.state = ye, T.context = L, p = J) : (typeof T.componentDidMount == "function" && (o.flags |= 4194308), p = !1);
    } else {
      T = o.stateNode, It(a, o), L = o.memoizedProps, Le = Js(f, L), T.props = Le, Ie = o.pendingProps, Se = T.context, ye = f.contextType, J = ro, typeof ye == "object" && ye !== null && (J = ti(ye)), G = f.getDerivedStateFromProps, (ye = typeof G == "function" || typeof T.getSnapshotBeforeUpdate == "function") || typeof T.UNSAFE_componentWillReceiveProps != "function" && typeof T.componentWillReceiveProps != "function" || (L !== Ie || Se !== J) && Rv(
        o,
        T,
        p,
        J
      ), Cr = !1, Se = o.memoizedState, T.state = Se, Yl(o, p, T, y), fu();
      var be = o.memoizedState;
      L !== Ie || Se !== be || Cr || a !== null && a.dependencies !== null && au(a.dependencies) ? (typeof G == "function" && (_o(
        o,
        f,
        G,
        p
      ), be = o.memoizedState), (Le = Cr || Av(
        o,
        f,
        Le,
        p,
        Se,
        be,
        J
      ) || a !== null && a.dependencies !== null && au(a.dependencies)) ? (ye || typeof T.UNSAFE_componentWillUpdate != "function" && typeof T.componentWillUpdate != "function" || (typeof T.componentWillUpdate == "function" && T.componentWillUpdate(p, be, J), typeof T.UNSAFE_componentWillUpdate == "function" && T.UNSAFE_componentWillUpdate(
        p,
        be,
        J
      )), typeof T.componentDidUpdate == "function" && (o.flags |= 4), typeof T.getSnapshotBeforeUpdate == "function" && (o.flags |= 1024)) : (typeof T.componentDidUpdate != "function" || L === a.memoizedProps && Se === a.memoizedState || (o.flags |= 4), typeof T.getSnapshotBeforeUpdate != "function" || L === a.memoizedProps && Se === a.memoizedState || (o.flags |= 1024), o.memoizedProps = p, o.memoizedState = be), T.props = p, T.state = be, T.context = J, p = Le) : (typeof T.componentDidUpdate != "function" || L === a.memoizedProps && Se === a.memoizedState || (o.flags |= 4), typeof T.getSnapshotBeforeUpdate != "function" || L === a.memoizedProps && Se === a.memoizedState || (o.flags |= 1024), p = !1);
    }
    return T = p, Jo(a, o), p = (o.flags & 128) !== 0, T || p ? (T = o.stateNode, f = p && typeof f.getDerivedStateFromError != "function" ? null : T.render(), o.flags |= 1, a !== null && p ? (o.child = Zo(
      o,
      a.child,
      null,
      y
    ), o.child = Zo(
      o,
      null,
      f,
      y
    )) : ci(a, o, f, y), o.memoizedState = T.state, a = o.child) : a = Oi(
      a,
      o,
      y
    ), a;
  }
  function So(a, o, f, p) {
    return Hl(), o.flags |= 256, ci(a, o, f, p), o.child;
  }
  var Ns = {
    dehydrated: null,
    treeContext: null,
    retryLane: 0,
    hydrationErrors: null
  };
  function Os(a) {
    return { baseLanes: a, cachePool: Df() };
  }
  function Ei(a, o, f) {
    return a = a !== null ? a.childLanes & ~f : 0, o && (a |= gs), a;
  }
  function $l(a, o, f) {
    var p = o.pendingProps, y = !1, T = (o.flags & 128) !== 0, L;
    if ((L = T) || (L = a !== null && a.memoizedState === null ? !1 : (li.current & 2) !== 0), L && (y = !0, o.flags &= -129), L = (o.flags & 32) !== 0, o.flags &= -33, a === null) {
      if (yn) {
        if (y ? go(o) : yo(), yn) {
          var G = Jn, J;
          if (J = G) {
            e: {
              for (J = G, G = Pa; J.nodeType !== 8; ) {
                if (!G) {
                  G = null;
                  break e;
                }
                if (J = Hr(
                  J.nextSibling
                ), J === null) {
                  G = null;
                  break e;
                }
              }
              G = J;
            }
            G !== null ? (o.memoizedState = {
              dehydrated: G,
              treeContext: lo !== null ? { id: Ws, overflow: Zs } : null,
              retryLane: 536870912,
              hydrationErrors: null
            }, J = Sa(
              18,
              null,
              null,
              0
            ), J.stateNode = G, J.return = o, o.child = J, la = o, Jn = null, J = !0) : J = !1;
          }
          J || co(o);
        }
        if (G = o.memoizedState, G !== null && (G = G.dehydrated, G !== null))
          return Xy(G) ? o.lanes = 32 : o.lanes = 536870912, null;
        Ks(o);
      }
      return G = p.children, p = p.fallback, y ? (yo(), y = o.mode, G = $o(
        { mode: "hidden", children: G },
        y
      ), p = oo(
        p,
        y,
        f,
        null
      ), G.return = o, p.return = o, G.sibling = p, o.child = G, y = o.child, y.memoizedState = Os(f), y.childLanes = Ei(
        a,
        L,
        f
      ), o.memoizedState = Ns, p) : (go(o), $s(o, G));
    }
    if (J = a.memoizedState, J !== null && (G = J.dehydrated, G !== null)) {
      if (T)
        o.flags & 256 ? (go(o), o.flags &= -257, o = ki(
          a,
          o,
          f
        )) : o.memoizedState !== null ? (yo(), o.child = a.child, o.flags |= 128, o = null) : (yo(), y = p.fallback, G = o.mode, p = $o(
          { mode: "visible", children: p.children },
          G
        ), y = oo(
          y,
          G,
          f,
          null
        ), y.flags |= 2, p.return = o, y.return = o, p.sibling = y, o.child = p, Zo(
          o,
          a.child,
          null,
          f
        ), p = o.child, p.memoizedState = Os(f), p.childLanes = Ei(
          a,
          L,
          f
        ), o.memoizedState = Ns, o = y);
      else if (go(o), Xy(G)) {
        if (L = G.nextSibling && G.nextSibling.dataset, L) var ye = L.dgst;
        L = ye, p = Error(i(419)), p.stack = "", p.digest = L, Yo({ value: p, source: null, stack: null }), o = ki(
          a,
          o,
          f
        );
      } else if (Ni || ls(a, o, f, !1), L = (f & a.childLanes) !== 0, Ni || L) {
        if (L = Xt, L !== null && (p = f & -f, p = (p & 42) !== 0 ? 1 : Ut(p), p = (p & (L.suspendedLanes | f)) !== 0 ? 0 : p, p !== 0 && p !== J.retryLane))
          throw J.retryLane = p, Er(a, p), da(L, a, p), Dv;
        G.data === "$?" || l(), o = ki(
          a,
          o,
          f
        );
      } else
        G.data === "$?" ? (o.flags |= 192, o.child = a.child, o = null) : (a = J.treeContext, Jn = Hr(
          G.nextSibling
        ), la = o, yn = !0, os = null, Pa = !1, a !== null && (qi[Ba++] = Ws, qi[Ba++] = Zs, qi[Ba++] = lo, Ws = a.id, Zs = a.overflow, lo = o), o = $s(
          o,
          p.children
        ), o.flags |= 4096);
      return o;
    }
    return y ? (yo(), y = p.fallback, G = o.mode, J = a.child, ye = J.sibling, p = ri(J, {
      mode: "hidden",
      children: p.children
    }), p.subtreeFlags = J.subtreeFlags & 65011712, ye !== null ? y = ri(ye, y) : (y = oo(
      y,
      G,
      f,
      null
    ), y.flags |= 2), y.return = o, p.return = o, p.sibling = y, o.child = p, p = y, y = o.child, G = a.child.memoizedState, G === null ? G = Os(f) : (J = G.cachePool, J !== null ? (ye = gi._currentValue, J = J.parent !== ye ? { parent: ye, pool: ye } : J) : J = Df(), G = {
      baseLanes: G.baseLanes | f,
      cachePool: J
    }), y.memoizedState = G, y.childLanes = Ei(
      a,
      L,
      f
    ), o.memoizedState = Ns, p) : (go(o), f = a.child, a = f.sibling, f = ri(f, {
      mode: "visible",
      children: p.children
    }), f.return = o, f.sibling = null, a !== null && (L = o.deletions, L === null ? (o.deletions = [a], o.flags |= 16) : L.push(a)), o.child = f, o.memoizedState = null, f);
  }
  function $s(a, o) {
    return o = $o(
      { mode: "visible", children: o },
      a.mode
    ), o.return = a, a.child = o;
  }
  function $o(a, o) {
    return a = Sa(22, a, null, o), a.lanes = 0, a.stateNode = {
      _visibility: 1,
      _pendingMarkers: null,
      _retryCache: null,
      _transitions: null
    }, a;
  }
  function ki(a, o, f) {
    return Zo(o, a.child, null, f), a = $s(
      o,
      o.pendingProps.children
    ), a.flags |= 2, o.memoizedState = null, a;
  }
  function Wi(a, o, f) {
    a.lanes |= o;
    var p = a.alternate;
    p !== null && (p.lanes |= o), Dd(a.return, o, f);
  }
  function fn(a, o, f, p, y) {
    var T = a.memoizedState;
    T === null ? a.memoizedState = {
      isBackwards: o,
      rendering: null,
      renderingStartTime: 0,
      last: p,
      tail: f,
      tailMode: y
    } : (T.isBackwards = o, T.rendering = null, T.renderingStartTime = 0, T.last = p, T.tail = f, T.tailMode = y);
  }
  function ds(a, o, f) {
    var p = o.pendingProps, y = p.revealOrder, T = p.tail;
    if (ci(a, o, p.children, f), p = li.current, (p & 2) !== 0)
      p = p & 1 | 2, o.flags |= 128;
    else {
      if (a !== null && (a.flags & 128) !== 0)
        e: for (a = o.child; a !== null; ) {
          if (a.tag === 13)
            a.memoizedState !== null && Wi(a, f, o);
          else if (a.tag === 19)
            Wi(a, f, o);
          else if (a.child !== null) {
            a.child.return = a, a = a.child;
            continue;
          }
          if (a === o) break e;
          for (; a.sibling === null; ) {
            if (a.return === null || a.return === o)
              break e;
            a = a.return;
          }
          a.sibling.return = a.return, a = a.sibling;
        }
      p &= 1;
    }
    switch (Re(li, p), y) {
      case "forwards":
        for (f = o.child, y = null; f !== null; )
          a = f.alternate, a !== null && Or(a) === null && (y = f), f = f.sibling;
        f = y, f === null ? (y = o.child, o.child = null) : (y = f.sibling, f.sibling = null), fn(
          o,
          !1,
          y,
          f,
          T
        );
        break;
      case "backwards":
        for (f = null, y = o.child, o.child = null; y !== null; ) {
          if (a = y.alternate, a !== null && Or(a) === null) {
            o.child = y;
            break;
          }
          a = y.sibling, y.sibling = f, f = y, y = a;
        }
        fn(
          o,
          !0,
          f,
          null,
          T
        );
        break;
      case "together":
        fn(o, !1, null, null, void 0);
        break;
      default:
        o.memoizedState = null;
    }
    return o.child;
  }
  function Oi(a, o, f) {
    if (a !== null && (o.dependencies = a.dependencies), Ps |= o.lanes, (f & o.childLanes) === 0)
      if (a !== null) {
        if (ls(
          a,
          o,
          f,
          !1
        ), (f & o.childLanes) === 0)
          return null;
      } else return null;
    if (a !== null && o.child !== a.child)
      throw Error(i(153));
    if (o.child !== null) {
      for (a = o.child, f = ri(a, a.pendingProps), o.child = f, f.return = o; a.sibling !== null; )
        a = a.sibling, f = f.sibling = ri(a, a.pendingProps), f.return = o;
      f.sibling = null;
    }
    return o.child;
  }
  function _u(a, o) {
    return (a.lanes & o) !== 0 ? !0 : (a = a.dependencies, !!(a !== null && au(a)));
  }
  function ps(a, o, f) {
    switch (o.tag) {
      case 3:
        $e(o, o.stateNode.containerInfo), fo(o, gi, a.memoizedState.cache), Hl();
        break;
      case 27:
      case 5:
        Tt(o);
        break;
      case 4:
        $e(o, o.stateNode.containerInfo);
        break;
      case 10:
        fo(
          o,
          o.type,
          o.memoizedProps.value
        );
        break;
      case 13:
        var p = o.memoizedState;
        if (p !== null)
          return p.dehydrated !== null ? (go(o), o.flags |= 128, null) : (f & o.child.childLanes) !== 0 ? $l(a, o, f) : (go(o), a = Oi(
            a,
            o,
            f
          ), a !== null ? a.sibling : null);
        go(o);
        break;
      case 19:
        var y = (a.flags & 128) !== 0;
        if (p = (f & o.childLanes) !== 0, p || (ls(
          a,
          o,
          f,
          !1
        ), p = (f & o.childLanes) !== 0), y) {
          if (p)
            return ds(
              a,
              o,
              f
            );
          o.flags |= 128;
        }
        if (y = o.memoizedState, y !== null && (y.rendering = null, y.tail = null, y.lastEffect = null), Re(li, li.current), p) break;
        return null;
      case 22:
      case 23:
        return o.lanes = 0, Qo(a, o, f);
      case 24:
        fo(o, gi, a.memoizedState.cache);
    }
    return Oi(a, o, f);
  }
  function el(a, o, f) {
    if (a !== null)
      if (a.memoizedProps !== o.pendingProps)
        Ni = !0;
      else {
        if (!_u(a, f) && (o.flags & 128) === 0)
          return Ni = !1, ps(
            a,
            o,
            f
          );
        Ni = (a.flags & 131072) !== 0;
      }
    else
      Ni = !1, yn && (o.flags & 1048576) !== 0 && Tf(o, Il, o.index);
    switch (o.lanes = 0, o.tag) {
      case 16:
        e: {
          a = o.pendingProps;
          var p = o.elementType, y = p._init;
          if (p = y(p._payload), o.type = p, typeof p == "function")
            eu(p) ? (a = Js(p, a), o.tag = 1, o = Ga(
              null,
              o,
              p,
              a,
              f
            )) : (o.tag = 0, o = Jl(
              null,
              o,
              p,
              a,
              f
            ));
          else {
            if (p != null) {
              if (y = p.$$typeof, y === O) {
                o.tag = 11, o = Ma(
                  null,
                  o,
                  p,
                  a,
                  f
                );
                break e;
              } else if (y === Y) {
                o.tag = 14, o = ba(
                  null,
                  o,
                  p,
                  a,
                  f
                );
                break e;
              }
            }
            throw o = oe(p) || p, Error(i(306, o, ""));
          }
        }
        return o;
      case 0:
        return Jl(
          a,
          o,
          o.type,
          o.pendingProps,
          f
        );
      case 1:
        return p = o.type, y = Js(
          p,
          o.pendingProps
        ), Ga(
          a,
          o,
          p,
          y,
          f
        );
      case 3:
        e: {
          if ($e(
            o,
            o.stateNode.containerInfo
          ), a === null) throw Error(i(387));
          p = o.pendingProps;
          var T = o.memoizedState;
          y = T.element, It(a, o), Yl(o, p, null, f);
          var L = o.memoizedState;
          if (p = L.cache, fo(o, gi, p), p !== T.cache && iu(
            o,
            [gi],
            f,
            !0
          ), fu(), p = L.element, T.isDehydrated)
            if (T = {
              element: p,
              isDehydrated: !1,
              cache: L.cache
            }, o.updateQueue.baseState = T, o.memoizedState = T, o.flags & 256) {
              o = So(
                a,
                o,
                p,
                f
              );
              break e;
            } else if (p !== y) {
              y = Xi(
                Error(i(424)),
                o
              ), Yo(y), o = So(
                a,
                o,
                p,
                f
              );
              break e;
            } else {
              switch (a = o.stateNode.containerInfo, a.nodeType) {
                case 9:
                  a = a.body;
                  break;
                default:
                  a = a.nodeName === "HTML" ? a.ownerDocument.body : a;
              }
              for (Jn = Hr(a.firstChild), la = o, yn = !0, os = null, Pa = !0, f = Ev(
                o,
                null,
                p,
                f
              ), o.child = f; f; )
                f.flags = f.flags & -3 | 4096, f = f.sibling;
            }
          else {
            if (Hl(), p === y) {
              o = Oi(
                a,
                o,
                f
              );
              break e;
            }
            ci(
              a,
              o,
              p,
              f
            );
          }
          o = o.child;
        }
        return o;
      case 26:
        return Jo(a, o), a === null ? (f = Qx(
          o.type,
          null,
          o.pendingProps,
          null
        )) ? o.memoizedState = f : yn || (f = o.type, a = o.pendingProps, p = Bv(
          we.current
        ).createElement(f), p[mi] = o, p[jn] = a, pa(p, f, a), vi(p), o.stateNode = p) : o.memoizedState = Qx(
          o.type,
          a.memoizedProps,
          o.pendingProps,
          a.memoizedState
        ), null;
      case 27:
        return Tt(o), a === null && yn && (p = o.stateNode = Wx(
          o.type,
          o.pendingProps,
          we.current
        ), la = o, Pa = !0, y = Jn, cc(o.type) ? (qy = y, Jn = Hr(
          p.firstChild
        )) : Jn = y), ci(
          a,
          o,
          o.pendingProps.children,
          f
        ), Jo(a, o), a === null && (o.flags |= 4194304), o.child;
      case 5:
        return a === null && yn && ((y = p = Jn) && (p = gA(
          p,
          o.type,
          o.pendingProps,
          Pa
        ), p !== null ? (o.stateNode = p, la = o, Jn = Hr(
          p.firstChild
        ), Pa = !1, y = !0) : y = !1), y || co(o)), Tt(o), y = o.type, T = o.pendingProps, L = a !== null ? a.memoizedProps : null, p = T.children, Vy(y, T) ? p = null : L !== null && Vy(y, L) && (o.flags |= 32), o.memoizedState !== null && (y = Ur(
          a,
          o,
          by,
          null,
          null,
          f
        ), up._currentValue = y), Jo(a, o), ci(a, o, p, f), o.child;
      case 6:
        return a === null && yn && ((a = f = Jn) && (f = yA(
          f,
          o.pendingProps,
          Pa
        ), f !== null ? (o.stateNode = f, la = o, Jn = null, a = !0) : a = !1), a || co(o)), null;
      case 13:
        return $l(a, o, f);
      case 4:
        return $e(
          o,
          o.stateNode.containerInfo
        ), p = o.pendingProps, a === null ? o.child = Zo(
          o,
          null,
          p,
          f
        ) : ci(
          a,
          o,
          p,
          f
        ), o.child;
      case 11:
        return Ma(
          a,
          o,
          o.type,
          o.pendingProps,
          f
        );
      case 7:
        return ci(
          a,
          o,
          o.pendingProps,
          f
        ), o.child;
      case 8:
        return ci(
          a,
          o,
          o.pendingProps.children,
          f
        ), o.child;
      case 12:
        return ci(
          a,
          o,
          o.pendingProps.children,
          f
        ), o.child;
      case 10:
        return p = o.pendingProps, fo(o, o.type, p.value), ci(
          a,
          o,
          p.children,
          f
        ), o.child;
      case 9:
        return y = o.type._context, p = o.pendingProps.children, js(o), y = ti(y), p = p(y), o.flags |= 1, ci(a, o, p, f), o.child;
      case 14:
        return ba(
          a,
          o,
          o.type,
          o.pendingProps,
          f
        );
      case 15:
        return $d(
          a,
          o,
          o.type,
          o.pendingProps,
          f
        );
      case 19:
        return ds(a, o, f);
      case 31:
        return p = o.pendingProps, f = o.mode, p = {
          mode: p.mode,
          children: p.children
        }, a === null ? (f = $o(
          p,
          f
        ), f.ref = o.ref, o.child = f, f.return = o, o = f) : (f = ri(a.child, p), f.ref = o.ref, o.child = f, f.return = o, o = f), o;
      case 22:
        return Qo(a, o, f);
      case 24:
        return js(o), p = ti(gi), a === null ? (y = ho(), y === null && (y = Xt, T = Cf(), y.pooledCache = T, T.refCount++, T !== null && (y.pooledCacheLanes |= f), y = T), o.memoizedState = {
          parent: p,
          cache: y
        }, Ld(o), fo(o, gi, y)) : ((a.lanes & f) !== 0 && (It(a, o), Yl(o, null, null, f), fu()), y = a.memoizedState, T = o.memoizedState, y.parent !== p ? (y = { parent: p, cache: p }, o.memoizedState = y, o.lanes === 0 && (o.memoizedState = o.updateQueue.baseState = y), fo(o, gi, p)) : (p = T.cache, fo(o, gi, p), p !== y.cache && iu(
          o,
          [gi],
          f,
          !0
        ))), ci(
          a,
          o,
          o.pendingProps.children,
          f
        ), o.child;
      case 29:
        throw o.pendingProps;
    }
    throw Error(i(156, o.tag));
  }
  function Ls(a) {
    a.flags |= 4;
  }
  function Su(a, o) {
    if (o.type !== "stylesheet" || (o.state.loading & 4) !== 0)
      a.flags &= -16777217;
    else if (a.flags |= 16777216, !t1(o)) {
      if (o = On.current, o !== null && ((Rt & 4194048) === Rt ? Us !== null : (Rt & 62914560) !== Rt && (Rt & 536870912) === 0 || o !== Us))
        throw us = uu, Nd;
      a.flags |= 8192;
    }
  }
  function Lr(a, o) {
    o !== null && (a.flags |= 4), a.flags & 16384 && (o = a.tag !== 22 ? ke() : 536870912, a.lanes |= o, pn |= o);
  }
  function tl(a, o) {
    if (!yn)
      switch (a.tailMode) {
        case "hidden":
          o = a.tail;
          for (var f = null; o !== null; )
            o.alternate !== null && (f = o), o = o.sibling;
          f === null ? a.tail = null : f.sibling = null;
          break;
        case "collapsed":
          f = a.tail;
          for (var p = null; f !== null; )
            f.alternate !== null && (p = f), f = f.sibling;
          p === null ? o || a.tail === null ? a.tail = null : a.tail.sibling = null : p.sibling = null;
      }
  }
  function Hn(a) {
    var o = a.alternate !== null && a.alternate.child === a.child, f = 0, p = 0;
    if (o)
      for (var y = a.child; y !== null; )
        f |= y.lanes | y.childLanes, p |= y.subtreeFlags & 65011712, p |= y.flags & 65011712, y.return = a, y = y.sibling;
    else
      for (y = a.child; y !== null; )
        f |= y.lanes | y.childLanes, p |= y.subtreeFlags, p |= y.flags, y.return = a, y = y.sibling;
    return a.subtreeFlags |= p, a.childLanes = f, o;
  }
  function ep(a, o, f) {
    var p = o.pendingProps;
    switch (Rd(o), o.tag) {
      case 31:
      case 16:
      case 15:
      case 0:
      case 11:
      case 7:
      case 8:
      case 12:
      case 9:
      case 14:
        return Hn(o), null;
      case 1:
        return Hn(o), null;
      case 3:
        return f = o.stateNode, p = null, a !== null && (p = a.memoizedState.cache), o.memoizedState.cache !== p && (o.flags |= 2048), Rr(gi), ut(), f.pendingContext && (f.context = f.pendingContext, f.pendingContext = null), (a === null || a.child === null) && (Cs(o) ? Ls(o) : a === null || a.memoizedState.isDehydrated && (o.flags & 256) === 0 || (o.flags |= 1024, bn())), Hn(o), null;
      case 26:
        return f = o.memoizedState, a === null ? (Ls(o), f !== null ? (Hn(o), Su(o, f)) : (Hn(o), o.flags &= -16777217)) : f ? f !== a.memoizedState ? (Ls(o), Hn(o), Su(o, f)) : (Hn(o), o.flags &= -16777217) : (a.memoizedProps !== p && Ls(o), Hn(o), o.flags &= -16777217), null;
      case 27:
        gn(o), f = we.current;
        var y = o.type;
        if (a !== null && o.stateNode != null)
          a.memoizedProps !== p && Ls(o);
        else {
          if (!p) {
            if (o.stateNode === null)
              throw Error(i(166));
            return Hn(o), null;
          }
          a = Ne.current, Cs(o) ? Fm(o) : (a = Wx(y, p, f), o.stateNode = a, Ls(o));
        }
        return Hn(o), null;
      case 5:
        if (gn(o), f = o.type, a !== null && o.stateNode != null)
          a.memoizedProps !== p && Ls(o);
        else {
          if (!p) {
            if (o.stateNode === null)
              throw Error(i(166));
            return Hn(o), null;
          }
          if (a = Ne.current, Cs(o))
            Fm(o);
          else {
            switch (y = Bv(
              we.current
            ), a) {
              case 1:
                a = y.createElementNS(
                  "http://www.w3.org/2000/svg",
                  f
                );
                break;
              case 2:
                a = y.createElementNS(
                  "http://www.w3.org/1998/Math/MathML",
                  f
                );
                break;
              default:
                switch (f) {
                  case "svg":
                    a = y.createElementNS(
                      "http://www.w3.org/2000/svg",
                      f
                    );
                    break;
                  case "math":
                    a = y.createElementNS(
                      "http://www.w3.org/1998/Math/MathML",
                      f
                    );
                    break;
                  case "script":
                    a = y.createElement("div"), a.innerHTML = "<script><\/script>", a = a.removeChild(a.firstChild);
                    break;
                  case "select":
                    a = typeof p.is == "string" ? y.createElement("select", { is: p.is }) : y.createElement("select"), p.multiple ? a.multiple = !0 : p.size && (a.size = p.size);
                    break;
                  default:
                    a = typeof p.is == "string" ? y.createElement(f, { is: p.is }) : y.createElement(f);
                }
            }
            a[mi] = o, a[jn] = p;
            e: for (y = o.child; y !== null; ) {
              if (y.tag === 5 || y.tag === 6)
                a.appendChild(y.stateNode);
              else if (y.tag !== 4 && y.tag !== 27 && y.child !== null) {
                y.child.return = y, y = y.child;
                continue;
              }
              if (y === o) break e;
              for (; y.sibling === null; ) {
                if (y.return === null || y.return === o)
                  break e;
                y = y.return;
              }
              y.sibling.return = y.return, y = y.sibling;
            }
            o.stateNode = a;
            e: switch (pa(a, f, p), f) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                a = !!p.autoFocus;
                break e;
              case "img":
                a = !0;
                break e;
              default:
                a = !1;
            }
            a && Ls(o);
          }
        }
        return Hn(o), o.flags &= -16777217, null;
      case 6:
        if (a && o.stateNode != null)
          a.memoizedProps !== p && Ls(o);
        else {
          if (typeof p != "string" && o.stateNode === null)
            throw Error(i(166));
          if (a = we.current, Cs(o)) {
            if (a = o.stateNode, f = o.memoizedProps, p = null, y = la, y !== null)
              switch (y.tag) {
                case 27:
                case 5:
                  p = y.memoizedProps;
              }
            a[mi] = o, a = !!(a.nodeValue === f || p !== null && p.suppressHydrationWarning === !0 || Vx(a.nodeValue, f)), a || co(o);
          } else
            a = Bv(a).createTextNode(
              p
            ), a[mi] = o, o.stateNode = a;
        }
        return Hn(o), null;
      case 13:
        if (p = o.memoizedState, a === null || a.memoizedState !== null && a.memoizedState.dehydrated !== null) {
          if (y = Cs(o), p !== null && p.dehydrated !== null) {
            if (a === null) {
              if (!y) throw Error(i(318));
              if (y = o.memoizedState, y = y !== null ? y.dehydrated : null, !y) throw Error(i(317));
              y[mi] = o;
            } else
              Hl(), (o.flags & 128) === 0 && (o.memoizedState = null), o.flags |= 4;
            Hn(o), y = !1;
          } else
            y = bn(), a !== null && a.memoizedState !== null && (a.memoizedState.hydrationErrors = y), y = !0;
          if (!y)
            return o.flags & 256 ? (Ks(o), o) : (Ks(o), null);
        }
        if (Ks(o), (o.flags & 128) !== 0)
          return o.lanes = f, o;
        if (f = p !== null, a = a !== null && a.memoizedState !== null, f) {
          p = o.child, y = null, p.alternate !== null && p.alternate.memoizedState !== null && p.alternate.memoizedState.cachePool !== null && (y = p.alternate.memoizedState.cachePool.pool);
          var T = null;
          p.memoizedState !== null && p.memoizedState.cachePool !== null && (T = p.memoizedState.cachePool.pool), T !== y && (p.flags |= 2048);
        }
        return f !== a && f && (o.child.flags |= 8192), Lr(o, o.updateQueue), Hn(o), null;
      case 4:
        return ut(), a === null && zy(o.stateNode.containerInfo), Hn(o), null;
      case 10:
        return Rr(o.type), Hn(o), null;
      case 19:
        if (Me(li), y = o.memoizedState, y === null) return Hn(o), null;
        if (p = (o.flags & 128) !== 0, T = y.rendering, T === null)
          if (p) tl(y, !1);
          else {
            if (Wn !== 0 || a !== null && (a.flags & 128) !== 0)
              for (a = o.child; a !== null; ) {
                if (T = Or(a), T !== null) {
                  for (o.flags |= 128, tl(y, !1), a = T.updateQueue, o.updateQueue = a, Lr(o, a), o.subtreeFlags = 0, a = f, f = o.child; f !== null; )
                    Td(f, a), f = f.sibling;
                  return Re(
                    li,
                    li.current & 1 | 2
                  ), o.child;
                }
                a = a.sibling;
              }
            y.tail !== null && Ce() > ta && (o.flags |= 128, p = !0, tl(y, !1), o.lanes = 4194304);
          }
        else {
          if (!p)
            if (a = Or(T), a !== null) {
              if (o.flags |= 128, p = !0, a = a.updateQueue, o.updateQueue = a, Lr(o, a), tl(y, !0), y.tail === null && y.tailMode === "hidden" && !T.alternate && !yn)
                return Hn(o), null;
            } else
              2 * Ce() - y.renderingStartTime > ta && f !== 536870912 && (o.flags |= 128, p = !0, tl(y, !1), o.lanes = 4194304);
          y.isBackwards ? (T.sibling = o.child, o.child = T) : (a = y.last, a !== null ? a.sibling = T : o.child = T, y.last = T);
        }
        return y.tail !== null ? (o = y.tail, y.rendering = o, y.tail = o.sibling, y.renderingStartTime = Ce(), o.sibling = null, a = li.current, Re(li, p ? a & 1 | 2 : a & 1), o) : (Hn(o), null);
      case 22:
      case 23:
        return Ks(o), hu(), p = o.memoizedState !== null, a !== null ? a.memoizedState !== null !== p && (o.flags |= 8192) : p && (o.flags |= 8192), p ? (f & 536870912) !== 0 && (o.flags & 128) === 0 && (Hn(o), o.subtreeFlags & 6 && (o.flags |= 8192)) : Hn(o), f = o.updateQueue, f !== null && Lr(o, f.retryQueue), f = null, a !== null && a.memoizedState !== null && a.memoizedState.cachePool !== null && (f = a.memoizedState.cachePool.pool), p = null, o.memoizedState !== null && o.memoizedState.cachePool !== null && (p = o.memoizedState.cachePool.pool), p !== f && (o.flags |= 2048), a !== null && Me(cs), null;
      case 24:
        return f = null, a !== null && (f = a.memoizedState.cache), o.memoizedState.cache !== f && (o.flags |= 2048), Rr(gi), Hn(o), null;
      case 25:
        return null;
      case 30:
        return null;
    }
    throw Error(i(156, o.tag));
  }
  function ec(a, o) {
    switch (Rd(o), o.tag) {
      case 1:
        return a = o.flags, a & 65536 ? (o.flags = a & -65537 | 128, o) : null;
      case 3:
        return Rr(gi), ut(), a = o.flags, (a & 65536) !== 0 && (a & 128) === 0 ? (o.flags = a & -65537 | 128, o) : null;
      case 26:
      case 27:
      case 5:
        return gn(o), null;
      case 13:
        if (Ks(o), a = o.memoizedState, a !== null && a.dehydrated !== null) {
          if (o.alternate === null)
            throw Error(i(340));
          Hl();
        }
        return a = o.flags, a & 65536 ? (o.flags = a & -65537 | 128, o) : null;
      case 19:
        return Me(li), null;
      case 4:
        return ut(), null;
      case 10:
        return Rr(o.type), null;
      case 22:
      case 23:
        return Ks(o), hu(), a !== null && Me(cs), a = o.flags, a & 65536 ? (o.flags = a & -65537 | 128, o) : null;
      case 24:
        return Rr(gi), null;
      case 25:
        return null;
      default:
        return null;
    }
  }
  function tc(a, o) {
    switch (Rd(o), o.tag) {
      case 3:
        Rr(gi), ut();
        break;
      case 26:
      case 27:
      case 5:
        gn(o);
        break;
      case 4:
        ut();
        break;
      case 13:
        Ks(o);
        break;
      case 19:
        Me(li);
        break;
      case 10:
        Rr(o.type);
        break;
      case 22:
      case 23:
        Ks(o), hu(), a !== null && Me(cs);
        break;
      case 24:
        Rr(gi);
    }
  }
  function nl(a, o) {
    try {
      var f = o.updateQueue, p = f !== null ? f.lastEffect : null;
      if (p !== null) {
        var y = p.next;
        f = y;
        do {
          if ((f.tag & a) === a) {
            p = void 0;
            var T = f.create, L = f.inst;
            p = T(), L.destroy = p;
          }
          f = f.next;
        } while (f !== y);
      }
    } catch (G) {
      ne(o, o.return, G);
    }
  }
  function Fa(a, o, f) {
    try {
      var p = o.updateQueue, y = p !== null ? p.lastEffect : null;
      if (y !== null) {
        var T = y.next;
        p = T;
        do {
          if ((p.tag & a) === a) {
            var L = p.inst, G = L.destroy;
            if (G !== void 0) {
              L.destroy = void 0, y = o;
              var J = f, ye = G;
              try {
                ye();
              } catch (Le) {
                ne(
                  y,
                  J,
                  Le
                );
              }
            }
          }
          p = p.next;
        } while (p !== T);
      }
    } catch (Le) {
      ne(o, o.return, Le);
    }
  }
  function il(a) {
    var o = a.updateQueue;
    if (o !== null) {
      var f = a.stateNode;
      try {
        Ym(o, f);
      } catch (p) {
        ne(a, a.return, p);
      }
    }
  }
  function zr(a, o, f) {
    f.props = Js(
      a.type,
      a.memoizedProps
    ), f.state = a.memoizedState;
    try {
      f.componentWillUnmount();
    } catch (p) {
      ne(a, o, p);
    }
  }
  function al(a, o) {
    try {
      var f = a.ref;
      if (f !== null) {
        switch (a.tag) {
          case 26:
          case 27:
          case 5:
            var p = a.stateNode;
            break;
          case 30:
            p = a.stateNode;
            break;
          default:
            p = a.stateNode;
        }
        typeof f == "function" ? a.refCleanup = f(p) : f.current = p;
      }
    } catch (y) {
      ne(a, o, y);
    }
  }
  function er(a, o) {
    var f = a.ref, p = a.refCleanup;
    if (f !== null)
      if (typeof p == "function")
        try {
          p();
        } catch (y) {
          ne(a, o, y);
        } finally {
          a.refCleanup = null, a = a.alternate, a != null && (a.refCleanup = null);
        }
      else if (typeof f == "function")
        try {
          f(null);
        } catch (y) {
          ne(a, o, y);
        }
      else f.current = null;
  }
  function nc(a) {
    var o = a.type, f = a.memoizedProps, p = a.stateNode;
    try {
      e: switch (o) {
        case "button":
        case "input":
        case "select":
        case "textarea":
          f.autoFocus && p.focus();
          break e;
        case "img":
          f.src ? p.src = f.src : f.srcSet && (p.srcset = f.srcSet);
      }
    } catch (y) {
      ne(a, a.return, y);
    }
  }
  function xu(a, o, f) {
    try {
      var p = a.stateNode;
      hA(p, a.type, f, o), p[jn] = o;
    } catch (y) {
      ne(a, a.return, y);
    }
  }
  function Mu(a) {
    return a.tag === 5 || a.tag === 3 || a.tag === 26 || a.tag === 27 && cc(a.type) || a.tag === 4;
  }
  function xo(a) {
    e: for (; ; ) {
      for (; a.sibling === null; ) {
        if (a.return === null || Mu(a.return)) return null;
        a = a.return;
      }
      for (a.sibling.return = a.return, a = a.sibling; a.tag !== 5 && a.tag !== 6 && a.tag !== 18; ) {
        if (a.tag === 27 && cc(a.type) || a.flags & 2 || a.child === null || a.tag === 4) continue e;
        a.child.return = a, a = a.child;
      }
      if (!(a.flags & 2)) return a.stateNode;
    }
  }
  function Mo(a, o, f) {
    var p = a.tag;
    if (p === 5 || p === 6)
      a = a.stateNode, o ? (f.nodeType === 9 ? f.body : f.nodeName === "HTML" ? f.ownerDocument.body : f).insertBefore(a, o) : (o = f.nodeType === 9 ? f.body : f.nodeName === "HTML" ? f.ownerDocument.body : f, o.appendChild(a), f = f._reactRootContainer, f != null || o.onclick !== null || (o.onclick = zv));
    else if (p !== 4 && (p === 27 && cc(a.type) && (f = a.stateNode, o = null), a = a.child, a !== null))
      for (Mo(a, o, f), a = a.sibling; a !== null; )
        Mo(a, o, f), a = a.sibling;
  }
  function bo(a, o, f) {
    var p = a.tag;
    if (p === 5 || p === 6)
      a = a.stateNode, o ? f.insertBefore(a, o) : f.appendChild(a);
    else if (p !== 4 && (p === 27 && cc(a.type) && (f = a.stateNode), a = a.child, a !== null))
      for (bo(a, o, f), a = a.sibling; a !== null; )
        bo(a, o, f), a = a.sibling;
  }
  function Eo(a) {
    var o = a.stateNode, f = a.memoizedProps;
    try {
      for (var p = a.type, y = o.attributes; y.length; )
        o.removeAttributeNode(y[0]);
      pa(o, p, f), o[mi] = a, o[jn] = f;
    } catch (T) {
      ne(a, a.return, T);
    }
  }
  var tr = !1, Vn = !1, ic = !1, Xa = typeof WeakSet == "function" ? WeakSet : Set, Ln = null;
  function Ti(a, o) {
    if (a = a.containerInfo, Iy = Fv, a = yd(a), Qc(a)) {
      if ("selectionStart" in a)
        var f = {
          start: a.selectionStart,
          end: a.selectionEnd
        };
      else
        e: {
          f = (f = a.ownerDocument) && f.defaultView || window;
          var p = f.getSelection && f.getSelection();
          if (p && p.rangeCount !== 0) {
            f = p.anchorNode;
            var y = p.anchorOffset, T = p.focusNode;
            p = p.focusOffset;
            try {
              f.nodeType, T.nodeType;
            } catch {
              f = null;
              break e;
            }
            var L = 0, G = -1, J = -1, ye = 0, Le = 0, Ie = a, Se = null;
            t: for (; ; ) {
              for (var be; Ie !== f || y !== 0 && Ie.nodeType !== 3 || (G = L + y), Ie !== T || p !== 0 && Ie.nodeType !== 3 || (J = L + p), Ie.nodeType === 3 && (L += Ie.nodeValue.length), (be = Ie.firstChild) !== null; )
                Se = Ie, Ie = be;
              for (; ; ) {
                if (Ie === a) break t;
                if (Se === f && ++ye === y && (G = L), Se === T && ++Le === p && (J = L), (be = Ie.nextSibling) !== null) break;
                Ie = Se, Se = Ie.parentNode;
              }
              Ie = be;
            }
            f = G === -1 || J === -1 ? null : { start: G, end: J };
          } else f = null;
        }
      f = f || { start: 0, end: 0 };
    } else f = null;
    for (Hy = { focusedElem: a, selectionRange: f }, Fv = !1, Ln = o; Ln !== null; )
      if (o = Ln, a = o.child, (o.subtreeFlags & 1024) !== 0 && a !== null)
        a.return = o, Ln = a;
      else
        for (; Ln !== null; ) {
          switch (o = Ln, T = o.alternate, a = o.flags, o.tag) {
            case 0:
              break;
            case 11:
            case 15:
              break;
            case 1:
              if ((a & 1024) !== 0 && T !== null) {
                a = void 0, f = o, y = T.memoizedProps, T = T.memoizedState, p = f.stateNode;
                try {
                  var Gt = Js(
                    f.type,
                    y,
                    f.elementType === f.type
                  );
                  a = p.getSnapshotBeforeUpdate(
                    Gt,
                    T
                  ), p.__reactInternalSnapshotBeforeUpdate = a;
                } catch (Lt) {
                  ne(
                    f,
                    f.return,
                    Lt
                  );
                }
              }
              break;
            case 3:
              if ((a & 1024) !== 0) {
                if (a = o.stateNode.containerInfo, f = a.nodeType, f === 9)
                  Fy(a);
                else if (f === 1)
                  switch (a.nodeName) {
                    case "HEAD":
                    case "HTML":
                    case "BODY":
                      Fy(a);
                      break;
                    default:
                      a.textContent = "";
                  }
              }
              break;
            case 5:
            case 26:
            case 27:
            case 6:
            case 4:
            case 17:
              break;
            default:
              if ((a & 1024) !== 0) throw Error(i(163));
          }
          if (a = o.sibling, a !== null) {
            a.return = o.return, Ln = a;
            break;
          }
          Ln = o.return;
        }
  }
  function Br(a, o, f) {
    var p = f.flags;
    switch (f.tag) {
      case 0:
      case 11:
      case 15:
        ha(a, f), p & 4 && nl(5, f);
        break;
      case 1:
        if (ha(a, f), p & 4)
          if (a = f.stateNode, o === null)
            try {
              a.componentDidMount();
            } catch (L) {
              ne(f, f.return, L);
            }
          else {
            var y = Js(
              f.type,
              o.memoizedProps
            );
            o = o.memoizedState;
            try {
              a.componentDidUpdate(
                y,
                o,
                a.__reactInternalSnapshotBeforeUpdate
              );
            } catch (L) {
              ne(
                f,
                f.return,
                L
              );
            }
          }
        p & 64 && il(f), p & 512 && al(f, f.return);
        break;
      case 3:
        if (ha(a, f), p & 64 && (a = f.updateQueue, a !== null)) {
          if (o = null, f.child !== null)
            switch (f.child.tag) {
              case 27:
              case 5:
                o = f.child.stateNode;
                break;
              case 1:
                o = f.child.stateNode;
            }
          try {
            Ym(a, o);
          } catch (L) {
            ne(f, f.return, L);
          }
        }
        break;
      case 27:
        o === null && p & 4 && Eo(f);
      case 26:
      case 5:
        ha(a, f), o === null && p & 4 && nc(f), p & 512 && al(f, f.return);
        break;
      case 12:
        ha(a, f);
        break;
      case 13:
        ha(a, f), p & 4 && To(a, f), p & 64 && (a = f.memoizedState, a !== null && (a = a.dehydrated, a !== null && (f = Zn.bind(
          null,
          f
        ), _A(a, f))));
        break;
      case 22:
        if (p = f.memoizedState !== null || tr, !p) {
          o = o !== null && o.memoizedState !== null || Vn, y = tr;
          var T = Vn;
          tr = p, (Vn = o) && !T ? nr(
            a,
            f,
            (f.subtreeFlags & 8772) !== 0
          ) : ha(a, f), tr = y, Vn = T;
        }
        break;
      case 30:
        break;
      default:
        ha(a, f);
    }
  }
  function Jt(a) {
    var o = a.alternate;
    o !== null && (a.alternate = null, Jt(o)), a.child = null, a.deletions = null, a.sibling = null, a.tag === 5 && (o = a.stateNode, o !== null && In(o)), a.stateNode = null, a.return = null, a.dependencies = null, a.memoizedProps = null, a.memoizedState = null, a.pendingProps = null, a.stateNode = null, a.updateQueue = null;
  }
  var Dt = null, dn = !1;
  function ms(a, o, f) {
    for (f = f.child; f !== null; )
      sl(a, o, f), f = f.sibling;
  }
  function sl(a, o, f) {
    if (ze && typeof ze.onCommitFiberUnmount == "function")
      try {
        ze.onCommitFiberUnmount(Te, f);
      } catch {
      }
    switch (f.tag) {
      case 26:
        Vn || er(f, o), ms(
          a,
          o,
          f
        ), f.memoizedState ? f.memoizedState.count-- : f.stateNode && (f = f.stateNode, f.parentNode.removeChild(f));
        break;
      case 27:
        Vn || er(f, o);
        var p = Dt, y = dn;
        cc(f.type) && (Dt = f.stateNode, dn = !1), ms(
          a,
          o,
          f
        ), rp(f.stateNode), Dt = p, dn = y;
        break;
      case 5:
        Vn || er(f, o);
      case 6:
        if (p = Dt, y = dn, Dt = null, ms(
          a,
          o,
          f
        ), Dt = p, dn = y, Dt !== null)
          if (dn)
            try {
              (Dt.nodeType === 9 ? Dt.body : Dt.nodeName === "HTML" ? Dt.ownerDocument.body : Dt).removeChild(f.stateNode);
            } catch (T) {
              ne(
                f,
                o,
                T
              );
            }
          else
            try {
              Dt.removeChild(f.stateNode);
            } catch (T) {
              ne(
                f,
                o,
                T
              );
            }
        break;
      case 18:
        Dt !== null && (dn ? (a = Dt, Yx(
          a.nodeType === 9 ? a.body : a.nodeName === "HTML" ? a.ownerDocument.body : a,
          f.stateNode
        ), pp(a)) : Yx(Dt, f.stateNode));
        break;
      case 4:
        p = Dt, y = dn, Dt = f.stateNode.containerInfo, dn = !0, ms(
          a,
          o,
          f
        ), Dt = p, dn = y;
        break;
      case 0:
      case 11:
      case 14:
      case 15:
        Vn || Fa(2, f, o), Vn || Fa(4, f, o), ms(
          a,
          o,
          f
        );
        break;
      case 1:
        Vn || (er(f, o), p = f.stateNode, typeof p.componentWillUnmount == "function" && zr(
          f,
          o,
          p
        )), ms(
          a,
          o,
          f
        );
        break;
      case 21:
        ms(
          a,
          o,
          f
        );
        break;
      case 22:
        Vn = (p = Vn) || f.memoizedState !== null, ms(
          a,
          o,
          f
        ), Vn = p;
        break;
      default:
        ms(
          a,
          o,
          f
        );
    }
  }
  function To(a, o) {
    if (o.memoizedState === null && (a = o.alternate, a !== null && (a = a.memoizedState, a !== null && (a = a.dehydrated, a !== null))))
      try {
        pp(a);
      } catch (f) {
        ne(o, o.return, f);
      }
  }
  function jf(a) {
    switch (a.tag) {
      case 13:
      case 19:
        var o = a.stateNode;
        return o === null && (o = a.stateNode = new Xa()), o;
      case 22:
        return a = a.stateNode, o = a._retryCache, o === null && (o = a._retryCache = new Xa()), o;
      default:
        throw Error(i(435, a.tag));
    }
  }
  function rl(a, o) {
    var f = jf(a);
    o.forEach(function(p) {
      var y = Ht.bind(null, a, p);
      f.has(p) || (f.add(p), p.then(y, y));
    });
  }
  function Li(a, o) {
    var f = o.deletions;
    if (f !== null)
      for (var p = 0; p < f.length; p++) {
        var y = f[p], T = a, L = o, G = L;
        e: for (; G !== null; ) {
          switch (G.tag) {
            case 27:
              if (cc(G.type)) {
                Dt = G.stateNode, dn = !1;
                break e;
              }
              break;
            case 5:
              Dt = G.stateNode, dn = !1;
              break e;
            case 3:
            case 4:
              Dt = G.stateNode.containerInfo, dn = !0;
              break e;
          }
          G = G.return;
        }
        if (Dt === null) throw Error(i(160));
        sl(T, L, y), Dt = null, dn = !1, T = y.alternate, T !== null && (T.return = null), y.return = null;
      }
    if (o.subtreeFlags & 13878)
      for (o = o.child; o !== null; )
        Qf(o, a), o = o.sibling;
  }
  var zs = null;
  function Qf(a, o) {
    var f = a.alternate, p = a.flags;
    switch (a.tag) {
      case 0:
      case 11:
      case 14:
      case 15:
        Li(o, a), ni(a), p & 4 && (Fa(3, a, a.return), nl(3, a), Fa(5, a, a.return));
        break;
      case 1:
        Li(o, a), ni(a), p & 512 && (Vn || f === null || er(f, f.return)), p & 64 && tr && (a = a.updateQueue, a !== null && (p = a.callbacks, p !== null && (f = a.shared.hiddenCallbacks, a.shared.hiddenCallbacks = f === null ? p : f.concat(p))));
        break;
      case 26:
        var y = zs;
        if (Li(o, a), ni(a), p & 512 && (Vn || f === null || er(f, f.return)), p & 4) {
          var T = f !== null ? f.memoizedState : null;
          if (p = a.memoizedState, f === null)
            if (p === null)
              if (a.stateNode === null) {
                e: {
                  p = a.type, f = a.memoizedProps, y = y.ownerDocument || y;
                  t: switch (p) {
                    case "title":
                      T = y.getElementsByTagName("title")[0], (!T || T[za] || T[mi] || T.namespaceURI === "http://www.w3.org/2000/svg" || T.hasAttribute("itemprop")) && (T = y.createElement(p), y.head.insertBefore(
                        T,
                        y.querySelector("head > title")
                      )), pa(T, p, f), T[mi] = a, vi(T), p = T;
                      break e;
                    case "link":
                      var L = $x(
                        "link",
                        "href",
                        y
                      ).get(p + (f.href || ""));
                      if (L) {
                        for (var G = 0; G < L.length; G++)
                          if (T = L[G], T.getAttribute("href") === (f.href == null || f.href === "" ? null : f.href) && T.getAttribute("rel") === (f.rel == null ? null : f.rel) && T.getAttribute("title") === (f.title == null ? null : f.title) && T.getAttribute("crossorigin") === (f.crossOrigin == null ? null : f.crossOrigin)) {
                            L.splice(G, 1);
                            break t;
                          }
                      }
                      T = y.createElement(p), pa(T, p, f), y.head.appendChild(T);
                      break;
                    case "meta":
                      if (L = $x(
                        "meta",
                        "content",
                        y
                      ).get(p + (f.content || ""))) {
                        for (G = 0; G < L.length; G++)
                          if (T = L[G], T.getAttribute("content") === (f.content == null ? null : "" + f.content) && T.getAttribute("name") === (f.name == null ? null : f.name) && T.getAttribute("property") === (f.property == null ? null : f.property) && T.getAttribute("http-equiv") === (f.httpEquiv == null ? null : f.httpEquiv) && T.getAttribute("charset") === (f.charSet == null ? null : f.charSet)) {
                            L.splice(G, 1);
                            break t;
                          }
                      }
                      T = y.createElement(p), pa(T, p, f), y.head.appendChild(T);
                      break;
                    default:
                      throw Error(i(468, p));
                  }
                  T[mi] = a, vi(T), p = T;
                }
                a.stateNode = p;
              } else
                e1(
                  y,
                  a.type,
                  a.stateNode
                );
            else
              a.stateNode = Jx(
                y,
                p,
                a.memoizedProps
              );
          else
            T !== p ? (T === null ? f.stateNode !== null && (f = f.stateNode, f.parentNode.removeChild(f)) : T.count--, p === null ? e1(
              y,
              a.type,
              a.stateNode
            ) : Jx(
              y,
              p,
              a.memoizedProps
            )) : p === null && a.stateNode !== null && xu(
              a,
              a.memoizedProps,
              f.memoizedProps
            );
        }
        break;
      case 27:
        Li(o, a), ni(a), p & 512 && (Vn || f === null || er(f, f.return)), f !== null && p & 4 && xu(
          a,
          a.memoizedProps,
          f.memoizedProps
        );
        break;
      case 5:
        if (Li(o, a), ni(a), p & 512 && (Vn || f === null || er(f, f.return)), a.flags & 32) {
          y = a.stateNode;
          try {
            Mi(y, "");
          } catch (be) {
            ne(a, a.return, be);
          }
        }
        p & 4 && a.stateNode != null && (y = a.memoizedProps, xu(
          a,
          y,
          f !== null ? f.memoizedProps : y
        )), p & 1024 && (ic = !0);
        break;
      case 6:
        if (Li(o, a), ni(a), p & 4) {
          if (a.stateNode === null)
            throw Error(i(162));
          p = a.memoizedProps, f = a.stateNode;
          try {
            f.nodeValue = p;
          } catch (be) {
            ne(a, a.return, be);
          }
        }
        break;
      case 3:
        if (Hv = null, y = zs, zs = Pv(o.containerInfo), Li(o, a), zs = y, ni(a), p & 4 && f !== null && f.memoizedState.isDehydrated)
          try {
            pp(o.containerInfo);
          } catch (be) {
            ne(a, a.return, be);
          }
        ic && (ic = !1, Ao(a));
        break;
      case 4:
        p = zs, zs = Pv(
          a.stateNode.containerInfo
        ), Li(o, a), ni(a), zs = p;
        break;
      case 12:
        Li(o, a), ni(a);
        break;
      case 13:
        Li(o, a), ni(a), a.child.flags & 8192 && a.memoizedState !== null != (f !== null && f.memoizedState !== null) && (Un = Ce()), p & 4 && (p = a.updateQueue, p !== null && (a.updateQueue = null, rl(a, p)));
        break;
      case 22:
        y = a.memoizedState !== null;
        var J = f !== null && f.memoizedState !== null, ye = tr, Le = Vn;
        if (tr = ye || y, Vn = Le || J, Li(o, a), Vn = Le, tr = ye, ni(a), p & 8192)
          e: for (o = a.stateNode, o._visibility = y ? o._visibility & -2 : o._visibility | 1, y && (f === null || J || tr || Vn || qa(a)), f = null, o = a; ; ) {
            if (o.tag === 5 || o.tag === 26) {
              if (f === null) {
                J = f = o;
                try {
                  if (T = J.stateNode, y)
                    L = T.style, typeof L.setProperty == "function" ? L.setProperty("display", "none", "important") : L.display = "none";
                  else {
                    G = J.stateNode;
                    var Ie = J.memoizedProps.style, Se = Ie != null && Ie.hasOwnProperty("display") ? Ie.display : null;
                    G.style.display = Se == null || typeof Se == "boolean" ? "" : ("" + Se).trim();
                  }
                } catch (be) {
                  ne(J, J.return, be);
                }
              }
            } else if (o.tag === 6) {
              if (f === null) {
                J = o;
                try {
                  J.stateNode.nodeValue = y ? "" : J.memoizedProps;
                } catch (be) {
                  ne(J, J.return, be);
                }
              }
            } else if ((o.tag !== 22 && o.tag !== 23 || o.memoizedState === null || o === a) && o.child !== null) {
              o.child.return = o, o = o.child;
              continue;
            }
            if (o === a) break e;
            for (; o.sibling === null; ) {
              if (o.return === null || o.return === a) break e;
              f === o && (f = null), o = o.return;
            }
            f === o && (f = null), o.sibling.return = o.return, o = o.sibling;
          }
        p & 4 && (p = a.updateQueue, p !== null && (f = p.retryQueue, f !== null && (p.retryQueue = null, rl(a, f))));
        break;
      case 19:
        Li(o, a), ni(a), p & 4 && (p = a.updateQueue, p !== null && (a.updateQueue = null, rl(a, p)));
        break;
      case 30:
        break;
      case 21:
        break;
      default:
        Li(o, a), ni(a);
    }
  }
  function ni(a) {
    var o = a.flags;
    if (o & 2) {
      try {
        for (var f, p = a.return; p !== null; ) {
          if (Mu(p)) {
            f = p;
            break;
          }
          p = p.return;
        }
        if (f == null) throw Error(i(160));
        switch (f.tag) {
          case 27:
            var y = f.stateNode, T = xo(a);
            bo(a, T, y);
            break;
          case 5:
            var L = f.stateNode;
            f.flags & 32 && (Mi(L, ""), f.flags &= -33);
            var G = xo(a);
            bo(a, G, L);
            break;
          case 3:
          case 4:
            var J = f.stateNode.containerInfo, ye = xo(a);
            Mo(
              a,
              ye,
              J
            );
            break;
          default:
            throw Error(i(161));
        }
      } catch (Le) {
        ne(a, a.return, Le);
      }
      a.flags &= -3;
    }
    o & 4096 && (a.flags &= -4097);
  }
  function Ao(a) {
    if (a.subtreeFlags & 1024)
      for (a = a.child; a !== null; ) {
        var o = a;
        Ao(o), o.tag === 5 && o.flags & 1024 && o.stateNode.reset(), a = a.sibling;
      }
  }
  function ha(a, o) {
    if (o.subtreeFlags & 8772)
      for (o = o.child; o !== null; )
        Br(a, o.alternate, o), o = o.sibling;
  }
  function qa(a) {
    for (a = a.child; a !== null; ) {
      var o = a;
      switch (o.tag) {
        case 0:
        case 11:
        case 14:
        case 15:
          Fa(4, o, o.return), qa(o);
          break;
        case 1:
          er(o, o.return);
          var f = o.stateNode;
          typeof f.componentWillUnmount == "function" && zr(
            o,
            o.return,
            f
          ), qa(o);
          break;
        case 27:
          rp(o.stateNode);
        case 26:
        case 5:
          er(o, o.return), qa(o);
          break;
        case 22:
          o.memoizedState === null && qa(o);
          break;
        case 30:
          qa(o);
          break;
        default:
          qa(o);
      }
      a = a.sibling;
    }
  }
  function nr(a, o, f) {
    for (f = f && (o.subtreeFlags & 8772) !== 0, o = o.child; o !== null; ) {
      var p = o.alternate, y = a, T = o, L = T.flags;
      switch (T.tag) {
        case 0:
        case 11:
        case 15:
          nr(
            y,
            T,
            f
          ), nl(4, T);
          break;
        case 1:
          if (nr(
            y,
            T,
            f
          ), p = T, y = p.stateNode, typeof y.componentDidMount == "function")
            try {
              y.componentDidMount();
            } catch (ye) {
              ne(p, p.return, ye);
            }
          if (p = T, y = p.updateQueue, y !== null) {
            var G = p.stateNode;
            try {
              var J = y.shared.hiddenCallbacks;
              if (J !== null)
                for (y.shared.hiddenCallbacks = null, y = 0; y < J.length; y++)
                  kl(J[y], G);
            } catch (ye) {
              ne(p, p.return, ye);
            }
          }
          f && L & 64 && il(T), al(T, T.return);
          break;
        case 27:
          Eo(T);
        case 26:
        case 5:
          nr(
            y,
            T,
            f
          ), f && p === null && L & 4 && nc(T), al(T, T.return);
          break;
        case 12:
          nr(
            y,
            T,
            f
          );
          break;
        case 13:
          nr(
            y,
            T,
            f
          ), f && L & 4 && To(y, T);
          break;
        case 22:
          T.memoizedState === null && nr(
            y,
            T,
            f
          ), al(T, T.return);
          break;
        case 30:
          break;
        default:
          nr(
            y,
            T,
            f
          );
      }
      o = o.sibling;
    }
  }
  function Kf(a, o) {
    var f = null;
    a !== null && a.memoizedState !== null && a.memoizedState.cachePool !== null && (f = a.memoizedState.cachePool.pool), a = null, o.memoizedState !== null && o.memoizedState.cachePool !== null && (a = o.memoizedState.cachePool.pool), a !== f && (a != null && a.refCount++, f != null && Vl(f));
  }
  function Jf(a, o) {
    a = null, o.alternate !== null && (a = o.alternate.memoizedState.cache), o = o.memoizedState.cache, o !== a && (o.refCount++, a != null && Vl(a));
  }
  function zn(a, o, f, p) {
    if (o.subtreeFlags & 10256)
      for (o = o.child; o !== null; )
        $f(
          a,
          o,
          f,
          p
        ), o = o.sibling;
  }
  function $f(a, o, f, p) {
    var y = o.flags;
    switch (o.tag) {
      case 0:
      case 11:
      case 15:
        zn(
          a,
          o,
          f,
          p
        ), y & 2048 && nl(9, o);
        break;
      case 1:
        zn(
          a,
          o,
          f,
          p
        );
        break;
      case 3:
        zn(
          a,
          o,
          f,
          p
        ), y & 2048 && (a = null, o.alternate !== null && (a = o.alternate.memoizedState.cache), o = o.memoizedState.cache, o !== a && (o.refCount++, a != null && Vl(a)));
        break;
      case 12:
        if (y & 2048) {
          zn(
            a,
            o,
            f,
            p
          ), a = o.stateNode;
          try {
            var T = o.memoizedProps, L = T.id, G = T.onPostCommit;
            typeof G == "function" && G(
              L,
              o.alternate === null ? "mount" : "update",
              a.passiveEffectDuration,
              -0
            );
          } catch (J) {
            ne(o, o.return, J);
          }
        } else
          zn(
            a,
            o,
            f,
            p
          );
        break;
      case 13:
        zn(
          a,
          o,
          f,
          p
        );
        break;
      case 23:
        break;
      case 22:
        T = o.stateNode, L = o.alternate, o.memoizedState !== null ? T._visibility & 2 ? zn(
          a,
          o,
          f,
          p
        ) : Bs(a, o) : T._visibility & 2 ? zn(
          a,
          o,
          f,
          p
        ) : (T._visibility |= 2, Pr(
          a,
          o,
          f,
          p,
          (o.subtreeFlags & 10256) !== 0
        )), y & 2048 && Kf(L, o);
        break;
      case 24:
        zn(
          a,
          o,
          f,
          p
        ), y & 2048 && Jf(o.alternate, o);
        break;
      default:
        zn(
          a,
          o,
          f,
          p
        );
    }
  }
  function Pr(a, o, f, p, y) {
    for (y = y && (o.subtreeFlags & 10256) !== 0, o = o.child; o !== null; ) {
      var T = a, L = o, G = f, J = p, ye = L.flags;
      switch (L.tag) {
        case 0:
        case 11:
        case 15:
          Pr(
            T,
            L,
            G,
            J,
            y
          ), nl(8, L);
          break;
        case 23:
          break;
        case 22:
          var Le = L.stateNode;
          L.memoizedState !== null ? Le._visibility & 2 ? Pr(
            T,
            L,
            G,
            J,
            y
          ) : Bs(
            T,
            L
          ) : (Le._visibility |= 2, Pr(
            T,
            L,
            G,
            J,
            y
          )), y && ye & 2048 && Kf(
            L.alternate,
            L
          );
          break;
        case 24:
          Pr(
            T,
            L,
            G,
            J,
            y
          ), y && ye & 2048 && Jf(L.alternate, L);
          break;
        default:
          Pr(
            T,
            L,
            G,
            J,
            y
          );
      }
      o = o.sibling;
    }
  }
  function Bs(a, o) {
    if (o.subtreeFlags & 10256)
      for (o = o.child; o !== null; ) {
        var f = a, p = o, y = p.flags;
        switch (p.tag) {
          case 22:
            Bs(f, p), y & 2048 && Kf(
              p.alternate,
              p
            );
            break;
          case 24:
            Bs(f, p), y & 2048 && Jf(p.alternate, p);
            break;
          default:
            Bs(f, p);
        }
        o = o.sibling;
      }
  }
  var Ya = 8192;
  function ac(a) {
    if (a.subtreeFlags & Ya)
      for (a = a.child; a !== null; )
        Uv(a), a = a.sibling;
  }
  function Uv(a) {
    switch (a.tag) {
      case 26:
        ac(a), a.flags & Ya && a.memoizedState !== null && NA(
          zs,
          a.memoizedState,
          a.memoizedProps
        );
        break;
      case 5:
        ac(a);
        break;
      case 3:
      case 4:
        var o = zs;
        zs = Pv(a.stateNode.containerInfo), ac(a), zs = o;
        break;
      case 22:
        a.memoizedState === null && (o = a.alternate, o !== null && o.memoizedState !== null ? (o = Ya, Ya = 16777216, ac(a), Ya = o) : ac(a));
        break;
      default:
        ac(a);
    }
  }
  function Nv(a) {
    var o = a.alternate;
    if (o !== null && (a = o.child, a !== null)) {
      o.child = null;
      do
        o = a.sibling, a.sibling = null, a = o;
      while (a !== null);
    }
  }
  function Gn(a) {
    var o = a.deletions;
    if ((a.flags & 16) !== 0) {
      if (o !== null)
        for (var f = 0; f < o.length; f++) {
          var p = o[f];
          Ln = p, ar(
            p,
            a
          );
        }
      Nv(a);
    }
    if (a.subtreeFlags & 10256)
      for (a = a.child; a !== null; )
        tp(a), a = a.sibling;
  }
  function tp(a) {
    switch (a.tag) {
      case 0:
      case 11:
      case 15:
        Gn(a), a.flags & 2048 && Fa(9, a, a.return);
        break;
      case 3:
        Gn(a);
        break;
      case 12:
        Gn(a);
        break;
      case 22:
        var o = a.stateNode;
        a.memoizedState !== null && o._visibility & 2 && (a.return === null || a.return.tag !== 13) ? (o._visibility &= -3, ir(a)) : Gn(a);
        break;
      default:
        Gn(a);
    }
  }
  function ir(a) {
    var o = a.deletions;
    if ((a.flags & 16) !== 0) {
      if (o !== null)
        for (var f = 0; f < o.length; f++) {
          var p = o[f];
          Ln = p, ar(
            p,
            a
          );
        }
      Nv(a);
    }
    for (a = a.child; a !== null; ) {
      switch (o = a, o.tag) {
        case 0:
        case 11:
        case 15:
          Fa(8, o, o.return), ir(o);
          break;
        case 22:
          f = o.stateNode, f._visibility & 2 && (f._visibility &= -3, ir(o));
          break;
        default:
          ir(o);
      }
      a = a.sibling;
    }
  }
  function ar(a, o) {
    for (; Ln !== null; ) {
      var f = Ln;
      switch (f.tag) {
        case 0:
        case 11:
        case 15:
          Fa(8, f, o);
          break;
        case 23:
        case 22:
          if (f.memoizedState !== null && f.memoizedState.cachePool !== null) {
            var p = f.memoizedState.cachePool.pool;
            p != null && p.refCount++;
          }
          break;
        case 24:
          Vl(f.memoizedState.cache);
      }
      if (p = f.child, p !== null) p.return = f, Ln = p;
      else
        e: for (f = a; Ln !== null; ) {
          p = Ln;
          var y = p.sibling, T = p.return;
          if (Jt(p), p === f) {
            Ln = null;
            break e;
          }
          if (y !== null) {
            y.return = T, Ln = y;
            break e;
          }
          Ln = T;
        }
    }
  }
  var ii = {
    getCacheForType: function(a) {
      var o = ti(gi), f = o.data.get(a);
      return f === void 0 && (f = a(), o.data.set(a, f)), f;
    }
  }, np = typeof WeakMap == "function" ? WeakMap : Map, En = 0, Xt = null, an = null, Rt = 0, jt = 0, $n = null, ka = !1, sc = !1, rc = !1, vs = 0, Wn = 0, Ps = 0, sr = 0, ol = 0, gs = 0, pn = 0, Tn = null, Nt = null, on = !1, Un = 0, ta = 1 / 0, ys = null, Wa = null, Ai = 0, na = null, Bn = null, Za = 0, Ir = 0, bu = null, ja = null, rr = 0, ll = null;
  function ai() {
    if ((En & 2) !== 0 && Rt !== 0)
      return Rt & -Rt;
    if (P.T !== null) {
      var a = kt;
      return a !== 0 ? a : Uy();
    }
    return rn();
  }
  function eh() {
    gs === 0 && (gs = (Rt & 536870912) === 0 || yn ? se() : 536870912);
    var a = On.current;
    return a !== null && (a.flags |= 32), gs;
  }
  function da(a, o, f) {
    (a === Xt && (jt === 2 || jt === 9) || a.cancelPendingCommit !== null) && (Co(a, 0), Is(
      a,
      Rt,
      gs,
      !1
    )), ct(a, f), ((En & 2) === 0 || a !== Xt) && (a === Xt && ((En & 2) === 0 && (sr |= f), Wn === 4 && Is(
      a,
      Rt,
      gs,
      !1
    )), Uo(a));
  }
  function oc(a, o, f) {
    if ((En & 6) !== 0) throw Error(i(327));
    var p = !f && (o & 124) === 0 && (o & a.expiredLanes) === 0 || nt(a, o), y = p ? _(a, o) : u(a, o, !0), T = p;
    do {
      if (y === 0) {
        sc && !p && Is(a, o, 0, !1);
        break;
      } else {
        if (f = a.current.alternate, T && !Ro(f)) {
          y = u(a, o, !1), T = !1;
          continue;
        }
        if (y === 2) {
          if (T = o, a.errorRecoveryDisabledLanes & T)
            var L = 0;
          else
            L = a.pendingLanes & -536870913, L = L !== 0 ? L : L & 536870912 ? 536870912 : 0;
          if (L !== 0) {
            o = L;
            e: {
              var G = a;
              y = Tn;
              var J = G.current.memoizedState.isDehydrated;
              if (J && (Co(G, L).flags |= 256), L = u(
                G,
                L,
                !1
              ), L !== 2) {
                if (rc && !J) {
                  G.errorRecoveryDisabledLanes |= T, sr |= T, y = 4;
                  break e;
                }
                T = Nt, Nt = y, T !== null && (Nt === null ? Nt = T : Nt.push.apply(
                  Nt,
                  T
                ));
              }
              y = L;
            }
            if (T = !1, y !== 2) continue;
          }
        }
        if (y === 1) {
          Co(a, 0), Is(a, o, 0, !0);
          break;
        }
        e: {
          switch (p = a, T = y, T) {
            case 0:
            case 1:
              throw Error(i(345));
            case 4:
              if ((o & 4194048) !== o) break;
            case 6:
              Is(
                p,
                o,
                gs,
                !ka
              );
              break e;
            case 2:
              Nt = null;
              break;
            case 3:
            case 5:
              break;
            default:
              throw Error(i(329));
          }
          if ((o & 62914560) === o && (y = Un + 300 - Ce(), 10 < y)) {
            if (Is(
              p,
              o,
              gs,
              !ka
            ), mt(p, 0, !0) !== 0) break e;
            p.timeoutHandle = Xx(
              Eu.bind(
                null,
                p,
                f,
                Nt,
                ys,
                on,
                o,
                gs,
                sr,
                pn,
                ka,
                T,
                2,
                -0,
                0
              ),
              y
            );
            break e;
          }
          Eu(
            p,
            f,
            Nt,
            ys,
            on,
            o,
            gs,
            sr,
            pn,
            ka,
            T,
            0,
            -0,
            0
          );
        }
      }
      break;
    } while (!0);
    Uo(a);
  }
  function Eu(a, o, f, p, y, T, L, G, J, ye, Le, Ie, Se, be) {
    if (a.timeoutHandle = -1, Ie = o.subtreeFlags, (Ie & 8192 || (Ie & 16785408) === 16785408) && (cp = { stylesheets: null, count: 0, unsuspend: UA }, Uv(o), Ie = OA(), Ie !== null)) {
      a.cancelPendingCommit = Ie(
        je.bind(
          null,
          a,
          o,
          T,
          f,
          p,
          y,
          L,
          G,
          J,
          Le,
          1,
          Se,
          be
        )
      ), Is(a, T, L, !ye);
      return;
    }
    je(
      a,
      o,
      T,
      f,
      p,
      y,
      L,
      G,
      J
    );
  }
  function Ro(a) {
    for (var o = a; ; ) {
      var f = o.tag;
      if ((f === 0 || f === 11 || f === 15) && o.flags & 16384 && (f = o.updateQueue, f !== null && (f = f.stores, f !== null)))
        for (var p = 0; p < f.length; p++) {
          var y = f[p], T = y.getSnapshot;
          y = y.value;
          try {
            if (!ga(T(), y)) return !1;
          } catch {
            return !1;
          }
        }
      if (f = o.child, o.subtreeFlags & 16384 && f !== null)
        f.return = o, o = f;
      else {
        if (o === a) break;
        for (; o.sibling === null; ) {
          if (o.return === null || o.return === a) return !0;
          o = o.return;
        }
        o.sibling.return = o.return, o = o.sibling;
      }
    }
    return !0;
  }
  function Is(a, o, f, p) {
    o &= ~ol, o &= ~sr, a.suspendedLanes |= o, a.pingedLanes &= ~o, p && (a.warmLanes |= o), p = a.expirationTimes;
    for (var y = o; 0 < y; ) {
      var T = 31 - at(y), L = 1 << T;
      p[T] = -1, y &= ~L;
    }
    f !== 0 && Pe(a, f, o);
  }
  function or() {
    return (En & 6) === 0 ? (ip(0), !1) : !0;
  }
  function cl() {
    if (an !== null) {
      if (jt === 0)
        var a = an.return;
      else
        a = an, Ar = uo = null, Id(a), Wo = null, vu = 0, a = an;
      for (; a !== null; )
        tc(a.alternate, a), a = a.return;
      an = null;
    }
  }
  function Co(a, o) {
    var f = a.timeoutHandle;
    f !== -1 && (a.timeoutHandle = -1, pA(f)), f = a.cancelPendingCommit, f !== null && (a.cancelPendingCommit = null, f()), cl(), Xt = a, an = f = ri(a.current, null), Rt = o, jt = 0, $n = null, ka = !1, sc = nt(a, o), rc = !1, pn = gs = ol = sr = Ps = Wn = 0, Nt = Tn = null, on = !1, (o & 8) !== 0 && (o |= o & 32);
    var p = a.entangledLanes;
    if (p !== 0)
      for (a = a.entanglements, p &= o; 0 < p; ) {
        var y = 31 - at(p), T = 1 << y;
        o |= a[y], p &= ~T;
      }
    return vs = o, $c(), f;
  }
  function th(a, o) {
    Wt = null, P.H = mu, o === cu || o === ws ? (o = Od(), jt = 3) : o === Nd ? (o = Od(), jt = 4) : jt = o === Dv ? 8 : o !== null && typeof o == "object" && typeof o.then == "function" ? 6 : 1, $n = o, an === null && (Wn = 1, kf(
      a,
      Xi(o, a.current)
    ));
  }
  function lc() {
    var a = P.H;
    return P.H = mu, a === null ? mu : a;
  }
  function nh() {
    var a = P.A;
    return P.A = ii, a;
  }
  function l() {
    Wn = 4, ka || (Rt & 4194048) !== Rt && On.current !== null || (sc = !0), (Ps & 134217727) === 0 && (sr & 134217727) === 0 || Xt === null || Is(
      Xt,
      Rt,
      gs,
      !1
    );
  }
  function u(a, o, f) {
    var p = En;
    En |= 2;
    var y = lc(), T = nh();
    (Xt !== a || Rt !== o) && (ys = null, Co(a, o)), o = !1;
    var L = Wn;
    e: do
      try {
        if (jt !== 0 && an !== null) {
          var G = an, J = $n;
          switch (jt) {
            case 8:
              cl(), L = 6;
              break e;
            case 3:
            case 2:
            case 9:
            case 6:
              On.current === null && (o = !0);
              var ye = jt;
              if (jt = 0, $n = null, $(a, G, J, ye), f && sc) {
                L = 0;
                break e;
              }
              break;
            default:
              ye = jt, jt = 0, $n = null, $(a, G, J, ye);
          }
        }
        m(), L = Wn;
        break;
      } catch (Le) {
        th(a, Le);
      }
    while (!0);
    return o && a.shellSuspendCounter++, Ar = uo = null, En = p, P.H = y, P.A = T, an === null && (Xt = null, Rt = 0, $c()), L;
  }
  function m() {
    for (; an !== null; ) D(an);
  }
  function _(a, o) {
    var f = En;
    En |= 2;
    var p = lc(), y = nh();
    Xt !== a || Rt !== o ? (ys = null, ta = Ce() + 500, Co(a, o)) : sc = nt(
      a,
      o
    );
    e: do
      try {
        if (jt !== 0 && an !== null) {
          o = an;
          var T = $n;
          t: switch (jt) {
            case 1:
              jt = 0, $n = null, $(a, o, T, 1);
              break;
            case 2:
            case 9:
              if (Uf(T)) {
                jt = 0, $n = null, X(o);
                break;
              }
              o = function() {
                jt !== 2 && jt !== 9 || Xt !== a || (jt = 7), Uo(a);
              }, T.then(o, o);
              break e;
            case 3:
              jt = 7;
              break e;
            case 4:
              jt = 5;
              break e;
            case 7:
              Uf(T) ? (jt = 0, $n = null, X(o)) : (jt = 0, $n = null, $(a, o, T, 7));
              break;
            case 5:
              var L = null;
              switch (an.tag) {
                case 26:
                  L = an.memoizedState;
                case 5:
                case 27:
                  var G = an;
                  if (!L || t1(L)) {
                    jt = 0, $n = null;
                    var J = G.sibling;
                    if (J !== null) an = J;
                    else {
                      var ye = G.return;
                      ye !== null ? (an = ye, de(ye)) : an = null;
                    }
                    break t;
                  }
              }
              jt = 0, $n = null, $(a, o, T, 5);
              break;
            case 6:
              jt = 0, $n = null, $(a, o, T, 6);
              break;
            case 8:
              cl(), Wn = 6;
              break e;
            default:
              throw Error(i(462));
          }
        }
        A();
        break;
      } catch (Le) {
        th(a, Le);
      }
    while (!0);
    return Ar = uo = null, P.H = p, P.A = y, En = f, an !== null ? 0 : (Xt = null, Rt = 0, $c(), Wn);
  }
  function A() {
    for (; an !== null && !Ue(); )
      D(an);
  }
  function D(a) {
    var o = el(a.alternate, a, vs);
    a.memoizedProps = a.pendingProps, o === null ? de(a) : an = o;
  }
  function X(a) {
    var o = a, f = o.alternate;
    switch (o.tag) {
      case 15:
      case 0:
        o = Va(
          f,
          o,
          o.pendingProps,
          o.type,
          void 0,
          Rt
        );
        break;
      case 11:
        o = Va(
          f,
          o,
          o.pendingProps,
          o.type.render,
          o.ref,
          Rt
        );
        break;
      case 5:
        Id(o);
      default:
        tc(f, o), o = an = Td(o, vs), o = el(f, o, vs);
    }
    a.memoizedProps = a.pendingProps, o === null ? de(a) : an = o;
  }
  function $(a, o, f, p) {
    Ar = uo = null, Id(o), Wo = null, vu = 0;
    var y = o.return;
    try {
      if (wy(
        a,
        y,
        o,
        f,
        Rt
      )) {
        Wn = 1, kf(
          a,
          Xi(f, a.current)
        ), an = null;
        return;
      }
    } catch (T) {
      if (y !== null) throw an = y, T;
      Wn = 1, kf(
        a,
        Xi(f, a.current)
      ), an = null;
      return;
    }
    o.flags & 32768 ? (yn || p === 1 ? a = !0 : sc || (Rt & 536870912) !== 0 ? a = !1 : (ka = a = !0, (p === 2 || p === 9 || p === 3 || p === 6) && (p = On.current, p !== null && p.tag === 13 && (p.flags |= 16384))), Oe(o, a)) : de(o);
  }
  function de(a) {
    var o = a;
    do {
      if ((o.flags & 32768) !== 0) {
        Oe(
          o,
          ka
        );
        return;
      }
      a = o.return;
      var f = ep(
        o.alternate,
        o,
        vs
      );
      if (f !== null) {
        an = f;
        return;
      }
      if (o = o.sibling, o !== null) {
        an = o;
        return;
      }
      an = o = a;
    } while (o !== null);
    Wn === 0 && (Wn = 5);
  }
  function Oe(a, o) {
    do {
      var f = ec(a.alternate, a);
      if (f !== null) {
        f.flags &= 32767, an = f;
        return;
      }
      if (f = a.return, f !== null && (f.flags |= 32768, f.subtreeFlags = 0, f.deletions = null), !o && (a = a.sibling, a !== null)) {
        an = a;
        return;
      }
      an = a = f;
    } while (a !== null);
    Wn = 6, an = null;
  }
  function je(a, o, f, p, y, T, L, G, J) {
    a.cancelPendingCommit = null;
    do
      wo();
    while (Ai !== 0);
    if ((En & 6) !== 0) throw Error(i(327));
    if (o !== null) {
      if (o === a.current) throw Error(i(177));
      if (T = o.lanes | o.childLanes, T |= Mf, qe(
        a,
        f,
        T,
        L,
        G,
        J
      ), a === Xt && (an = Xt = null, Rt = 0), Bn = o, na = a, Za = f, Ir = T, bu = y, ja = p, (o.subtreeFlags & 10256) !== 0 || (o.flags & 10256) !== 0 ? (a.callbackNode = null, a.callbackPriority = 0, _n(At, function() {
        return Do(), null;
      })) : (a.callbackNode = null, a.callbackPriority = 0), p = (o.flags & 13878) !== 0, (o.subtreeFlags & 13878) !== 0 || p) {
        p = P.T, P.T = null, y = K.p, K.p = 2, L = En, En |= 4;
        try {
          Ti(a, o, f);
        } finally {
          En = L, K.p = y, P.T = p;
        }
      }
      Ai = 1, st(), ot(), qt();
    }
  }
  function st() {
    if (Ai === 1) {
      Ai = 0;
      var a = na, o = Bn, f = (o.flags & 13878) !== 0;
      if ((o.subtreeFlags & 13878) !== 0 || f) {
        f = P.T, P.T = null;
        var p = K.p;
        K.p = 2;
        var y = En;
        En |= 4;
        try {
          Qf(o, a);
          var T = Hy, L = yd(a.containerInfo), G = T.focusedElem, J = T.selectionRange;
          if (L !== G && G && G.ownerDocument && gd(
            G.ownerDocument.documentElement,
            G
          )) {
            if (J !== null && Qc(G)) {
              var ye = J.start, Le = J.end;
              if (Le === void 0 && (Le = ye), "selectionStart" in G)
                G.selectionStart = ye, G.selectionEnd = Math.min(
                  Le,
                  G.value.length
                );
              else {
                var Ie = G.ownerDocument || document, Se = Ie && Ie.defaultView || window;
                if (Se.getSelection) {
                  var be = Se.getSelection(), Gt = G.textContent.length, Lt = Math.min(J.start, Gt), Xn = J.end === void 0 ? Lt : Math.min(J.end, Gt);
                  !be.extend && Lt > Xn && (L = Xn, Xn = Lt, Lt = L);
                  var ue = vd(
                    G,
                    Lt
                  ), ie = vd(
                    G,
                    Xn
                  );
                  if (ue && ie && (be.rangeCount !== 1 || be.anchorNode !== ue.node || be.anchorOffset !== ue.offset || be.focusNode !== ie.node || be.focusOffset !== ie.offset)) {
                    var ge = Ie.createRange();
                    ge.setStart(ue.node, ue.offset), be.removeAllRanges(), Lt > Xn ? (be.addRange(ge), be.extend(ie.node, ie.offset)) : (ge.setEnd(ie.node, ie.offset), be.addRange(ge));
                  }
                }
              }
            }
            for (Ie = [], be = G; be = be.parentNode; )
              be.nodeType === 1 && Ie.push({
                element: be,
                left: be.scrollLeft,
                top: be.scrollTop
              });
            for (typeof G.focus == "function" && G.focus(), G = 0; G < Ie.length; G++) {
              var Be = Ie[G];
              Be.element.scrollLeft = Be.left, Be.element.scrollTop = Be.top;
            }
          }
          Fv = !!Iy, Hy = Iy = null;
        } finally {
          En = y, K.p = p, P.T = f;
        }
      }
      a.current = o, Ai = 2;
    }
  }
  function ot() {
    if (Ai === 2) {
      Ai = 0;
      var a = na, o = Bn, f = (o.flags & 8772) !== 0;
      if ((o.subtreeFlags & 8772) !== 0 || f) {
        f = P.T, P.T = null;
        var p = K.p;
        K.p = 2;
        var y = En;
        En |= 4;
        try {
          Br(a, o.alternate, o);
        } finally {
          En = y, K.p = p, P.T = f;
        }
      }
      Ai = 3;
    }
  }
  function qt() {
    if (Ai === 4 || Ai === 3) {
      Ai = 0, Xe();
      var a = na, o = Bn, f = Za, p = ja;
      (o.subtreeFlags & 10256) !== 0 || (o.flags & 10256) !== 0 ? Ai = 5 : (Ai = 0, Bn = na = null, Qa(a, a.pendingLanes));
      var y = a.pendingLanes;
      if (y === 0 && (Wa = null), un(f), o = o.stateNode, ze && typeof ze.onCommitFiberRoot == "function")
        try {
          ze.onCommitFiberRoot(
            Te,
            o,
            void 0,
            (o.current.flags & 128) === 128
          );
        } catch {
        }
      if (p !== null) {
        o = P.T, y = K.p, K.p = 2, P.T = null;
        try {
          for (var T = a.onRecoverableError, L = 0; L < p.length; L++) {
            var G = p[L];
            T(G.value, {
              componentStack: G.stack
            });
          }
        } finally {
          P.T = o, K.p = y;
        }
      }
      (Za & 3) !== 0 && wo(), Uo(a), y = a.pendingLanes, (f & 4194090) !== 0 && (y & 42) !== 0 ? a === ll ? rr++ : (rr = 0, ll = a) : rr = 0, ip(0);
    }
  }
  function Qa(a, o) {
    (a.pooledCacheLanes &= o) === 0 && (o = a.pooledCache, o != null && (a.pooledCache = null, Vl(o)));
  }
  function wo(a) {
    return st(), ot(), qt(), Do();
  }
  function Do() {
    if (Ai !== 5) return !1;
    var a = na, o = Ir;
    Ir = 0;
    var f = un(Za), p = P.T, y = K.p;
    try {
      K.p = 32 > f ? 32 : f, P.T = null, f = bu, bu = null;
      var T = na, L = Za;
      if (Ai = 0, Bn = na = null, Za = 0, (En & 6) !== 0) throw Error(i(331));
      var G = En;
      if (En |= 4, tp(T.current), $f(
        T,
        T.current,
        L,
        f
      ), En = G, ip(0, !1), ze && typeof ze.onPostCommitFiberRoot == "function")
        try {
          ze.onPostCommitFiberRoot(Te, T);
        } catch {
        }
      return !0;
    } finally {
      K.p = y, P.T = p, Qa(a, o);
    }
  }
  function _e(a, o, f) {
    o = Xi(f, o), o = Wf(a.stateNode, o, 2), a = wr(a, o, 2), a !== null && (ct(a, 2), Uo(a));
  }
  function ne(a, o, f) {
    if (a.tag === 3)
      _e(a, a, f);
    else
      for (; o !== null; ) {
        if (o.tag === 3) {
          _e(
            o,
            a,
            f
          );
          break;
        } else if (o.tag === 1) {
          var p = o.stateNode;
          if (typeof o.type.getDerivedStateFromError == "function" || typeof p.componentDidCatch == "function" && (Wa === null || !Wa.has(p))) {
            a = Xi(f, a), f = wv(2), p = wr(o, f, 2), p !== null && (Zf(
              f,
              p,
              o,
              a
            ), ct(p, 2), Uo(p));
            break;
          }
        }
        o = o.return;
      }
  }
  function Ee(a, o, f) {
    var p = a.pingCache;
    if (p === null) {
      p = a.pingCache = new np();
      var y = /* @__PURE__ */ new Set();
      p.set(o, y);
    } else
      y = p.get(o), y === void 0 && (y = /* @__PURE__ */ new Set(), p.set(o, y));
    y.has(f) || (rc = !0, y.add(f), a = We.bind(null, a, o, f), o.then(a, a));
  }
  function We(a, o, f) {
    var p = a.pingCache;
    p !== null && p.delete(o), a.pingedLanes |= a.suspendedLanes & f, a.warmLanes &= ~f, Xt === a && (Rt & f) === f && (Wn === 4 || Wn === 3 && (Rt & 62914560) === Rt && 300 > Ce() - Un ? (En & 2) === 0 && Co(a, 0) : ol |= f, pn === Rt && (pn = 0)), Uo(a);
  }
  function xt(a, o) {
    o === 0 && (o = ke()), a = Er(a, o), a !== null && (ct(a, o), Uo(a));
  }
  function Zn(a) {
    var o = a.memoizedState, f = 0;
    o !== null && (f = o.retryLane), xt(a, f);
  }
  function Ht(a, o) {
    var f = 0;
    switch (a.tag) {
      case 13:
        var p = a.stateNode, y = a.memoizedState;
        y !== null && (f = y.retryLane);
        break;
      case 19:
        p = a.stateNode;
        break;
      case 22:
        p = a.stateNode._retryCache;
        break;
      default:
        throw Error(i(314));
    }
    p !== null && p.delete(o), xt(a, f);
  }
  function _n(a, o) {
    return ee(a, o);
  }
  var ui = null, sn = null, lr = !1, ih = !1, Dy = !1, Tu = 0;
  function Uo(a) {
    a !== sn && a.next === null && (sn === null ? ui = sn = a : sn = sn.next = a), ih = !0, lr || (lr = !0, sA());
  }
  function ip(a, o) {
    if (!Dy && ih) {
      Dy = !0;
      do
        for (var f = !1, p = ui; p !== null; ) {
          if (a !== 0) {
            var y = p.pendingLanes;
            if (y === 0) var T = 0;
            else {
              var L = p.suspendedLanes, G = p.pingedLanes;
              T = (1 << 31 - at(42 | a) + 1) - 1, T &= y & ~(L & ~G), T = T & 201326741 ? T & 201326741 | 1 : T ? T | 2 : 0;
            }
            T !== 0 && (f = !0, Ox(p, T));
          } else
            T = Rt, T = mt(
              p,
              p === Xt ? T : 0,
              p.cancelPendingCommit !== null || p.timeoutHandle !== -1
            ), (T & 3) === 0 || nt(p, T) || (f = !0, Ox(p, T));
          p = p.next;
        }
      while (f);
      Dy = !1;
    }
  }
  function aA() {
    Dx();
  }
  function Dx() {
    ih = lr = !1;
    var a = 0;
    Tu !== 0 && (dA() && (a = Tu), Tu = 0);
    for (var o = Ce(), f = null, p = ui; p !== null; ) {
      var y = p.next, T = Ux(p, o);
      T === 0 ? (p.next = null, f === null ? ui = y : f.next = y, y === null && (sn = f)) : (f = p, (a !== 0 || (T & 3) !== 0) && (ih = !0)), p = y;
    }
    ip(a);
  }
  function Ux(a, o) {
    for (var f = a.suspendedLanes, p = a.pingedLanes, y = a.expirationTimes, T = a.pendingLanes & -62914561; 0 < T; ) {
      var L = 31 - at(T), G = 1 << L, J = y[L];
      J === -1 ? ((G & f) === 0 || (G & p) !== 0) && (y[L] = Pt(G, o)) : J <= o && (a.expiredLanes |= G), T &= ~G;
    }
    if (o = Xt, f = Rt, f = mt(
      a,
      a === o ? f : 0,
      a.cancelPendingCommit !== null || a.timeoutHandle !== -1
    ), p = a.callbackNode, f === 0 || a === o && (jt === 2 || jt === 9) || a.cancelPendingCommit !== null)
      return p !== null && p !== null && He(p), a.callbackNode = null, a.callbackPriority = 0;
    if ((f & 3) === 0 || nt(a, f)) {
      if (o = f & -f, o === a.callbackPriority) return o;
      switch (p !== null && He(p), un(f)) {
        case 2:
        case 8:
          f = Ze;
          break;
        case 32:
          f = At;
          break;
        case 268435456:
          f = Z;
          break;
        default:
          f = At;
      }
      return p = Nx.bind(null, a), f = ee(f, p), a.callbackPriority = o, a.callbackNode = f, o;
    }
    return p !== null && p !== null && He(p), a.callbackPriority = 2, a.callbackNode = null, 2;
  }
  function Nx(a, o) {
    if (Ai !== 0 && Ai !== 5)
      return a.callbackNode = null, a.callbackPriority = 0, null;
    var f = a.callbackNode;
    if (wo() && a.callbackNode !== f)
      return null;
    var p = Rt;
    return p = mt(
      a,
      a === Xt ? p : 0,
      a.cancelPendingCommit !== null || a.timeoutHandle !== -1
    ), p === 0 ? null : (oc(a, p, o), Ux(a, Ce()), a.callbackNode != null && a.callbackNode === f ? Nx.bind(null, a) : null);
  }
  function Ox(a, o) {
    if (wo()) return null;
    oc(a, o, !0);
  }
  function sA() {
    mA(function() {
      (En & 6) !== 0 ? ee(
        Ge,
        aA
      ) : Dx();
    });
  }
  function Uy() {
    return Tu === 0 && (Tu = se()), Tu;
  }
  function Lx(a) {
    return a == null || typeof a == "symbol" || typeof a == "boolean" ? null : typeof a == "function" ? a : Pc("" + a);
  }
  function zx(a, o) {
    var f = o.ownerDocument.createElement("input");
    return f.name = o.name, f.value = o.value, a.id && f.setAttribute("form", a.id), o.parentNode.insertBefore(f, o), a = new FormData(a), f.parentNode.removeChild(f), a;
  }
  function rA(a, o, f, p, y) {
    if (o === "submit" && f && f.stateNode === y) {
      var T = Lx(
        (y[jn] || null).action
      ), L = p.submitter;
      L && (o = (o = L[jn] || null) ? Lx(o.formAction) : L.getAttribute("formAction"), o !== null && (T = o, L = null));
      var G = new Rl(
        "action",
        "action",
        null,
        p,
        y
      );
      a.push({
        event: G,
        listeners: [
          {
            instance: null,
            listener: function() {
              if (p.defaultPrevented) {
                if (Tu !== 0) {
                  var J = L ? zx(y, L) : new FormData(y);
                  Qd(
                    f,
                    {
                      pending: !0,
                      data: J,
                      method: y.method,
                      action: T
                    },
                    null,
                    J
                  );
                }
              } else
                typeof T == "function" && (G.preventDefault(), J = L ? zx(y, L) : new FormData(y), Qd(
                  f,
                  {
                    pending: !0,
                    data: J,
                    method: y.method,
                    action: T
                  },
                  T,
                  J
                ));
            },
            currentTarget: y
          }
        ]
      });
    }
  }
  for (var Ny = 0; Ny < Jc.length; Ny++) {
    var Oy = Jc[Ny], oA = Oy.toLowerCase(), lA = Oy[0].toUpperCase() + Oy.slice(1);
    Di(
      oA,
      "on" + lA
    );
  }
  Di(oa, "onAnimationEnd"), Di(xd, "onAnimationIteration"), Di(_a, "onAnimationStart"), Di("dblclick", "onDoubleClick"), Di("focusin", "onFocus"), Di("focusout", "onBlur"), Di(Gm, "onTransitionRun"), Di(Mr, "onTransitionStart"), Di(zl, "onTransitionCancel"), Di(br, "onTransitionEnd"), re("onMouseEnter", ["mouseout", "mouseover"]), re("onMouseLeave", ["mouseout", "mouseover"]), re("onPointerEnter", ["pointerout", "pointerover"]), re("onPointerLeave", ["pointerout", "pointerover"]), F(
    "onChange",
    "change click focusin focusout input keydown keyup selectionchange".split(" ")
  ), F(
    "onSelect",
    "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(
      " "
    )
  ), F("onBeforeInput", [
    "compositionend",
    "keypress",
    "textInput",
    "paste"
  ]), F(
    "onCompositionEnd",
    "compositionend focusout keydown keypress keyup mousedown".split(" ")
  ), F(
    "onCompositionStart",
    "compositionstart focusout keydown keypress keyup mousedown".split(" ")
  ), F(
    "onCompositionUpdate",
    "compositionupdate focusout keydown keypress keyup mousedown".split(" ")
  );
  var ap = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(
    " "
  ), cA = new Set(
    "beforetoggle cancel close invalid load scroll scrollend toggle".split(" ").concat(ap)
  );
  function Bx(a, o) {
    o = (o & 4) !== 0;
    for (var f = 0; f < a.length; f++) {
      var p = a[f], y = p.event;
      p = p.listeners;
      e: {
        var T = void 0;
        if (o)
          for (var L = p.length - 1; 0 <= L; L--) {
            var G = p[L], J = G.instance, ye = G.currentTarget;
            if (G = G.listener, J !== T && y.isPropagationStopped())
              break e;
            T = G, y.currentTarget = ye;
            try {
              T(y);
            } catch (Le) {
              jo(Le);
            }
            y.currentTarget = null, T = J;
          }
        else
          for (L = 0; L < p.length; L++) {
            if (G = p[L], J = G.instance, ye = G.currentTarget, G = G.listener, J !== T && y.isPropagationStopped())
              break e;
            T = G, y.currentTarget = ye;
            try {
              T(y);
            } catch (Le) {
              jo(Le);
            }
            y.currentTarget = null, T = J;
          }
      }
    }
  }
  function cn(a, o) {
    var f = o[Na];
    f === void 0 && (f = o[Na] = /* @__PURE__ */ new Set());
    var p = a + "__bubble";
    f.has(p) || (Px(o, a, 2, !1), f.add(p));
  }
  function Ly(a, o, f) {
    var p = 0;
    o && (p |= 4), Px(
      f,
      a,
      p,
      o
    );
  }
  var Ov = "_reactListening" + Math.random().toString(36).slice(2);
  function zy(a) {
    if (!a[Ov]) {
      a[Ov] = !0, Ml.forEach(function(f) {
        f !== "selectionchange" && (cA.has(f) || Ly(f, !1, a), Ly(f, !0, a));
      });
      var o = a.nodeType === 9 ? a : a.ownerDocument;
      o === null || o[Ov] || (o[Ov] = !0, Ly("selectionchange", !1, o));
    }
  }
  function Px(a, o, f, p) {
    switch (o1(o)) {
      case 2:
        var y = BA;
        break;
      case 8:
        y = PA;
        break;
      default:
        y = jy;
    }
    f = y.bind(
      null,
      o,
      f,
      a
    ), y = void 0, !Hc || o !== "touchstart" && o !== "touchmove" && o !== "wheel" || (y = !0), p ? y !== void 0 ? a.addEventListener(o, f, {
      capture: !0,
      passive: y
    }) : a.addEventListener(o, f, !0) : y !== void 0 ? a.addEventListener(o, f, {
      passive: y
    }) : a.addEventListener(o, f, !1);
  }
  function By(a, o, f, p, y) {
    var T = p;
    if ((o & 1) === 0 && (o & 2) === 0 && p !== null)
      e: for (; ; ) {
        if (p === null) return;
        var L = p.tag;
        if (L === 3 || L === 4) {
          var G = p.stateNode.containerInfo;
          if (G === y) break;
          if (L === 4)
            for (L = p.return; L !== null; ) {
              var J = L.tag;
              if ((J === 3 || J === 4) && L.stateNode.containerInfo === y)
                return;
              L = L.return;
            }
          for (; G !== null; ) {
            if (L = As(G), L === null) return;
            if (J = L.tag, J === 5 || J === 6 || J === 26 || J === 27) {
              p = T = L;
              continue e;
            }
            G = G.parentNode;
          }
        }
        p = p.return;
      }
    ad(function() {
      var ye = T, Le = cf(f), Ie = [];
      e: {
        var Se = xf.get(a);
        if (Se !== void 0) {
          var be = Rl, Gt = a;
          switch (a) {
            case "keypress":
              if (Jr(f) === 0) break e;
            case "keydown":
            case "keyup":
              be = cd;
              break;
            case "focusin":
              Gt = "focus", be = ff;
              break;
            case "focusout":
              Gt = "blur", be = ff;
              break;
            case "beforeblur":
            case "afterblur":
              be = ff;
              break;
            case "click":
              if (f.button === 2) break e;
            case "auxclick":
            case "dblclick":
            case "mousedown":
            case "mousemove":
            case "mouseup":
            case "mouseout":
            case "mouseover":
            case "contextmenu":
              be = od;
              break;
            case "drag":
            case "dragend":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "dragstart":
            case "drop":
              be = yy;
              break;
            case "touchcancel":
            case "touchend":
            case "touchmove":
            case "touchstart":
              be = fd;
              break;
            case oa:
            case xd:
            case _a:
              be = Am;
              break;
            case br:
              be = yr;
              break;
            case "scroll":
            case "scrollend":
              be = bm;
              break;
            case "wheel":
              be = _y;
              break;
            case "copy":
            case "cut":
            case "paste":
              be = Cm;
              break;
            case "gotpointercapture":
            case "lostpointercapture":
            case "pointercancel":
            case "pointerdown":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "pointerup":
              be = df;
              break;
            case "toggle":
            case "beforetoggle":
              be = eo;
          }
          var Lt = (o & 4) !== 0, Xn = !Lt && (a === "scroll" || a === "scrollend"), ue = Lt ? Se !== null ? Se + "Capture" : null : Se;
          Lt = [];
          for (var ie = ye, ge; ie !== null; ) {
            var Be = ie;
            if (ge = Be.stateNode, Be = Be.tag, Be !== 5 && Be !== 26 && Be !== 27 || ge === null || ue === null || (Be = El(ie, ue), Be != null && Lt.push(
              sp(ie, Be, ge)
            )), Xn) break;
            ie = ie.return;
          }
          0 < Lt.length && (Se = new be(
            Se,
            Gt,
            null,
            f,
            Le
          ), Ie.push({ event: Se, listeners: Lt }));
        }
      }
      if ((o & 7) === 0) {
        e: {
          if (Se = a === "mouseover" || a === "pointerover", be = a === "mouseout" || a === "pointerout", Se && f !== lf && (Gt = f.relatedTarget || f.fromElement) && (As(Gt) || Gt[as]))
            break e;
          if ((be || Se) && (Se = Le.window === Le ? Le : (Se = Le.ownerDocument) ? Se.defaultView || Se.parentWindow : window, be ? (Gt = f.relatedTarget || f.toElement, be = ye, Gt = Gt ? As(Gt) : null, Gt !== null && (Xn = c(Gt), Lt = Gt.tag, Gt !== Xn || Lt !== 5 && Lt !== 27 && Lt !== 6) && (Gt = null)) : (be = null, Gt = ye), be !== Gt)) {
            if (Lt = od, Be = "onMouseLeave", ue = "onMouseEnter", ie = "mouse", (a === "pointerout" || a === "pointerover") && (Lt = df, Be = "onPointerLeave", ue = "onPointerEnter", ie = "pointer"), Xn = be == null ? Se : Qr(be), ge = Gt == null ? Se : Qr(Gt), Se = new Lt(
              Be,
              ie + "leave",
              be,
              f,
              Le
            ), Se.target = Xn, Se.relatedTarget = ge, Be = null, As(Le) === ye && (Lt = new Lt(
              ue,
              ie + "enter",
              Gt,
              f,
              Le
            ), Lt.target = ge, Lt.relatedTarget = Xn, Be = Lt), Xn = Be, be && Gt)
              t: {
                for (Lt = be, ue = Gt, ie = 0, ge = Lt; ge; ge = ah(ge))
                  ie++;
                for (ge = 0, Be = ue; Be; Be = ah(Be))
                  ge++;
                for (; 0 < ie - ge; )
                  Lt = ah(Lt), ie--;
                for (; 0 < ge - ie; )
                  ue = ah(ue), ge--;
                for (; ie--; ) {
                  if (Lt === ue || ue !== null && Lt === ue.alternate)
                    break t;
                  Lt = ah(Lt), ue = ah(ue);
                }
                Lt = null;
              }
            else Lt = null;
            be !== null && Ix(
              Ie,
              Se,
              be,
              Lt,
              !1
            ), Gt !== null && Xn !== null && Ix(
              Ie,
              Xn,
              Gt,
              Lt,
              !0
            );
          }
        }
        e: {
          if (Se = ye ? Qr(ye) : window, be = Se.nodeName && Se.nodeName.toLowerCase(), be === "select" || be === "input" && Se.type === "file")
            var gt = mf;
          else if (md(Se))
            if (vf)
              gt = io;
            else {
              gt = Im;
              var ln = Sy;
            }
          else
            be = Se.nodeName, !be || be.toLowerCase() !== "input" || Se.type !== "checkbox" && Se.type !== "radio" ? ye && of(ye.elementType) && (gt = mf) : gt = jc;
          if (gt && (gt = gt(a, ye))) {
            va(
              Ie,
              gt,
              f,
              Le
            );
            break e;
          }
          ln && ln(a, Se, ye), a === "focusout" && ye && Se.type === "number" && ye.memoizedProps.value != null && Ii(Se, "number", Se.value);
        }
        switch (ln = ye ? Qr(ye) : window, a) {
          case "focusin":
            (md(ln) || ln.contentEditable === "true") && (Sr = ln, yf = ye, Kc = null);
            break;
          case "focusout":
            Kc = yf = Sr = null;
            break;
          case "mousedown":
            _f = !0;
            break;
          case "contextmenu":
          case "mouseup":
          case "dragend":
            _f = !1, Sd(Ie, f, Le);
            break;
          case "selectionchange":
            if (_d) break;
          case "keydown":
          case "keyup":
            Sd(Ie, f, Le);
        }
        var Et;
        if (Xc)
          e: {
            switch (a) {
              case "compositionstart":
                var zt = "onCompositionStart";
                break e;
              case "compositionend":
                zt = "onCompositionEnd";
                break e;
              case "compositionupdate":
                zt = "onCompositionUpdate";
                break e;
            }
            zt = void 0;
          }
        else
          no ? kc(a, f) && (zt = "onCompositionEnd") : a === "keydown" && f.keyCode === 229 && (zt = "onCompositionStart");
        zt && (Yc && f.locale !== "ko" && (no || zt !== "onCompositionStart" ? zt === "onCompositionEnd" && no && (Et = rd()) : (vr = Le, sd = "value" in vr ? vr.value : vr.textContent, no = !0)), ln = Lv(ye, zt), 0 < ln.length && (zt = new hf(
          zt,
          a,
          null,
          f,
          Le
        ), Ie.push({ event: zt, listeners: ln }), Et ? zt.data = Et : (Et = dd(f), Et !== null && (zt.data = Et)))), (Et = qc ? Wc(a, f) : pd(a, f)) && (zt = Lv(ye, "onBeforeInput"), 0 < zt.length && (ln = new hf(
          "onBeforeInput",
          "beforeinput",
          null,
          f,
          Le
        ), Ie.push({
          event: ln,
          listeners: zt
        }), ln.data = Et)), rA(
          Ie,
          a,
          ye,
          f,
          Le
        );
      }
      Bx(Ie, o);
    });
  }
  function sp(a, o, f) {
    return {
      instance: a,
      listener: o,
      currentTarget: f
    };
  }
  function Lv(a, o) {
    for (var f = o + "Capture", p = []; a !== null; ) {
      var y = a, T = y.stateNode;
      if (y = y.tag, y !== 5 && y !== 26 && y !== 27 || T === null || (y = El(a, f), y != null && p.unshift(
        sp(a, y, T)
      ), y = El(a, o), y != null && p.push(
        sp(a, y, T)
      )), a.tag === 3) return p;
      a = a.return;
    }
    return [];
  }
  function ah(a) {
    if (a === null) return null;
    do
      a = a.return;
    while (a && a.tag !== 5 && a.tag !== 27);
    return a || null;
  }
  function Ix(a, o, f, p, y) {
    for (var T = o._reactName, L = []; f !== null && f !== p; ) {
      var G = f, J = G.alternate, ye = G.stateNode;
      if (G = G.tag, J !== null && J === p) break;
      G !== 5 && G !== 26 && G !== 27 || ye === null || (J = ye, y ? (ye = El(f, T), ye != null && L.unshift(
        sp(f, ye, J)
      )) : y || (ye = El(f, T), ye != null && L.push(
        sp(f, ye, J)
      ))), f = f.return;
    }
    L.length !== 0 && a.push({ event: o, listeners: L });
  }
  var uA = /\r\n?/g, fA = /\u0000|\uFFFD/g;
  function Hx(a) {
    return (typeof a == "string" ? a : "" + a).replace(uA, `
`).replace(fA, "");
  }
  function Vx(a, o) {
    return o = Hx(o), Hx(a) === o;
  }
  function zv() {
  }
  function Fn(a, o, f, p, y, T) {
    switch (f) {
      case "children":
        typeof p == "string" ? o === "body" || o === "textarea" && p === "" || Mi(a, p) : (typeof p == "number" || typeof p == "bigint") && o !== "body" && Mi(a, "" + p);
        break;
      case "className":
        ft(a, "class", p);
        break;
      case "tabIndex":
        ft(a, "tabindex", p);
        break;
      case "dir":
      case "role":
      case "viewBox":
      case "width":
      case "height":
        ft(a, f, p);
        break;
      case "style":
        Bc(a, p, T);
        break;
      case "data":
        if (o !== "object") {
          ft(a, "data", p);
          break;
        }
      case "src":
      case "href":
        if (p === "" && (o !== "a" || f !== "href")) {
          a.removeAttribute(f);
          break;
        }
        if (p == null || typeof p == "function" || typeof p == "symbol" || typeof p == "boolean") {
          a.removeAttribute(f);
          break;
        }
        p = Pc("" + p), a.setAttribute(f, p);
        break;
      case "action":
      case "formAction":
        if (typeof p == "function") {
          a.setAttribute(
            f,
            "javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')"
          );
          break;
        } else
          typeof T == "function" && (f === "formAction" ? (o !== "input" && Fn(a, o, "name", y.name, y, null), Fn(
            a,
            o,
            "formEncType",
            y.formEncType,
            y,
            null
          ), Fn(
            a,
            o,
            "formMethod",
            y.formMethod,
            y,
            null
          ), Fn(
            a,
            o,
            "formTarget",
            y.formTarget,
            y,
            null
          )) : (Fn(a, o, "encType", y.encType, y, null), Fn(a, o, "method", y.method, y, null), Fn(a, o, "target", y.target, y, null)));
        if (p == null || typeof p == "symbol" || typeof p == "boolean") {
          a.removeAttribute(f);
          break;
        }
        p = Pc("" + p), a.setAttribute(f, p);
        break;
      case "onClick":
        p != null && (a.onclick = zv);
        break;
      case "onScroll":
        p != null && cn("scroll", a);
        break;
      case "onScrollEnd":
        p != null && cn("scrollend", a);
        break;
      case "dangerouslySetInnerHTML":
        if (p != null) {
          if (typeof p != "object" || !("__html" in p))
            throw Error(i(61));
          if (f = p.__html, f != null) {
            if (y.children != null) throw Error(i(60));
            a.innerHTML = f;
          }
        }
        break;
      case "multiple":
        a.multiple = p && typeof p != "function" && typeof p != "symbol";
        break;
      case "muted":
        a.muted = p && typeof p != "function" && typeof p != "symbol";
        break;
      case "suppressContentEditableWarning":
      case "suppressHydrationWarning":
      case "defaultValue":
      case "defaultChecked":
      case "innerHTML":
      case "ref":
        break;
      case "autoFocus":
        break;
      case "xlinkHref":
        if (p == null || typeof p == "function" || typeof p == "boolean" || typeof p == "symbol") {
          a.removeAttribute("xlink:href");
          break;
        }
        f = Pc("" + p), a.setAttributeNS(
          "http://www.w3.org/1999/xlink",
          "xlink:href",
          f
        );
        break;
      case "contentEditable":
      case "spellCheck":
      case "draggable":
      case "value":
      case "autoReverse":
      case "externalResourcesRequired":
      case "focusable":
      case "preserveAlpha":
        p != null && typeof p != "function" && typeof p != "symbol" ? a.setAttribute(f, "" + p) : a.removeAttribute(f);
        break;
      case "inert":
      case "allowFullScreen":
      case "async":
      case "autoPlay":
      case "controls":
      case "default":
      case "defer":
      case "disabled":
      case "disablePictureInPicture":
      case "disableRemotePlayback":
      case "formNoValidate":
      case "hidden":
      case "loop":
      case "noModule":
      case "noValidate":
      case "open":
      case "playsInline":
      case "readOnly":
      case "required":
      case "reversed":
      case "scoped":
      case "seamless":
      case "itemScope":
        p && typeof p != "function" && typeof p != "symbol" ? a.setAttribute(f, "") : a.removeAttribute(f);
        break;
      case "capture":
      case "download":
        p === !0 ? a.setAttribute(f, "") : p !== !1 && p != null && typeof p != "function" && typeof p != "symbol" ? a.setAttribute(f, p) : a.removeAttribute(f);
        break;
      case "cols":
      case "rows":
      case "size":
      case "span":
        p != null && typeof p != "function" && typeof p != "symbol" && !isNaN(p) && 1 <= p ? a.setAttribute(f, p) : a.removeAttribute(f);
        break;
      case "rowSpan":
      case "start":
        p == null || typeof p == "function" || typeof p == "symbol" || isNaN(p) ? a.removeAttribute(f) : a.setAttribute(f, p);
        break;
      case "popover":
        cn("beforetoggle", a), cn("toggle", a), Je(a, "popover", p);
        break;
      case "xlinkActuate":
        it(
          a,
          "http://www.w3.org/1999/xlink",
          "xlink:actuate",
          p
        );
        break;
      case "xlinkArcrole":
        it(
          a,
          "http://www.w3.org/1999/xlink",
          "xlink:arcrole",
          p
        );
        break;
      case "xlinkRole":
        it(
          a,
          "http://www.w3.org/1999/xlink",
          "xlink:role",
          p
        );
        break;
      case "xlinkShow":
        it(
          a,
          "http://www.w3.org/1999/xlink",
          "xlink:show",
          p
        );
        break;
      case "xlinkTitle":
        it(
          a,
          "http://www.w3.org/1999/xlink",
          "xlink:title",
          p
        );
        break;
      case "xlinkType":
        it(
          a,
          "http://www.w3.org/1999/xlink",
          "xlink:type",
          p
        );
        break;
      case "xmlBase":
        it(
          a,
          "http://www.w3.org/XML/1998/namespace",
          "xml:base",
          p
        );
        break;
      case "xmlLang":
        it(
          a,
          "http://www.w3.org/XML/1998/namespace",
          "xml:lang",
          p
        );
        break;
      case "xmlSpace":
        it(
          a,
          "http://www.w3.org/XML/1998/namespace",
          "xml:space",
          p
        );
        break;
      case "is":
        Je(a, "is", p);
        break;
      case "innerText":
      case "textContent":
        break;
      default:
        (!(2 < f.length) || f[0] !== "o" && f[0] !== "O" || f[1] !== "n" && f[1] !== "N") && (f = nd.get(f) || f, Je(a, f, p));
    }
  }
  function Py(a, o, f, p, y, T) {
    switch (f) {
      case "style":
        Bc(a, p, T);
        break;
      case "dangerouslySetInnerHTML":
        if (p != null) {
          if (typeof p != "object" || !("__html" in p))
            throw Error(i(61));
          if (f = p.__html, f != null) {
            if (y.children != null) throw Error(i(60));
            a.innerHTML = f;
          }
        }
        break;
      case "children":
        typeof p == "string" ? Mi(a, p) : (typeof p == "number" || typeof p == "bigint") && Mi(a, "" + p);
        break;
      case "onScroll":
        p != null && cn("scroll", a);
        break;
      case "onScrollEnd":
        p != null && cn("scrollend", a);
        break;
      case "onClick":
        p != null && (a.onclick = zv);
        break;
      case "suppressContentEditableWarning":
      case "suppressHydrationWarning":
      case "innerHTML":
      case "ref":
        break;
      case "innerText":
      case "textContent":
        break;
      default:
        if (!bl.hasOwnProperty(f))
          e: {
            if (f[0] === "o" && f[1] === "n" && (y = f.endsWith("Capture"), o = f.slice(2, y ? f.length - 7 : void 0), T = a[jn] || null, T = T != null ? T[f] : null, typeof T == "function" && a.removeEventListener(o, T, y), typeof p == "function")) {
              typeof T != "function" && T !== null && (f in a ? a[f] = null : a.hasAttribute(f) && a.removeAttribute(f)), a.addEventListener(o, p, y);
              break e;
            }
            f in a ? a[f] = p : p === !0 ? a.setAttribute(f, "") : Je(a, f, p);
          }
    }
  }
  function pa(a, o, f) {
    switch (o) {
      case "div":
      case "span":
      case "svg":
      case "path":
      case "a":
      case "g":
      case "p":
      case "li":
        break;
      case "img":
        cn("error", a), cn("load", a);
        var p = !1, y = !1, T;
        for (T in f)
          if (f.hasOwnProperty(T)) {
            var L = f[T];
            if (L != null)
              switch (T) {
                case "src":
                  p = !0;
                  break;
                case "srcSet":
                  y = !0;
                  break;
                case "children":
                case "dangerouslySetInnerHTML":
                  throw Error(i(137, o));
                default:
                  Fn(a, o, T, L, f, null);
              }
          }
        y && Fn(a, o, "srcSet", f.srcSet, f, null), p && Fn(a, o, "src", f.src, f, null);
        return;
      case "input":
        cn("invalid", a);
        var G = T = L = y = null, J = null, ye = null;
        for (p in f)
          if (f.hasOwnProperty(p)) {
            var Le = f[p];
            if (Le != null)
              switch (p) {
                case "name":
                  y = Le;
                  break;
                case "type":
                  L = Le;
                  break;
                case "checked":
                  J = Le;
                  break;
                case "defaultChecked":
                  ye = Le;
                  break;
                case "value":
                  T = Le;
                  break;
                case "defaultValue":
                  G = Le;
                  break;
                case "children":
                case "dangerouslySetInnerHTML":
                  if (Le != null)
                    throw Error(i(137, o));
                  break;
                default:
                  Fn(a, o, p, Le, f, null);
              }
          }
        Ji(
          a,
          T,
          G,
          J,
          ye,
          L,
          y,
          !1
        ), nn(a);
        return;
      case "select":
        cn("invalid", a), p = L = T = null;
        for (y in f)
          if (f.hasOwnProperty(y) && (G = f[y], G != null))
            switch (y) {
              case "value":
                T = G;
                break;
              case "defaultValue":
                L = G;
                break;
              case "multiple":
                p = G;
              default:
                Fn(a, o, y, G, f, null);
            }
        o = T, f = L, a.multiple = !!p, o != null ? Kn(a, !!p, o, !1) : f != null && Kn(a, !!p, f, !0);
        return;
      case "textarea":
        cn("invalid", a), T = y = p = null;
        for (L in f)
          if (f.hasOwnProperty(L) && (G = f[L], G != null))
            switch (L) {
              case "value":
                p = G;
                break;
              case "defaultValue":
                y = G;
                break;
              case "children":
                T = G;
                break;
              case "dangerouslySetInnerHTML":
                if (G != null) throw Error(i(91));
                break;
              default:
                Fn(a, o, L, G, f, null);
            }
        Go(a, p, y, T), nn(a);
        return;
      case "option":
        for (J in f)
          if (f.hasOwnProperty(J) && (p = f[J], p != null))
            switch (J) {
              case "selected":
                a.selected = p && typeof p != "function" && typeof p != "symbol";
                break;
              default:
                Fn(a, o, J, p, f, null);
            }
        return;
      case "dialog":
        cn("beforetoggle", a), cn("toggle", a), cn("cancel", a), cn("close", a);
        break;
      case "iframe":
      case "object":
        cn("load", a);
        break;
      case "video":
      case "audio":
        for (p = 0; p < ap.length; p++)
          cn(ap[p], a);
        break;
      case "image":
        cn("error", a), cn("load", a);
        break;
      case "details":
        cn("toggle", a);
        break;
      case "embed":
      case "source":
      case "link":
        cn("error", a), cn("load", a);
      case "area":
      case "base":
      case "br":
      case "col":
      case "hr":
      case "keygen":
      case "meta":
      case "param":
      case "track":
      case "wbr":
      case "menuitem":
        for (ye in f)
          if (f.hasOwnProperty(ye) && (p = f[ye], p != null))
            switch (ye) {
              case "children":
              case "dangerouslySetInnerHTML":
                throw Error(i(137, o));
              default:
                Fn(a, o, ye, p, f, null);
            }
        return;
      default:
        if (of(o)) {
          for (Le in f)
            f.hasOwnProperty(Le) && (p = f[Le], p !== void 0 && Py(
              a,
              o,
              Le,
              p,
              f,
              void 0
            ));
          return;
        }
    }
    for (G in f)
      f.hasOwnProperty(G) && (p = f[G], p != null && Fn(a, o, G, p, f, null));
  }
  function hA(a, o, f, p) {
    switch (o) {
      case "div":
      case "span":
      case "svg":
      case "path":
      case "a":
      case "g":
      case "p":
      case "li":
        break;
      case "input":
        var y = null, T = null, L = null, G = null, J = null, ye = null, Le = null;
        for (be in f) {
          var Ie = f[be];
          if (f.hasOwnProperty(be) && Ie != null)
            switch (be) {
              case "checked":
                break;
              case "value":
                break;
              case "defaultValue":
                J = Ie;
              default:
                p.hasOwnProperty(be) || Fn(a, o, be, null, p, Ie);
            }
        }
        for (var Se in p) {
          var be = p[Se];
          if (Ie = f[Se], p.hasOwnProperty(Se) && (be != null || Ie != null))
            switch (Se) {
              case "type":
                T = be;
                break;
              case "name":
                y = be;
                break;
              case "checked":
                ye = be;
                break;
              case "defaultChecked":
                Le = be;
                break;
              case "value":
                L = be;
                break;
              case "defaultValue":
                G = be;
                break;
              case "children":
              case "dangerouslySetInnerHTML":
                if (be != null)
                  throw Error(i(137, o));
                break;
              default:
                be !== Ie && Fn(
                  a,
                  o,
                  Se,
                  be,
                  p,
                  Ie
                );
            }
        }
        Dn(
          a,
          L,
          G,
          J,
          ye,
          Le,
          T,
          y
        );
        return;
      case "select":
        be = L = G = Se = null;
        for (T in f)
          if (J = f[T], f.hasOwnProperty(T) && J != null)
            switch (T) {
              case "value":
                break;
              case "multiple":
                be = J;
              default:
                p.hasOwnProperty(T) || Fn(
                  a,
                  o,
                  T,
                  null,
                  p,
                  J
                );
            }
        for (y in p)
          if (T = p[y], J = f[y], p.hasOwnProperty(y) && (T != null || J != null))
            switch (y) {
              case "value":
                Se = T;
                break;
              case "defaultValue":
                G = T;
                break;
              case "multiple":
                L = T;
              default:
                T !== J && Fn(
                  a,
                  o,
                  y,
                  T,
                  p,
                  J
                );
            }
        o = G, f = L, p = be, Se != null ? Kn(a, !!f, Se, !1) : !!p != !!f && (o != null ? Kn(a, !!f, o, !0) : Kn(a, !!f, f ? [] : "", !1));
        return;
      case "textarea":
        be = Se = null;
        for (G in f)
          if (y = f[G], f.hasOwnProperty(G) && y != null && !p.hasOwnProperty(G))
            switch (G) {
              case "value":
                break;
              case "children":
                break;
              default:
                Fn(a, o, G, null, p, y);
            }
        for (L in p)
          if (y = p[L], T = f[L], p.hasOwnProperty(L) && (y != null || T != null))
            switch (L) {
              case "value":
                Se = y;
                break;
              case "defaultValue":
                be = y;
                break;
              case "children":
                break;
              case "dangerouslySetInnerHTML":
                if (y != null) throw Error(i(91));
                break;
              default:
                y !== T && Fn(a, o, L, y, p, T);
            }
        Hi(a, Se, be);
        return;
      case "option":
        for (var Gt in f)
          if (Se = f[Gt], f.hasOwnProperty(Gt) && Se != null && !p.hasOwnProperty(Gt))
            switch (Gt) {
              case "selected":
                a.selected = !1;
                break;
              default:
                Fn(
                  a,
                  o,
                  Gt,
                  null,
                  p,
                  Se
                );
            }
        for (J in p)
          if (Se = p[J], be = f[J], p.hasOwnProperty(J) && Se !== be && (Se != null || be != null))
            switch (J) {
              case "selected":
                a.selected = Se && typeof Se != "function" && typeof Se != "symbol";
                break;
              default:
                Fn(
                  a,
                  o,
                  J,
                  Se,
                  p,
                  be
                );
            }
        return;
      case "img":
      case "link":
      case "area":
      case "base":
      case "br":
      case "col":
      case "embed":
      case "hr":
      case "keygen":
      case "meta":
      case "param":
      case "source":
      case "track":
      case "wbr":
      case "menuitem":
        for (var Lt in f)
          Se = f[Lt], f.hasOwnProperty(Lt) && Se != null && !p.hasOwnProperty(Lt) && Fn(a, o, Lt, null, p, Se);
        for (ye in p)
          if (Se = p[ye], be = f[ye], p.hasOwnProperty(ye) && Se !== be && (Se != null || be != null))
            switch (ye) {
              case "children":
              case "dangerouslySetInnerHTML":
                if (Se != null)
                  throw Error(i(137, o));
                break;
              default:
                Fn(
                  a,
                  o,
                  ye,
                  Se,
                  p,
                  be
                );
            }
        return;
      default:
        if (of(o)) {
          for (var Xn in f)
            Se = f[Xn], f.hasOwnProperty(Xn) && Se !== void 0 && !p.hasOwnProperty(Xn) && Py(
              a,
              o,
              Xn,
              void 0,
              p,
              Se
            );
          for (Le in p)
            Se = p[Le], be = f[Le], !p.hasOwnProperty(Le) || Se === be || Se === void 0 && be === void 0 || Py(
              a,
              o,
              Le,
              Se,
              p,
              be
            );
          return;
        }
    }
    for (var ue in f)
      Se = f[ue], f.hasOwnProperty(ue) && Se != null && !p.hasOwnProperty(ue) && Fn(a, o, ue, null, p, Se);
    for (Ie in p)
      Se = p[Ie], be = f[Ie], !p.hasOwnProperty(Ie) || Se === be || Se == null && be == null || Fn(a, o, Ie, Se, p, be);
  }
  var Iy = null, Hy = null;
  function Bv(a) {
    return a.nodeType === 9 ? a : a.ownerDocument;
  }
  function Gx(a) {
    switch (a) {
      case "http://www.w3.org/2000/svg":
        return 1;
      case "http://www.w3.org/1998/Math/MathML":
        return 2;
      default:
        return 0;
    }
  }
  function Fx(a, o) {
    if (a === 0)
      switch (o) {
        case "svg":
          return 1;
        case "math":
          return 2;
        default:
          return 0;
      }
    return a === 1 && o === "foreignObject" ? 0 : a;
  }
  function Vy(a, o) {
    return a === "textarea" || a === "noscript" || typeof o.children == "string" || typeof o.children == "number" || typeof o.children == "bigint" || typeof o.dangerouslySetInnerHTML == "object" && o.dangerouslySetInnerHTML !== null && o.dangerouslySetInnerHTML.__html != null;
  }
  var Gy = null;
  function dA() {
    var a = window.event;
    return a && a.type === "popstate" ? a === Gy ? !1 : (Gy = a, !0) : (Gy = null, !1);
  }
  var Xx = typeof setTimeout == "function" ? setTimeout : void 0, pA = typeof clearTimeout == "function" ? clearTimeout : void 0, qx = typeof Promise == "function" ? Promise : void 0, mA = typeof queueMicrotask == "function" ? queueMicrotask : typeof qx < "u" ? function(a) {
    return qx.resolve(null).then(a).catch(vA);
  } : Xx;
  function vA(a) {
    setTimeout(function() {
      throw a;
    });
  }
  function cc(a) {
    return a === "head";
  }
  function Yx(a, o) {
    var f = o, p = 0, y = 0;
    do {
      var T = f.nextSibling;
      if (a.removeChild(f), T && T.nodeType === 8)
        if (f = T.data, f === "/$") {
          if (0 < p && 8 > p) {
            f = p;
            var L = a.ownerDocument;
            if (f & 1 && rp(L.documentElement), f & 2 && rp(L.body), f & 4)
              for (f = L.head, rp(f), L = f.firstChild; L; ) {
                var G = L.nextSibling, J = L.nodeName;
                L[za] || J === "SCRIPT" || J === "STYLE" || J === "LINK" && L.rel.toLowerCase() === "stylesheet" || f.removeChild(L), L = G;
              }
          }
          if (y === 0) {
            a.removeChild(T), pp(o);
            return;
          }
          y--;
        } else
          f === "$" || f === "$?" || f === "$!" ? y++ : p = f.charCodeAt(0) - 48;
      else p = 0;
      f = T;
    } while (f);
    pp(o);
  }
  function Fy(a) {
    var o = a.firstChild;
    for (o && o.nodeType === 10 && (o = o.nextSibling); o; ) {
      var f = o;
      switch (o = o.nextSibling, f.nodeName) {
        case "HTML":
        case "HEAD":
        case "BODY":
          Fy(f), In(f);
          continue;
        case "SCRIPT":
        case "STYLE":
          continue;
        case "LINK":
          if (f.rel.toLowerCase() === "stylesheet") continue;
      }
      a.removeChild(f);
    }
  }
  function gA(a, o, f, p) {
    for (; a.nodeType === 1; ) {
      var y = f;
      if (a.nodeName.toLowerCase() !== o.toLowerCase()) {
        if (!p && (a.nodeName !== "INPUT" || a.type !== "hidden"))
          break;
      } else if (p) {
        if (!a[za])
          switch (o) {
            case "meta":
              if (!a.hasAttribute("itemprop")) break;
              return a;
            case "link":
              if (T = a.getAttribute("rel"), T === "stylesheet" && a.hasAttribute("data-precedence"))
                break;
              if (T !== y.rel || a.getAttribute("href") !== (y.href == null || y.href === "" ? null : y.href) || a.getAttribute("crossorigin") !== (y.crossOrigin == null ? null : y.crossOrigin) || a.getAttribute("title") !== (y.title == null ? null : y.title))
                break;
              return a;
            case "style":
              if (a.hasAttribute("data-precedence")) break;
              return a;
            case "script":
              if (T = a.getAttribute("src"), (T !== (y.src == null ? null : y.src) || a.getAttribute("type") !== (y.type == null ? null : y.type) || a.getAttribute("crossorigin") !== (y.crossOrigin == null ? null : y.crossOrigin)) && T && a.hasAttribute("async") && !a.hasAttribute("itemprop"))
                break;
              return a;
            default:
              return a;
          }
      } else if (o === "input" && a.type === "hidden") {
        var T = y.name == null ? null : "" + y.name;
        if (y.type === "hidden" && a.getAttribute("name") === T)
          return a;
      } else return a;
      if (a = Hr(a.nextSibling), a === null) break;
    }
    return null;
  }
  function yA(a, o, f) {
    if (o === "") return null;
    for (; a.nodeType !== 3; )
      if ((a.nodeType !== 1 || a.nodeName !== "INPUT" || a.type !== "hidden") && !f || (a = Hr(a.nextSibling), a === null)) return null;
    return a;
  }
  function Xy(a) {
    return a.data === "$!" || a.data === "$?" && a.ownerDocument.readyState === "complete";
  }
  function _A(a, o) {
    var f = a.ownerDocument;
    if (a.data !== "$?" || f.readyState === "complete")
      o();
    else {
      var p = function() {
        o(), f.removeEventListener("DOMContentLoaded", p);
      };
      f.addEventListener("DOMContentLoaded", p), a._reactRetry = p;
    }
  }
  function Hr(a) {
    for (; a != null; a = a.nextSibling) {
      var o = a.nodeType;
      if (o === 1 || o === 3) break;
      if (o === 8) {
        if (o = a.data, o === "$" || o === "$!" || o === "$?" || o === "F!" || o === "F")
          break;
        if (o === "/$") return null;
      }
    }
    return a;
  }
  var qy = null;
  function kx(a) {
    a = a.previousSibling;
    for (var o = 0; a; ) {
      if (a.nodeType === 8) {
        var f = a.data;
        if (f === "$" || f === "$!" || f === "$?") {
          if (o === 0) return a;
          o--;
        } else f === "/$" && o++;
      }
      a = a.previousSibling;
    }
    return null;
  }
  function Wx(a, o, f) {
    switch (o = Bv(f), a) {
      case "html":
        if (a = o.documentElement, !a) throw Error(i(452));
        return a;
      case "head":
        if (a = o.head, !a) throw Error(i(453));
        return a;
      case "body":
        if (a = o.body, !a) throw Error(i(454));
        return a;
      default:
        throw Error(i(451));
    }
  }
  function rp(a) {
    for (var o = a.attributes; o.length; )
      a.removeAttributeNode(o[0]);
    In(a);
  }
  var cr = /* @__PURE__ */ new Map(), Zx = /* @__PURE__ */ new Set();
  function Pv(a) {
    return typeof a.getRootNode == "function" ? a.getRootNode() : a.nodeType === 9 ? a : a.ownerDocument;
  }
  var ul = K.d;
  K.d = {
    f: SA,
    r: xA,
    D: MA,
    C: bA,
    L: EA,
    m: TA,
    X: RA,
    S: AA,
    M: CA
  };
  function SA() {
    var a = ul.f(), o = or();
    return a || o;
  }
  function xA(a) {
    var o = Ys(a);
    o !== null && o.tag === 5 && o.type === "form" ? vv(o) : ul.r(a);
  }
  var sh = typeof document > "u" ? null : document;
  function jx(a, o, f) {
    var p = sh;
    if (p && typeof o == "string" && o) {
      var y = xi(o);
      y = 'link[rel="' + a + '"][href="' + y + '"]', typeof f == "string" && (y += '[crossorigin="' + f + '"]'), Zx.has(y) || (Zx.add(y), a = { rel: a, crossOrigin: f, href: o }, p.querySelector(y) === null && (o = p.createElement("link"), pa(o, "link", a), vi(o), p.head.appendChild(o)));
    }
  }
  function MA(a) {
    ul.D(a), jx("dns-prefetch", a, null);
  }
  function bA(a, o) {
    ul.C(a, o), jx("preconnect", a, o);
  }
  function EA(a, o, f) {
    ul.L(a, o, f);
    var p = sh;
    if (p && a && o) {
      var y = 'link[rel="preload"][as="' + xi(o) + '"]';
      o === "image" && f && f.imageSrcSet ? (y += '[imagesrcset="' + xi(
        f.imageSrcSet
      ) + '"]', typeof f.imageSizes == "string" && (y += '[imagesizes="' + xi(
        f.imageSizes
      ) + '"]')) : y += '[href="' + xi(a) + '"]';
      var T = y;
      switch (o) {
        case "style":
          T = rh(a);
          break;
        case "script":
          T = oh(a);
      }
      cr.has(T) || (a = S(
        {
          rel: "preload",
          href: o === "image" && f && f.imageSrcSet ? void 0 : a,
          as: o
        },
        f
      ), cr.set(T, a), p.querySelector(y) !== null || o === "style" && p.querySelector(op(T)) || o === "script" && p.querySelector(lp(T)) || (o = p.createElement("link"), pa(o, "link", a), vi(o), p.head.appendChild(o)));
    }
  }
  function TA(a, o) {
    ul.m(a, o);
    var f = sh;
    if (f && a) {
      var p = o && typeof o.as == "string" ? o.as : "script", y = 'link[rel="modulepreload"][as="' + xi(p) + '"][href="' + xi(a) + '"]', T = y;
      switch (p) {
        case "audioworklet":
        case "paintworklet":
        case "serviceworker":
        case "sharedworker":
        case "worker":
        case "script":
          T = oh(a);
      }
      if (!cr.has(T) && (a = S({ rel: "modulepreload", href: a }, o), cr.set(T, a), f.querySelector(y) === null)) {
        switch (p) {
          case "audioworklet":
          case "paintworklet":
          case "serviceworker":
          case "sharedworker":
          case "worker":
          case "script":
            if (f.querySelector(lp(T)))
              return;
        }
        p = f.createElement("link"), pa(p, "link", a), vi(p), f.head.appendChild(p);
      }
    }
  }
  function AA(a, o, f) {
    ul.S(a, o, f);
    var p = sh;
    if (p && a) {
      var y = mr(p).hoistableStyles, T = rh(a);
      o = o || "default";
      var L = y.get(T);
      if (!L) {
        var G = { loading: 0, preload: null };
        if (L = p.querySelector(
          op(T)
        ))
          G.loading = 5;
        else {
          a = S(
            { rel: "stylesheet", href: a, "data-precedence": o },
            f
          ), (f = cr.get(T)) && Yy(a, f);
          var J = L = p.createElement("link");
          vi(J), pa(J, "link", a), J._p = new Promise(function(ye, Le) {
            J.onload = ye, J.onerror = Le;
          }), J.addEventListener("load", function() {
            G.loading |= 1;
          }), J.addEventListener("error", function() {
            G.loading |= 2;
          }), G.loading |= 4, Iv(L, o, p);
        }
        L = {
          type: "stylesheet",
          instance: L,
          count: 1,
          state: G
        }, y.set(T, L);
      }
    }
  }
  function RA(a, o) {
    ul.X(a, o);
    var f = sh;
    if (f && a) {
      var p = mr(f).hoistableScripts, y = oh(a), T = p.get(y);
      T || (T = f.querySelector(lp(y)), T || (a = S({ src: a, async: !0 }, o), (o = cr.get(y)) && ky(a, o), T = f.createElement("script"), vi(T), pa(T, "link", a), f.head.appendChild(T)), T = {
        type: "script",
        instance: T,
        count: 1,
        state: null
      }, p.set(y, T));
    }
  }
  function CA(a, o) {
    ul.M(a, o);
    var f = sh;
    if (f && a) {
      var p = mr(f).hoistableScripts, y = oh(a), T = p.get(y);
      T || (T = f.querySelector(lp(y)), T || (a = S({ src: a, async: !0, type: "module" }, o), (o = cr.get(y)) && ky(a, o), T = f.createElement("script"), vi(T), pa(T, "link", a), f.head.appendChild(T)), T = {
        type: "script",
        instance: T,
        count: 1,
        state: null
      }, p.set(y, T));
    }
  }
  function Qx(a, o, f, p) {
    var y = (y = we.current) ? Pv(y) : null;
    if (!y) throw Error(i(446));
    switch (a) {
      case "meta":
      case "title":
        return null;
      case "style":
        return typeof f.precedence == "string" && typeof f.href == "string" ? (o = rh(f.href), f = mr(
          y
        ).hoistableStyles, p = f.get(o), p || (p = {
          type: "style",
          instance: null,
          count: 0,
          state: null
        }, f.set(o, p)), p) : { type: "void", instance: null, count: 0, state: null };
      case "link":
        if (f.rel === "stylesheet" && typeof f.href == "string" && typeof f.precedence == "string") {
          a = rh(f.href);
          var T = mr(
            y
          ).hoistableStyles, L = T.get(a);
          if (L || (y = y.ownerDocument || y, L = {
            type: "stylesheet",
            instance: null,
            count: 0,
            state: { loading: 0, preload: null }
          }, T.set(a, L), (T = y.querySelector(
            op(a)
          )) && !T._p && (L.instance = T, L.state.loading = 5), cr.has(a) || (f = {
            rel: "preload",
            as: "style",
            href: f.href,
            crossOrigin: f.crossOrigin,
            integrity: f.integrity,
            media: f.media,
            hrefLang: f.hrefLang,
            referrerPolicy: f.referrerPolicy
          }, cr.set(a, f), T || wA(
            y,
            a,
            f,
            L.state
          ))), o && p === null)
            throw Error(i(528, ""));
          return L;
        }
        if (o && p !== null)
          throw Error(i(529, ""));
        return null;
      case "script":
        return o = f.async, f = f.src, typeof f == "string" && o && typeof o != "function" && typeof o != "symbol" ? (o = oh(f), f = mr(
          y
        ).hoistableScripts, p = f.get(o), p || (p = {
          type: "script",
          instance: null,
          count: 0,
          state: null
        }, f.set(o, p)), p) : { type: "void", instance: null, count: 0, state: null };
      default:
        throw Error(i(444, a));
    }
  }
  function rh(a) {
    return 'href="' + xi(a) + '"';
  }
  function op(a) {
    return 'link[rel="stylesheet"][' + a + "]";
  }
  function Kx(a) {
    return S({}, a, {
      "data-precedence": a.precedence,
      precedence: null
    });
  }
  function wA(a, o, f, p) {
    a.querySelector('link[rel="preload"][as="style"][' + o + "]") ? p.loading = 1 : (o = a.createElement("link"), p.preload = o, o.addEventListener("load", function() {
      return p.loading |= 1;
    }), o.addEventListener("error", function() {
      return p.loading |= 2;
    }), pa(o, "link", f), vi(o), a.head.appendChild(o));
  }
  function oh(a) {
    return '[src="' + xi(a) + '"]';
  }
  function lp(a) {
    return "script[async]" + a;
  }
  function Jx(a, o, f) {
    if (o.count++, o.instance === null)
      switch (o.type) {
        case "style":
          var p = a.querySelector(
            'style[data-href~="' + xi(f.href) + '"]'
          );
          if (p)
            return o.instance = p, vi(p), p;
          var y = S({}, f, {
            "data-href": f.href,
            "data-precedence": f.precedence,
            href: null,
            precedence: null
          });
          return p = (a.ownerDocument || a).createElement(
            "style"
          ), vi(p), pa(p, "style", y), Iv(p, f.precedence, a), o.instance = p;
        case "stylesheet":
          y = rh(f.href);
          var T = a.querySelector(
            op(y)
          );
          if (T)
            return o.state.loading |= 4, o.instance = T, vi(T), T;
          p = Kx(f), (y = cr.get(y)) && Yy(p, y), T = (a.ownerDocument || a).createElement("link"), vi(T);
          var L = T;
          return L._p = new Promise(function(G, J) {
            L.onload = G, L.onerror = J;
          }), pa(T, "link", p), o.state.loading |= 4, Iv(T, f.precedence, a), o.instance = T;
        case "script":
          return T = oh(f.src), (y = a.querySelector(
            lp(T)
          )) ? (o.instance = y, vi(y), y) : (p = f, (y = cr.get(T)) && (p = S({}, f), ky(p, y)), a = a.ownerDocument || a, y = a.createElement("script"), vi(y), pa(y, "link", p), a.head.appendChild(y), o.instance = y);
        case "void":
          return null;
        default:
          throw Error(i(443, o.type));
      }
    else
      o.type === "stylesheet" && (o.state.loading & 4) === 0 && (p = o.instance, o.state.loading |= 4, Iv(p, f.precedence, a));
    return o.instance;
  }
  function Iv(a, o, f) {
    for (var p = f.querySelectorAll(
      'link[rel="stylesheet"][data-precedence],style[data-precedence]'
    ), y = p.length ? p[p.length - 1] : null, T = y, L = 0; L < p.length; L++) {
      var G = p[L];
      if (G.dataset.precedence === o) T = G;
      else if (T !== y) break;
    }
    T ? T.parentNode.insertBefore(a, T.nextSibling) : (o = f.nodeType === 9 ? f.head : f, o.insertBefore(a, o.firstChild));
  }
  function Yy(a, o) {
    a.crossOrigin == null && (a.crossOrigin = o.crossOrigin), a.referrerPolicy == null && (a.referrerPolicy = o.referrerPolicy), a.title == null && (a.title = o.title);
  }
  function ky(a, o) {
    a.crossOrigin == null && (a.crossOrigin = o.crossOrigin), a.referrerPolicy == null && (a.referrerPolicy = o.referrerPolicy), a.integrity == null && (a.integrity = o.integrity);
  }
  var Hv = null;
  function $x(a, o, f) {
    if (Hv === null) {
      var p = /* @__PURE__ */ new Map(), y = Hv = /* @__PURE__ */ new Map();
      y.set(f, p);
    } else
      y = Hv, p = y.get(f), p || (p = /* @__PURE__ */ new Map(), y.set(f, p));
    if (p.has(a)) return p;
    for (p.set(a, null), f = f.getElementsByTagName(a), y = 0; y < f.length; y++) {
      var T = f[y];
      if (!(T[za] || T[mi] || a === "link" && T.getAttribute("rel") === "stylesheet") && T.namespaceURI !== "http://www.w3.org/2000/svg") {
        var L = T.getAttribute(o) || "";
        L = a + L;
        var G = p.get(L);
        G ? G.push(T) : p.set(L, [T]);
      }
    }
    return p;
  }
  function e1(a, o, f) {
    a = a.ownerDocument || a, a.head.insertBefore(
      f,
      o === "title" ? a.querySelector("head > title") : null
    );
  }
  function DA(a, o, f) {
    if (f === 1 || o.itemProp != null) return !1;
    switch (a) {
      case "meta":
      case "title":
        return !0;
      case "style":
        if (typeof o.precedence != "string" || typeof o.href != "string" || o.href === "")
          break;
        return !0;
      case "link":
        if (typeof o.rel != "string" || typeof o.href != "string" || o.href === "" || o.onLoad || o.onError)
          break;
        switch (o.rel) {
          case "stylesheet":
            return a = o.disabled, typeof o.precedence == "string" && a == null;
          default:
            return !0;
        }
      case "script":
        if (o.async && typeof o.async != "function" && typeof o.async != "symbol" && !o.onLoad && !o.onError && o.src && typeof o.src == "string")
          return !0;
    }
    return !1;
  }
  function t1(a) {
    return !(a.type === "stylesheet" && (a.state.loading & 3) === 0);
  }
  var cp = null;
  function UA() {
  }
  function NA(a, o, f) {
    if (cp === null) throw Error(i(475));
    var p = cp;
    if (o.type === "stylesheet" && (typeof f.media != "string" || matchMedia(f.media).matches !== !1) && (o.state.loading & 4) === 0) {
      if (o.instance === null) {
        var y = rh(f.href), T = a.querySelector(
          op(y)
        );
        if (T) {
          a = T._p, a !== null && typeof a == "object" && typeof a.then == "function" && (p.count++, p = Vv.bind(p), a.then(p, p)), o.state.loading |= 4, o.instance = T, vi(T);
          return;
        }
        T = a.ownerDocument || a, f = Kx(f), (y = cr.get(y)) && Yy(f, y), T = T.createElement("link"), vi(T);
        var L = T;
        L._p = new Promise(function(G, J) {
          L.onload = G, L.onerror = J;
        }), pa(T, "link", f), o.instance = T;
      }
      p.stylesheets === null && (p.stylesheets = /* @__PURE__ */ new Map()), p.stylesheets.set(o, a), (a = o.state.preload) && (o.state.loading & 3) === 0 && (p.count++, o = Vv.bind(p), a.addEventListener("load", o), a.addEventListener("error", o));
    }
  }
  function OA() {
    if (cp === null) throw Error(i(475));
    var a = cp;
    return a.stylesheets && a.count === 0 && Wy(a, a.stylesheets), 0 < a.count ? function(o) {
      var f = setTimeout(function() {
        if (a.stylesheets && Wy(a, a.stylesheets), a.unsuspend) {
          var p = a.unsuspend;
          a.unsuspend = null, p();
        }
      }, 6e4);
      return a.unsuspend = o, function() {
        a.unsuspend = null, clearTimeout(f);
      };
    } : null;
  }
  function Vv() {
    if (this.count--, this.count === 0) {
      if (this.stylesheets) Wy(this, this.stylesheets);
      else if (this.unsuspend) {
        var a = this.unsuspend;
        this.unsuspend = null, a();
      }
    }
  }
  var Gv = null;
  function Wy(a, o) {
    a.stylesheets = null, a.unsuspend !== null && (a.count++, Gv = /* @__PURE__ */ new Map(), o.forEach(LA, a), Gv = null, Vv.call(a));
  }
  function LA(a, o) {
    if (!(o.state.loading & 4)) {
      var f = Gv.get(a);
      if (f) var p = f.get(null);
      else {
        f = /* @__PURE__ */ new Map(), Gv.set(a, f);
        for (var y = a.querySelectorAll(
          "link[data-precedence],style[data-precedence]"
        ), T = 0; T < y.length; T++) {
          var L = y[T];
          (L.nodeName === "LINK" || L.getAttribute("media") !== "not all") && (f.set(L.dataset.precedence, L), p = L);
        }
        p && f.set(null, p);
      }
      y = o.instance, L = y.getAttribute("data-precedence"), T = f.get(L) || p, T === p && f.set(null, y), f.set(L, y), this.count++, p = Vv.bind(this), y.addEventListener("load", p), y.addEventListener("error", p), T ? T.parentNode.insertBefore(y, T.nextSibling) : (a = a.nodeType === 9 ? a.head : a, a.insertBefore(y, a.firstChild)), o.state.loading |= 4;
    }
  }
  var up = {
    $$typeof: N,
    Provider: null,
    Consumer: null,
    _currentValue: Q,
    _currentValue2: Q,
    _threadCount: 0
  };
  function zA(a, o, f, p, y, T, L, G) {
    this.tag = 1, this.containerInfo = a, this.pingCache = this.current = this.pendingChildren = null, this.timeoutHandle = -1, this.callbackNode = this.next = this.pendingContext = this.context = this.cancelPendingCommit = null, this.callbackPriority = 0, this.expirationTimes = Ke(-1), this.entangledLanes = this.shellSuspendCounter = this.errorRecoveryDisabledLanes = this.expiredLanes = this.warmLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0, this.entanglements = Ke(0), this.hiddenUpdates = Ke(null), this.identifierPrefix = p, this.onUncaughtError = y, this.onCaughtError = T, this.onRecoverableError = L, this.pooledCache = null, this.pooledCacheLanes = 0, this.formState = G, this.incompleteTransitions = /* @__PURE__ */ new Map();
  }
  function n1(a, o, f, p, y, T, L, G, J, ye, Le, Ie) {
    return a = new zA(
      a,
      o,
      f,
      L,
      G,
      J,
      ye,
      Ie
    ), o = 1, T === !0 && (o |= 24), T = Sa(3, null, null, o), a.current = T, T.stateNode = a, o = Cf(), o.refCount++, a.pooledCache = o, o.refCount++, T.memoizedState = {
      element: p,
      isDehydrated: f,
      cache: o
    }, Ld(T), a;
  }
  function i1(a) {
    return a ? (a = ro, a) : ro;
  }
  function a1(a, o, f, p, y, T) {
    y = i1(y), p.context === null ? p.context = y : p.pendingContext = y, p = Qs(o), p.payload = { element: f }, T = T === void 0 ? null : T, T !== null && (p.callback = T), f = wr(a, p, o), f !== null && (da(f, a, o), ko(f, a, o));
  }
  function s1(a, o) {
    if (a = a.memoizedState, a !== null && a.dehydrated !== null) {
      var f = a.retryLane;
      a.retryLane = f !== 0 && f < o ? f : o;
    }
  }
  function Zy(a, o) {
    s1(a, o), (a = a.alternate) && s1(a, o);
  }
  function r1(a) {
    if (a.tag === 13) {
      var o = Er(a, 67108864);
      o !== null && da(o, a, 67108864), Zy(a, 67108864);
    }
  }
  var Fv = !0;
  function BA(a, o, f, p) {
    var y = P.T;
    P.T = null;
    var T = K.p;
    try {
      K.p = 2, jy(a, o, f, p);
    } finally {
      K.p = T, P.T = y;
    }
  }
  function PA(a, o, f, p) {
    var y = P.T;
    P.T = null;
    var T = K.p;
    try {
      K.p = 8, jy(a, o, f, p);
    } finally {
      K.p = T, P.T = y;
    }
  }
  function jy(a, o, f, p) {
    if (Fv) {
      var y = Qy(p);
      if (y === null)
        By(
          a,
          o,
          p,
          Xv,
          f
        ), l1(a, p);
      else if (HA(
        y,
        a,
        o,
        f,
        p
      ))
        p.stopPropagation();
      else if (l1(a, p), o & 4 && -1 < IA.indexOf(a)) {
        for (; y !== null; ) {
          var T = Ys(y);
          if (T !== null)
            switch (T.tag) {
              case 3:
                if (T = T.stateNode, T.current.memoizedState.isDehydrated) {
                  var L = St(T.pendingLanes);
                  if (L !== 0) {
                    var G = T;
                    for (G.pendingLanes |= 2, G.entangledLanes |= 2; L; ) {
                      var J = 1 << 31 - at(L);
                      G.entanglements[1] |= J, L &= ~J;
                    }
                    Uo(T), (En & 6) === 0 && (ta = Ce() + 500, ip(0));
                  }
                }
                break;
              case 13:
                G = Er(T, 2), G !== null && da(G, T, 2), or(), Zy(T, 2);
            }
          if (T = Qy(p), T === null && By(
            a,
            o,
            p,
            Xv,
            f
          ), T === y) break;
          y = T;
        }
        y !== null && p.stopPropagation();
      } else
        By(
          a,
          o,
          p,
          null,
          f
        );
    }
  }
  function Qy(a) {
    return a = cf(a), Ky(a);
  }
  var Xv = null;
  function Ky(a) {
    if (Xv = null, a = As(a), a !== null) {
      var o = c(a);
      if (o === null) a = null;
      else {
        var f = o.tag;
        if (f === 13) {
          if (a = h(o), a !== null) return a;
          a = null;
        } else if (f === 3) {
          if (o.stateNode.current.memoizedState.isDehydrated)
            return o.tag === 3 ? o.stateNode.containerInfo : null;
          a = null;
        } else o !== a && (a = null);
      }
    }
    return Xv = a, null;
  }
  function o1(a) {
    switch (a) {
      case "beforetoggle":
      case "cancel":
      case "click":
      case "close":
      case "contextmenu":
      case "copy":
      case "cut":
      case "auxclick":
      case "dblclick":
      case "dragend":
      case "dragstart":
      case "drop":
      case "focusin":
      case "focusout":
      case "input":
      case "invalid":
      case "keydown":
      case "keypress":
      case "keyup":
      case "mousedown":
      case "mouseup":
      case "paste":
      case "pause":
      case "play":
      case "pointercancel":
      case "pointerdown":
      case "pointerup":
      case "ratechange":
      case "reset":
      case "resize":
      case "seeked":
      case "submit":
      case "toggle":
      case "touchcancel":
      case "touchend":
      case "touchstart":
      case "volumechange":
      case "change":
      case "selectionchange":
      case "textInput":
      case "compositionstart":
      case "compositionend":
      case "compositionupdate":
      case "beforeblur":
      case "afterblur":
      case "beforeinput":
      case "blur":
      case "fullscreenchange":
      case "focus":
      case "hashchange":
      case "popstate":
      case "select":
      case "selectstart":
        return 2;
      case "drag":
      case "dragenter":
      case "dragexit":
      case "dragleave":
      case "dragover":
      case "mousemove":
      case "mouseout":
      case "mouseover":
      case "pointermove":
      case "pointerout":
      case "pointerover":
      case "scroll":
      case "touchmove":
      case "wheel":
      case "mouseenter":
      case "mouseleave":
      case "pointerenter":
      case "pointerleave":
        return 8;
      case "message":
        switch (et()) {
          case Ge:
            return 2;
          case Ze:
            return 8;
          case At:
          case Bt:
            return 32;
          case Z:
            return 268435456;
          default:
            return 32;
        }
      default:
        return 32;
    }
  }
  var Jy = !1, uc = null, fc = null, hc = null, fp = /* @__PURE__ */ new Map(), hp = /* @__PURE__ */ new Map(), dc = [], IA = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(
    " "
  );
  function l1(a, o) {
    switch (a) {
      case "focusin":
      case "focusout":
        uc = null;
        break;
      case "dragenter":
      case "dragleave":
        fc = null;
        break;
      case "mouseover":
      case "mouseout":
        hc = null;
        break;
      case "pointerover":
      case "pointerout":
        fp.delete(o.pointerId);
        break;
      case "gotpointercapture":
      case "lostpointercapture":
        hp.delete(o.pointerId);
    }
  }
  function dp(a, o, f, p, y, T) {
    return a === null || a.nativeEvent !== T ? (a = {
      blockedOn: o,
      domEventName: f,
      eventSystemFlags: p,
      nativeEvent: T,
      targetContainers: [y]
    }, o !== null && (o = Ys(o), o !== null && r1(o)), a) : (a.eventSystemFlags |= p, o = a.targetContainers, y !== null && o.indexOf(y) === -1 && o.push(y), a);
  }
  function HA(a, o, f, p, y) {
    switch (o) {
      case "focusin":
        return uc = dp(
          uc,
          a,
          o,
          f,
          p,
          y
        ), !0;
      case "dragenter":
        return fc = dp(
          fc,
          a,
          o,
          f,
          p,
          y
        ), !0;
      case "mouseover":
        return hc = dp(
          hc,
          a,
          o,
          f,
          p,
          y
        ), !0;
      case "pointerover":
        var T = y.pointerId;
        return fp.set(
          T,
          dp(
            fp.get(T) || null,
            a,
            o,
            f,
            p,
            y
          )
        ), !0;
      case "gotpointercapture":
        return T = y.pointerId, hp.set(
          T,
          dp(
            hp.get(T) || null,
            a,
            o,
            f,
            p,
            y
          )
        ), !0;
    }
    return !1;
  }
  function c1(a) {
    var o = As(a.target);
    if (o !== null) {
      var f = c(o);
      if (f !== null) {
        if (o = f.tag, o === 13) {
          if (o = h(f), o !== null) {
            a.blockedOn = o, is(a.priority, function() {
              if (f.tag === 13) {
                var p = ai();
                p = Ut(p);
                var y = Er(f, p);
                y !== null && da(y, f, p), Zy(f, p);
              }
            });
            return;
          }
        } else if (o === 3 && f.stateNode.current.memoizedState.isDehydrated) {
          a.blockedOn = f.tag === 3 ? f.stateNode.containerInfo : null;
          return;
        }
      }
    }
    a.blockedOn = null;
  }
  function qv(a) {
    if (a.blockedOn !== null) return !1;
    for (var o = a.targetContainers; 0 < o.length; ) {
      var f = Qy(a.nativeEvent);
      if (f === null) {
        f = a.nativeEvent;
        var p = new f.constructor(
          f.type,
          f
        );
        lf = p, f.target.dispatchEvent(p), lf = null;
      } else
        return o = Ys(f), o !== null && r1(o), a.blockedOn = f, !1;
      o.shift();
    }
    return !0;
  }
  function u1(a, o, f) {
    qv(a) && f.delete(o);
  }
  function VA() {
    Jy = !1, uc !== null && qv(uc) && (uc = null), fc !== null && qv(fc) && (fc = null), hc !== null && qv(hc) && (hc = null), fp.forEach(u1), hp.forEach(u1);
  }
  function Yv(a, o) {
    a.blockedOn === o && (a.blockedOn = null, Jy || (Jy = !0, s.unstable_scheduleCallback(
      s.unstable_NormalPriority,
      VA
    )));
  }
  var kv = null;
  function f1(a) {
    kv !== a && (kv = a, s.unstable_scheduleCallback(
      s.unstable_NormalPriority,
      function() {
        kv === a && (kv = null);
        for (var o = 0; o < a.length; o += 3) {
          var f = a[o], p = a[o + 1], y = a[o + 2];
          if (typeof p != "function") {
            if (Ky(p || f) === null)
              continue;
            break;
          }
          var T = Ys(f);
          T !== null && (a.splice(o, 3), o -= 3, Qd(
            T,
            {
              pending: !0,
              data: y,
              method: f.method,
              action: p
            },
            p,
            y
          ));
        }
      }
    ));
  }
  function pp(a) {
    function o(J) {
      return Yv(J, a);
    }
    uc !== null && Yv(uc, a), fc !== null && Yv(fc, a), hc !== null && Yv(hc, a), fp.forEach(o), hp.forEach(o);
    for (var f = 0; f < dc.length; f++) {
      var p = dc[f];
      p.blockedOn === a && (p.blockedOn = null);
    }
    for (; 0 < dc.length && (f = dc[0], f.blockedOn === null); )
      c1(f), f.blockedOn === null && dc.shift();
    if (f = (a.ownerDocument || a).$$reactFormReplay, f != null)
      for (p = 0; p < f.length; p += 3) {
        var y = f[p], T = f[p + 1], L = y[jn] || null;
        if (typeof T == "function")
          L || f1(f);
        else if (L) {
          var G = null;
          if (T && T.hasAttribute("formAction")) {
            if (y = T, L = T[jn] || null)
              G = L.formAction;
            else if (Ky(y) !== null) continue;
          } else G = L.action;
          typeof G == "function" ? f[p + 1] = G : (f.splice(p, 3), p -= 3), f1(f);
        }
      }
  }
  function $y(a) {
    this._internalRoot = a;
  }
  Wv.prototype.render = $y.prototype.render = function(a) {
    var o = this._internalRoot;
    if (o === null) throw Error(i(409));
    var f = o.current, p = ai();
    a1(f, p, a, o, null, null);
  }, Wv.prototype.unmount = $y.prototype.unmount = function() {
    var a = this._internalRoot;
    if (a !== null) {
      this._internalRoot = null;
      var o = a.containerInfo;
      a1(a.current, 2, null, a, null, null), or(), o[as] = null;
    }
  };
  function Wv(a) {
    this._internalRoot = a;
  }
  Wv.prototype.unstable_scheduleHydration = function(a) {
    if (a) {
      var o = rn();
      a = { blockedOn: null, target: a, priority: o };
      for (var f = 0; f < dc.length && o !== 0 && o < dc[f].priority; f++) ;
      dc.splice(f, 0, a), f === 0 && c1(a);
    }
  };
  var h1 = e.version;
  if (h1 !== "19.1.1")
    throw Error(
      i(
        527,
        h1,
        "19.1.1"
      )
    );
  K.findDOMNode = function(a) {
    var o = a._reactInternals;
    if (o === void 0)
      throw typeof a.render == "function" ? Error(i(188)) : (a = Object.keys(a).join(","), Error(i(268, a)));
    return a = v(o), a = a !== null ? g(a) : null, a = a === null ? null : a.stateNode, a;
  };
  var GA = {
    bundleType: 0,
    version: "19.1.1",
    rendererPackageName: "react-dom",
    currentDispatcherRef: P,
    reconcilerVersion: "19.1.1"
  };
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ < "u") {
    var Zv = __REACT_DEVTOOLS_GLOBAL_HOOK__;
    if (!Zv.isDisabled && Zv.supportsFiber)
      try {
        Te = Zv.inject(
          GA
        ), ze = Zv;
      } catch {
      }
  }
  return vp.createRoot = function(a, o) {
    if (!r(a)) throw Error(i(299));
    var f = !1, p = "", y = yu, T = Yf, L = Cv, G = null;
    return o != null && (o.unstable_strictMode === !0 && (f = !0), o.identifierPrefix !== void 0 && (p = o.identifierPrefix), o.onUncaughtError !== void 0 && (y = o.onUncaughtError), o.onCaughtError !== void 0 && (T = o.onCaughtError), o.onRecoverableError !== void 0 && (L = o.onRecoverableError), o.unstable_transitionCallbacks !== void 0 && (G = o.unstable_transitionCallbacks)), o = n1(
      a,
      1,
      !1,
      null,
      null,
      f,
      p,
      y,
      T,
      L,
      G,
      null
    ), a[as] = o.current, zy(a), new $y(o);
  }, vp.hydrateRoot = function(a, o, f) {
    if (!r(a)) throw Error(i(299));
    var p = !1, y = "", T = yu, L = Yf, G = Cv, J = null, ye = null;
    return f != null && (f.unstable_strictMode === !0 && (p = !0), f.identifierPrefix !== void 0 && (y = f.identifierPrefix), f.onUncaughtError !== void 0 && (T = f.onUncaughtError), f.onCaughtError !== void 0 && (L = f.onCaughtError), f.onRecoverableError !== void 0 && (G = f.onRecoverableError), f.unstable_transitionCallbacks !== void 0 && (J = f.unstable_transitionCallbacks), f.formState !== void 0 && (ye = f.formState)), o = n1(
      a,
      1,
      !0,
      o,
      f ?? null,
      p,
      y,
      T,
      L,
      G,
      J,
      ye
    ), o.context = i1(null), f = o.current, p = ai(), p = Ut(p), y = Qs(p), y.callback = null, wr(f, y, p), f = p, o.current.lanes = f, ct(o, f), Uo(o), a[as] = o.current, zy(a), new Wv(o);
  }, vp.version = "19.1.1", vp;
}
var M1;
function KA() {
  if (M1) return t_.exports;
  M1 = 1;
  function s() {
    if (!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ > "u" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE != "function"))
      try {
        __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(s);
      } catch (e) {
        console.error(e);
      }
  }
  return s(), t_.exports = QA(), t_.exports;
}
var Ub = KA();
function JA(s) {
  document.readyState === "loading" ? document.addEventListener("DOMContentLoaded", s, { once: !0 }) : s();
}
function $A() {
  JA(() => {
    const s = document.querySelectorAll(".numbers li"), e = document.querySelectorAll(".labels li"), n = document.querySelectorAll(".details > div");
    if (!s.length || !e.length || !n.length) return;
    let i = 0;
    const r = (c) => {
      s.forEach((h, d) => {
        h.style.color = d === c ? "#c5a028" : "#897437";
      }), e.forEach((h, d) => {
        h.style.color = d === c ? "#f8f7f4" : "#585858";
      }), n.forEach((h, d) => {
        h.classList.toggle("active", d === c);
      });
    };
    r(i), setInterval(() => {
      i = (i + 1) % s.length, r(i);
    }, 3e3);
  });
}
const eR = ["Alpha", "Beta", "Pi", "Iota", "Sigma", "Tau", "Chi"], tR = (/* @__PURE__ */ new Date()).getFullYear();
function nR(s) {
  document.readyState === "loading" ? document.addEventListener("DOMContentLoaded", s, { once: !0 }) : s();
}
function iR() {
  nR(async () => {
    const s = document.getElementById("exec-list"), e = document.getElementById("other-list");
    if (!(!s || !e))
      try {
        const n = await fetch(`/data/brothers_${tR}.json`, {
          cache: "no-cache"
        });
        if (!n.ok) throw new Error(`HTTP ${n.status}`);
        const { actives: i = [] } = await n.json(), r = {};
        for (const v of i)
          for (const g of v.positions || []) (r[g] ||= []).push(v);
        const c = (v, g) => {
          const S = `${v.name ?? ""} ${v.lastname ?? ""}`.trim(), M = v.hasImg === !0 || v.hasImg === "true" ? `/img/Officer_images/${(v.lastname || "").toLowerCase()}.jpg` : "/img/Officer_images/placeholder.png", b = document.createElement("li"), R = document.createElement("img");
          R.src = M, R.alt = `${S || "Officer"} photo`, R.onerror = () => {
            R.src = "/img/Officer_images/placeholder.png";
          }, b.appendChild(R);
          const w = document.createElement("h3");
          w.className = "heading", w.textContent = g, b.appendChild(w);
          const C = document.createElement("p");
          C.textContent = S, b.appendChild(C);
          const E = document.createElement("p");
          return E.textContent = v.major || "", b.appendChild(E), b;
        }, h = document.createDocumentFragment(), d = document.createDocumentFragment();
        for (const [v, g] of Object.entries(r))
          for (const S of g)
            (eR.includes(v) ? h : d).appendChild(
              c(S, v)
            );
        s.appendChild(h), e.appendChild(d);
      } catch (n) {
        console.error("Failed to load roster:", n);
      }
  });
}
var ht = jh();
const Nb = /* @__PURE__ */ VS(ht);
async function aR({ lat: s, lon: e }) {
  try {
    const n = `https://api.open-meteo.com/v1/forecast?latitude=${s}&longitude=${e}&current=temperature_2m,weather_code`, r = await (await fetch(n)).json(), c = Math.round(r?.current?.temperature_2m ?? NaN), h = Number.isFinite(t) ? c >= 85 ? "hot" : c >= 65 ? "warm" : c >= 45 ? "cool" : "cold" : "fair";
    return Number.isFinite(t) ? `${h} (${t}°)` : h;
  } catch {
    return "fair";
  }
}
function sR({
  events: s = [],
  // [{ id, name, description, location, dateTime, type, minigame }]
  sprites: e = {
    sky: "/assets/recruitment/sprites/sky.png",
    grass: "/assets/recruitment/sprites/grass.png",
    ground: "/assets/recruitment/sprites/ground.png",
    river: "/assets/recruitment/sprites/river.png",
    wagon: "/assets/recruitment/sprites/wagon.png",
    ox: "/assets/recruitment/sprites/ox.png"
  },
  lat: n = null,
  lon: i = null,
  dateText: r,
  homeHref: c = "/"
}) {
  const h = ht.useRef(null), [d, v] = ht.useState(0), [g, S] = ht.useState("…"), [x, M] = ht.useState(!1);
  ht.useEffect(() => {
    const C = Object.values(e).map((N) => {
      const O = new Image();
      return O.src = N, O.onload = U, O.onerror = U, O;
    });
    let E = 0;
    function U() {
      ++E >= C.length && M(!0);
    }
  }, [JSON.stringify(e)]), ht.useEffect(() => {
    n != null && i != null ? aR({ lat: n, lon: i }).then(S) : S("fair");
  }, [n, i]), ht.useEffect(() => {
    if (!x) return;
    const C = h.current;
    if (!C) return;
    const E = C.getContext("2d");
    if (!E) return;
    const U = Math.max(1, Math.min(2, window.devicePixelRatio || 1));
    function N() {
      C.width = Math.floor(window.innerWidth * U), C.height = Math.floor(window.innerHeight * U), C.style.width = "100%", C.style.height = "100%";
    }
    N(), window.addEventListener("resize", N);
    const O = lh(e.sky), I = lh(e.grass), V = lh(e.ground), Y = lh(e.river), k = lh(e.wagon), B = lh(e.ox);
    let z;
    function W(le = 0) {
      const ae = le / 1e3, oe = C.width, pe = C.height;
      E.fillStyle = "#7ec0ff", E.fillRect(0, 0, oe, pe), jv(E, O, oe, pe * 0.45, 0, ae * 5), jv(E, Y, oe, pe * 0.15, pe * 0.45, ae * 40), jv(E, I, oe, pe * 0.15, pe * 0.45 - 10 * U, ae * 20), jv(E, V, oe, pe * 0.25, pe * 0.6, ae * 60);
      const P = Math.max(1, Math.min(3, oe / U / 600)), K = 64 * U * P, Q = 48 * U * P, fe = 96 * U * P, q = 64 * U * P, te = pe * 0.6 - 8 * U;
      E.imageSmoothingEnabled = !1, B && E.drawImage(B, oe * 0.35, te - Q, K, Q), k && E.drawImage(k, oe * 0.35 + K + 8 * U, te - q, fe, q), z = requestAnimationFrame(W);
    }
    return z = requestAnimationFrame(W), () => {
      cancelAnimationFrame(z), window.removeEventListener("resize", N);
    };
  }, [x, e]), ht.useEffect(() => {
    function C(E) {
      E.code === "Space" && (E.preventDefault(), d < s.length - 1 && v((U) => U + 1));
    }
    return window.addEventListener("keydown", C), () => window.removeEventListener("keydown", C);
  }, [d, s.length]);
  const b = s[d] || {}, R = s[d + 1]?.name || "—", w = r || (/* @__PURE__ */ new Date()).toLocaleDateString(void 0, { month: "long", day: "numeric", year: "numeric" });
  return /* @__PURE__ */ Ot.jsxs("div", { className: "fullscreen retro", children: [
    /* @__PURE__ */ Ot.jsx("canvas", { ref: h, className: "w-full h-full block" }),
    /* @__PURE__ */ Ot.jsx("a", { href: c, className: "btn btn-home", "aria-label": "Back to home", children: "◀ Home" }),
    /* @__PURE__ */ Ot.jsx("button", { className: "btn btn-right", onClick: () => d < s.length - 1 && v(d + 1), children: "▶ Continue" }),
    /* @__PURE__ */ Ot.jsxs("div", { className: "hud", children: [
      /* @__PURE__ */ Ot.jsx("div", { className: "title", children: b.name || "Event" }),
      /* @__PURE__ */ Ot.jsxs("div", { className: "grid", children: [
        /* @__PURE__ */ Ot.jsxs("div", { children: [
          /* @__PURE__ */ Ot.jsx("strong", { children: "Date:" }),
          " ",
          w
        ] }),
        /* @__PURE__ */ Ot.jsxs("div", { children: [
          /* @__PURE__ */ Ot.jsx("strong", { children: "Weather:" }),
          " ",
          g
        ] }),
        /* @__PURE__ */ Ot.jsxs("div", { children: [
          /* @__PURE__ */ Ot.jsx("strong", { children: "Where:" }),
          " ",
          b.location || "TBD"
        ] }),
        /* @__PURE__ */ Ot.jsxs("div", { children: [
          /* @__PURE__ */ Ot.jsx("strong", { children: "Next landmark:" }),
          " ",
          R
        ] })
      ] }),
      b.description ? /* @__PURE__ */ Ot.jsx("div", { style: { marginTop: 8 }, children: b.description }) : null,
      /* @__PURE__ */ Ot.jsxs("div", { style: { textAlign: "center", marginTop: 10 }, children: [
        "Press ",
        /* @__PURE__ */ Ot.jsx("strong", { children: "SPACE" }),
        " to continue"
      ] })
    ] })
  ] });
}
function lh(s) {
  if (!s) return null;
  const e = new Image();
  return e.src = s, e;
}
function jv(s, e, n, i, r = 0, c = 0) {
  if (!e || !e.width) {
    s.fillStyle = "#3aa13a", s.fillRect(0, r, n, i);
    return;
  }
  const h = i, d = e.width * (h / e.height), v = -(c % d + d) % d;
  for (let g = v; g < n + d; g += d)
    s.drawImage(e, g, r, d, h);
}
var r_ = { exports: {} }, fl = {};
/**
 * @license React
 * react-reconciler-constants.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var b1;
function rR() {
  return b1 || (b1 = 1, fl.ConcurrentRoot = 1, fl.ContinuousEventPriority = 8, fl.DefaultEventPriority = 32, fl.DiscreteEventPriority = 2, fl.IdleEventPriority = 268435456, fl.LegacyRoot = 0, fl.NoEventPriority = 0), fl;
}
var E1;
function oR() {
  return E1 || (E1 = 1, r_.exports = rR()), r_.exports;
}
var Xg = oR();
/**
 * @license
 * Copyright 2010-2025 Three.js Authors
 * SPDX-License-Identifier: MIT
 */
const lm = "179", lR = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 }, cR = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 }, Ob = 0, vS = 1, Lb = 2, uR = 3, zb = 0, I0 = 1, Np = 2, Xr = 3, Po = 0, ji = 1, Ms = 2, dr = 0, ku = 1, gS = 2, yS = 3, _S = 4, Bb = 5, Ec = 100, Pb = 101, Ib = 102, Hb = 103, Vb = 104, Gb = 200, Fb = 201, Xb = 202, qb = 203, Zg = 204, jg = 205, Yb = 206, kb = 207, Wb = 208, Zb = 209, jb = 210, Qb = 211, Kb = 212, Jb = 213, $b = 214, Qg = 0, Kg = 1, Jg = 2, Qu = 3, $g = 4, e0 = 5, t0 = 6, n0 = 7, cm = 0, eE = 1, tE = 2, Wr = 0, nE = 1, iE = 2, aE = 3, GS = 4, sE = 5, rE = 6, oE = 7, SS = "attached", lE = "detached", H0 = 300, Sl = 301, Rc = 302, qp = 303, Yp = 304, Qh = 306, kp = 1e3, hr = 1001, Wp = 1002, wi = 1003, FS = 1004, fR = 1004, Oh = 1005, hR = 1005, di = 1006, Op = 1007, dR = 1007, Lo = 1008, pR = 1008, Da = 1009, XS = 1010, qS = 1011, Vh = 1012, V0 = 1013, Io = 1014, es = 1015, nf = 1016, G0 = 1017, F0 = 1018, Ku = 1020, YS = 35902, kS = 1021, WS = 1022, Ca = 1023, Gh = 1026, Ju = 1027, X0 = 1028, um = 1029, ZS = 1030, q0 = 1031, mR = 1032, Y0 = 1033, Lp = 33776, zp = 33777, Bp = 33778, Pp = 33779, i0 = 35840, a0 = 35841, s0 = 35842, r0 = 35843, o0 = 36196, l0 = 37492, c0 = 37496, u0 = 37808, f0 = 37809, h0 = 37810, d0 = 37811, p0 = 37812, m0 = 37813, v0 = 37814, g0 = 37815, y0 = 37816, _0 = 37817, S0 = 37818, x0 = 37819, M0 = 37820, b0 = 37821, Ip = 36492, E0 = 36494, T0 = 36495, jS = 36283, A0 = 36284, R0 = 36285, C0 = 36286, cE = 2200, uE = 2201, fE = 2202, Zp = 2300, w0 = 2301, qg = 2302, Xu = 2400, qu = 2401, jp = 2402, k0 = 2500, QS = 2501, vR = 0, gR = 1, yR = 2, wc = 3200, hE = 3201, _R = 3202, SR = 3203, Dc = 0, dE = 1, Yr = "", ei = "srgb", Ho = "srgb-linear", Qp = "linear", Pn = "srgb", xR = 0, Vu = 7680, MR = 7681, bR = 7682, ER = 7683, TR = 34055, AR = 34056, RR = 5386, CR = 512, wR = 513, DR = 514, UR = 515, NR = 516, OR = 517, LR = 518, xS = 519, pE = 512, mE = 513, vE = 514, KS = 515, gE = 516, yE = 517, _E = 518, SE = 519, Kp = 35044, zR = 35048, BR = 35040, PR = 35045, IR = 35049, HR = 35041, VR = 35046, GR = 35050, FR = 35042, XR = "100", MS = "300 es", Gs = 2e3, Fh = 2001, qR = {
  COMPUTE: "compute",
  RENDER: "render"
}, YR = {
  PERSPECTIVE: "perspective",
  LINEAR: "linear",
  FLAT: "flat"
}, kR = {
  NORMAL: "normal",
  CENTROID: "centroid",
  SAMPLE: "sample",
  FIRST: "first",
  EITHER: "either"
};
class qs {
  /**
   * Adds the given event listener to the given event type.
   *
   * @param {string} type - The type of event to listen to.
   * @param {Function} listener - The function that gets called when the event is fired.
   */
  addEventListener(e, n) {
    this._listeners === void 0 && (this._listeners = {});
    const i = this._listeners;
    i[e] === void 0 && (i[e] = []), i[e].indexOf(n) === -1 && i[e].push(n);
  }
  /**
   * Returns `true` if the given event listener has been added to the given event type.
   *
   * @param {string} type - The type of event.
   * @param {Function} listener - The listener to check.
   * @return {boolean} Whether the given event listener has been added to the given event type.
   */
  hasEventListener(e, n) {
    const i = this._listeners;
    return i === void 0 ? !1 : i[e] !== void 0 && i[e].indexOf(n) !== -1;
  }
  /**
   * Removes the given event listener from the given event type.
   *
   * @param {string} type - The type of event.
   * @param {Function} listener - The listener to remove.
   */
  removeEventListener(e, n) {
    const i = this._listeners;
    if (i === void 0) return;
    const r = i[e];
    if (r !== void 0) {
      const c = r.indexOf(n);
      c !== -1 && r.splice(c, 1);
    }
  }
  /**
   * Dispatches an event object.
   *
   * @param {Object} event - The event that gets fired.
   */
  dispatchEvent(e) {
    const n = this._listeners;
    if (n === void 0) return;
    const i = n[e.type];
    if (i !== void 0) {
      e.target = this;
      const r = i.slice(0);
      for (let c = 0, h = r.length; c < h; c++)
        r[c].call(this, e);
      e.target = null;
    }
  }
}
const Ta = ["00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "0a", "0b", "0c", "0d", "0e", "0f", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "1a", "1b", "1c", "1d", "1e", "1f", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "2a", "2b", "2c", "2d", "2e", "2f", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "3a", "3b", "3c", "3d", "3e", "3f", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "4a", "4b", "4c", "4d", "4e", "4f", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "5a", "5b", "5c", "5d", "5e", "5f", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "6a", "6b", "6c", "6d", "6e", "6f", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "7a", "7b", "7c", "7d", "7e", "7f", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "8a", "8b", "8c", "8d", "8e", "8f", "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "9a", "9b", "9c", "9d", "9e", "9f", "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "aa", "ab", "ac", "ad", "ae", "af", "b0", "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "b9", "ba", "bb", "bc", "bd", "be", "bf", "c0", "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "ca", "cb", "cc", "cd", "ce", "cf", "d0", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8", "d9", "da", "db", "dc", "dd", "de", "df", "e0", "e1", "e2", "e3", "e4", "e5", "e6", "e7", "e8", "e9", "ea", "eb", "ec", "ed", "ee", "ef", "f0", "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "fa", "fb", "fc", "fd", "fe", "ff"];
let T1 = 1234567;
const Wu = Math.PI / 180, Xh = 180 / Math.PI;
function Fs() {
  const s = Math.random() * 4294967295 | 0, e = Math.random() * 4294967295 | 0, n = Math.random() * 4294967295 | 0, i = Math.random() * 4294967295 | 0;
  return (Ta[s & 255] + Ta[s >> 8 & 255] + Ta[s >> 16 & 255] + Ta[s >> 24 & 255] + "-" + Ta[e & 255] + Ta[e >> 8 & 255] + "-" + Ta[e >> 16 & 15 | 64] + Ta[e >> 24 & 255] + "-" + Ta[n & 63 | 128] + Ta[n >> 8 & 255] + "-" + Ta[n >> 16 & 255] + Ta[n >> 24 & 255] + Ta[i & 255] + Ta[i >> 8 & 255] + Ta[i >> 16 & 255] + Ta[i >> 24 & 255]).toLowerCase();
}
function Vt(s, e, n) {
  return Math.max(e, Math.min(n, s));
}
function JS(s, e) {
  return (s % e + e) % e;
}
function WR(s, e, n, i, r) {
  return i + (s - e) * (r - i) / (n - e);
}
function ZR(s, e, n) {
  return s !== e ? (n - s) / (e - s) : 0;
}
function Hp(s, e, n) {
  return (1 - n) * s + n * e;
}
function jR(s, e, n, i) {
  return Hp(s, e, 1 - Math.exp(-n * i));
}
function QR(s, e = 1) {
  return e - Math.abs(JS(s, e * 2) - e);
}
function KR(s, e, n) {
  return s <= e ? 0 : s >= n ? 1 : (s = (s - e) / (n - e), s * s * (3 - 2 * s));
}
function JR(s, e, n) {
  return s <= e ? 0 : s >= n ? 1 : (s = (s - e) / (n - e), s * s * s * (s * (s * 6 - 15) + 10));
}
function $R(s, e) {
  return s + Math.floor(Math.random() * (e - s + 1));
}
function eC(s, e) {
  return s + Math.random() * (e - s);
}
function tC(s) {
  return s * (0.5 - Math.random());
}
function nC(s) {
  s !== void 0 && (T1 = s);
  let e = T1 += 1831565813;
  return e = Math.imul(e ^ e >>> 15, e | 1), e ^= e + Math.imul(e ^ e >>> 7, e | 61), ((e ^ e >>> 14) >>> 0) / 4294967296;
}
function iC(s) {
  return s * Wu;
}
function aC(s) {
  return s * Xh;
}
function sC(s) {
  return (s & s - 1) === 0 && s !== 0;
}
function rC(s) {
  return Math.pow(2, Math.ceil(Math.log(s) / Math.LN2));
}
function oC(s) {
  return Math.pow(2, Math.floor(Math.log(s) / Math.LN2));
}
function lC(s, e, n, i, r) {
  const c = Math.cos, h = Math.sin, d = c(n / 2), v = h(n / 2), g = c((e + i) / 2), S = h((e + i) / 2), x = c((e - i) / 2), M = h((e - i) / 2), b = c((i - e) / 2), R = h((i - e) / 2);
  switch (r) {
    case "XYX":
      s.set(d * S, v * x, v * M, d * g);
      break;
    case "YZY":
      s.set(v * M, d * S, v * x, d * g);
      break;
    case "ZXZ":
      s.set(v * x, v * M, d * S, d * g);
      break;
    case "XZX":
      s.set(d * S, v * R, v * b, d * g);
      break;
    case "YXY":
      s.set(v * b, d * S, v * R, d * g);
      break;
    case "ZYZ":
      s.set(v * R, v * b, d * S, d * g);
      break;
    default:
      console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: " + r);
  }
}
function $a(s, e) {
  switch (e.constructor) {
    case Float32Array:
      return s;
    case Uint32Array:
      return s / 4294967295;
    case Uint16Array:
      return s / 65535;
    case Uint8Array:
      return s / 255;
    case Int32Array:
      return Math.max(s / 2147483647, -1);
    case Int16Array:
      return Math.max(s / 32767, -1);
    case Int8Array:
      return Math.max(s / 127, -1);
    default:
      throw new Error("Invalid component type.");
  }
}
function $t(s, e) {
  switch (e.constructor) {
    case Float32Array:
      return s;
    case Uint32Array:
      return Math.round(s * 4294967295);
    case Uint16Array:
      return Math.round(s * 65535);
    case Uint8Array:
      return Math.round(s * 255);
    case Int32Array:
      return Math.round(s * 2147483647);
    case Int16Array:
      return Math.round(s * 32767);
    case Int8Array:
      return Math.round(s * 127);
    default:
      throw new Error("Invalid component type.");
  }
}
const cC = {
  DEG2RAD: Wu,
  RAD2DEG: Xh,
  /**
   * Generate a [UUID]{@link https://en.wikipedia.org/wiki/Universally_unique_identifier}
   * (universally unique identifier).
   *
   * @static
   * @method
   * @return {string} The UUID.
   */
  generateUUID: Fs,
  /**
   * Clamps the given value between min and max.
   *
   * @static
   * @method
   * @param {number} value - The value to clamp.
   * @param {number} min - The min value.
   * @param {number} max - The max value.
   * @return {number} The clamped value.
   */
  clamp: Vt,
  /**
   * Computes the Euclidean modulo of the given parameters that
   * is `( ( n % m ) + m ) % m`.
   *
   * @static
   * @method
   * @param {number} n - The first parameter.
   * @param {number} m - The second parameter.
   * @return {number} The Euclidean modulo.
   */
  euclideanModulo: JS,
  /**
   * Performs a linear mapping from range `<a1, a2>` to range `<b1, b2>`
   * for the given value.
   *
   * @static
   * @method
   * @param {number} x - The value to be mapped.
   * @param {number} a1 - Minimum value for range A.
   * @param {number} a2 - Maximum value for range A.
   * @param {number} b1 - Minimum value for range B.
   * @param {number} b2 - Maximum value for range B.
   * @return {number} The mapped value.
   */
  mapLinear: WR,
  /**
   * Returns the percentage in the closed interval `[0, 1]` of the given value
   * between the start and end point.
   *
   * @static
   * @method
   * @param {number} x - The start point
   * @param {number} y - The end point.
   * @param {number} value - A value between start and end.
   * @return {number} The interpolation factor.
   */
  inverseLerp: ZR,
  /**
   * Returns a value linearly interpolated from two known points based on the given interval -
   * `t = 0` will return `x` and `t = 1` will return `y`.
   *
   * @static
   * @method
   * @param {number} x - The start point
   * @param {number} y - The end point.
   * @param {number} t - The interpolation factor in the closed interval `[0, 1]`.
   * @return {number} The interpolated value.
   */
  lerp: Hp,
  /**
   * Smoothly interpolate a number from `x` to `y` in  a spring-like manner using a delta
   * time to maintain frame rate independent movement. For details, see
   * [Frame rate independent damping using lerp]{@link http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/}.
   *
   * @static
   * @method
   * @param {number} x - The current point.
   * @param {number} y - The target point.
   * @param {number} lambda - A higher lambda value will make the movement more sudden,
   * and a lower value will make the movement more gradual.
   * @param {number} dt - Delta time in seconds.
   * @return {number} The interpolated value.
   */
  damp: jR,
  /**
   * Returns a value that alternates between `0` and the given `length` parameter.
   *
   * @static
   * @method
   * @param {number} x - The value to pingpong.
   * @param {number} [length=1] - The positive value the function will pingpong to.
   * @return {number} The alternated value.
   */
  pingpong: QR,
  /**
   * Returns a value in the range `[0,1]` that represents the percentage that `x` has
   * moved between `min` and `max`, but smoothed or slowed down the closer `x` is to
   * the `min` and `max`.
   *
   * See [Smoothstep]{@link http://en.wikipedia.org/wiki/Smoothstep} for more details.
   *
   * @static
   * @method
   * @param {number} x - The value to evaluate based on its position between min and max.
   * @param {number} min - The min value. Any x value below min will be `0`.
   * @param {number} max - The max value. Any x value above max will be `1`.
   * @return {number} The alternated value.
   */
  smoothstep: KR,
  /**
   * A [variation on smoothstep]{@link https://en.wikipedia.org/wiki/Smoothstep#Variations}
   * that has zero 1st and 2nd order derivatives at x=0 and x=1.
   *
   * @static
   * @method
   * @param {number} x - The value to evaluate based on its position between min and max.
   * @param {number} min - The min value. Any x value below min will be `0`.
   * @param {number} max - The max value. Any x value above max will be `1`.
   * @return {number} The alternated value.
   */
  smootherstep: JR,
  /**
   * Returns a random integer from `<low, high>` interval.
   *
   * @static
   * @method
   * @param {number} low - The lower value boundary.
   * @param {number} high - The upper value boundary
   * @return {number} A random integer.
   */
  randInt: $R,
  /**
   * Returns a random float from `<low, high>` interval.
   *
   * @static
   * @method
   * @param {number} low - The lower value boundary.
   * @param {number} high - The upper value boundary
   * @return {number} A random float.
   */
  randFloat: eC,
  /**
   * Returns a random integer from `<-range/2, range/2>` interval.
   *
   * @static
   * @method
   * @param {number} range - Defines the value range.
   * @return {number} A random float.
   */
  randFloatSpread: tC,
  /**
   * Returns a deterministic pseudo-random float in the interval `[0, 1]`.
   *
   * @static
   * @method
   * @param {number} [s] - The integer seed.
   * @return {number} A random float.
   */
  seededRandom: nC,
  /**
   * Converts degrees to radians.
   *
   * @static
   * @method
   * @param {number} degrees - A value in degrees.
   * @return {number} The converted value in radians.
   */
  degToRad: iC,
  /**
   * Converts radians to degrees.
   *
   * @static
   * @method
   * @param {number} radians - A value in radians.
   * @return {number} The converted value in degrees.
   */
  radToDeg: aC,
  /**
   * Returns `true` if the given number is a power of two.
   *
   * @static
   * @method
   * @param {number} value - The value to check.
   * @return {boolean} Whether the given number is a power of two or not.
   */
  isPowerOfTwo: sC,
  /**
   * Returns the smallest power of two that is greater than or equal to the given number.
   *
   * @static
   * @method
   * @param {number} value - The value to find a POT for.
   * @return {number} The smallest power of two that is greater than or equal to the given number.
   */
  ceilPowerOfTwo: rC,
  /**
   * Returns the largest power of two that is less than or equal to the given number.
   *
   * @static
   * @method
   * @param {number} value - The value to find a POT for.
   * @return {number} The largest power of two that is less than or equal to the given number.
   */
  floorPowerOfTwo: oC,
  /**
   * Sets the given quaternion from the [Intrinsic Proper Euler Angles]{@link https://en.wikipedia.org/wiki/Euler_angles}
   * defined by the given angles and order.
   *
   * Rotations are applied to the axes in the order specified by order:
   * rotation by angle `a` is applied first, then by angle `b`, then by angle `c`.
   *
   * @static
   * @method
   * @param {Quaternion} q - The quaternion to set.
   * @param {number} a - The rotation applied to the first axis, in radians.
   * @param {number} b - The rotation applied to the second axis, in radians.
   * @param {number} c - The rotation applied to the third axis, in radians.
   * @param {('XYX'|'XZX'|'YXY'|'YZY'|'ZXZ'|'ZYZ')} order - A string specifying the axes order.
   */
  setQuaternionFromProperEuler: lC,
  /**
   * Normalizes the given value according to the given typed array.
   *
   * @static
   * @method
   * @param {number} value - The float value in the range `[0,1]` to normalize.
   * @param {TypedArray} array - The typed array that defines the data type of the value.
   * @return {number} The normalize value.
   */
  normalize: $t,
  /**
   * Denormalizes the given value according to the given typed array.
   *
   * @static
   * @method
   * @param {number} value - The value to denormalize.
   * @param {TypedArray} array - The typed array that defines the data type of the value.
   * @return {number} The denormalize (float) value in the range `[0,1]`.
   */
  denormalize: $a
};
class De {
  /**
   * Constructs a new 2D vector.
   *
   * @param {number} [x=0] - The x value of this vector.
   * @param {number} [y=0] - The y value of this vector.
   */
  constructor(e = 0, n = 0) {
    De.prototype.isVector2 = !0, this.x = e, this.y = n;
  }
  /**
   * Alias for {@link Vector2#x}.
   *
   * @type {number}
   */
  get width() {
    return this.x;
  }
  set width(e) {
    this.x = e;
  }
  /**
   * Alias for {@link Vector2#y}.
   *
   * @type {number}
   */
  get height() {
    return this.y;
  }
  set height(e) {
    this.y = e;
  }
  /**
   * Sets the vector components.
   *
   * @param {number} x - The value of the x component.
   * @param {number} y - The value of the y component.
   * @return {Vector2} A reference to this vector.
   */
  set(e, n) {
    return this.x = e, this.y = n, this;
  }
  /**
   * Sets the vector components to the same value.
   *
   * @param {number} scalar - The value to set for all vector components.
   * @return {Vector2} A reference to this vector.
   */
  setScalar(e) {
    return this.x = e, this.y = e, this;
  }
  /**
   * Sets the vector's x component to the given value
   *
   * @param {number} x - The value to set.
   * @return {Vector2} A reference to this vector.
   */
  setX(e) {
    return this.x = e, this;
  }
  /**
   * Sets the vector's y component to the given value
   *
   * @param {number} y - The value to set.
   * @return {Vector2} A reference to this vector.
   */
  setY(e) {
    return this.y = e, this;
  }
  /**
   * Allows to set a vector component with an index.
   *
   * @param {number} index - The component index. `0` equals to x, `1` equals to y.
   * @param {number} value - The value to set.
   * @return {Vector2} A reference to this vector.
   */
  setComponent(e, n) {
    switch (e) {
      case 0:
        this.x = n;
        break;
      case 1:
        this.y = n;
        break;
      default:
        throw new Error("index is out of range: " + e);
    }
    return this;
  }
  /**
   * Returns the value of the vector component which matches the given index.
   *
   * @param {number} index - The component index. `0` equals to x, `1` equals to y.
   * @return {number} A vector component value.
   */
  getComponent(e) {
    switch (e) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      default:
        throw new Error("index is out of range: " + e);
    }
  }
  /**
   * Returns a new vector with copied values from this instance.
   *
   * @return {Vector2} A clone of this instance.
   */
  clone() {
    return new this.constructor(this.x, this.y);
  }
  /**
   * Copies the values of the given vector to this instance.
   *
   * @param {Vector2} v - The vector to copy.
   * @return {Vector2} A reference to this vector.
   */
  copy(e) {
    return this.x = e.x, this.y = e.y, this;
  }
  /**
   * Adds the given vector to this instance.
   *
   * @param {Vector2} v - The vector to add.
   * @return {Vector2} A reference to this vector.
   */
  add(e) {
    return this.x += e.x, this.y += e.y, this;
  }
  /**
   * Adds the given scalar value to all components of this instance.
   *
   * @param {number} s - The scalar to add.
   * @return {Vector2} A reference to this vector.
   */
  addScalar(e) {
    return this.x += e, this.y += e, this;
  }
  /**
   * Adds the given vectors and stores the result in this instance.
   *
   * @param {Vector2} a - The first vector.
   * @param {Vector2} b - The second vector.
   * @return {Vector2} A reference to this vector.
   */
  addVectors(e, n) {
    return this.x = e.x + n.x, this.y = e.y + n.y, this;
  }
  /**
   * Adds the given vector scaled by the given factor to this instance.
   *
   * @param {Vector2} v - The vector.
   * @param {number} s - The factor that scales `v`.
   * @return {Vector2} A reference to this vector.
   */
  addScaledVector(e, n) {
    return this.x += e.x * n, this.y += e.y * n, this;
  }
  /**
   * Subtracts the given vector from this instance.
   *
   * @param {Vector2} v - The vector to subtract.
   * @return {Vector2} A reference to this vector.
   */
  sub(e) {
    return this.x -= e.x, this.y -= e.y, this;
  }
  /**
   * Subtracts the given scalar value from all components of this instance.
   *
   * @param {number} s - The scalar to subtract.
   * @return {Vector2} A reference to this vector.
   */
  subScalar(e) {
    return this.x -= e, this.y -= e, this;
  }
  /**
   * Subtracts the given vectors and stores the result in this instance.
   *
   * @param {Vector2} a - The first vector.
   * @param {Vector2} b - The second vector.
   * @return {Vector2} A reference to this vector.
   */
  subVectors(e, n) {
    return this.x = e.x - n.x, this.y = e.y - n.y, this;
  }
  /**
   * Multiplies the given vector with this instance.
   *
   * @param {Vector2} v - The vector to multiply.
   * @return {Vector2} A reference to this vector.
   */
  multiply(e) {
    return this.x *= e.x, this.y *= e.y, this;
  }
  /**
   * Multiplies the given scalar value with all components of this instance.
   *
   * @param {number} scalar - The scalar to multiply.
   * @return {Vector2} A reference to this vector.
   */
  multiplyScalar(e) {
    return this.x *= e, this.y *= e, this;
  }
  /**
   * Divides this instance by the given vector.
   *
   * @param {Vector2} v - The vector to divide.
   * @return {Vector2} A reference to this vector.
   */
  divide(e) {
    return this.x /= e.x, this.y /= e.y, this;
  }
  /**
   * Divides this vector by the given scalar.
   *
   * @param {number} scalar - The scalar to divide.
   * @return {Vector2} A reference to this vector.
   */
  divideScalar(e) {
    return this.multiplyScalar(1 / e);
  }
  /**
   * Multiplies this vector (with an implicit 1 as the 3rd component) by
   * the given 3x3 matrix.
   *
   * @param {Matrix3} m - The matrix to apply.
   * @return {Vector2} A reference to this vector.
   */
  applyMatrix3(e) {
    const n = this.x, i = this.y, r = e.elements;
    return this.x = r[0] * n + r[3] * i + r[6], this.y = r[1] * n + r[4] * i + r[7], this;
  }
  /**
   * If this vector's x or y value is greater than the given vector's x or y
   * value, replace that value with the corresponding min value.
   *
   * @param {Vector2} v - The vector.
   * @return {Vector2} A reference to this vector.
   */
  min(e) {
    return this.x = Math.min(this.x, e.x), this.y = Math.min(this.y, e.y), this;
  }
  /**
   * If this vector's x or y value is less than the given vector's x or y
   * value, replace that value with the corresponding max value.
   *
   * @param {Vector2} v - The vector.
   * @return {Vector2} A reference to this vector.
   */
  max(e) {
    return this.x = Math.max(this.x, e.x), this.y = Math.max(this.y, e.y), this;
  }
  /**
   * If this vector's x or y value is greater than the max vector's x or y
   * value, it is replaced by the corresponding value.
   * If this vector's x or y value is less than the min vector's x or y value,
   * it is replaced by the corresponding value.
   *
   * @param {Vector2} min - The minimum x and y values.
   * @param {Vector2} max - The maximum x and y values in the desired range.
   * @return {Vector2} A reference to this vector.
   */
  clamp(e, n) {
    return this.x = Vt(this.x, e.x, n.x), this.y = Vt(this.y, e.y, n.y), this;
  }
  /**
   * If this vector's x or y values are greater than the max value, they are
   * replaced by the max value.
   * If this vector's x or y values are less than the min value, they are
   * replaced by the min value.
   *
   * @param {number} minVal - The minimum value the components will be clamped to.
   * @param {number} maxVal - The maximum value the components will be clamped to.
   * @return {Vector2} A reference to this vector.
   */
  clampScalar(e, n) {
    return this.x = Vt(this.x, e, n), this.y = Vt(this.y, e, n), this;
  }
  /**
   * If this vector's length is greater than the max value, it is replaced by
   * the max value.
   * If this vector's length is less than the min value, it is replaced by the
   * min value.
   *
   * @param {number} min - The minimum value the vector length will be clamped to.
   * @param {number} max - The maximum value the vector length will be clamped to.
   * @return {Vector2} A reference to this vector.
   */
  clampLength(e, n) {
    const i = this.length();
    return this.divideScalar(i || 1).multiplyScalar(Vt(i, e, n));
  }
  /**
   * The components of this vector are rounded down to the nearest integer value.
   *
   * @return {Vector2} A reference to this vector.
   */
  floor() {
    return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this;
  }
  /**
   * The components of this vector are rounded up to the nearest integer value.
   *
   * @return {Vector2} A reference to this vector.
   */
  ceil() {
    return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this;
  }
  /**
   * The components of this vector are rounded to the nearest integer value
   *
   * @return {Vector2} A reference to this vector.
   */
  round() {
    return this.x = Math.round(this.x), this.y = Math.round(this.y), this;
  }
  /**
   * The components of this vector are rounded towards zero (up if negative,
   * down if positive) to an integer value.
   *
   * @return {Vector2} A reference to this vector.
   */
  roundToZero() {
    return this.x = Math.trunc(this.x), this.y = Math.trunc(this.y), this;
  }
  /**
   * Inverts this vector - i.e. sets x = -x and y = -y.
   *
   * @return {Vector2} A reference to this vector.
   */
  negate() {
    return this.x = -this.x, this.y = -this.y, this;
  }
  /**
   * Calculates the dot product of the given vector with this instance.
   *
   * @param {Vector2} v - The vector to compute the dot product with.
   * @return {number} The result of the dot product.
   */
  dot(e) {
    return this.x * e.x + this.y * e.y;
  }
  /**
   * Calculates the cross product of the given vector with this instance.
   *
   * @param {Vector2} v - The vector to compute the cross product with.
   * @return {number} The result of the cross product.
   */
  cross(e) {
    return this.x * e.y - this.y * e.x;
  }
  /**
   * Computes the square of the Euclidean length (straight-line length) from
   * (0, 0) to (x, y). If you are comparing the lengths of vectors, you should
   * compare the length squared instead as it is slightly more efficient to calculate.
   *
   * @return {number} The square length of this vector.
   */
  lengthSq() {
    return this.x * this.x + this.y * this.y;
  }
  /**
   * Computes the  Euclidean length (straight-line length) from (0, 0) to (x, y).
   *
   * @return {number} The length of this vector.
   */
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y);
  }
  /**
   * Computes the Manhattan length of this vector.
   *
   * @return {number} The length of this vector.
   */
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y);
  }
  /**
   * Converts this vector to a unit vector - that is, sets it equal to a vector
   * with the same direction as this one, but with a vector length of `1`.
   *
   * @return {Vector2} A reference to this vector.
   */
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  /**
   * Computes the angle in radians of this vector with respect to the positive x-axis.
   *
   * @return {number} The angle in radians.
   */
  angle() {
    return Math.atan2(-this.y, -this.x) + Math.PI;
  }
  /**
   * Returns the angle between the given vector and this instance in radians.
   *
   * @param {Vector2} v - The vector to compute the angle with.
   * @return {number} The angle in radians.
   */
  angleTo(e) {
    const n = Math.sqrt(this.lengthSq() * e.lengthSq());
    if (n === 0) return Math.PI / 2;
    const i = this.dot(e) / n;
    return Math.acos(Vt(i, -1, 1));
  }
  /**
   * Computes the distance from the given vector to this instance.
   *
   * @param {Vector2} v - The vector to compute the distance to.
   * @return {number} The distance.
   */
  distanceTo(e) {
    return Math.sqrt(this.distanceToSquared(e));
  }
  /**
   * Computes the squared distance from the given vector to this instance.
   * If you are just comparing the distance with another distance, you should compare
   * the distance squared instead as it is slightly more efficient to calculate.
   *
   * @param {Vector2} v - The vector to compute the squared distance to.
   * @return {number} The squared distance.
   */
  distanceToSquared(e) {
    const n = this.x - e.x, i = this.y - e.y;
    return n * n + i * i;
  }
  /**
   * Computes the Manhattan distance from the given vector to this instance.
   *
   * @param {Vector2} v - The vector to compute the Manhattan distance to.
   * @return {number} The Manhattan distance.
   */
  manhattanDistanceTo(e) {
    return Math.abs(this.x - e.x) + Math.abs(this.y - e.y);
  }
  /**
   * Sets this vector to a vector with the same direction as this one, but
   * with the specified length.
   *
   * @param {number} length - The new length of this vector.
   * @return {Vector2} A reference to this vector.
   */
  setLength(e) {
    return this.normalize().multiplyScalar(e);
  }
  /**
   * Linearly interpolates between the given vector and this instance, where
   * alpha is the percent distance along the line - alpha = 0 will be this
   * vector, and alpha = 1 will be the given one.
   *
   * @param {Vector2} v - The vector to interpolate towards.
   * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.
   * @return {Vector2} A reference to this vector.
   */
  lerp(e, n) {
    return this.x += (e.x - this.x) * n, this.y += (e.y - this.y) * n, this;
  }
  /**
   * Linearly interpolates between the given vectors, where alpha is the percent
   * distance along the line - alpha = 0 will be first vector, and alpha = 1 will
   * be the second one. The result is stored in this instance.
   *
   * @param {Vector2} v1 - The first vector.
   * @param {Vector2} v2 - The second vector.
   * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.
   * @return {Vector2} A reference to this vector.
   */
  lerpVectors(e, n, i) {
    return this.x = e.x + (n.x - e.x) * i, this.y = e.y + (n.y - e.y) * i, this;
  }
  /**
   * Returns `true` if this vector is equal with the given one.
   *
   * @param {Vector2} v - The vector to test for equality.
   * @return {boolean} Whether this vector is equal with the given one.
   */
  equals(e) {
    return e.x === this.x && e.y === this.y;
  }
  /**
   * Sets this vector's x value to be `array[ offset ]` and y
   * value to be `array[ offset + 1 ]`.
   *
   * @param {Array<number>} array - An array holding the vector component values.
   * @param {number} [offset=0] - The offset into the array.
   * @return {Vector2} A reference to this vector.
   */
  fromArray(e, n = 0) {
    return this.x = e[n], this.y = e[n + 1], this;
  }
  /**
   * Writes the components of this vector to the given array. If no array is provided,
   * the method returns a new instance.
   *
   * @param {Array<number>} [array=[]] - The target array holding the vector components.
   * @param {number} [offset=0] - Index of the first element in the array.
   * @return {Array<number>} The vector components.
   */
  toArray(e = [], n = 0) {
    return e[n] = this.x, e[n + 1] = this.y, e;
  }
  /**
   * Sets the components of this vector from the given buffer attribute.
   *
   * @param {BufferAttribute} attribute - The buffer attribute holding vector data.
   * @param {number} index - The index into the attribute.
   * @return {Vector2} A reference to this vector.
   */
  fromBufferAttribute(e, n) {
    return this.x = e.getX(n), this.y = e.getY(n), this;
  }
  /**
   * Rotates this vector around the given center by the given angle.
   *
   * @param {Vector2} center - The point around which to rotate.
   * @param {number} angle - The angle to rotate, in radians.
   * @return {Vector2} A reference to this vector.
   */
  rotateAround(e, n) {
    const i = Math.cos(n), r = Math.sin(n), c = this.x - e.x, h = this.y - e.y;
    return this.x = c * i - h * r + e.x, this.y = c * r + h * i + e.y, this;
  }
  /**
   * Sets each component of this vector to a pseudo-random value between `0` and
   * `1`, excluding `1`.
   *
   * @return {Vector2} A reference to this vector.
   */
  random() {
    return this.x = Math.random(), this.y = Math.random(), this;
  }
  *[Symbol.iterator]() {
    yield this.x, yield this.y;
  }
}
class Es {
  /**
   * Constructs a new quaternion.
   *
   * @param {number} [x=0] - The x value of this quaternion.
   * @param {number} [y=0] - The y value of this quaternion.
   * @param {number} [z=0] - The z value of this quaternion.
   * @param {number} [w=1] - The w value of this quaternion.
   */
  constructor(e = 0, n = 0, i = 0, r = 1) {
    this.isQuaternion = !0, this._x = e, this._y = n, this._z = i, this._w = r;
  }
  /**
   * Interpolates between two quaternions via SLERP. This implementation assumes the
   * quaternion data are managed  in flat arrays.
   *
   * @param {Array<number>} dst - The destination array.
   * @param {number} dstOffset - An offset into the destination array.
   * @param {Array<number>} src0 - The source array of the first quaternion.
   * @param {number} srcOffset0 - An offset into the first source array.
   * @param {Array<number>} src1 -  The source array of the second quaternion.
   * @param {number} srcOffset1 - An offset into the second source array.
   * @param {number} t - The interpolation factor in the range `[0,1]`.
   * @see {@link Quaternion#slerp}
   */
  static slerpFlat(e, n, i, r, c, h, d) {
    let v = i[r + 0], g = i[r + 1], S = i[r + 2], x = i[r + 3];
    const M = c[h + 0], b = c[h + 1], R = c[h + 2], w = c[h + 3];
    if (d === 0) {
      e[n + 0] = v, e[n + 1] = g, e[n + 2] = S, e[n + 3] = x;
      return;
    }
    if (d === 1) {
      e[n + 0] = M, e[n + 1] = b, e[n + 2] = R, e[n + 3] = w;
      return;
    }
    if (x !== w || v !== M || g !== b || S !== R) {
      let C = 1 - d;
      const E = v * M + g * b + S * R + x * w, U = E >= 0 ? 1 : -1, N = 1 - E * E;
      if (N > Number.EPSILON) {
        const I = Math.sqrt(N), V = Math.atan2(I, E * U);
        C = Math.sin(C * V) / I, d = Math.sin(d * V) / I;
      }
      const O = d * U;
      if (v = v * C + M * O, g = g * C + b * O, S = S * C + R * O, x = x * C + w * O, C === 1 - d) {
        const I = 1 / Math.sqrt(v * v + g * g + S * S + x * x);
        v *= I, g *= I, S *= I, x *= I;
      }
    }
    e[n] = v, e[n + 1] = g, e[n + 2] = S, e[n + 3] = x;
  }
  /**
   * Multiplies two quaternions. This implementation assumes the quaternion data are managed
   * in flat arrays.
   *
   * @param {Array<number>} dst - The destination array.
   * @param {number} dstOffset - An offset into the destination array.
   * @param {Array<number>} src0 - The source array of the first quaternion.
   * @param {number} srcOffset0 - An offset into the first source array.
   * @param {Array<number>} src1 -  The source array of the second quaternion.
   * @param {number} srcOffset1 - An offset into the second source array.
   * @return {Array<number>} The destination array.
   * @see {@link Quaternion#multiplyQuaternions}.
   */
  static multiplyQuaternionsFlat(e, n, i, r, c, h) {
    const d = i[r], v = i[r + 1], g = i[r + 2], S = i[r + 3], x = c[h], M = c[h + 1], b = c[h + 2], R = c[h + 3];
    return e[n] = d * R + S * x + v * b - g * M, e[n + 1] = v * R + S * M + g * x - d * b, e[n + 2] = g * R + S * b + d * M - v * x, e[n + 3] = S * R - d * x - v * M - g * b, e;
  }
  /**
   * The x value of this quaternion.
   *
   * @type {number}
   * @default 0
   */
  get x() {
    return this._x;
  }
  set x(e) {
    this._x = e, this._onChangeCallback();
  }
  /**
   * The y value of this quaternion.
   *
   * @type {number}
   * @default 0
   */
  get y() {
    return this._y;
  }
  set y(e) {
    this._y = e, this._onChangeCallback();
  }
  /**
   * The z value of this quaternion.
   *
   * @type {number}
   * @default 0
   */
  get z() {
    return this._z;
  }
  set z(e) {
    this._z = e, this._onChangeCallback();
  }
  /**
   * The w value of this quaternion.
   *
   * @type {number}
   * @default 1
   */
  get w() {
    return this._w;
  }
  set w(e) {
    this._w = e, this._onChangeCallback();
  }
  /**
   * Sets the quaternion components.
   *
   * @param {number} x - The x value of this quaternion.
   * @param {number} y - The y value of this quaternion.
   * @param {number} z - The z value of this quaternion.
   * @param {number} w - The w value of this quaternion.
   * @return {Quaternion} A reference to this quaternion.
   */
  set(e, n, i, r) {
    return this._x = e, this._y = n, this._z = i, this._w = r, this._onChangeCallback(), this;
  }
  /**
   * Returns a new quaternion with copied values from this instance.
   *
   * @return {Quaternion} A clone of this instance.
   */
  clone() {
    return new this.constructor(this._x, this._y, this._z, this._w);
  }
  /**
   * Copies the values of the given quaternion to this instance.
   *
   * @param {Quaternion} quaternion - The quaternion to copy.
   * @return {Quaternion} A reference to this quaternion.
   */
  copy(e) {
    return this._x = e.x, this._y = e.y, this._z = e.z, this._w = e.w, this._onChangeCallback(), this;
  }
  /**
   * Sets this quaternion from the rotation specified by the given
   * Euler angles.
   *
   * @param {Euler} euler - The Euler angles.
   * @param {boolean} [update=true] - Whether the internal `onChange` callback should be executed or not.
   * @return {Quaternion} A reference to this quaternion.
   */
  setFromEuler(e, n = !0) {
    const i = e._x, r = e._y, c = e._z, h = e._order, d = Math.cos, v = Math.sin, g = d(i / 2), S = d(r / 2), x = d(c / 2), M = v(i / 2), b = v(r / 2), R = v(c / 2);
    switch (h) {
      case "XYZ":
        this._x = M * S * x + g * b * R, this._y = g * b * x - M * S * R, this._z = g * S * R + M * b * x, this._w = g * S * x - M * b * R;
        break;
      case "YXZ":
        this._x = M * S * x + g * b * R, this._y = g * b * x - M * S * R, this._z = g * S * R - M * b * x, this._w = g * S * x + M * b * R;
        break;
      case "ZXY":
        this._x = M * S * x - g * b * R, this._y = g * b * x + M * S * R, this._z = g * S * R + M * b * x, this._w = g * S * x - M * b * R;
        break;
      case "ZYX":
        this._x = M * S * x - g * b * R, this._y = g * b * x + M * S * R, this._z = g * S * R - M * b * x, this._w = g * S * x + M * b * R;
        break;
      case "YZX":
        this._x = M * S * x + g * b * R, this._y = g * b * x + M * S * R, this._z = g * S * R - M * b * x, this._w = g * S * x - M * b * R;
        break;
      case "XZY":
        this._x = M * S * x - g * b * R, this._y = g * b * x - M * S * R, this._z = g * S * R + M * b * x, this._w = g * S * x + M * b * R;
        break;
      default:
        console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: " + h);
    }
    return n === !0 && this._onChangeCallback(), this;
  }
  /**
   * Sets this quaternion from the given axis and angle.
   *
   * @param {Vector3} axis - The normalized axis.
   * @param {number} angle - The angle in radians.
   * @return {Quaternion} A reference to this quaternion.
   */
  setFromAxisAngle(e, n) {
    const i = n / 2, r = Math.sin(i);
    return this._x = e.x * r, this._y = e.y * r, this._z = e.z * r, this._w = Math.cos(i), this._onChangeCallback(), this;
  }
  /**
   * Sets this quaternion from the given rotation matrix.
   *
   * @param {Matrix4} m - A 4x4 matrix of which the upper 3x3 of matrix is a pure rotation matrix (i.e. unscaled).
   * @return {Quaternion} A reference to this quaternion.
   */
  setFromRotationMatrix(e) {
    const n = e.elements, i = n[0], r = n[4], c = n[8], h = n[1], d = n[5], v = n[9], g = n[2], S = n[6], x = n[10], M = i + d + x;
    if (M > 0) {
      const b = 0.5 / Math.sqrt(M + 1);
      this._w = 0.25 / b, this._x = (S - v) * b, this._y = (c - g) * b, this._z = (h - r) * b;
    } else if (i > d && i > x) {
      const b = 2 * Math.sqrt(1 + i - d - x);
      this._w = (S - v) / b, this._x = 0.25 * b, this._y = (r + h) / b, this._z = (c + g) / b;
    } else if (d > x) {
      const b = 2 * Math.sqrt(1 + d - i - x);
      this._w = (c - g) / b, this._x = (r + h) / b, this._y = 0.25 * b, this._z = (v + S) / b;
    } else {
      const b = 2 * Math.sqrt(1 + x - i - d);
      this._w = (h - r) / b, this._x = (c + g) / b, this._y = (v + S) / b, this._z = 0.25 * b;
    }
    return this._onChangeCallback(), this;
  }
  /**
   * Sets this quaternion to the rotation required to rotate the direction vector
   * `vFrom` to the direction vector `vTo`.
   *
   * @param {Vector3} vFrom - The first (normalized) direction vector.
   * @param {Vector3} vTo - The second (normalized) direction vector.
   * @return {Quaternion} A reference to this quaternion.
   */
  setFromUnitVectors(e, n) {
    let i = e.dot(n) + 1;
    return i < 1e-8 ? (i = 0, Math.abs(e.x) > Math.abs(e.z) ? (this._x = -e.y, this._y = e.x, this._z = 0, this._w = i) : (this._x = 0, this._y = -e.z, this._z = e.y, this._w = i)) : (this._x = e.y * n.z - e.z * n.y, this._y = e.z * n.x - e.x * n.z, this._z = e.x * n.y - e.y * n.x, this._w = i), this.normalize();
  }
  /**
   * Returns the angle between this quaternion and the given one in radians.
   *
   * @param {Quaternion} q - The quaternion to compute the angle with.
   * @return {number} The angle in radians.
   */
  angleTo(e) {
    return 2 * Math.acos(Math.abs(Vt(this.dot(e), -1, 1)));
  }
  /**
   * Rotates this quaternion by a given angular step to the given quaternion.
   * The method ensures that the final quaternion will not overshoot `q`.
   *
   * @param {Quaternion} q - The target quaternion.
   * @param {number} step - The angular step in radians.
   * @return {Quaternion} A reference to this quaternion.
   */
  rotateTowards(e, n) {
    const i = this.angleTo(e);
    if (i === 0) return this;
    const r = Math.min(1, n / i);
    return this.slerp(e, r), this;
  }
  /**
   * Sets this quaternion to the identity quaternion; that is, to the
   * quaternion that represents "no rotation".
   *
   * @return {Quaternion} A reference to this quaternion.
   */
  identity() {
    return this.set(0, 0, 0, 1);
  }
  /**
   * Inverts this quaternion via {@link Quaternion#conjugate}. The
   * quaternion is assumed to have unit length.
   *
   * @return {Quaternion} A reference to this quaternion.
   */
  invert() {
    return this.conjugate();
  }
  /**
   * Returns the rotational conjugate of this quaternion. The conjugate of a
   * quaternion represents the same rotation in the opposite direction about
   * the rotational axis.
   *
   * @return {Quaternion} A reference to this quaternion.
   */
  conjugate() {
    return this._x *= -1, this._y *= -1, this._z *= -1, this._onChangeCallback(), this;
  }
  /**
   * Calculates the dot product of this quaternion and the given one.
   *
   * @param {Quaternion} v - The quaternion to compute the dot product with.
   * @return {number} The result of the dot product.
   */
  dot(e) {
    return this._x * e._x + this._y * e._y + this._z * e._z + this._w * e._w;
  }
  /**
   * Computes the squared Euclidean length (straight-line length) of this quaternion,
   * considered as a 4 dimensional vector. This can be useful if you are comparing the
   * lengths of two quaternions, as this is a slightly more efficient calculation than
   * {@link Quaternion#length}.
   *
   * @return {number} The squared Euclidean length.
   */
  lengthSq() {
    return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
  }
  /**
   * Computes the Euclidean length (straight-line length) of this quaternion,
   * considered as a 4 dimensional vector.
   *
   * @return {number} The Euclidean length.
   */
  length() {
    return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
  }
  /**
   * Normalizes this quaternion - that is, calculated the quaternion that performs
   * the same rotation as this one, but has a length equal to `1`.
   *
   * @return {Quaternion} A reference to this quaternion.
   */
  normalize() {
    let e = this.length();
    return e === 0 ? (this._x = 0, this._y = 0, this._z = 0, this._w = 1) : (e = 1 / e, this._x = this._x * e, this._y = this._y * e, this._z = this._z * e, this._w = this._w * e), this._onChangeCallback(), this;
  }
  /**
   * Multiplies this quaternion by the given one.
   *
   * @param {Quaternion} q - The quaternion.
   * @return {Quaternion} A reference to this quaternion.
   */
  multiply(e) {
    return this.multiplyQuaternions(this, e);
  }
  /**
   * Pre-multiplies this quaternion by the given one.
   *
   * @param {Quaternion} q - The quaternion.
   * @return {Quaternion} A reference to this quaternion.
   */
  premultiply(e) {
    return this.multiplyQuaternions(e, this);
  }
  /**
   * Multiplies the given quaternions and stores the result in this instance.
   *
   * @param {Quaternion} a - The first quaternion.
   * @param {Quaternion} b - The second quaternion.
   * @return {Quaternion} A reference to this quaternion.
   */
  multiplyQuaternions(e, n) {
    const i = e._x, r = e._y, c = e._z, h = e._w, d = n._x, v = n._y, g = n._z, S = n._w;
    return this._x = i * S + h * d + r * g - c * v, this._y = r * S + h * v + c * d - i * g, this._z = c * S + h * g + i * v - r * d, this._w = h * S - i * d - r * v - c * g, this._onChangeCallback(), this;
  }
  /**
   * Performs a spherical linear interpolation between quaternions.
   *
   * @param {Quaternion} qb - The target quaternion.
   * @param {number} t - The interpolation factor in the closed interval `[0, 1]`.
   * @return {Quaternion} A reference to this quaternion.
   */
  slerp(e, n) {
    if (n === 0) return this;
    if (n === 1) return this.copy(e);
    const i = this._x, r = this._y, c = this._z, h = this._w;
    let d = h * e._w + i * e._x + r * e._y + c * e._z;
    if (d < 0 ? (this._w = -e._w, this._x = -e._x, this._y = -e._y, this._z = -e._z, d = -d) : this.copy(e), d >= 1)
      return this._w = h, this._x = i, this._y = r, this._z = c, this;
    const v = 1 - d * d;
    if (v <= Number.EPSILON) {
      const b = 1 - n;
      return this._w = b * h + n * this._w, this._x = b * i + n * this._x, this._y = b * r + n * this._y, this._z = b * c + n * this._z, this.normalize(), this;
    }
    const g = Math.sqrt(v), S = Math.atan2(g, d), x = Math.sin((1 - n) * S) / g, M = Math.sin(n * S) / g;
    return this._w = h * x + this._w * M, this._x = i * x + this._x * M, this._y = r * x + this._y * M, this._z = c * x + this._z * M, this._onChangeCallback(), this;
  }
  /**
   * Performs a spherical linear interpolation between the given quaternions
   * and stores the result in this quaternion.
   *
   * @param {Quaternion} qa - The source quaternion.
   * @param {Quaternion} qb - The target quaternion.
   * @param {number} t - The interpolation factor in the closed interval `[0, 1]`.
   * @return {Quaternion} A reference to this quaternion.
   */
  slerpQuaternions(e, n, i) {
    return this.copy(e).slerp(n, i);
  }
  /**
   * Sets this quaternion to a uniformly random, normalized quaternion.
   *
   * @return {Quaternion} A reference to this quaternion.
   */
  random() {
    const e = 2 * Math.PI * Math.random(), n = 2 * Math.PI * Math.random(), i = Math.random(), r = Math.sqrt(1 - i), c = Math.sqrt(i);
    return this.set(
      r * Math.sin(e),
      r * Math.cos(e),
      c * Math.sin(n),
      c * Math.cos(n)
    );
  }
  /**
   * Returns `true` if this quaternion is equal with the given one.
   *
   * @param {Quaternion} quaternion - The quaternion to test for equality.
   * @return {boolean} Whether this quaternion is equal with the given one.
   */
  equals(e) {
    return e._x === this._x && e._y === this._y && e._z === this._z && e._w === this._w;
  }
  /**
   * Sets this quaternion's components from the given array.
   *
   * @param {Array<number>} array - An array holding the quaternion component values.
   * @param {number} [offset=0] - The offset into the array.
   * @return {Quaternion} A reference to this quaternion.
   */
  fromArray(e, n = 0) {
    return this._x = e[n], this._y = e[n + 1], this._z = e[n + 2], this._w = e[n + 3], this._onChangeCallback(), this;
  }
  /**
   * Writes the components of this quaternion to the given array. If no array is provided,
   * the method returns a new instance.
   *
   * @param {Array<number>} [array=[]] - The target array holding the quaternion components.
   * @param {number} [offset=0] - Index of the first element in the array.
   * @return {Array<number>} The quaternion components.
   */
  toArray(e = [], n = 0) {
    return e[n] = this._x, e[n + 1] = this._y, e[n + 2] = this._z, e[n + 3] = this._w, e;
  }
  /**
   * Sets the components of this quaternion from the given buffer attribute.
   *
   * @param {BufferAttribute} attribute - The buffer attribute holding quaternion data.
   * @param {number} index - The index into the attribute.
   * @return {Quaternion} A reference to this quaternion.
   */
  fromBufferAttribute(e, n) {
    return this._x = e.getX(n), this._y = e.getY(n), this._z = e.getZ(n), this._w = e.getW(n), this._onChangeCallback(), this;
  }
  /**
   * This methods defines the serialization result of this class. Returns the
   * numerical elements of this quaternion in an array of format `[x, y, z, w]`.
   *
   * @return {Array<number>} The serialized quaternion.
   */
  toJSON() {
    return this.toArray();
  }
  _onChange(e) {
    return this._onChangeCallback = e, this;
  }
  _onChangeCallback() {
  }
  *[Symbol.iterator]() {
    yield this._x, yield this._y, yield this._z, yield this._w;
  }
}
class j {
  /**
   * Constructs a new 3D vector.
   *
   * @param {number} [x=0] - The x value of this vector.
   * @param {number} [y=0] - The y value of this vector.
   * @param {number} [z=0] - The z value of this vector.
   */
  constructor(e = 0, n = 0, i = 0) {
    j.prototype.isVector3 = !0, this.x = e, this.y = n, this.z = i;
  }
  /**
   * Sets the vector components.
   *
   * @param {number} x - The value of the x component.
   * @param {number} y - The value of the y component.
   * @param {number} z - The value of the z component.
   * @return {Vector3} A reference to this vector.
   */
  set(e, n, i) {
    return i === void 0 && (i = this.z), this.x = e, this.y = n, this.z = i, this;
  }
  /**
   * Sets the vector components to the same value.
   *
   * @param {number} scalar - The value to set for all vector components.
   * @return {Vector3} A reference to this vector.
   */
  setScalar(e) {
    return this.x = e, this.y = e, this.z = e, this;
  }
  /**
   * Sets the vector's x component to the given value
   *
   * @param {number} x - The value to set.
   * @return {Vector3} A reference to this vector.
   */
  setX(e) {
    return this.x = e, this;
  }
  /**
   * Sets the vector's y component to the given value
   *
   * @param {number} y - The value to set.
   * @return {Vector3} A reference to this vector.
   */
  setY(e) {
    return this.y = e, this;
  }
  /**
   * Sets the vector's z component to the given value
   *
   * @param {number} z - The value to set.
   * @return {Vector3} A reference to this vector.
   */
  setZ(e) {
    return this.z = e, this;
  }
  /**
   * Allows to set a vector component with an index.
   *
   * @param {number} index - The component index. `0` equals to x, `1` equals to y, `2` equals to z.
   * @param {number} value - The value to set.
   * @return {Vector3} A reference to this vector.
   */
  setComponent(e, n) {
    switch (e) {
      case 0:
        this.x = n;
        break;
      case 1:
        this.y = n;
        break;
      case 2:
        this.z = n;
        break;
      default:
        throw new Error("index is out of range: " + e);
    }
    return this;
  }
  /**
   * Returns the value of the vector component which matches the given index.
   *
   * @param {number} index - The component index. `0` equals to x, `1` equals to y, `2` equals to z.
   * @return {number} A vector component value.
   */
  getComponent(e) {
    switch (e) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      default:
        throw new Error("index is out of range: " + e);
    }
  }
  /**
   * Returns a new vector with copied values from this instance.
   *
   * @return {Vector3} A clone of this instance.
   */
  clone() {
    return new this.constructor(this.x, this.y, this.z);
  }
  /**
   * Copies the values of the given vector to this instance.
   *
   * @param {Vector3} v - The vector to copy.
   * @return {Vector3} A reference to this vector.
   */
  copy(e) {
    return this.x = e.x, this.y = e.y, this.z = e.z, this;
  }
  /**
   * Adds the given vector to this instance.
   *
   * @param {Vector3} v - The vector to add.
   * @return {Vector3} A reference to this vector.
   */
  add(e) {
    return this.x += e.x, this.y += e.y, this.z += e.z, this;
  }
  /**
   * Adds the given scalar value to all components of this instance.
   *
   * @param {number} s - The scalar to add.
   * @return {Vector3} A reference to this vector.
   */
  addScalar(e) {
    return this.x += e, this.y += e, this.z += e, this;
  }
  /**
   * Adds the given vectors and stores the result in this instance.
   *
   * @param {Vector3} a - The first vector.
   * @param {Vector3} b - The second vector.
   * @return {Vector3} A reference to this vector.
   */
  addVectors(e, n) {
    return this.x = e.x + n.x, this.y = e.y + n.y, this.z = e.z + n.z, this;
  }
  /**
   * Adds the given vector scaled by the given factor to this instance.
   *
   * @param {Vector3|Vector4} v - The vector.
   * @param {number} s - The factor that scales `v`.
   * @return {Vector3} A reference to this vector.
   */
  addScaledVector(e, n) {
    return this.x += e.x * n, this.y += e.y * n, this.z += e.z * n, this;
  }
  /**
   * Subtracts the given vector from this instance.
   *
   * @param {Vector3} v - The vector to subtract.
   * @return {Vector3} A reference to this vector.
   */
  sub(e) {
    return this.x -= e.x, this.y -= e.y, this.z -= e.z, this;
  }
  /**
   * Subtracts the given scalar value from all components of this instance.
   *
   * @param {number} s - The scalar to subtract.
   * @return {Vector3} A reference to this vector.
   */
  subScalar(e) {
    return this.x -= e, this.y -= e, this.z -= e, this;
  }
  /**
   * Subtracts the given vectors and stores the result in this instance.
   *
   * @param {Vector3} a - The first vector.
   * @param {Vector3} b - The second vector.
   * @return {Vector3} A reference to this vector.
   */
  subVectors(e, n) {
    return this.x = e.x - n.x, this.y = e.y - n.y, this.z = e.z - n.z, this;
  }
  /**
   * Multiplies the given vector with this instance.
   *
   * @param {Vector3} v - The vector to multiply.
   * @return {Vector3} A reference to this vector.
   */
  multiply(e) {
    return this.x *= e.x, this.y *= e.y, this.z *= e.z, this;
  }
  /**
   * Multiplies the given scalar value with all components of this instance.
   *
   * @param {number} scalar - The scalar to multiply.
   * @return {Vector3} A reference to this vector.
   */
  multiplyScalar(e) {
    return this.x *= e, this.y *= e, this.z *= e, this;
  }
  /**
   * Multiplies the given vectors and stores the result in this instance.
   *
   * @param {Vector3} a - The first vector.
   * @param {Vector3} b - The second vector.
   * @return {Vector3} A reference to this vector.
   */
  multiplyVectors(e, n) {
    return this.x = e.x * n.x, this.y = e.y * n.y, this.z = e.z * n.z, this;
  }
  /**
   * Applies the given Euler rotation to this vector.
   *
   * @param {Euler} euler - The Euler angles.
   * @return {Vector3} A reference to this vector.
   */
  applyEuler(e) {
    return this.applyQuaternion(A1.setFromEuler(e));
  }
  /**
   * Applies a rotation specified by an axis and an angle to this vector.
   *
   * @param {Vector3} axis - A normalized vector representing the rotation axis.
   * @param {number} angle - The angle in radians.
   * @return {Vector3} A reference to this vector.
   */
  applyAxisAngle(e, n) {
    return this.applyQuaternion(A1.setFromAxisAngle(e, n));
  }
  /**
   * Multiplies this vector with the given 3x3 matrix.
   *
   * @param {Matrix3} m - The 3x3 matrix.
   * @return {Vector3} A reference to this vector.
   */
  applyMatrix3(e) {
    const n = this.x, i = this.y, r = this.z, c = e.elements;
    return this.x = c[0] * n + c[3] * i + c[6] * r, this.y = c[1] * n + c[4] * i + c[7] * r, this.z = c[2] * n + c[5] * i + c[8] * r, this;
  }
  /**
   * Multiplies this vector by the given normal matrix and normalizes
   * the result.
   *
   * @param {Matrix3} m - The normal matrix.
   * @return {Vector3} A reference to this vector.
   */
  applyNormalMatrix(e) {
    return this.applyMatrix3(e).normalize();
  }
  /**
   * Multiplies this vector (with an implicit 1 in the 4th dimension) by m, and
   * divides by perspective.
   *
   * @param {Matrix4} m - The matrix to apply.
   * @return {Vector3} A reference to this vector.
   */
  applyMatrix4(e) {
    const n = this.x, i = this.y, r = this.z, c = e.elements, h = 1 / (c[3] * n + c[7] * i + c[11] * r + c[15]);
    return this.x = (c[0] * n + c[4] * i + c[8] * r + c[12]) * h, this.y = (c[1] * n + c[5] * i + c[9] * r + c[13]) * h, this.z = (c[2] * n + c[6] * i + c[10] * r + c[14]) * h, this;
  }
  /**
   * Applies the given Quaternion to this vector.
   *
   * @param {Quaternion} q - The Quaternion.
   * @return {Vector3} A reference to this vector.
   */
  applyQuaternion(e) {
    const n = this.x, i = this.y, r = this.z, c = e.x, h = e.y, d = e.z, v = e.w, g = 2 * (h * r - d * i), S = 2 * (d * n - c * r), x = 2 * (c * i - h * n);
    return this.x = n + v * g + h * x - d * S, this.y = i + v * S + d * g - c * x, this.z = r + v * x + c * S - h * g, this;
  }
  /**
   * Projects this vector from world space into the camera's normalized
   * device coordinate (NDC) space.
   *
   * @param {Camera} camera - The camera.
   * @return {Vector3} A reference to this vector.
   */
  project(e) {
    return this.applyMatrix4(e.matrixWorldInverse).applyMatrix4(e.projectionMatrix);
  }
  /**
   * Unprojects this vector from the camera's normalized device coordinate (NDC)
   * space into world space.
   *
   * @param {Camera} camera - The camera.
   * @return {Vector3} A reference to this vector.
   */
  unproject(e) {
    return this.applyMatrix4(e.projectionMatrixInverse).applyMatrix4(e.matrixWorld);
  }
  /**
   * Transforms the direction of this vector by a matrix (the upper left 3 x 3
   * subset of the given 4x4 matrix and then normalizes the result.
   *
   * @param {Matrix4} m - The matrix.
   * @return {Vector3} A reference to this vector.
   */
  transformDirection(e) {
    const n = this.x, i = this.y, r = this.z, c = e.elements;
    return this.x = c[0] * n + c[4] * i + c[8] * r, this.y = c[1] * n + c[5] * i + c[9] * r, this.z = c[2] * n + c[6] * i + c[10] * r, this.normalize();
  }
  /**
   * Divides this instance by the given vector.
   *
   * @param {Vector3} v - The vector to divide.
   * @return {Vector3} A reference to this vector.
   */
  divide(e) {
    return this.x /= e.x, this.y /= e.y, this.z /= e.z, this;
  }
  /**
   * Divides this vector by the given scalar.
   *
   * @param {number} scalar - The scalar to divide.
   * @return {Vector3} A reference to this vector.
   */
  divideScalar(e) {
    return this.multiplyScalar(1 / e);
  }
  /**
   * If this vector's x, y or z value is greater than the given vector's x, y or z
   * value, replace that value with the corresponding min value.
   *
   * @param {Vector3} v - The vector.
   * @return {Vector3} A reference to this vector.
   */
  min(e) {
    return this.x = Math.min(this.x, e.x), this.y = Math.min(this.y, e.y), this.z = Math.min(this.z, e.z), this;
  }
  /**
   * If this vector's x, y or z value is less than the given vector's x, y or z
   * value, replace that value with the corresponding max value.
   *
   * @param {Vector3} v - The vector.
   * @return {Vector3} A reference to this vector.
   */
  max(e) {
    return this.x = Math.max(this.x, e.x), this.y = Math.max(this.y, e.y), this.z = Math.max(this.z, e.z), this;
  }
  /**
   * If this vector's x, y or z value is greater than the max vector's x, y or z
   * value, it is replaced by the corresponding value.
   * If this vector's x, y or z value is less than the min vector's x, y or z value,
   * it is replaced by the corresponding value.
   *
   * @param {Vector3} min - The minimum x, y and z values.
   * @param {Vector3} max - The maximum x, y and z values in the desired range.
   * @return {Vector3} A reference to this vector.
   */
  clamp(e, n) {
    return this.x = Vt(this.x, e.x, n.x), this.y = Vt(this.y, e.y, n.y), this.z = Vt(this.z, e.z, n.z), this;
  }
  /**
   * If this vector's x, y or z values are greater than the max value, they are
   * replaced by the max value.
   * If this vector's x, y or z values are less than the min value, they are
   * replaced by the min value.
   *
   * @param {number} minVal - The minimum value the components will be clamped to.
   * @param {number} maxVal - The maximum value the components will be clamped to.
   * @return {Vector3} A reference to this vector.
   */
  clampScalar(e, n) {
    return this.x = Vt(this.x, e, n), this.y = Vt(this.y, e, n), this.z = Vt(this.z, e, n), this;
  }
  /**
   * If this vector's length is greater than the max value, it is replaced by
   * the max value.
   * If this vector's length is less than the min value, it is replaced by the
   * min value.
   *
   * @param {number} min - The minimum value the vector length will be clamped to.
   * @param {number} max - The maximum value the vector length will be clamped to.
   * @return {Vector3} A reference to this vector.
   */
  clampLength(e, n) {
    const i = this.length();
    return this.divideScalar(i || 1).multiplyScalar(Vt(i, e, n));
  }
  /**
   * The components of this vector are rounded down to the nearest integer value.
   *
   * @return {Vector3} A reference to this vector.
   */
  floor() {
    return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this;
  }
  /**
   * The components of this vector are rounded up to the nearest integer value.
   *
   * @return {Vector3} A reference to this vector.
   */
  ceil() {
    return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this;
  }
  /**
   * The components of this vector are rounded to the nearest integer value
   *
   * @return {Vector3} A reference to this vector.
   */
  round() {
    return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this;
  }
  /**
   * The components of this vector are rounded towards zero (up if negative,
   * down if positive) to an integer value.
   *
   * @return {Vector3} A reference to this vector.
   */
  roundToZero() {
    return this.x = Math.trunc(this.x), this.y = Math.trunc(this.y), this.z = Math.trunc(this.z), this;
  }
  /**
   * Inverts this vector - i.e. sets x = -x, y = -y and z = -z.
   *
   * @return {Vector3} A reference to this vector.
   */
  negate() {
    return this.x = -this.x, this.y = -this.y, this.z = -this.z, this;
  }
  /**
   * Calculates the dot product of the given vector with this instance.
   *
   * @param {Vector3} v - The vector to compute the dot product with.
   * @return {number} The result of the dot product.
   */
  dot(e) {
    return this.x * e.x + this.y * e.y + this.z * e.z;
  }
  // TODO lengthSquared?
  /**
   * Computes the square of the Euclidean length (straight-line length) from
   * (0, 0, 0) to (x, y, z). If you are comparing the lengths of vectors, you should
   * compare the length squared instead as it is slightly more efficient to calculate.
   *
   * @return {number} The square length of this vector.
   */
  lengthSq() {
    return this.x * this.x + this.y * this.y + this.z * this.z;
  }
  /**
   * Computes the  Euclidean length (straight-line length) from (0, 0, 0) to (x, y, z).
   *
   * @return {number} The length of this vector.
   */
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
  }
  /**
   * Computes the Manhattan length of this vector.
   *
   * @return {number} The length of this vector.
   */
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
  }
  /**
   * Converts this vector to a unit vector - that is, sets it equal to a vector
   * with the same direction as this one, but with a vector length of `1`.
   *
   * @return {Vector3} A reference to this vector.
   */
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  /**
   * Sets this vector to a vector with the same direction as this one, but
   * with the specified length.
   *
   * @param {number} length - The new length of this vector.
   * @return {Vector3} A reference to this vector.
   */
  setLength(e) {
    return this.normalize().multiplyScalar(e);
  }
  /**
   * Linearly interpolates between the given vector and this instance, where
   * alpha is the percent distance along the line - alpha = 0 will be this
   * vector, and alpha = 1 will be the given one.
   *
   * @param {Vector3} v - The vector to interpolate towards.
   * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.
   * @return {Vector3} A reference to this vector.
   */
  lerp(e, n) {
    return this.x += (e.x - this.x) * n, this.y += (e.y - this.y) * n, this.z += (e.z - this.z) * n, this;
  }
  /**
   * Linearly interpolates between the given vectors, where alpha is the percent
   * distance along the line - alpha = 0 will be first vector, and alpha = 1 will
   * be the second one. The result is stored in this instance.
   *
   * @param {Vector3} v1 - The first vector.
   * @param {Vector3} v2 - The second vector.
   * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.
   * @return {Vector3} A reference to this vector.
   */
  lerpVectors(e, n, i) {
    return this.x = e.x + (n.x - e.x) * i, this.y = e.y + (n.y - e.y) * i, this.z = e.z + (n.z - e.z) * i, this;
  }
  /**
   * Calculates the cross product of the given vector with this instance.
   *
   * @param {Vector3} v - The vector to compute the cross product with.
   * @return {Vector3} The result of the cross product.
   */
  cross(e) {
    return this.crossVectors(this, e);
  }
  /**
   * Calculates the cross product of the given vectors and stores the result
   * in this instance.
   *
   * @param {Vector3} a - The first vector.
   * @param {Vector3} b - The second vector.
   * @return {Vector3} A reference to this vector.
   */
  crossVectors(e, n) {
    const i = e.x, r = e.y, c = e.z, h = n.x, d = n.y, v = n.z;
    return this.x = r * v - c * d, this.y = c * h - i * v, this.z = i * d - r * h, this;
  }
  /**
   * Projects this vector onto the given one.
   *
   * @param {Vector3} v - The vector to project to.
   * @return {Vector3} A reference to this vector.
   */
  projectOnVector(e) {
    const n = e.lengthSq();
    if (n === 0) return this.set(0, 0, 0);
    const i = e.dot(this) / n;
    return this.copy(e).multiplyScalar(i);
  }
  /**
   * Projects this vector onto a plane by subtracting this
   * vector projected onto the plane's normal from this vector.
   *
   * @param {Vector3} planeNormal - The plane normal.
   * @return {Vector3} A reference to this vector.
   */
  projectOnPlane(e) {
    return o_.copy(this).projectOnVector(e), this.sub(o_);
  }
  /**
   * Reflects this vector off a plane orthogonal to the given normal vector.
   *
   * @param {Vector3} normal - The (normalized) normal vector.
   * @return {Vector3} A reference to this vector.
   */
  reflect(e) {
    return this.sub(o_.copy(e).multiplyScalar(2 * this.dot(e)));
  }
  /**
   * Returns the angle between the given vector and this instance in radians.
   *
   * @param {Vector3} v - The vector to compute the angle with.
   * @return {number} The angle in radians.
   */
  angleTo(e) {
    const n = Math.sqrt(this.lengthSq() * e.lengthSq());
    if (n === 0) return Math.PI / 2;
    const i = this.dot(e) / n;
    return Math.acos(Vt(i, -1, 1));
  }
  /**
   * Computes the distance from the given vector to this instance.
   *
   * @param {Vector3} v - The vector to compute the distance to.
   * @return {number} The distance.
   */
  distanceTo(e) {
    return Math.sqrt(this.distanceToSquared(e));
  }
  /**
   * Computes the squared distance from the given vector to this instance.
   * If you are just comparing the distance with another distance, you should compare
   * the distance squared instead as it is slightly more efficient to calculate.
   *
   * @param {Vector3} v - The vector to compute the squared distance to.
   * @return {number} The squared distance.
   */
  distanceToSquared(e) {
    const n = this.x - e.x, i = this.y - e.y, r = this.z - e.z;
    return n * n + i * i + r * r;
  }
  /**
   * Computes the Manhattan distance from the given vector to this instance.
   *
   * @param {Vector3} v - The vector to compute the Manhattan distance to.
   * @return {number} The Manhattan distance.
   */
  manhattanDistanceTo(e) {
    return Math.abs(this.x - e.x) + Math.abs(this.y - e.y) + Math.abs(this.z - e.z);
  }
  /**
   * Sets the vector components from the given spherical coordinates.
   *
   * @param {Spherical} s - The spherical coordinates.
   * @return {Vector3} A reference to this vector.
   */
  setFromSpherical(e) {
    return this.setFromSphericalCoords(e.radius, e.phi, e.theta);
  }
  /**
   * Sets the vector components from the given spherical coordinates.
   *
   * @param {number} radius - The radius.
   * @param {number} phi - The phi angle in radians.
   * @param {number} theta - The theta angle in radians.
   * @return {Vector3} A reference to this vector.
   */
  setFromSphericalCoords(e, n, i) {
    const r = Math.sin(n) * e;
    return this.x = r * Math.sin(i), this.y = Math.cos(n) * e, this.z = r * Math.cos(i), this;
  }
  /**
   * Sets the vector components from the given cylindrical coordinates.
   *
   * @param {Cylindrical} c - The cylindrical coordinates.
   * @return {Vector3} A reference to this vector.
   */
  setFromCylindrical(e) {
    return this.setFromCylindricalCoords(e.radius, e.theta, e.y);
  }
  /**
   * Sets the vector components from the given cylindrical coordinates.
   *
   * @param {number} radius - The radius.
   * @param {number} theta - The theta angle in radians.
   * @param {number} y - The y value.
   * @return {Vector3} A reference to this vector.
   */
  setFromCylindricalCoords(e, n, i) {
    return this.x = e * Math.sin(n), this.y = i, this.z = e * Math.cos(n), this;
  }
  /**
   * Sets the vector components to the position elements of the
   * given transformation matrix.
   *
   * @param {Matrix4} m - The 4x4 matrix.
   * @return {Vector3} A reference to this vector.
   */
  setFromMatrixPosition(e) {
    const n = e.elements;
    return this.x = n[12], this.y = n[13], this.z = n[14], this;
  }
  /**
   * Sets the vector components to the scale elements of the
   * given transformation matrix.
   *
   * @param {Matrix4} m - The 4x4 matrix.
   * @return {Vector3} A reference to this vector.
   */
  setFromMatrixScale(e) {
    const n = this.setFromMatrixColumn(e, 0).length(), i = this.setFromMatrixColumn(e, 1).length(), r = this.setFromMatrixColumn(e, 2).length();
    return this.x = n, this.y = i, this.z = r, this;
  }
  /**
   * Sets the vector components from the specified matrix column.
   *
   * @param {Matrix4} m - The 4x4 matrix.
   * @param {number} index - The column index.
   * @return {Vector3} A reference to this vector.
   */
  setFromMatrixColumn(e, n) {
    return this.fromArray(e.elements, n * 4);
  }
  /**
   * Sets the vector components from the specified matrix column.
   *
   * @param {Matrix3} m - The 3x3 matrix.
   * @param {number} index - The column index.
   * @return {Vector3} A reference to this vector.
   */
  setFromMatrix3Column(e, n) {
    return this.fromArray(e.elements, n * 3);
  }
  /**
   * Sets the vector components from the given Euler angles.
   *
   * @param {Euler} e - The Euler angles to set.
   * @return {Vector3} A reference to this vector.
   */
  setFromEuler(e) {
    return this.x = e._x, this.y = e._y, this.z = e._z, this;
  }
  /**
   * Sets the vector components from the RGB components of the
   * given color.
   *
   * @param {Color} c - The color to set.
   * @return {Vector3} A reference to this vector.
   */
  setFromColor(e) {
    return this.x = e.r, this.y = e.g, this.z = e.b, this;
  }
  /**
   * Returns `true` if this vector is equal with the given one.
   *
   * @param {Vector3} v - The vector to test for equality.
   * @return {boolean} Whether this vector is equal with the given one.
   */
  equals(e) {
    return e.x === this.x && e.y === this.y && e.z === this.z;
  }
  /**
   * Sets this vector's x value to be `array[ offset ]`, y value to be `array[ offset + 1 ]`
   * and z value to be `array[ offset + 2 ]`.
   *
   * @param {Array<number>} array - An array holding the vector component values.
   * @param {number} [offset=0] - The offset into the array.
   * @return {Vector3} A reference to this vector.
   */
  fromArray(e, n = 0) {
    return this.x = e[n], this.y = e[n + 1], this.z = e[n + 2], this;
  }
  /**
   * Writes the components of this vector to the given array. If no array is provided,
   * the method returns a new instance.
   *
   * @param {Array<number>} [array=[]] - The target array holding the vector components.
   * @param {number} [offset=0] - Index of the first element in the array.
   * @return {Array<number>} The vector components.
   */
  toArray(e = [], n = 0) {
    return e[n] = this.x, e[n + 1] = this.y, e[n + 2] = this.z, e;
  }
  /**
   * Sets the components of this vector from the given buffer attribute.
   *
   * @param {BufferAttribute} attribute - The buffer attribute holding vector data.
   * @param {number} index - The index into the attribute.
   * @return {Vector3} A reference to this vector.
   */
  fromBufferAttribute(e, n) {
    return this.x = e.getX(n), this.y = e.getY(n), this.z = e.getZ(n), this;
  }
  /**
   * Sets each component of this vector to a pseudo-random value between `0` and
   * `1`, excluding `1`.
   *
   * @return {Vector3} A reference to this vector.
   */
  random() {
    return this.x = Math.random(), this.y = Math.random(), this.z = Math.random(), this;
  }
  /**
   * Sets this vector to a uniformly random point on a unit sphere.
   *
   * @return {Vector3} A reference to this vector.
   */
  randomDirection() {
    const e = Math.random() * Math.PI * 2, n = Math.random() * 2 - 1, i = Math.sqrt(1 - n * n);
    return this.x = i * Math.cos(e), this.y = n, this.z = i * Math.sin(e), this;
  }
  *[Symbol.iterator]() {
    yield this.x, yield this.y, yield this.z;
  }
}
const o_ = /* @__PURE__ */ new j(), A1 = /* @__PURE__ */ new Es();
class Qt {
  /**
   * Constructs a new 3x3 matrix. The arguments are supposed to be
   * in row-major order. If no arguments are provided, the constructor
   * initializes the matrix as an identity matrix.
   *
   * @param {number} [n11] - 1-1 matrix element.
   * @param {number} [n12] - 1-2 matrix element.
   * @param {number} [n13] - 1-3 matrix element.
   * @param {number} [n21] - 2-1 matrix element.
   * @param {number} [n22] - 2-2 matrix element.
   * @param {number} [n23] - 2-3 matrix element.
   * @param {number} [n31] - 3-1 matrix element.
   * @param {number} [n32] - 3-2 matrix element.
   * @param {number} [n33] - 3-3 matrix element.
   */
  constructor(e, n, i, r, c, h, d, v, g) {
    Qt.prototype.isMatrix3 = !0, this.elements = [
      1,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1
    ], e !== void 0 && this.set(e, n, i, r, c, h, d, v, g);
  }
  /**
   * Sets the elements of the matrix.The arguments are supposed to be
   * in row-major order.
   *
   * @param {number} [n11] - 1-1 matrix element.
   * @param {number} [n12] - 1-2 matrix element.
   * @param {number} [n13] - 1-3 matrix element.
   * @param {number} [n21] - 2-1 matrix element.
   * @param {number} [n22] - 2-2 matrix element.
   * @param {number} [n23] - 2-3 matrix element.
   * @param {number} [n31] - 3-1 matrix element.
   * @param {number} [n32] - 3-2 matrix element.
   * @param {number} [n33] - 3-3 matrix element.
   * @return {Matrix3} A reference to this matrix.
   */
  set(e, n, i, r, c, h, d, v, g) {
    const S = this.elements;
    return S[0] = e, S[1] = r, S[2] = d, S[3] = n, S[4] = c, S[5] = v, S[6] = i, S[7] = h, S[8] = g, this;
  }
  /**
   * Sets this matrix to the 3x3 identity matrix.
   *
   * @return {Matrix3} A reference to this matrix.
   */
  identity() {
    return this.set(
      1,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1
    ), this;
  }
  /**
   * Copies the values of the given matrix to this instance.
   *
   * @param {Matrix3} m - The matrix to copy.
   * @return {Matrix3} A reference to this matrix.
   */
  copy(e) {
    const n = this.elements, i = e.elements;
    return n[0] = i[0], n[1] = i[1], n[2] = i[2], n[3] = i[3], n[4] = i[4], n[5] = i[5], n[6] = i[6], n[7] = i[7], n[8] = i[8], this;
  }
  /**
   * Extracts the basis of this matrix into the three axis vectors provided.
   *
   * @param {Vector3} xAxis - The basis's x axis.
   * @param {Vector3} yAxis - The basis's y axis.
   * @param {Vector3} zAxis - The basis's z axis.
   * @return {Matrix3} A reference to this matrix.
   */
  extractBasis(e, n, i) {
    return e.setFromMatrix3Column(this, 0), n.setFromMatrix3Column(this, 1), i.setFromMatrix3Column(this, 2), this;
  }
  /**
   * Set this matrix to the upper 3x3 matrix of the given 4x4 matrix.
   *
   * @param {Matrix4} m - The 4x4 matrix.
   * @return {Matrix3} A reference to this matrix.
   */
  setFromMatrix4(e) {
    const n = e.elements;
    return this.set(
      n[0],
      n[4],
      n[8],
      n[1],
      n[5],
      n[9],
      n[2],
      n[6],
      n[10]
    ), this;
  }
  /**
   * Post-multiplies this matrix by the given 3x3 matrix.
   *
   * @param {Matrix3} m - The matrix to multiply with.
   * @return {Matrix3} A reference to this matrix.
   */
  multiply(e) {
    return this.multiplyMatrices(this, e);
  }
  /**
   * Pre-multiplies this matrix by the given 3x3 matrix.
   *
   * @param {Matrix3} m - The matrix to multiply with.
   * @return {Matrix3} A reference to this matrix.
   */
  premultiply(e) {
    return this.multiplyMatrices(e, this);
  }
  /**
   * Multiples the given 3x3 matrices and stores the result
   * in this matrix.
   *
   * @param {Matrix3} a - The first matrix.
   * @param {Matrix3} b - The second matrix.
   * @return {Matrix3} A reference to this matrix.
   */
  multiplyMatrices(e, n) {
    const i = e.elements, r = n.elements, c = this.elements, h = i[0], d = i[3], v = i[6], g = i[1], S = i[4], x = i[7], M = i[2], b = i[5], R = i[8], w = r[0], C = r[3], E = r[6], U = r[1], N = r[4], O = r[7], I = r[2], V = r[5], Y = r[8];
    return c[0] = h * w + d * U + v * I, c[3] = h * C + d * N + v * V, c[6] = h * E + d * O + v * Y, c[1] = g * w + S * U + x * I, c[4] = g * C + S * N + x * V, c[7] = g * E + S * O + x * Y, c[2] = M * w + b * U + R * I, c[5] = M * C + b * N + R * V, c[8] = M * E + b * O + R * Y, this;
  }
  /**
   * Multiplies every component of the matrix by the given scalar.
   *
   * @param {number} s - The scalar.
   * @return {Matrix3} A reference to this matrix.
   */
  multiplyScalar(e) {
    const n = this.elements;
    return n[0] *= e, n[3] *= e, n[6] *= e, n[1] *= e, n[4] *= e, n[7] *= e, n[2] *= e, n[5] *= e, n[8] *= e, this;
  }
  /**
   * Computes and returns the determinant of this matrix.
   *
   * @return {number} The determinant.
   */
  determinant() {
    const e = this.elements, n = e[0], i = e[1], r = e[2], c = e[3], h = e[4], d = e[5], v = e[6], g = e[7], S = e[8];
    return n * h * S - n * d * g - i * c * S + i * d * v + r * c * g - r * h * v;
  }
  /**
   * Inverts this matrix, using the [analytic method]{@link https://en.wikipedia.org/wiki/Invertible_matrix#Analytic_solution}.
   * You can not invert with a determinant of zero. If you attempt this, the method produces
   * a zero matrix instead.
   *
   * @return {Matrix3} A reference to this matrix.
   */
  invert() {
    const e = this.elements, n = e[0], i = e[1], r = e[2], c = e[3], h = e[4], d = e[5], v = e[6], g = e[7], S = e[8], x = S * h - d * g, M = d * v - S * c, b = g * c - h * v, R = n * x + i * M + r * b;
    if (R === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
    const w = 1 / R;
    return e[0] = x * w, e[1] = (r * g - S * i) * w, e[2] = (d * i - r * h) * w, e[3] = M * w, e[4] = (S * n - r * v) * w, e[5] = (r * c - d * n) * w, e[6] = b * w, e[7] = (i * v - g * n) * w, e[8] = (h * n - i * c) * w, this;
  }
  /**
   * Transposes this matrix in place.
   *
   * @return {Matrix3} A reference to this matrix.
   */
  transpose() {
    let e;
    const n = this.elements;
    return e = n[1], n[1] = n[3], n[3] = e, e = n[2], n[2] = n[6], n[6] = e, e = n[5], n[5] = n[7], n[7] = e, this;
  }
  /**
   * Computes the normal matrix which is the inverse transpose of the upper
   * left 3x3 portion of the given 4x4 matrix.
   *
   * @param {Matrix4} matrix4 - The 4x4 matrix.
   * @return {Matrix3} A reference to this matrix.
   */
  getNormalMatrix(e) {
    return this.setFromMatrix4(e).invert().transpose();
  }
  /**
   * Transposes this matrix into the supplied array, and returns itself unchanged.
   *
   * @param {Array<number>} r - An array to store the transposed matrix elements.
   * @return {Matrix3} A reference to this matrix.
   */
  transposeIntoArray(e) {
    const n = this.elements;
    return e[0] = n[0], e[1] = n[3], e[2] = n[6], e[3] = n[1], e[4] = n[4], e[5] = n[7], e[6] = n[2], e[7] = n[5], e[8] = n[8], this;
  }
  /**
   * Sets the UV transform matrix from offset, repeat, rotation, and center.
   *
   * @param {number} tx - Offset x.
   * @param {number} ty - Offset y.
   * @param {number} sx - Repeat x.
   * @param {number} sy - Repeat y.
   * @param {number} rotation - Rotation, in radians. Positive values rotate counterclockwise.
   * @param {number} cx - Center x of rotation.
   * @param {number} cy - Center y of rotation
   * @return {Matrix3} A reference to this matrix.
   */
  setUvTransform(e, n, i, r, c, h, d) {
    const v = Math.cos(c), g = Math.sin(c);
    return this.set(
      i * v,
      i * g,
      -i * (v * h + g * d) + h + e,
      -r * g,
      r * v,
      -r * (-g * h + v * d) + d + n,
      0,
      0,
      1
    ), this;
  }
  /**
   * Scales this matrix with the given scalar values.
   *
   * @param {number} sx - The amount to scale in the X axis.
   * @param {number} sy - The amount to scale in the Y axis.
   * @return {Matrix3} A reference to this matrix.
   */
  scale(e, n) {
    return this.premultiply(l_.makeScale(e, n)), this;
  }
  /**
   * Rotates this matrix by the given angle.
   *
   * @param {number} theta - The rotation in radians.
   * @return {Matrix3} A reference to this matrix.
   */
  rotate(e) {
    return this.premultiply(l_.makeRotation(-e)), this;
  }
  /**
   * Translates this matrix by the given scalar values.
   *
   * @param {number} tx - The amount to translate in the X axis.
   * @param {number} ty - The amount to translate in the Y axis.
   * @return {Matrix3} A reference to this matrix.
   */
  translate(e, n) {
    return this.premultiply(l_.makeTranslation(e, n)), this;
  }
  // for 2D Transforms
  /**
   * Sets this matrix as a 2D translation transform.
   *
   * @param {number|Vector2} x - The amount to translate in the X axis or alternatively a translation vector.
   * @param {number} y - The amount to translate in the Y axis.
   * @return {Matrix3} A reference to this matrix.
   */
  makeTranslation(e, n) {
    return e.isVector2 ? this.set(
      1,
      0,
      e.x,
      0,
      1,
      e.y,
      0,
      0,
      1
    ) : this.set(
      1,
      0,
      e,
      0,
      1,
      n,
      0,
      0,
      1
    ), this;
  }
  /**
   * Sets this matrix as a 2D rotational transformation.
   *
   * @param {number} theta - The rotation in radians.
   * @return {Matrix3} A reference to this matrix.
   */
  makeRotation(e) {
    const n = Math.cos(e), i = Math.sin(e);
    return this.set(
      n,
      -i,
      0,
      i,
      n,
      0,
      0,
      0,
      1
    ), this;
  }
  /**
   * Sets this matrix as a 2D scale transform.
   *
   * @param {number} x - The amount to scale in the X axis.
   * @param {number} y - The amount to scale in the Y axis.
   * @return {Matrix3} A reference to this matrix.
   */
  makeScale(e, n) {
    return this.set(
      e,
      0,
      0,
      0,
      n,
      0,
      0,
      0,
      1
    ), this;
  }
  /**
   * Returns `true` if this matrix is equal with the given one.
   *
   * @param {Matrix3} matrix - The matrix to test for equality.
   * @return {boolean} Whether this matrix is equal with the given one.
   */
  equals(e) {
    const n = this.elements, i = e.elements;
    for (let r = 0; r < 9; r++)
      if (n[r] !== i[r]) return !1;
    return !0;
  }
  /**
   * Sets the elements of the matrix from the given array.
   *
   * @param {Array<number>} array - The matrix elements in column-major order.
   * @param {number} [offset=0] - Index of the first element in the array.
   * @return {Matrix3} A reference to this matrix.
   */
  fromArray(e, n = 0) {
    for (let i = 0; i < 9; i++)
      this.elements[i] = e[i + n];
    return this;
  }
  /**
   * Writes the elements of this matrix to the given array. If no array is provided,
   * the method returns a new instance.
   *
   * @param {Array<number>} [array=[]] - The target array holding the matrix elements in column-major order.
   * @param {number} [offset=0] - Index of the first element in the array.
   * @return {Array<number>} The matrix elements in column-major order.
   */
  toArray(e = [], n = 0) {
    const i = this.elements;
    return e[n] = i[0], e[n + 1] = i[1], e[n + 2] = i[2], e[n + 3] = i[3], e[n + 4] = i[4], e[n + 5] = i[5], e[n + 6] = i[6], e[n + 7] = i[7], e[n + 8] = i[8], e;
  }
  /**
   * Returns a matrix with copied values from this instance.
   *
   * @return {Matrix3} A clone of this instance.
   */
  clone() {
    return new this.constructor().fromArray(this.elements);
  }
}
const l_ = /* @__PURE__ */ new Qt();
function xE(s) {
  for (let e = s.length - 1; e >= 0; --e)
    if (s[e] >= 65535) return !0;
  return !1;
}
const uC = {
  Int8Array,
  Uint8Array,
  Uint8ClampedArray,
  Int16Array,
  Uint16Array,
  Int32Array,
  Uint32Array,
  Float32Array,
  Float64Array
};
function Lh(s, e) {
  return new uC[s](e);
}
function Jp(s) {
  return document.createElementNS("http://www.w3.org/1999/xhtml", s);
}
function ME() {
  const s = Jp("canvas");
  return s.style.display = "block", s;
}
const R1 = {};
function Ph(s) {
  s in R1 || (R1[s] = !0, console.warn(s));
}
function fC(s, e, n) {
  return new Promise(function(i, r) {
    function c() {
      switch (s.clientWaitSync(e, s.SYNC_FLUSH_COMMANDS_BIT, 0)) {
        case s.WAIT_FAILED:
          r();
          break;
        case s.TIMEOUT_EXPIRED:
          setTimeout(c, n);
          break;
        default:
          i();
      }
    }
    setTimeout(c, n);
  });
}
const C1 = /* @__PURE__ */ new Qt().set(
  0.4123908,
  0.3575843,
  0.1804808,
  0.212639,
  0.7151687,
  0.0721923,
  0.0193308,
  0.1191948,
  0.9505322
), w1 = /* @__PURE__ */ new Qt().set(
  3.2409699,
  -1.5373832,
  -0.4986108,
  -0.9692436,
  1.8759675,
  0.0415551,
  0.0556301,
  -0.203977,
  1.0569715
);
function hC() {
  const s = {
    enabled: !0,
    workingColorSpace: Ho,
    /**
     * Implementations of supported color spaces.
     *
     * Required:
     *	- primaries: chromaticity coordinates [ rx ry gx gy bx by ]
     *	- whitePoint: reference white [ x y ]
     *	- transfer: transfer function (pre-defined)
     *	- toXYZ: Matrix3 RGB to XYZ transform
     *	- fromXYZ: Matrix3 XYZ to RGB transform
     *	- luminanceCoefficients: RGB luminance coefficients
     *
     * Optional:
     *  - outputColorSpaceConfig: { drawingBufferColorSpace: ColorSpace }
     *  - workingColorSpaceConfig: { unpackColorSpace: ColorSpace }
     *
     * Reference:
     * - https://www.russellcottrell.com/photo/matrixCalculator.htm
     */
    spaces: {},
    convert: function(r, c, h) {
      return this.enabled === !1 || c === h || !c || !h || (this.spaces[c].transfer === Pn && (r.r = _l(r.r), r.g = _l(r.g), r.b = _l(r.b)), this.spaces[c].primaries !== this.spaces[h].primaries && (r.applyMatrix3(this.spaces[c].toXYZ), r.applyMatrix3(this.spaces[h].fromXYZ)), this.spaces[h].transfer === Pn && (r.r = Ih(r.r), r.g = Ih(r.g), r.b = Ih(r.b))), r;
    },
    workingToColorSpace: function(r, c) {
      return this.convert(r, this.workingColorSpace, c);
    },
    colorSpaceToWorking: function(r, c) {
      return this.convert(r, c, this.workingColorSpace);
    },
    getPrimaries: function(r) {
      return this.spaces[r].primaries;
    },
    getTransfer: function(r) {
      return r === Yr ? Qp : this.spaces[r].transfer;
    },
    getLuminanceCoefficients: function(r, c = this.workingColorSpace) {
      return r.fromArray(this.spaces[c].luminanceCoefficients);
    },
    define: function(r) {
      Object.assign(this.spaces, r);
    },
    // Internal APIs
    _getMatrix: function(r, c, h) {
      return r.copy(this.spaces[c].toXYZ).multiply(this.spaces[h].fromXYZ);
    },
    _getDrawingBufferColorSpace: function(r) {
      return this.spaces[r].outputColorSpaceConfig.drawingBufferColorSpace;
    },
    _getUnpackColorSpace: function(r = this.workingColorSpace) {
      return this.spaces[r].workingColorSpaceConfig.unpackColorSpace;
    },
    // Deprecated
    fromWorkingColorSpace: function(r, c) {
      return Ph("THREE.ColorManagement: .fromWorkingColorSpace() has been renamed to .workingToColorSpace()."), s.workingToColorSpace(r, c);
    },
    toWorkingColorSpace: function(r, c) {
      return Ph("THREE.ColorManagement: .toWorkingColorSpace() has been renamed to .colorSpaceToWorking()."), s.colorSpaceToWorking(r, c);
    }
  }, e = [0.64, 0.33, 0.3, 0.6, 0.15, 0.06], n = [0.2126, 0.7152, 0.0722], i = [0.3127, 0.329];
  return s.define({
    [Ho]: {
      primaries: e,
      whitePoint: i,
      transfer: Qp,
      toXYZ: C1,
      fromXYZ: w1,
      luminanceCoefficients: n,
      workingColorSpaceConfig: { unpackColorSpace: ei },
      outputColorSpaceConfig: { drawingBufferColorSpace: ei }
    },
    [ei]: {
      primaries: e,
      whitePoint: i,
      transfer: Pn,
      toXYZ: C1,
      fromXYZ: w1,
      luminanceCoefficients: n,
      outputColorSpaceConfig: { drawingBufferColorSpace: ei }
    }
  }), s;
}
const vn = /* @__PURE__ */ hC();
function _l(s) {
  return s < 0.04045 ? s * 0.0773993808 : Math.pow(s * 0.9478672986 + 0.0521327014, 2.4);
}
function Ih(s) {
  return s < 31308e-7 ? s * 12.92 : 1.055 * Math.pow(s, 0.41666) - 0.055;
}
let ch;
class bE {
  /**
   * Returns a data URI containing a representation of the given image.
   *
   * @param {(HTMLImageElement|HTMLCanvasElement)} image - The image object.
   * @param {string} [type='image/png'] - Indicates the image format.
   * @return {string} The data URI.
   */
  static getDataURL(e, n = "image/png") {
    if (/^data:/i.test(e.src) || typeof HTMLCanvasElement > "u")
      return e.src;
    let i;
    if (e instanceof HTMLCanvasElement)
      i = e;
    else {
      ch === void 0 && (ch = Jp("canvas")), ch.width = e.width, ch.height = e.height;
      const r = ch.getContext("2d");
      e instanceof ImageData ? r.putImageData(e, 0, 0) : r.drawImage(e, 0, 0, e.width, e.height), i = ch;
    }
    return i.toDataURL(n);
  }
  /**
   * Converts the given sRGB image data to linear color space.
   *
   * @param {(HTMLImageElement|HTMLCanvasElement|ImageBitmap|Object)} image - The image object.
   * @return {HTMLCanvasElement|Object} The converted image.
   */
  static sRGBToLinear(e) {
    if (typeof HTMLImageElement < "u" && e instanceof HTMLImageElement || typeof HTMLCanvasElement < "u" && e instanceof HTMLCanvasElement || typeof ImageBitmap < "u" && e instanceof ImageBitmap) {
      const n = Jp("canvas");
      n.width = e.width, n.height = e.height;
      const i = n.getContext("2d");
      i.drawImage(e, 0, 0, e.width, e.height);
      const r = i.getImageData(0, 0, e.width, e.height), c = r.data;
      for (let h = 0; h < c.length; h++)
        c[h] = _l(c[h] / 255) * 255;
      return i.putImageData(r, 0, 0), n;
    } else if (e.data) {
      const n = e.data.slice(0);
      for (let i = 0; i < n.length; i++)
        n instanceof Uint8Array || n instanceof Uint8ClampedArray ? n[i] = Math.floor(_l(n[i] / 255) * 255) : n[i] = _l(n[i]);
      return {
        data: n,
        width: e.width,
        height: e.height
      };
    } else
      return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."), e;
  }
}
let dC = 0;
class Ac {
  /**
   * Constructs a new video texture.
   *
   * @param {any} [data=null] - The data definition of a texture.
   */
  constructor(e = null) {
    this.isSource = !0, Object.defineProperty(this, "id", { value: dC++ }), this.uuid = Fs(), this.data = e, this.dataReady = !0, this.version = 0;
  }
  /**
   * Returns the dimensions of the source into the given target vector.
   *
   * @param {(Vector2|Vector3)} target - The target object the result is written into.
   * @return {(Vector2|Vector3)} The dimensions of the source.
   */
  getSize(e) {
    const n = this.data;
    return n instanceof HTMLVideoElement ? e.set(n.videoWidth, n.videoHeight, 0) : n instanceof VideoFrame ? e.set(n.displayHeight, n.displayWidth, 0) : n !== null ? e.set(n.width, n.height, n.depth || 0) : e.set(0, 0, 0), e;
  }
  /**
   * When the property is set to `true`, the engine allocates the memory
   * for the texture (if necessary) and triggers the actual texture upload
   * to the GPU next time the source is used.
   *
   * @type {boolean}
   * @default false
   * @param {boolean} value
   */
  set needsUpdate(e) {
    e === !0 && this.version++;
  }
  /**
   * Serializes the source into JSON.
   *
   * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.
   * @return {Object} A JSON object representing the serialized source.
   * @see {@link ObjectLoader#parse}
   */
  toJSON(e) {
    const n = e === void 0 || typeof e == "string";
    if (!n && e.images[this.uuid] !== void 0)
      return e.images[this.uuid];
    const i = {
      uuid: this.uuid,
      url: ""
    }, r = this.data;
    if (r !== null) {
      let c;
      if (Array.isArray(r)) {
        c = [];
        for (let h = 0, d = r.length; h < d; h++)
          r[h].isDataTexture ? c.push(c_(r[h].image)) : c.push(c_(r[h]));
      } else
        c = c_(r);
      i.url = c;
    }
    return n || (e.images[this.uuid] = i), i;
  }
}
function c_(s) {
  return typeof HTMLImageElement < "u" && s instanceof HTMLImageElement || typeof HTMLCanvasElement < "u" && s instanceof HTMLCanvasElement || typeof ImageBitmap < "u" && s instanceof ImageBitmap ? bE.getDataURL(s) : s.data ? {
    data: Array.from(s.data),
    width: s.width,
    height: s.height,
    type: s.data.constructor.name
  } : (console.warn("THREE.Texture: Unable to serialize Texture."), {});
}
let pC = 0;
const u_ = /* @__PURE__ */ new j();
class si extends qs {
  /**
   * Constructs a new texture.
   *
   * @param {?Object} [image=Texture.DEFAULT_IMAGE] - The image holding the texture data.
   * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.
   * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.
   * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.
   * @param {number} [magFilter=LinearFilter] - The mag filter value.
   * @param {number} [minFilter=LinearMipmapLinearFilter] - The min filter value.
   * @param {number} [format=RGBAFormat] - The texture format.
   * @param {number} [type=UnsignedByteType] - The texture type.
   * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.
   * @param {string} [colorSpace=NoColorSpace] - The color space.
   */
  constructor(e = si.DEFAULT_IMAGE, n = si.DEFAULT_MAPPING, i = hr, r = hr, c = di, h = Lo, d = Ca, v = Da, g = si.DEFAULT_ANISOTROPY, S = Yr) {
    super(), this.isTexture = !0, Object.defineProperty(this, "id", { value: pC++ }), this.uuid = Fs(), this.name = "", this.source = new Ac(e), this.mipmaps = [], this.mapping = n, this.channel = 0, this.wrapS = i, this.wrapT = r, this.magFilter = c, this.minFilter = h, this.anisotropy = g, this.format = d, this.internalFormat = null, this.type = v, this.offset = new De(0, 0), this.repeat = new De(1, 1), this.center = new De(0, 0), this.rotation = 0, this.matrixAutoUpdate = !0, this.matrix = new Qt(), this.generateMipmaps = !0, this.premultiplyAlpha = !1, this.flipY = !0, this.unpackAlignment = 4, this.colorSpace = S, this.userData = {}, this.updateRanges = [], this.version = 0, this.onUpdate = null, this.renderTarget = null, this.isRenderTargetTexture = !1, this.isArrayTexture = !!(e && e.depth && e.depth > 1), this.pmremVersion = 0;
  }
  /**
   * The width of the texture in pixels.
   */
  get width() {
    return this.source.getSize(u_).x;
  }
  /**
   * The height of the texture in pixels.
   */
  get height() {
    return this.source.getSize(u_).y;
  }
  /**
   * The depth of the texture in pixels.
   */
  get depth() {
    return this.source.getSize(u_).z;
  }
  /**
   * The image object holding the texture data.
   *
   * @type {?Object}
   */
  get image() {
    return this.source.data;
  }
  set image(e = null) {
    this.source.data = e;
  }
  /**
   * Updates the texture transformation matrix from the from the properties {@link Texture#offset},
   * {@link Texture#repeat}, {@link Texture#rotation}, and {@link Texture#center}.
   */
  updateMatrix() {
    this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
  }
  /**
   * Adds a range of data in the data texture to be updated on the GPU.
   *
   * @param {number} start - Position at which to start update.
   * @param {number} count - The number of components to update.
   */
  addUpdateRange(e, n) {
    this.updateRanges.push({ start: e, count: n });
  }
  /**
   * Clears the update ranges.
   */
  clearUpdateRanges() {
    this.updateRanges.length = 0;
  }
  /**
   * Returns a new texture with copied values from this instance.
   *
   * @return {Texture} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
  /**
   * Copies the values of the given texture to this instance.
   *
   * @param {Texture} source - The texture to copy.
   * @return {Texture} A reference to this instance.
   */
  copy(e) {
    return this.name = e.name, this.source = e.source, this.mipmaps = e.mipmaps.slice(0), this.mapping = e.mapping, this.channel = e.channel, this.wrapS = e.wrapS, this.wrapT = e.wrapT, this.magFilter = e.magFilter, this.minFilter = e.minFilter, this.anisotropy = e.anisotropy, this.format = e.format, this.internalFormat = e.internalFormat, this.type = e.type, this.offset.copy(e.offset), this.repeat.copy(e.repeat), this.center.copy(e.center), this.rotation = e.rotation, this.matrixAutoUpdate = e.matrixAutoUpdate, this.matrix.copy(e.matrix), this.generateMipmaps = e.generateMipmaps, this.premultiplyAlpha = e.premultiplyAlpha, this.flipY = e.flipY, this.unpackAlignment = e.unpackAlignment, this.colorSpace = e.colorSpace, this.renderTarget = e.renderTarget, this.isRenderTargetTexture = e.isRenderTargetTexture, this.isArrayTexture = e.isArrayTexture, this.userData = JSON.parse(JSON.stringify(e.userData)), this.needsUpdate = !0, this;
  }
  /**
   * Sets this texture's properties based on `values`.
   * @param {Object} values - A container with texture parameters.
   */
  setValues(e) {
    for (const n in e) {
      const i = e[n];
      if (i === void 0) {
        console.warn(`THREE.Texture.setValues(): parameter '${n}' has value of undefined.`);
        continue;
      }
      const r = this[n];
      if (r === void 0) {
        console.warn(`THREE.Texture.setValues(): property '${n}' does not exist.`);
        continue;
      }
      r && i && r.isVector2 && i.isVector2 || r && i && r.isVector3 && i.isVector3 || r && i && r.isMatrix3 && i.isMatrix3 ? r.copy(i) : this[n] = i;
    }
  }
  /**
   * Serializes the texture into JSON.
   *
   * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.
   * @return {Object} A JSON object representing the serialized texture.
   * @see {@link ObjectLoader#parse}
   */
  toJSON(e) {
    const n = e === void 0 || typeof e == "string";
    if (!n && e.textures[this.uuid] !== void 0)
      return e.textures[this.uuid];
    const i = {
      metadata: {
        version: 4.7,
        type: "Texture",
        generator: "Texture.toJSON"
      },
      uuid: this.uuid,
      name: this.name,
      image: this.source.toJSON(e).uuid,
      mapping: this.mapping,
      channel: this.channel,
      repeat: [this.repeat.x, this.repeat.y],
      offset: [this.offset.x, this.offset.y],
      center: [this.center.x, this.center.y],
      rotation: this.rotation,
      wrap: [this.wrapS, this.wrapT],
      format: this.format,
      internalFormat: this.internalFormat,
      type: this.type,
      colorSpace: this.colorSpace,
      minFilter: this.minFilter,
      magFilter: this.magFilter,
      anisotropy: this.anisotropy,
      flipY: this.flipY,
      generateMipmaps: this.generateMipmaps,
      premultiplyAlpha: this.premultiplyAlpha,
      unpackAlignment: this.unpackAlignment
    };
    return Object.keys(this.userData).length > 0 && (i.userData = this.userData), n || (e.textures[this.uuid] = i), i;
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   *
   * @fires Texture#dispose
   */
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
  /**
   * Transforms the given uv vector with the textures uv transformation matrix.
   *
   * @param {Vector2} uv - The uv vector.
   * @return {Vector2} The transformed uv vector.
   */
  transformUv(e) {
    if (this.mapping !== H0) return e;
    if (e.applyMatrix3(this.matrix), e.x < 0 || e.x > 1)
      switch (this.wrapS) {
        case kp:
          e.x = e.x - Math.floor(e.x);
          break;
        case hr:
          e.x = e.x < 0 ? 0 : 1;
          break;
        case Wp:
          Math.abs(Math.floor(e.x) % 2) === 1 ? e.x = Math.ceil(e.x) - e.x : e.x = e.x - Math.floor(e.x);
          break;
      }
    if (e.y < 0 || e.y > 1)
      switch (this.wrapT) {
        case kp:
          e.y = e.y - Math.floor(e.y);
          break;
        case hr:
          e.y = e.y < 0 ? 0 : 1;
          break;
        case Wp:
          Math.abs(Math.floor(e.y) % 2) === 1 ? e.y = Math.ceil(e.y) - e.y : e.y = e.y - Math.floor(e.y);
          break;
      }
    return this.flipY && (e.y = 1 - e.y), e;
  }
  /**
   * Setting this property to `true` indicates the engine the texture
   * must be updated in the next render. This triggers a texture upload
   * to the GPU and ensures correct texture parameter configuration.
   *
   * @type {boolean}
   * @default false
   * @param {boolean} value
   */
  set needsUpdate(e) {
    e === !0 && (this.version++, this.source.needsUpdate = !0);
  }
  /**
   * Setting this property to `true` indicates the engine the PMREM
   * must be regenerated.
   *
   * @type {boolean}
   * @default false
   * @param {boolean} value
   */
  set needsPMREMUpdate(e) {
    e === !0 && this.pmremVersion++;
  }
}
si.DEFAULT_IMAGE = null;
si.DEFAULT_MAPPING = H0;
si.DEFAULT_ANISOTROPY = 1;
class xn {
  /**
   * Constructs a new 4D vector.
   *
   * @param {number} [x=0] - The x value of this vector.
   * @param {number} [y=0] - The y value of this vector.
   * @param {number} [z=0] - The z value of this vector.
   * @param {number} [w=1] - The w value of this vector.
   */
  constructor(e = 0, n = 0, i = 0, r = 1) {
    xn.prototype.isVector4 = !0, this.x = e, this.y = n, this.z = i, this.w = r;
  }
  /**
   * Alias for {@link Vector4#z}.
   *
   * @type {number}
   */
  get width() {
    return this.z;
  }
  set width(e) {
    this.z = e;
  }
  /**
   * Alias for {@link Vector4#w}.
   *
   * @type {number}
   */
  get height() {
    return this.w;
  }
  set height(e) {
    this.w = e;
  }
  /**
   * Sets the vector components.
   *
   * @param {number} x - The value of the x component.
   * @param {number} y - The value of the y component.
   * @param {number} z - The value of the z component.
   * @param {number} w - The value of the w component.
   * @return {Vector4} A reference to this vector.
   */
  set(e, n, i, r) {
    return this.x = e, this.y = n, this.z = i, this.w = r, this;
  }
  /**
   * Sets the vector components to the same value.
   *
   * @param {number} scalar - The value to set for all vector components.
   * @return {Vector4} A reference to this vector.
   */
  setScalar(e) {
    return this.x = e, this.y = e, this.z = e, this.w = e, this;
  }
  /**
   * Sets the vector's x component to the given value
   *
   * @param {number} x - The value to set.
   * @return {Vector4} A reference to this vector.
   */
  setX(e) {
    return this.x = e, this;
  }
  /**
   * Sets the vector's y component to the given value
   *
   * @param {number} y - The value to set.
   * @return {Vector4} A reference to this vector.
   */
  setY(e) {
    return this.y = e, this;
  }
  /**
   * Sets the vector's z component to the given value
   *
   * @param {number} z - The value to set.
   * @return {Vector4} A reference to this vector.
   */
  setZ(e) {
    return this.z = e, this;
  }
  /**
   * Sets the vector's w component to the given value
   *
   * @param {number} w - The value to set.
   * @return {Vector4} A reference to this vector.
   */
  setW(e) {
    return this.w = e, this;
  }
  /**
   * Allows to set a vector component with an index.
   *
   * @param {number} index - The component index. `0` equals to x, `1` equals to y,
   * `2` equals to z, `3` equals to w.
   * @param {number} value - The value to set.
   * @return {Vector4} A reference to this vector.
   */
  setComponent(e, n) {
    switch (e) {
      case 0:
        this.x = n;
        break;
      case 1:
        this.y = n;
        break;
      case 2:
        this.z = n;
        break;
      case 3:
        this.w = n;
        break;
      default:
        throw new Error("index is out of range: " + e);
    }
    return this;
  }
  /**
   * Returns the value of the vector component which matches the given index.
   *
   * @param {number} index - The component index. `0` equals to x, `1` equals to y,
   * `2` equals to z, `3` equals to w.
   * @return {number} A vector component value.
   */
  getComponent(e) {
    switch (e) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      case 3:
        return this.w;
      default:
        throw new Error("index is out of range: " + e);
    }
  }
  /**
   * Returns a new vector with copied values from this instance.
   *
   * @return {Vector4} A clone of this instance.
   */
  clone() {
    return new this.constructor(this.x, this.y, this.z, this.w);
  }
  /**
   * Copies the values of the given vector to this instance.
   *
   * @param {Vector3|Vector4} v - The vector to copy.
   * @return {Vector4} A reference to this vector.
   */
  copy(e) {
    return this.x = e.x, this.y = e.y, this.z = e.z, this.w = e.w !== void 0 ? e.w : 1, this;
  }
  /**
   * Adds the given vector to this instance.
   *
   * @param {Vector4} v - The vector to add.
   * @return {Vector4} A reference to this vector.
   */
  add(e) {
    return this.x += e.x, this.y += e.y, this.z += e.z, this.w += e.w, this;
  }
  /**
   * Adds the given scalar value to all components of this instance.
   *
   * @param {number} s - The scalar to add.
   * @return {Vector4} A reference to this vector.
   */
  addScalar(e) {
    return this.x += e, this.y += e, this.z += e, this.w += e, this;
  }
  /**
   * Adds the given vectors and stores the result in this instance.
   *
   * @param {Vector4} a - The first vector.
   * @param {Vector4} b - The second vector.
   * @return {Vector4} A reference to this vector.
   */
  addVectors(e, n) {
    return this.x = e.x + n.x, this.y = e.y + n.y, this.z = e.z + n.z, this.w = e.w + n.w, this;
  }
  /**
   * Adds the given vector scaled by the given factor to this instance.
   *
   * @param {Vector4} v - The vector.
   * @param {number} s - The factor that scales `v`.
   * @return {Vector4} A reference to this vector.
   */
  addScaledVector(e, n) {
    return this.x += e.x * n, this.y += e.y * n, this.z += e.z * n, this.w += e.w * n, this;
  }
  /**
   * Subtracts the given vector from this instance.
   *
   * @param {Vector4} v - The vector to subtract.
   * @return {Vector4} A reference to this vector.
   */
  sub(e) {
    return this.x -= e.x, this.y -= e.y, this.z -= e.z, this.w -= e.w, this;
  }
  /**
   * Subtracts the given scalar value from all components of this instance.
   *
   * @param {number} s - The scalar to subtract.
   * @return {Vector4} A reference to this vector.
   */
  subScalar(e) {
    return this.x -= e, this.y -= e, this.z -= e, this.w -= e, this;
  }
  /**
   * Subtracts the given vectors and stores the result in this instance.
   *
   * @param {Vector4} a - The first vector.
   * @param {Vector4} b - The second vector.
   * @return {Vector4} A reference to this vector.
   */
  subVectors(e, n) {
    return this.x = e.x - n.x, this.y = e.y - n.y, this.z = e.z - n.z, this.w = e.w - n.w, this;
  }
  /**
   * Multiplies the given vector with this instance.
   *
   * @param {Vector4} v - The vector to multiply.
   * @return {Vector4} A reference to this vector.
   */
  multiply(e) {
    return this.x *= e.x, this.y *= e.y, this.z *= e.z, this.w *= e.w, this;
  }
  /**
   * Multiplies the given scalar value with all components of this instance.
   *
   * @param {number} scalar - The scalar to multiply.
   * @return {Vector4} A reference to this vector.
   */
  multiplyScalar(e) {
    return this.x *= e, this.y *= e, this.z *= e, this.w *= e, this;
  }
  /**
   * Multiplies this vector with the given 4x4 matrix.
   *
   * @param {Matrix4} m - The 4x4 matrix.
   * @return {Vector4} A reference to this vector.
   */
  applyMatrix4(e) {
    const n = this.x, i = this.y, r = this.z, c = this.w, h = e.elements;
    return this.x = h[0] * n + h[4] * i + h[8] * r + h[12] * c, this.y = h[1] * n + h[5] * i + h[9] * r + h[13] * c, this.z = h[2] * n + h[6] * i + h[10] * r + h[14] * c, this.w = h[3] * n + h[7] * i + h[11] * r + h[15] * c, this;
  }
  /**
   * Divides this instance by the given vector.
   *
   * @param {Vector4} v - The vector to divide.
   * @return {Vector4} A reference to this vector.
   */
  divide(e) {
    return this.x /= e.x, this.y /= e.y, this.z /= e.z, this.w /= e.w, this;
  }
  /**
   * Divides this vector by the given scalar.
   *
   * @param {number} scalar - The scalar to divide.
   * @return {Vector4} A reference to this vector.
   */
  divideScalar(e) {
    return this.multiplyScalar(1 / e);
  }
  /**
   * Sets the x, y and z components of this
   * vector to the quaternion's axis and w to the angle.
   *
   * @param {Quaternion} q - The Quaternion to set.
   * @return {Vector4} A reference to this vector.
   */
  setAxisAngleFromQuaternion(e) {
    this.w = 2 * Math.acos(e.w);
    const n = Math.sqrt(1 - e.w * e.w);
    return n < 1e-4 ? (this.x = 1, this.y = 0, this.z = 0) : (this.x = e.x / n, this.y = e.y / n, this.z = e.z / n), this;
  }
  /**
   * Sets the x, y and z components of this
   * vector to the axis of rotation and w to the angle.
   *
   * @param {Matrix4} m - A 4x4 matrix of which the upper left 3x3 matrix is a pure rotation matrix.
   * @return {Vector4} A reference to this vector.
   */
  setAxisAngleFromRotationMatrix(e) {
    let n, i, r, c;
    const v = e.elements, g = v[0], S = v[4], x = v[8], M = v[1], b = v[5], R = v[9], w = v[2], C = v[6], E = v[10];
    if (Math.abs(S - M) < 0.01 && Math.abs(x - w) < 0.01 && Math.abs(R - C) < 0.01) {
      if (Math.abs(S + M) < 0.1 && Math.abs(x + w) < 0.1 && Math.abs(R + C) < 0.1 && Math.abs(g + b + E - 3) < 0.1)
        return this.set(1, 0, 0, 0), this;
      n = Math.PI;
      const N = (g + 1) / 2, O = (b + 1) / 2, I = (E + 1) / 2, V = (S + M) / 4, Y = (x + w) / 4, k = (R + C) / 4;
      return N > O && N > I ? N < 0.01 ? (i = 0, r = 0.707106781, c = 0.707106781) : (i = Math.sqrt(N), r = V / i, c = Y / i) : O > I ? O < 0.01 ? (i = 0.707106781, r = 0, c = 0.707106781) : (r = Math.sqrt(O), i = V / r, c = k / r) : I < 0.01 ? (i = 0.707106781, r = 0.707106781, c = 0) : (c = Math.sqrt(I), i = Y / c, r = k / c), this.set(i, r, c, n), this;
    }
    let U = Math.sqrt((C - R) * (C - R) + (x - w) * (x - w) + (M - S) * (M - S));
    return Math.abs(U) < 1e-3 && (U = 1), this.x = (C - R) / U, this.y = (x - w) / U, this.z = (M - S) / U, this.w = Math.acos((g + b + E - 1) / 2), this;
  }
  /**
   * Sets the vector components to the position elements of the
   * given transformation matrix.
   *
   * @param {Matrix4} m - The 4x4 matrix.
   * @return {Vector4} A reference to this vector.
   */
  setFromMatrixPosition(e) {
    const n = e.elements;
    return this.x = n[12], this.y = n[13], this.z = n[14], this.w = n[15], this;
  }
  /**
   * If this vector's x, y, z or w value is greater than the given vector's x, y, z or w
   * value, replace that value with the corresponding min value.
   *
   * @param {Vector4} v - The vector.
   * @return {Vector4} A reference to this vector.
   */
  min(e) {
    return this.x = Math.min(this.x, e.x), this.y = Math.min(this.y, e.y), this.z = Math.min(this.z, e.z), this.w = Math.min(this.w, e.w), this;
  }
  /**
   * If this vector's x, y, z or w value is less than the given vector's x, y, z or w
   * value, replace that value with the corresponding max value.
   *
   * @param {Vector4} v - The vector.
   * @return {Vector4} A reference to this vector.
   */
  max(e) {
    return this.x = Math.max(this.x, e.x), this.y = Math.max(this.y, e.y), this.z = Math.max(this.z, e.z), this.w = Math.max(this.w, e.w), this;
  }
  /**
   * If this vector's x, y, z or w value is greater than the max vector's x, y, z or w
   * value, it is replaced by the corresponding value.
   * If this vector's x, y, z or w value is less than the min vector's x, y, z or w value,
   * it is replaced by the corresponding value.
   *
   * @param {Vector4} min - The minimum x, y and z values.
   * @param {Vector4} max - The maximum x, y and z values in the desired range.
   * @return {Vector4} A reference to this vector.
   */
  clamp(e, n) {
    return this.x = Vt(this.x, e.x, n.x), this.y = Vt(this.y, e.y, n.y), this.z = Vt(this.z, e.z, n.z), this.w = Vt(this.w, e.w, n.w), this;
  }
  /**
   * If this vector's x, y, z or w values are greater than the max value, they are
   * replaced by the max value.
   * If this vector's x, y, z or w values are less than the min value, they are
   * replaced by the min value.
   *
   * @param {number} minVal - The minimum value the components will be clamped to.
   * @param {number} maxVal - The maximum value the components will be clamped to.
   * @return {Vector4} A reference to this vector.
   */
  clampScalar(e, n) {
    return this.x = Vt(this.x, e, n), this.y = Vt(this.y, e, n), this.z = Vt(this.z, e, n), this.w = Vt(this.w, e, n), this;
  }
  /**
   * If this vector's length is greater than the max value, it is replaced by
   * the max value.
   * If this vector's length is less than the min value, it is replaced by the
   * min value.
   *
   * @param {number} min - The minimum value the vector length will be clamped to.
   * @param {number} max - The maximum value the vector length will be clamped to.
   * @return {Vector4} A reference to this vector.
   */
  clampLength(e, n) {
    const i = this.length();
    return this.divideScalar(i || 1).multiplyScalar(Vt(i, e, n));
  }
  /**
   * The components of this vector are rounded down to the nearest integer value.
   *
   * @return {Vector4} A reference to this vector.
   */
  floor() {
    return this.x = Math.floor(this.x), this.y = Math.floor(this.y), this.z = Math.floor(this.z), this.w = Math.floor(this.w), this;
  }
  /**
   * The components of this vector are rounded up to the nearest integer value.
   *
   * @return {Vector4} A reference to this vector.
   */
  ceil() {
    return this.x = Math.ceil(this.x), this.y = Math.ceil(this.y), this.z = Math.ceil(this.z), this.w = Math.ceil(this.w), this;
  }
  /**
   * The components of this vector are rounded to the nearest integer value
   *
   * @return {Vector4} A reference to this vector.
   */
  round() {
    return this.x = Math.round(this.x), this.y = Math.round(this.y), this.z = Math.round(this.z), this.w = Math.round(this.w), this;
  }
  /**
   * The components of this vector are rounded towards zero (up if negative,
   * down if positive) to an integer value.
   *
   * @return {Vector4} A reference to this vector.
   */
  roundToZero() {
    return this.x = Math.trunc(this.x), this.y = Math.trunc(this.y), this.z = Math.trunc(this.z), this.w = Math.trunc(this.w), this;
  }
  /**
   * Inverts this vector - i.e. sets x = -x, y = -y, z = -z, w = -w.
   *
   * @return {Vector4} A reference to this vector.
   */
  negate() {
    return this.x = -this.x, this.y = -this.y, this.z = -this.z, this.w = -this.w, this;
  }
  /**
   * Calculates the dot product of the given vector with this instance.
   *
   * @param {Vector4} v - The vector to compute the dot product with.
   * @return {number} The result of the dot product.
   */
  dot(e) {
    return this.x * e.x + this.y * e.y + this.z * e.z + this.w * e.w;
  }
  /**
   * Computes the square of the Euclidean length (straight-line length) from
   * (0, 0, 0, 0) to (x, y, z, w). If you are comparing the lengths of vectors, you should
   * compare the length squared instead as it is slightly more efficient to calculate.
   *
   * @return {number} The square length of this vector.
   */
  lengthSq() {
    return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
  }
  /**
   * Computes the  Euclidean length (straight-line length) from (0, 0, 0, 0) to (x, y, z, w).
   *
   * @return {number} The length of this vector.
   */
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
  }
  /**
   * Computes the Manhattan length of this vector.
   *
   * @return {number} The length of this vector.
   */
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
  }
  /**
   * Converts this vector to a unit vector - that is, sets it equal to a vector
   * with the same direction as this one, but with a vector length of `1`.
   *
   * @return {Vector4} A reference to this vector.
   */
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  /**
   * Sets this vector to a vector with the same direction as this one, but
   * with the specified length.
   *
   * @param {number} length - The new length of this vector.
   * @return {Vector4} A reference to this vector.
   */
  setLength(e) {
    return this.normalize().multiplyScalar(e);
  }
  /**
   * Linearly interpolates between the given vector and this instance, where
   * alpha is the percent distance along the line - alpha = 0 will be this
   * vector, and alpha = 1 will be the given one.
   *
   * @param {Vector4} v - The vector to interpolate towards.
   * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.
   * @return {Vector4} A reference to this vector.
   */
  lerp(e, n) {
    return this.x += (e.x - this.x) * n, this.y += (e.y - this.y) * n, this.z += (e.z - this.z) * n, this.w += (e.w - this.w) * n, this;
  }
  /**
   * Linearly interpolates between the given vectors, where alpha is the percent
   * distance along the line - alpha = 0 will be first vector, and alpha = 1 will
   * be the second one. The result is stored in this instance.
   *
   * @param {Vector4} v1 - The first vector.
   * @param {Vector4} v2 - The second vector.
   * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.
   * @return {Vector4} A reference to this vector.
   */
  lerpVectors(e, n, i) {
    return this.x = e.x + (n.x - e.x) * i, this.y = e.y + (n.y - e.y) * i, this.z = e.z + (n.z - e.z) * i, this.w = e.w + (n.w - e.w) * i, this;
  }
  /**
   * Returns `true` if this vector is equal with the given one.
   *
   * @param {Vector4} v - The vector to test for equality.
   * @return {boolean} Whether this vector is equal with the given one.
   */
  equals(e) {
    return e.x === this.x && e.y === this.y && e.z === this.z && e.w === this.w;
  }
  /**
   * Sets this vector's x value to be `array[ offset ]`, y value to be `array[ offset + 1 ]`,
   * z value to be `array[ offset + 2 ]`, w value to be `array[ offset + 3 ]`.
   *
   * @param {Array<number>} array - An array holding the vector component values.
   * @param {number} [offset=0] - The offset into the array.
   * @return {Vector4} A reference to this vector.
   */
  fromArray(e, n = 0) {
    return this.x = e[n], this.y = e[n + 1], this.z = e[n + 2], this.w = e[n + 3], this;
  }
  /**
   * Writes the components of this vector to the given array. If no array is provided,
   * the method returns a new instance.
   *
   * @param {Array<number>} [array=[]] - The target array holding the vector components.
   * @param {number} [offset=0] - Index of the first element in the array.
   * @return {Array<number>} The vector components.
   */
  toArray(e = [], n = 0) {
    return e[n] = this.x, e[n + 1] = this.y, e[n + 2] = this.z, e[n + 3] = this.w, e;
  }
  /**
   * Sets the components of this vector from the given buffer attribute.
   *
   * @param {BufferAttribute} attribute - The buffer attribute holding vector data.
   * @param {number} index - The index into the attribute.
   * @return {Vector4} A reference to this vector.
   */
  fromBufferAttribute(e, n) {
    return this.x = e.getX(n), this.y = e.getY(n), this.z = e.getZ(n), this.w = e.getW(n), this;
  }
  /**
   * Sets each component of this vector to a pseudo-random value between `0` and
   * `1`, excluding `1`.
   *
   * @return {Vector4} A reference to this vector.
   */
  random() {
    return this.x = Math.random(), this.y = Math.random(), this.z = Math.random(), this.w = Math.random(), this;
  }
  *[Symbol.iterator]() {
    yield this.x, yield this.y, yield this.z, yield this.w;
  }
}
class $S extends qs {
  /**
   * Render target options.
   *
   * @typedef {Object} RenderTarget~Options
   * @property {boolean} [generateMipmaps=false] - Whether to generate mipmaps or not.
   * @property {number} [magFilter=LinearFilter] - The mag filter.
   * @property {number} [minFilter=LinearFilter] - The min filter.
   * @property {number} [format=RGBAFormat] - The texture format.
   * @property {number} [type=UnsignedByteType] - The texture type.
   * @property {?string} [internalFormat=null] - The texture's internal format.
   * @property {number} [wrapS=ClampToEdgeWrapping] - The texture's uv wrapping mode.
   * @property {number} [wrapT=ClampToEdgeWrapping] - The texture's uv wrapping mode.
   * @property {number} [anisotropy=1] - The texture's anisotropy value.
   * @property {string} [colorSpace=NoColorSpace] - The texture's color space.
   * @property {boolean} [depthBuffer=true] - Whether to allocate a depth buffer or not.
   * @property {boolean} [stencilBuffer=false] - Whether to allocate a stencil buffer or not.
   * @property {boolean} [resolveDepthBuffer=true] - Whether to resolve the depth buffer or not.
   * @property {boolean} [resolveStencilBuffer=true] - Whether  to resolve the stencil buffer or not.
   * @property {?Texture} [depthTexture=null] - Reference to a depth texture.
   * @property {number} [samples=0] - The MSAA samples count.
   * @property {number} [count=1] - Defines the number of color attachments . Must be at least `1`.
   * @property {number} [depth=1] - The texture depth.
   * @property {boolean} [multiview=false] - Whether this target is used for multiview rendering.
   */
  /**
   * Constructs a new render target.
   *
   * @param {number} [width=1] - The width of the render target.
   * @param {number} [height=1] - The height of the render target.
   * @param {RenderTarget~Options} [options] - The configuration object.
   */
  constructor(e = 1, n = 1, i = {}) {
    super(), i = Object.assign({
      generateMipmaps: !1,
      internalFormat: null,
      minFilter: di,
      depthBuffer: !0,
      stencilBuffer: !1,
      resolveDepthBuffer: !0,
      resolveStencilBuffer: !0,
      depthTexture: null,
      samples: 0,
      count: 1,
      depth: 1,
      multiview: !1
    }, i), this.isRenderTarget = !0, this.width = e, this.height = n, this.depth = i.depth, this.scissor = new xn(0, 0, e, n), this.scissorTest = !1, this.viewport = new xn(0, 0, e, n);
    const r = { width: e, height: n, depth: i.depth }, c = new si(r);
    this.textures = [];
    const h = i.count;
    for (let d = 0; d < h; d++)
      this.textures[d] = c.clone(), this.textures[d].isRenderTargetTexture = !0, this.textures[d].renderTarget = this;
    this._setTextureOptions(i), this.depthBuffer = i.depthBuffer, this.stencilBuffer = i.stencilBuffer, this.resolveDepthBuffer = i.resolveDepthBuffer, this.resolveStencilBuffer = i.resolveStencilBuffer, this._depthTexture = null, this.depthTexture = i.depthTexture, this.samples = i.samples, this.multiview = i.multiview;
  }
  _setTextureOptions(e = {}) {
    const n = {
      minFilter: di,
      generateMipmaps: !1,
      flipY: !1,
      internalFormat: null
    };
    e.mapping !== void 0 && (n.mapping = e.mapping), e.wrapS !== void 0 && (n.wrapS = e.wrapS), e.wrapT !== void 0 && (n.wrapT = e.wrapT), e.wrapR !== void 0 && (n.wrapR = e.wrapR), e.magFilter !== void 0 && (n.magFilter = e.magFilter), e.minFilter !== void 0 && (n.minFilter = e.minFilter), e.format !== void 0 && (n.format = e.format), e.type !== void 0 && (n.type = e.type), e.anisotropy !== void 0 && (n.anisotropy = e.anisotropy), e.colorSpace !== void 0 && (n.colorSpace = e.colorSpace), e.flipY !== void 0 && (n.flipY = e.flipY), e.generateMipmaps !== void 0 && (n.generateMipmaps = e.generateMipmaps), e.internalFormat !== void 0 && (n.internalFormat = e.internalFormat);
    for (let i = 0; i < this.textures.length; i++)
      this.textures[i].setValues(n);
  }
  /**
   * The texture representing the default color attachment.
   *
   * @type {Texture}
   */
  get texture() {
    return this.textures[0];
  }
  set texture(e) {
    this.textures[0] = e;
  }
  set depthTexture(e) {
    this._depthTexture !== null && (this._depthTexture.renderTarget = null), e !== null && (e.renderTarget = this), this._depthTexture = e;
  }
  /**
   * Instead of saving the depth in a renderbuffer, a texture
   * can be used instead which is useful for further processing
   * e.g. in context of post-processing.
   *
   * @type {?DepthTexture}
   * @default null
   */
  get depthTexture() {
    return this._depthTexture;
  }
  /**
   * Sets the size of this render target.
   *
   * @param {number} width - The width.
   * @param {number} height - The height.
   * @param {number} [depth=1] - The depth.
   */
  setSize(e, n, i = 1) {
    if (this.width !== e || this.height !== n || this.depth !== i) {
      this.width = e, this.height = n, this.depth = i;
      for (let r = 0, c = this.textures.length; r < c; r++)
        this.textures[r].image.width = e, this.textures[r].image.height = n, this.textures[r].image.depth = i, this.textures[r].isArrayTexture = this.textures[r].image.depth > 1;
      this.dispose();
    }
    this.viewport.set(0, 0, e, n), this.scissor.set(0, 0, e, n);
  }
  /**
   * Returns a new render target with copied values from this instance.
   *
   * @return {RenderTarget} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
  /**
   * Copies the settings of the given render target. This is a structural copy so
   * no resources are shared between render targets after the copy. That includes
   * all MRT textures and the depth texture.
   *
   * @param {RenderTarget} source - The render target to copy.
   * @return {RenderTarget} A reference to this instance.
   */
  copy(e) {
    this.width = e.width, this.height = e.height, this.depth = e.depth, this.scissor.copy(e.scissor), this.scissorTest = e.scissorTest, this.viewport.copy(e.viewport), this.textures.length = 0;
    for (let n = 0, i = e.textures.length; n < i; n++) {
      this.textures[n] = e.textures[n].clone(), this.textures[n].isRenderTargetTexture = !0, this.textures[n].renderTarget = this;
      const r = Object.assign({}, e.textures[n].image);
      this.textures[n].source = new Ac(r);
    }
    return this.depthBuffer = e.depthBuffer, this.stencilBuffer = e.stencilBuffer, this.resolveDepthBuffer = e.resolveDepthBuffer, this.resolveStencilBuffer = e.resolveStencilBuffer, e.depthTexture !== null && (this.depthTexture = e.depthTexture.clone()), this.samples = e.samples, this;
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   *
   * @fires RenderTarget#dispose
   */
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
}
class Ua extends $S {
  /**
   * Constructs a new 3D render target.
   *
   * @param {number} [width=1] - The width of the render target.
   * @param {number} [height=1] - The height of the render target.
   * @param {RenderTarget~Options} [options] - The configuration object.
   */
  constructor(e = 1, n = 1, i = {}) {
    super(e, n, i), this.isWebGLRenderTarget = !0;
  }
}
class W0 extends si {
  /**
   * Constructs a new data array texture.
   *
   * @param {?TypedArray} [data=null] - The buffer data.
   * @param {number} [width=1] - The width of the texture.
   * @param {number} [height=1] - The height of the texture.
   * @param {number} [depth=1] - The depth of the texture.
   */
  constructor(e = null, n = 1, i = 1, r = 1) {
    super(null), this.isDataArrayTexture = !0, this.image = { data: e, width: n, height: i, depth: r }, this.magFilter = wi, this.minFilter = wi, this.wrapR = hr, this.generateMipmaps = !1, this.flipY = !1, this.unpackAlignment = 1, this.layerUpdates = /* @__PURE__ */ new Set();
  }
  /**
   * Describes that a specific layer of the texture needs to be updated.
   * Normally when {@link Texture#needsUpdate} is set to `true`, the
   * entire data texture array is sent to the GPU. Marking specific
   * layers will only transmit subsets of all mipmaps associated with a
   * specific depth in the array which is often much more performant.
   *
   * @param {number} layerIndex - The layer index that should be updated.
   */
  addLayerUpdate(e) {
    this.layerUpdates.add(e);
  }
  /**
   * Resets the layer updates registry.
   */
  clearLayerUpdates() {
    this.layerUpdates.clear();
  }
}
class mC extends Ua {
  /**
   * Constructs a new array render target.
   *
   * @param {number} [width=1] - The width of the render target.
   * @param {number} [height=1] - The height of the render target.
   * @param {number} [depth=1] - The height of the render target.
   * @param {RenderTarget~Options} [options] - The configuration object.
   */
  constructor(e = 1, n = 1, i = 1, r = {}) {
    super(e, n, r), this.isWebGLArrayRenderTarget = !0, this.depth = i, this.texture = new W0(null, e, n, i), this._setTextureOptions(r), this.texture.isRenderTargetTexture = !0;
  }
}
class Z0 extends si {
  /**
   * Constructs a new data array texture.
   *
   * @param {?TypedArray} [data=null] - The buffer data.
   * @param {number} [width=1] - The width of the texture.
   * @param {number} [height=1] - The height of the texture.
   * @param {number} [depth=1] - The depth of the texture.
   */
  constructor(e = null, n = 1, i = 1, r = 1) {
    super(null), this.isData3DTexture = !0, this.image = { data: e, width: n, height: i, depth: r }, this.magFilter = wi, this.minFilter = wi, this.wrapR = hr, this.generateMipmaps = !1, this.flipY = !1, this.unpackAlignment = 1;
  }
}
class vC extends Ua {
  /**
   * Constructs a new 3D render target.
   *
   * @param {number} [width=1] - The width of the render target.
   * @param {number} [height=1] - The height of the render target.
   * @param {number} [depth=1] - The height of the render target.
   * @param {RenderTarget~Options} [options] - The configuration object.
   */
  constructor(e = 1, n = 1, i = 1, r = {}) {
    super(e, n, r), this.isWebGL3DRenderTarget = !0, this.depth = i, this.texture = new Z0(null, e, n, i), this._setTextureOptions(r), this.texture.isRenderTargetTexture = !0;
  }
}
class wa {
  /**
   * Constructs a new bounding box.
   *
   * @param {Vector3} [min=(Infinity,Infinity,Infinity)] - A vector representing the lower boundary of the box.
   * @param {Vector3} [max=(-Infinity,-Infinity,-Infinity)] - A vector representing the upper boundary of the box.
   */
  constructor(e = new j(1 / 0, 1 / 0, 1 / 0), n = new j(-1 / 0, -1 / 0, -1 / 0)) {
    this.isBox3 = !0, this.min = e, this.max = n;
  }
  /**
   * Sets the lower and upper boundaries of this box.
   * Please note that this method only copies the values from the given objects.
   *
   * @param {Vector3} min - The lower boundary of the box.
   * @param {Vector3} max - The upper boundary of the box.
   * @return {Box3} A reference to this bounding box.
   */
  set(e, n) {
    return this.min.copy(e), this.max.copy(n), this;
  }
  /**
   * Sets the upper and lower bounds of this box so it encloses the position data
   * in the given array.
   *
   * @param {Array<number>} array - An array holding 3D position data.
   * @return {Box3} A reference to this bounding box.
   */
  setFromArray(e) {
    this.makeEmpty();
    for (let n = 0, i = e.length; n < i; n += 3)
      this.expandByPoint(Vr.fromArray(e, n));
    return this;
  }
  /**
   * Sets the upper and lower bounds of this box so it encloses the position data
   * in the given buffer attribute.
   *
   * @param {BufferAttribute} attribute - A buffer attribute holding 3D position data.
   * @return {Box3} A reference to this bounding box.
   */
  setFromBufferAttribute(e) {
    this.makeEmpty();
    for (let n = 0, i = e.count; n < i; n++)
      this.expandByPoint(Vr.fromBufferAttribute(e, n));
    return this;
  }
  /**
   * Sets the upper and lower bounds of this box so it encloses the position data
   * in the given array.
   *
   * @param {Array<Vector3>} points - An array holding 3D position data as instances of {@link Vector3}.
   * @return {Box3} A reference to this bounding box.
   */
  setFromPoints(e) {
    this.makeEmpty();
    for (let n = 0, i = e.length; n < i; n++)
      this.expandByPoint(e[n]);
    return this;
  }
  /**
   * Centers this box on the given center vector and sets this box's width, height and
   * depth to the given size values.
   *
   * @param {Vector3} center - The center of the box.
   * @param {Vector3} size - The x, y and z dimensions of the box.
   * @return {Box3} A reference to this bounding box.
   */
  setFromCenterAndSize(e, n) {
    const i = Vr.copy(n).multiplyScalar(0.5);
    return this.min.copy(e).sub(i), this.max.copy(e).add(i), this;
  }
  /**
   * Computes the world-axis-aligned bounding box for the given 3D object
   * (including its children), accounting for the object's, and children's,
   * world transforms. The function may result in a larger box than strictly necessary.
   *
   * @param {Object3D} object - The 3D object to compute the bounding box for.
   * @param {boolean} [precise=false] - If set to `true`, the method computes the smallest
   * world-axis-aligned bounding box at the expense of more computation.
   * @return {Box3} A reference to this bounding box.
   */
  setFromObject(e, n = !1) {
    return this.makeEmpty(), this.expandByObject(e, n);
  }
  /**
   * Returns a new box with copied values from this instance.
   *
   * @return {Box3} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
  /**
   * Copies the values of the given box to this instance.
   *
   * @param {Box3} box - The box to copy.
   * @return {Box3} A reference to this bounding box.
   */
  copy(e) {
    return this.min.copy(e.min), this.max.copy(e.max), this;
  }
  /**
   * Makes this box empty which means in encloses a zero space in 3D.
   *
   * @return {Box3} A reference to this bounding box.
   */
  makeEmpty() {
    return this.min.x = this.min.y = this.min.z = 1 / 0, this.max.x = this.max.y = this.max.z = -1 / 0, this;
  }
  /**
   * Returns true if this box includes zero points within its bounds.
   * Note that a box with equal lower and upper bounds still includes one
   * point, the one both bounds share.
   *
   * @return {boolean} Whether this box is empty or not.
   */
  isEmpty() {
    return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
  }
  /**
   * Returns the center point of this box.
   *
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The center point.
   */
  getCenter(e) {
    return this.isEmpty() ? e.set(0, 0, 0) : e.addVectors(this.min, this.max).multiplyScalar(0.5);
  }
  /**
   * Returns the dimensions of this box.
   *
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The size.
   */
  getSize(e) {
    return this.isEmpty() ? e.set(0, 0, 0) : e.subVectors(this.max, this.min);
  }
  /**
   * Expands the boundaries of this box to include the given point.
   *
   * @param {Vector3} point - The point that should be included by the bounding box.
   * @return {Box3} A reference to this bounding box.
   */
  expandByPoint(e) {
    return this.min.min(e), this.max.max(e), this;
  }
  /**
   * Expands this box equilaterally by the given vector. The width of this
   * box will be expanded by the x component of the vector in both
   * directions. The height of this box will be expanded by the y component of
   * the vector in both directions. The depth of this box will be
   * expanded by the z component of the vector in both directions.
   *
   * @param {Vector3} vector - The vector that should expand the bounding box.
   * @return {Box3} A reference to this bounding box.
   */
  expandByVector(e) {
    return this.min.sub(e), this.max.add(e), this;
  }
  /**
   * Expands each dimension of the box by the given scalar. If negative, the
   * dimensions of the box will be contracted.
   *
   * @param {number} scalar - The scalar value that should expand the bounding box.
   * @return {Box3} A reference to this bounding box.
   */
  expandByScalar(e) {
    return this.min.addScalar(-e), this.max.addScalar(e), this;
  }
  /**
   * Expands the boundaries of this box to include the given 3D object and
   * its children, accounting for the object's, and children's, world
   * transforms. The function may result in a larger box than strictly
   * necessary (unless the precise parameter is set to true).
   *
   * @param {Object3D} object - The 3D object that should expand the bounding box.
   * @param {boolean} precise - If set to `true`, the method expands the bounding box
   * as little as necessary at the expense of more computation.
   * @return {Box3} A reference to this bounding box.
   */
  expandByObject(e, n = !1) {
    e.updateWorldMatrix(!1, !1);
    const i = e.geometry;
    if (i !== void 0) {
      const c = i.getAttribute("position");
      if (n === !0 && c !== void 0 && e.isInstancedMesh !== !0)
        for (let h = 0, d = c.count; h < d; h++)
          e.isMesh === !0 ? e.getVertexPosition(h, Vr) : Vr.fromBufferAttribute(c, h), Vr.applyMatrix4(e.matrixWorld), this.expandByPoint(Vr);
      else
        e.boundingBox !== void 0 ? (e.boundingBox === null && e.computeBoundingBox(), Qv.copy(e.boundingBox)) : (i.boundingBox === null && i.computeBoundingBox(), Qv.copy(i.boundingBox)), Qv.applyMatrix4(e.matrixWorld), this.union(Qv);
    }
    const r = e.children;
    for (let c = 0, h = r.length; c < h; c++)
      this.expandByObject(r[c], n);
    return this;
  }
  /**
   * Returns `true` if the given point lies within or on the boundaries of this box.
   *
   * @param {Vector3} point - The point to test.
   * @return {boolean} Whether the bounding box contains the given point or not.
   */
  containsPoint(e) {
    return e.x >= this.min.x && e.x <= this.max.x && e.y >= this.min.y && e.y <= this.max.y && e.z >= this.min.z && e.z <= this.max.z;
  }
  /**
   * Returns `true` if this bounding box includes the entirety of the given bounding box.
   * If this box and the given one are identical, this function also returns `true`.
   *
   * @param {Box3} box - The bounding box to test.
   * @return {boolean} Whether the bounding box contains the given bounding box or not.
   */
  containsBox(e) {
    return this.min.x <= e.min.x && e.max.x <= this.max.x && this.min.y <= e.min.y && e.max.y <= this.max.y && this.min.z <= e.min.z && e.max.z <= this.max.z;
  }
  /**
   * Returns a point as a proportion of this box's width, height and depth.
   *
   * @param {Vector3} point - A point in 3D space.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} A point as a proportion of this box's width, height and depth.
   */
  getParameter(e, n) {
    return n.set(
      (e.x - this.min.x) / (this.max.x - this.min.x),
      (e.y - this.min.y) / (this.max.y - this.min.y),
      (e.z - this.min.z) / (this.max.z - this.min.z)
    );
  }
  /**
   * Returns `true` if the given bounding box intersects with this bounding box.
   *
   * @param {Box3} box - The bounding box to test.
   * @return {boolean} Whether the given bounding box intersects with this bounding box.
   */
  intersectsBox(e) {
    return e.max.x >= this.min.x && e.min.x <= this.max.x && e.max.y >= this.min.y && e.min.y <= this.max.y && e.max.z >= this.min.z && e.min.z <= this.max.z;
  }
  /**
   * Returns `true` if the given bounding sphere intersects with this bounding box.
   *
   * @param {Sphere} sphere - The bounding sphere to test.
   * @return {boolean} Whether the given bounding sphere intersects with this bounding box.
   */
  intersectsSphere(e) {
    return this.clampPoint(e.center, Vr), Vr.distanceToSquared(e.center) <= e.radius * e.radius;
  }
  /**
   * Returns `true` if the given plane intersects with this bounding box.
   *
   * @param {Plane} plane - The plane to test.
   * @return {boolean} Whether the given plane intersects with this bounding box.
   */
  intersectsPlane(e) {
    let n, i;
    return e.normal.x > 0 ? (n = e.normal.x * this.min.x, i = e.normal.x * this.max.x) : (n = e.normal.x * this.max.x, i = e.normal.x * this.min.x), e.normal.y > 0 ? (n += e.normal.y * this.min.y, i += e.normal.y * this.max.y) : (n += e.normal.y * this.max.y, i += e.normal.y * this.min.y), e.normal.z > 0 ? (n += e.normal.z * this.min.z, i += e.normal.z * this.max.z) : (n += e.normal.z * this.max.z, i += e.normal.z * this.min.z), n <= -e.constant && i >= -e.constant;
  }
  /**
   * Returns `true` if the given triangle intersects with this bounding box.
   *
   * @param {Triangle} triangle - The triangle to test.
   * @return {boolean} Whether the given triangle intersects with this bounding box.
   */
  intersectsTriangle(e) {
    if (this.isEmpty())
      return !1;
    this.getCenter(gp), Kv.subVectors(this.max, gp), uh.subVectors(e.a, gp), fh.subVectors(e.b, gp), hh.subVectors(e.c, gp), mc.subVectors(fh, uh), vc.subVectors(hh, fh), Au.subVectors(uh, hh);
    let n = [
      0,
      -mc.z,
      mc.y,
      0,
      -vc.z,
      vc.y,
      0,
      -Au.z,
      Au.y,
      mc.z,
      0,
      -mc.x,
      vc.z,
      0,
      -vc.x,
      Au.z,
      0,
      -Au.x,
      -mc.y,
      mc.x,
      0,
      -vc.y,
      vc.x,
      0,
      -Au.y,
      Au.x,
      0
    ];
    return !f_(n, uh, fh, hh, Kv) || (n = [1, 0, 0, 0, 1, 0, 0, 0, 1], !f_(n, uh, fh, hh, Kv)) ? !1 : (Jv.crossVectors(mc, vc), n = [Jv.x, Jv.y, Jv.z], f_(n, uh, fh, hh, Kv));
  }
  /**
   * Clamps the given point within the bounds of this box.
   *
   * @param {Vector3} point - The point to clamp.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The clamped point.
   */
  clampPoint(e, n) {
    return n.copy(e).clamp(this.min, this.max);
  }
  /**
   * Returns the euclidean distance from any edge of this box to the specified point. If
   * the given point lies inside of this box, the distance will be `0`.
   *
   * @param {Vector3} point - The point to compute the distance to.
   * @return {number} The euclidean distance.
   */
  distanceToPoint(e) {
    return this.clampPoint(e, Vr).distanceTo(e);
  }
  /**
   * Returns a bounding sphere that encloses this bounding box.
   *
   * @param {Sphere} target - The target sphere that is used to store the method's result.
   * @return {Sphere} The bounding sphere that encloses this bounding box.
   */
  getBoundingSphere(e) {
    return this.isEmpty() ? e.makeEmpty() : (this.getCenter(e.center), e.radius = this.getSize(Vr).length() * 0.5), e;
  }
  /**
   * Computes the intersection of this bounding box and the given one, setting the upper
   * bound of this box to the lesser of the two boxes' upper bounds and the
   * lower bound of this box to the greater of the two boxes' lower bounds. If
   * there's no overlap, makes this box empty.
   *
   * @param {Box3} box - The bounding box to intersect with.
   * @return {Box3} A reference to this bounding box.
   */
  intersect(e) {
    return this.min.max(e.min), this.max.min(e.max), this.isEmpty() && this.makeEmpty(), this;
  }
  /**
   * Computes the union of this box and another and the given one, setting the upper
   * bound of this box to the greater of the two boxes' upper bounds and the
   * lower bound of this box to the lesser of the two boxes' lower bounds.
   *
   * @param {Box3} box - The bounding box that will be unioned with this instance.
   * @return {Box3} A reference to this bounding box.
   */
  union(e) {
    return this.min.min(e.min), this.max.max(e.max), this;
  }
  /**
   * Transforms this bounding box by the given 4x4 transformation matrix.
   *
   * @param {Matrix4} matrix - The transformation matrix.
   * @return {Box3} A reference to this bounding box.
   */
  applyMatrix4(e) {
    return this.isEmpty() ? this : (hl[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(e), hl[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(e), hl[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(e), hl[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(e), hl[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(e), hl[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(e), hl[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(e), hl[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(e), this.setFromPoints(hl), this);
  }
  /**
   * Adds the given offset to both the upper and lower bounds of this bounding box,
   * effectively moving it in 3D space.
   *
   * @param {Vector3} offset - The offset that should be used to translate the bounding box.
   * @return {Box3} A reference to this bounding box.
   */
  translate(e) {
    return this.min.add(e), this.max.add(e), this;
  }
  /**
   * Returns `true` if this bounding box is equal with the given one.
   *
   * @param {Box3} box - The box to test for equality.
   * @return {boolean} Whether this bounding box is equal with the given one.
   */
  equals(e) {
    return e.min.equals(this.min) && e.max.equals(this.max);
  }
  /**
   * Returns a serialized structure of the bounding box.
   *
   * @return {Object} Serialized structure with fields representing the object state.
   */
  toJSON() {
    return {
      min: this.min.toArray(),
      max: this.max.toArray()
    };
  }
  /**
   * Returns a serialized structure of the bounding box.
   *
   * @param {Object} json - The serialized json to set the box from.
   * @return {Box3} A reference to this bounding box.
   */
  fromJSON(e) {
    return this.min.fromArray(e.min), this.max.fromArray(e.max), this;
  }
}
const hl = [
  /* @__PURE__ */ new j(),
  /* @__PURE__ */ new j(),
  /* @__PURE__ */ new j(),
  /* @__PURE__ */ new j(),
  /* @__PURE__ */ new j(),
  /* @__PURE__ */ new j(),
  /* @__PURE__ */ new j(),
  /* @__PURE__ */ new j()
], Vr = /* @__PURE__ */ new j(), Qv = /* @__PURE__ */ new wa(), uh = /* @__PURE__ */ new j(), fh = /* @__PURE__ */ new j(), hh = /* @__PURE__ */ new j(), mc = /* @__PURE__ */ new j(), vc = /* @__PURE__ */ new j(), Au = /* @__PURE__ */ new j(), gp = /* @__PURE__ */ new j(), Kv = /* @__PURE__ */ new j(), Jv = /* @__PURE__ */ new j(), Ru = /* @__PURE__ */ new j();
function f_(s, e, n, i, r) {
  for (let c = 0, h = s.length - 3; c <= h; c += 3) {
    Ru.fromArray(s, c);
    const d = r.x * Math.abs(Ru.x) + r.y * Math.abs(Ru.y) + r.z * Math.abs(Ru.z), v = e.dot(Ru), g = n.dot(Ru), S = i.dot(Ru);
    if (Math.max(-Math.max(v, g, S), Math.min(v, g, S)) > d)
      return !1;
  }
  return !0;
}
const gC = /* @__PURE__ */ new wa(), yp = /* @__PURE__ */ new j(), h_ = /* @__PURE__ */ new j();
class ma {
  /**
   * Constructs a new sphere.
   *
   * @param {Vector3} [center=(0,0,0)] - The center of the sphere
   * @param {number} [radius=-1] - The radius of the sphere.
   */
  constructor(e = new j(), n = -1) {
    this.isSphere = !0, this.center = e, this.radius = n;
  }
  /**
   * Sets the sphere's components by copying the given values.
   *
   * @param {Vector3} center - The center.
   * @param {number} radius - The radius.
   * @return {Sphere} A reference to this sphere.
   */
  set(e, n) {
    return this.center.copy(e), this.radius = n, this;
  }
  /**
   * Computes the minimum bounding sphere for list of points.
   * If the optional center point is given, it is used as the sphere's
   * center. Otherwise, the center of the axis-aligned bounding box
   * encompassing the points is calculated.
   *
   * @param {Array<Vector3>} points - A list of points in 3D space.
   * @param {Vector3} [optionalCenter] - The center of the sphere.
   * @return {Sphere} A reference to this sphere.
   */
  setFromPoints(e, n) {
    const i = this.center;
    n !== void 0 ? i.copy(n) : gC.setFromPoints(e).getCenter(i);
    let r = 0;
    for (let c = 0, h = e.length; c < h; c++)
      r = Math.max(r, i.distanceToSquared(e[c]));
    return this.radius = Math.sqrt(r), this;
  }
  /**
   * Copies the values of the given sphere to this instance.
   *
   * @param {Sphere} sphere - The sphere to copy.
   * @return {Sphere} A reference to this sphere.
   */
  copy(e) {
    return this.center.copy(e.center), this.radius = e.radius, this;
  }
  /**
   * Returns `true` if the sphere is empty (the radius set to a negative number).
   *
   * Spheres with a radius of `0` contain only their center point and are not
   * considered to be empty.
   *
   * @return {boolean} Whether this sphere is empty or not.
   */
  isEmpty() {
    return this.radius < 0;
  }
  /**
   * Makes this sphere empty which means in encloses a zero space in 3D.
   *
   * @return {Sphere} A reference to this sphere.
   */
  makeEmpty() {
    return this.center.set(0, 0, 0), this.radius = -1, this;
  }
  /**
   * Returns `true` if this sphere contains the given point inclusive of
   * the surface of the sphere.
   *
   * @param {Vector3} point - The point to check.
   * @return {boolean} Whether this sphere contains the given point or not.
   */
  containsPoint(e) {
    return e.distanceToSquared(this.center) <= this.radius * this.radius;
  }
  /**
   * Returns the closest distance from the boundary of the sphere to the
   * given point. If the sphere contains the point, the distance will
   * be negative.
   *
   * @param {Vector3} point - The point to compute the distance to.
   * @return {number} The distance to the point.
   */
  distanceToPoint(e) {
    return e.distanceTo(this.center) - this.radius;
  }
  /**
   * Returns `true` if this sphere intersects with the given one.
   *
   * @param {Sphere} sphere - The sphere to test.
   * @return {boolean} Whether this sphere intersects with the given one or not.
   */
  intersectsSphere(e) {
    const n = this.radius + e.radius;
    return e.center.distanceToSquared(this.center) <= n * n;
  }
  /**
   * Returns `true` if this sphere intersects with the given box.
   *
   * @param {Box3} box - The box to test.
   * @return {boolean} Whether this sphere intersects with the given box or not.
   */
  intersectsBox(e) {
    return e.intersectsSphere(this);
  }
  /**
   * Returns `true` if this sphere intersects with the given plane.
   *
   * @param {Plane} plane - The plane to test.
   * @return {boolean} Whether this sphere intersects with the given plane or not.
   */
  intersectsPlane(e) {
    return Math.abs(e.distanceToPoint(this.center)) <= this.radius;
  }
  /**
   * Clamps a point within the sphere. If the point is outside the sphere, it
   * will clamp it to the closest point on the edge of the sphere. Points
   * already inside the sphere will not be affected.
   *
   * @param {Vector3} point - The plane to clamp.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The clamped point.
   */
  clampPoint(e, n) {
    const i = this.center.distanceToSquared(e);
    return n.copy(e), i > this.radius * this.radius && (n.sub(this.center).normalize(), n.multiplyScalar(this.radius).add(this.center)), n;
  }
  /**
   * Returns a bounding box that encloses this sphere.
   *
   * @param {Box3} target - The target box that is used to store the method's result.
   * @return {Box3} The bounding box that encloses this sphere.
   */
  getBoundingBox(e) {
    return this.isEmpty() ? (e.makeEmpty(), e) : (e.set(this.center, this.center), e.expandByScalar(this.radius), e);
  }
  /**
   * Transforms this sphere with the given 4x4 transformation matrix.
   *
   * @param {Matrix4} matrix - The transformation matrix.
   * @return {Sphere} A reference to this sphere.
   */
  applyMatrix4(e) {
    return this.center.applyMatrix4(e), this.radius = this.radius * e.getMaxScaleOnAxis(), this;
  }
  /**
   * Translates the sphere's center by the given offset.
   *
   * @param {Vector3} offset - The offset.
   * @return {Sphere} A reference to this sphere.
   */
  translate(e) {
    return this.center.add(e), this;
  }
  /**
   * Expands the boundaries of this sphere to include the given point.
   *
   * @param {Vector3} point - The point to include.
   * @return {Sphere} A reference to this sphere.
   */
  expandByPoint(e) {
    if (this.isEmpty())
      return this.center.copy(e), this.radius = 0, this;
    yp.subVectors(e, this.center);
    const n = yp.lengthSq();
    if (n > this.radius * this.radius) {
      const i = Math.sqrt(n), r = (i - this.radius) * 0.5;
      this.center.addScaledVector(yp, r / i), this.radius += r;
    }
    return this;
  }
  /**
   * Expands this sphere to enclose both the original sphere and the given sphere.
   *
   * @param {Sphere} sphere - The sphere to include.
   * @return {Sphere} A reference to this sphere.
   */
  union(e) {
    return e.isEmpty() ? this : this.isEmpty() ? (this.copy(e), this) : (this.center.equals(e.center) === !0 ? this.radius = Math.max(this.radius, e.radius) : (h_.subVectors(e.center, this.center).setLength(e.radius), this.expandByPoint(yp.copy(e.center).add(h_)), this.expandByPoint(yp.copy(e.center).sub(h_))), this);
  }
  /**
   * Returns `true` if this sphere is equal with the given one.
   *
   * @param {Sphere} sphere - The sphere to test for equality.
   * @return {boolean} Whether this bounding sphere is equal with the given one.
   */
  equals(e) {
    return e.center.equals(this.center) && e.radius === this.radius;
  }
  /**
   * Returns a new sphere with copied values from this instance.
   *
   * @return {Sphere} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
  /**
   * Returns a serialized structure of the bounding sphere.
   *
   * @return {Object} Serialized structure with fields representing the object state.
   */
  toJSON() {
    return {
      radius: this.radius,
      center: this.center.toArray()
    };
  }
  /**
   * Returns a serialized structure of the bounding sphere.
   *
   * @param {Object} json - The serialized json to set the sphere from.
   * @return {Box3} A reference to this bounding sphere.
   */
  fromJSON(e) {
    return this.radius = e.radius, this.center.fromArray(e.center), this;
  }
}
const dl = /* @__PURE__ */ new j(), d_ = /* @__PURE__ */ new j(), $v = /* @__PURE__ */ new j(), gc = /* @__PURE__ */ new j(), p_ = /* @__PURE__ */ new j(), eg = /* @__PURE__ */ new j(), m_ = /* @__PURE__ */ new j();
class Kh {
  /**
   * Constructs a new ray.
   *
   * @param {Vector3} [origin=(0,0,0)] - The origin of the ray.
   * @param {Vector3} [direction=(0,0,-1)] - The (normalized) direction of the ray.
   */
  constructor(e = new j(), n = new j(0, 0, -1)) {
    this.origin = e, this.direction = n;
  }
  /**
   * Sets the ray's components by copying the given values.
   *
   * @param {Vector3} origin - The origin.
   * @param {Vector3} direction - The direction.
   * @return {Ray} A reference to this ray.
   */
  set(e, n) {
    return this.origin.copy(e), this.direction.copy(n), this;
  }
  /**
   * Copies the values of the given ray to this instance.
   *
   * @param {Ray} ray - The ray to copy.
   * @return {Ray} A reference to this ray.
   */
  copy(e) {
    return this.origin.copy(e.origin), this.direction.copy(e.direction), this;
  }
  /**
   * Returns a vector that is located at a given distance along this ray.
   *
   * @param {number} t - The distance along the ray to retrieve a position for.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} A position on the ray.
   */
  at(e, n) {
    return n.copy(this.origin).addScaledVector(this.direction, e);
  }
  /**
   * Adjusts the direction of the ray to point at the given vector in world space.
   *
   * @param {Vector3} v - The target position.
   * @return {Ray} A reference to this ray.
   */
  lookAt(e) {
    return this.direction.copy(e).sub(this.origin).normalize(), this;
  }
  /**
   * Shift the origin of this ray along its direction by the given distance.
   *
   * @param {number} t - The distance along the ray to interpolate.
   * @return {Ray} A reference to this ray.
   */
  recast(e) {
    return this.origin.copy(this.at(e, dl)), this;
  }
  /**
   * Returns the point along this ray that is closest to the given point.
   *
   * @param {Vector3} point - A point in 3D space to get the closet location on the ray for.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The closest point on this ray.
   */
  closestPointToPoint(e, n) {
    n.subVectors(e, this.origin);
    const i = n.dot(this.direction);
    return i < 0 ? n.copy(this.origin) : n.copy(this.origin).addScaledVector(this.direction, i);
  }
  /**
   * Returns the distance of the closest approach between this ray and the given point.
   *
   * @param {Vector3} point - A point in 3D space to compute the distance to.
   * @return {number} The distance.
   */
  distanceToPoint(e) {
    return Math.sqrt(this.distanceSqToPoint(e));
  }
  /**
   * Returns the squared distance of the closest approach between this ray and the given point.
   *
   * @param {Vector3} point - A point in 3D space to compute the distance to.
   * @return {number} The squared distance.
   */
  distanceSqToPoint(e) {
    const n = dl.subVectors(e, this.origin).dot(this.direction);
    return n < 0 ? this.origin.distanceToSquared(e) : (dl.copy(this.origin).addScaledVector(this.direction, n), dl.distanceToSquared(e));
  }
  /**
   * Returns the squared distance between this ray and the given line segment.
   *
   * @param {Vector3} v0 - The start point of the line segment.
   * @param {Vector3} v1 - The end point of the line segment.
   * @param {Vector3} [optionalPointOnRay] - When provided, it receives the point on this ray that is closest to the segment.
   * @param {Vector3} [optionalPointOnSegment] - When provided, it receives the point on the line segment that is closest to this ray.
   * @return {number} The squared distance.
   */
  distanceSqToSegment(e, n, i, r) {
    d_.copy(e).add(n).multiplyScalar(0.5), $v.copy(n).sub(e).normalize(), gc.copy(this.origin).sub(d_);
    const c = e.distanceTo(n) * 0.5, h = -this.direction.dot($v), d = gc.dot(this.direction), v = -gc.dot($v), g = gc.lengthSq(), S = Math.abs(1 - h * h);
    let x, M, b, R;
    if (S > 0)
      if (x = h * v - d, M = h * d - v, R = c * S, x >= 0)
        if (M >= -R)
          if (M <= R) {
            const w = 1 / S;
            x *= w, M *= w, b = x * (x + h * M + 2 * d) + M * (h * x + M + 2 * v) + g;
          } else
            M = c, x = Math.max(0, -(h * M + d)), b = -x * x + M * (M + 2 * v) + g;
        else
          M = -c, x = Math.max(0, -(h * M + d)), b = -x * x + M * (M + 2 * v) + g;
      else
        M <= -R ? (x = Math.max(0, -(-h * c + d)), M = x > 0 ? -c : Math.min(Math.max(-c, -v), c), b = -x * x + M * (M + 2 * v) + g) : M <= R ? (x = 0, M = Math.min(Math.max(-c, -v), c), b = M * (M + 2 * v) + g) : (x = Math.max(0, -(h * c + d)), M = x > 0 ? c : Math.min(Math.max(-c, -v), c), b = -x * x + M * (M + 2 * v) + g);
    else
      M = h > 0 ? -c : c, x = Math.max(0, -(h * M + d)), b = -x * x + M * (M + 2 * v) + g;
    return i && i.copy(this.origin).addScaledVector(this.direction, x), r && r.copy(d_).addScaledVector($v, M), b;
  }
  /**
   * Intersects this ray with the given sphere, returning the intersection
   * point or `null` if there is no intersection.
   *
   * @param {Sphere} sphere - The sphere to intersect.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {?Vector3} The intersection point.
   */
  intersectSphere(e, n) {
    dl.subVectors(e.center, this.origin);
    const i = dl.dot(this.direction), r = dl.dot(dl) - i * i, c = e.radius * e.radius;
    if (r > c) return null;
    const h = Math.sqrt(c - r), d = i - h, v = i + h;
    return v < 0 ? null : d < 0 ? this.at(v, n) : this.at(d, n);
  }
  /**
   * Returns `true` if this ray intersects with the given sphere.
   *
   * @param {Sphere} sphere - The sphere to intersect.
   * @return {boolean} Whether this ray intersects with the given sphere or not.
   */
  intersectsSphere(e) {
    return e.radius < 0 ? !1 : this.distanceSqToPoint(e.center) <= e.radius * e.radius;
  }
  /**
   * Computes the distance from the ray's origin to the given plane. Returns `null` if the ray
   * does not intersect with the plane.
   *
   * @param {Plane} plane - The plane to compute the distance to.
   * @return {?number} Whether this ray intersects with the given sphere or not.
   */
  distanceToPlane(e) {
    const n = e.normal.dot(this.direction);
    if (n === 0)
      return e.distanceToPoint(this.origin) === 0 ? 0 : null;
    const i = -(this.origin.dot(e.normal) + e.constant) / n;
    return i >= 0 ? i : null;
  }
  /**
   * Intersects this ray with the given plane, returning the intersection
   * point or `null` if there is no intersection.
   *
   * @param {Plane} plane - The plane to intersect.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {?Vector3} The intersection point.
   */
  intersectPlane(e, n) {
    const i = this.distanceToPlane(e);
    return i === null ? null : this.at(i, n);
  }
  /**
   * Returns `true` if this ray intersects with the given plane.
   *
   * @param {Plane} plane - The plane to intersect.
   * @return {boolean} Whether this ray intersects with the given plane or not.
   */
  intersectsPlane(e) {
    const n = e.distanceToPoint(this.origin);
    return n === 0 || e.normal.dot(this.direction) * n < 0;
  }
  /**
   * Intersects this ray with the given bounding box, returning the intersection
   * point or `null` if there is no intersection.
   *
   * @param {Box3} box - The box to intersect.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {?Vector3} The intersection point.
   */
  intersectBox(e, n) {
    let i, r, c, h, d, v;
    const g = 1 / this.direction.x, S = 1 / this.direction.y, x = 1 / this.direction.z, M = this.origin;
    return g >= 0 ? (i = (e.min.x - M.x) * g, r = (e.max.x - M.x) * g) : (i = (e.max.x - M.x) * g, r = (e.min.x - M.x) * g), S >= 0 ? (c = (e.min.y - M.y) * S, h = (e.max.y - M.y) * S) : (c = (e.max.y - M.y) * S, h = (e.min.y - M.y) * S), i > h || c > r || ((c > i || isNaN(i)) && (i = c), (h < r || isNaN(r)) && (r = h), x >= 0 ? (d = (e.min.z - M.z) * x, v = (e.max.z - M.z) * x) : (d = (e.max.z - M.z) * x, v = (e.min.z - M.z) * x), i > v || d > r) || ((d > i || i !== i) && (i = d), (v < r || r !== r) && (r = v), r < 0) ? null : this.at(i >= 0 ? i : r, n);
  }
  /**
   * Returns `true` if this ray intersects with the given box.
   *
   * @param {Box3} box - The box to intersect.
   * @return {boolean} Whether this ray intersects with the given box or not.
   */
  intersectsBox(e) {
    return this.intersectBox(e, dl) !== null;
  }
  /**
   * Intersects this ray with the given triangle, returning the intersection
   * point or `null` if there is no intersection.
   *
   * @param {Vector3} a - The first vertex of the triangle.
   * @param {Vector3} b - The second vertex of the triangle.
   * @param {Vector3} c - The third vertex of the triangle.
   * @param {boolean} backfaceCulling - Whether to use backface culling or not.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {?Vector3} The intersection point.
   */
  intersectTriangle(e, n, i, r, c) {
    p_.subVectors(n, e), eg.subVectors(i, e), m_.crossVectors(p_, eg);
    let h = this.direction.dot(m_), d;
    if (h > 0) {
      if (r) return null;
      d = 1;
    } else if (h < 0)
      d = -1, h = -h;
    else
      return null;
    gc.subVectors(this.origin, e);
    const v = d * this.direction.dot(eg.crossVectors(gc, eg));
    if (v < 0)
      return null;
    const g = d * this.direction.dot(p_.cross(gc));
    if (g < 0 || v + g > h)
      return null;
    const S = -d * gc.dot(m_);
    return S < 0 ? null : this.at(S / h, c);
  }
  /**
   * Transforms this ray with the given 4x4 transformation matrix.
   *
   * @param {Matrix4} matrix4 - The transformation matrix.
   * @return {Ray} A reference to this ray.
   */
  applyMatrix4(e) {
    return this.origin.applyMatrix4(e), this.direction.transformDirection(e), this;
  }
  /**
   * Returns `true` if this ray is equal with the given one.
   *
   * @param {Ray} ray - The ray to test for equality.
   * @return {boolean} Whether this ray is equal with the given one.
   */
  equals(e) {
    return e.origin.equals(this.origin) && e.direction.equals(this.direction);
  }
  /**
   * Returns a new ray with copied values from this instance.
   *
   * @return {Ray} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
}
class Ft {
  /**
   * Constructs a new 4x4 matrix. The arguments are supposed to be
   * in row-major order. If no arguments are provided, the constructor
   * initializes the matrix as an identity matrix.
   *
   * @param {number} [n11] - 1-1 matrix element.
   * @param {number} [n12] - 1-2 matrix element.
   * @param {number} [n13] - 1-3 matrix element.
   * @param {number} [n14] - 1-4 matrix element.
   * @param {number} [n21] - 2-1 matrix element.
   * @param {number} [n22] - 2-2 matrix element.
   * @param {number} [n23] - 2-3 matrix element.
   * @param {number} [n24] - 2-4 matrix element.
   * @param {number} [n31] - 3-1 matrix element.
   * @param {number} [n32] - 3-2 matrix element.
   * @param {number} [n33] - 3-3 matrix element.
   * @param {number} [n34] - 3-4 matrix element.
   * @param {number} [n41] - 4-1 matrix element.
   * @param {number} [n42] - 4-2 matrix element.
   * @param {number} [n43] - 4-3 matrix element.
   * @param {number} [n44] - 4-4 matrix element.
   */
  constructor(e, n, i, r, c, h, d, v, g, S, x, M, b, R, w, C) {
    Ft.prototype.isMatrix4 = !0, this.elements = [
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    ], e !== void 0 && this.set(e, n, i, r, c, h, d, v, g, S, x, M, b, R, w, C);
  }
  /**
   * Sets the elements of the matrix.The arguments are supposed to be
   * in row-major order.
   *
   * @param {number} [n11] - 1-1 matrix element.
   * @param {number} [n12] - 1-2 matrix element.
   * @param {number} [n13] - 1-3 matrix element.
   * @param {number} [n14] - 1-4 matrix element.
   * @param {number} [n21] - 2-1 matrix element.
   * @param {number} [n22] - 2-2 matrix element.
   * @param {number} [n23] - 2-3 matrix element.
   * @param {number} [n24] - 2-4 matrix element.
   * @param {number} [n31] - 3-1 matrix element.
   * @param {number} [n32] - 3-2 matrix element.
   * @param {number} [n33] - 3-3 matrix element.
   * @param {number} [n34] - 3-4 matrix element.
   * @param {number} [n41] - 4-1 matrix element.
   * @param {number} [n42] - 4-2 matrix element.
   * @param {number} [n43] - 4-3 matrix element.
   * @param {number} [n44] - 4-4 matrix element.
   * @return {Matrix4} A reference to this matrix.
   */
  set(e, n, i, r, c, h, d, v, g, S, x, M, b, R, w, C) {
    const E = this.elements;
    return E[0] = e, E[4] = n, E[8] = i, E[12] = r, E[1] = c, E[5] = h, E[9] = d, E[13] = v, E[2] = g, E[6] = S, E[10] = x, E[14] = M, E[3] = b, E[7] = R, E[11] = w, E[15] = C, this;
  }
  /**
   * Sets this matrix to the 4x4 identity matrix.
   *
   * @return {Matrix4} A reference to this matrix.
   */
  identity() {
    return this.set(
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  /**
   * Returns a matrix with copied values from this instance.
   *
   * @return {Matrix4} A clone of this instance.
   */
  clone() {
    return new Ft().fromArray(this.elements);
  }
  /**
   * Copies the values of the given matrix to this instance.
   *
   * @param {Matrix4} m - The matrix to copy.
   * @return {Matrix4} A reference to this matrix.
   */
  copy(e) {
    const n = this.elements, i = e.elements;
    return n[0] = i[0], n[1] = i[1], n[2] = i[2], n[3] = i[3], n[4] = i[4], n[5] = i[5], n[6] = i[6], n[7] = i[7], n[8] = i[8], n[9] = i[9], n[10] = i[10], n[11] = i[11], n[12] = i[12], n[13] = i[13], n[14] = i[14], n[15] = i[15], this;
  }
  /**
   * Copies the translation component of the given matrix
   * into this matrix's translation component.
   *
   * @param {Matrix4} m - The matrix to copy the translation component.
   * @return {Matrix4} A reference to this matrix.
   */
  copyPosition(e) {
    const n = this.elements, i = e.elements;
    return n[12] = i[12], n[13] = i[13], n[14] = i[14], this;
  }
  /**
   * Set the upper 3x3 elements of this matrix to the values of given 3x3 matrix.
   *
   * @param {Matrix3} m - The 3x3 matrix.
   * @return {Matrix4} A reference to this matrix.
   */
  setFromMatrix3(e) {
    const n = e.elements;
    return this.set(
      n[0],
      n[3],
      n[6],
      0,
      n[1],
      n[4],
      n[7],
      0,
      n[2],
      n[5],
      n[8],
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  /**
   * Extracts the basis of this matrix into the three axis vectors provided.
   *
   * @param {Vector3} xAxis - The basis's x axis.
   * @param {Vector3} yAxis - The basis's y axis.
   * @param {Vector3} zAxis - The basis's z axis.
   * @return {Matrix4} A reference to this matrix.
   */
  extractBasis(e, n, i) {
    return e.setFromMatrixColumn(this, 0), n.setFromMatrixColumn(this, 1), i.setFromMatrixColumn(this, 2), this;
  }
  /**
   * Sets the given basis vectors to this matrix.
   *
   * @param {Vector3} xAxis - The basis's x axis.
   * @param {Vector3} yAxis - The basis's y axis.
   * @param {Vector3} zAxis - The basis's z axis.
   * @return {Matrix4} A reference to this matrix.
   */
  makeBasis(e, n, i) {
    return this.set(
      e.x,
      n.x,
      i.x,
      0,
      e.y,
      n.y,
      i.y,
      0,
      e.z,
      n.z,
      i.z,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  /**
   * Extracts the rotation component of the given matrix
   * into this matrix's rotation component.
   *
   * Note: This method does not support reflection matrices.
   *
   * @param {Matrix4} m - The matrix.
   * @return {Matrix4} A reference to this matrix.
   */
  extractRotation(e) {
    const n = this.elements, i = e.elements, r = 1 / dh.setFromMatrixColumn(e, 0).length(), c = 1 / dh.setFromMatrixColumn(e, 1).length(), h = 1 / dh.setFromMatrixColumn(e, 2).length();
    return n[0] = i[0] * r, n[1] = i[1] * r, n[2] = i[2] * r, n[3] = 0, n[4] = i[4] * c, n[5] = i[5] * c, n[6] = i[6] * c, n[7] = 0, n[8] = i[8] * h, n[9] = i[9] * h, n[10] = i[10] * h, n[11] = 0, n[12] = 0, n[13] = 0, n[14] = 0, n[15] = 1, this;
  }
  /**
   * Sets the rotation component (the upper left 3x3 matrix) of this matrix to
   * the rotation specified by the given Euler angles. The rest of
   * the matrix is set to the identity. Depending on the {@link Euler#order},
   * there are six possible outcomes. See [this page]{@link https://en.wikipedia.org/wiki/Euler_angles#Rotation_matrix}
   * for a complete list.
   *
   * @param {Euler} euler - The Euler angles.
   * @return {Matrix4} A reference to this matrix.
   */
  makeRotationFromEuler(e) {
    const n = this.elements, i = e.x, r = e.y, c = e.z, h = Math.cos(i), d = Math.sin(i), v = Math.cos(r), g = Math.sin(r), S = Math.cos(c), x = Math.sin(c);
    if (e.order === "XYZ") {
      const M = h * S, b = h * x, R = d * S, w = d * x;
      n[0] = v * S, n[4] = -v * x, n[8] = g, n[1] = b + R * g, n[5] = M - w * g, n[9] = -d * v, n[2] = w - M * g, n[6] = R + b * g, n[10] = h * v;
    } else if (e.order === "YXZ") {
      const M = v * S, b = v * x, R = g * S, w = g * x;
      n[0] = M + w * d, n[4] = R * d - b, n[8] = h * g, n[1] = h * x, n[5] = h * S, n[9] = -d, n[2] = b * d - R, n[6] = w + M * d, n[10] = h * v;
    } else if (e.order === "ZXY") {
      const M = v * S, b = v * x, R = g * S, w = g * x;
      n[0] = M - w * d, n[4] = -h * x, n[8] = R + b * d, n[1] = b + R * d, n[5] = h * S, n[9] = w - M * d, n[2] = -h * g, n[6] = d, n[10] = h * v;
    } else if (e.order === "ZYX") {
      const M = h * S, b = h * x, R = d * S, w = d * x;
      n[0] = v * S, n[4] = R * g - b, n[8] = M * g + w, n[1] = v * x, n[5] = w * g + M, n[9] = b * g - R, n[2] = -g, n[6] = d * v, n[10] = h * v;
    } else if (e.order === "YZX") {
      const M = h * v, b = h * g, R = d * v, w = d * g;
      n[0] = v * S, n[4] = w - M * x, n[8] = R * x + b, n[1] = x, n[5] = h * S, n[9] = -d * S, n[2] = -g * S, n[6] = b * x + R, n[10] = M - w * x;
    } else if (e.order === "XZY") {
      const M = h * v, b = h * g, R = d * v, w = d * g;
      n[0] = v * S, n[4] = -x, n[8] = g * S, n[1] = M * x + w, n[5] = h * S, n[9] = b * x - R, n[2] = R * x - b, n[6] = d * S, n[10] = w * x + M;
    }
    return n[3] = 0, n[7] = 0, n[11] = 0, n[12] = 0, n[13] = 0, n[14] = 0, n[15] = 1, this;
  }
  /**
   * Sets the rotation component of this matrix to the rotation specified by
   * the given Quaternion as outlined [here]{@link https://en.wikipedia.org/wiki/Rotation_matrix#Quaternion}
   * The rest of the matrix is set to the identity.
   *
   * @param {Quaternion} q - The Quaternion.
   * @return {Matrix4} A reference to this matrix.
   */
  makeRotationFromQuaternion(e) {
    return this.compose(yC, e, _C);
  }
  /**
   * Sets the rotation component of the transformation matrix, looking from `eye` towards
   * `target`, and oriented by the up-direction.
   *
   * @param {Vector3} eye - The eye vector.
   * @param {Vector3} target - The target vector.
   * @param {Vector3} up - The up vector.
   * @return {Matrix4} A reference to this matrix.
   */
  lookAt(e, n, i) {
    const r = this.elements;
    return Hs.subVectors(e, n), Hs.lengthSq() === 0 && (Hs.z = 1), Hs.normalize(), yc.crossVectors(i, Hs), yc.lengthSq() === 0 && (Math.abs(i.z) === 1 ? Hs.x += 1e-4 : Hs.z += 1e-4, Hs.normalize(), yc.crossVectors(i, Hs)), yc.normalize(), tg.crossVectors(Hs, yc), r[0] = yc.x, r[4] = tg.x, r[8] = Hs.x, r[1] = yc.y, r[5] = tg.y, r[9] = Hs.y, r[2] = yc.z, r[6] = tg.z, r[10] = Hs.z, this;
  }
  /**
   * Post-multiplies this matrix by the given 4x4 matrix.
   *
   * @param {Matrix4} m - The matrix to multiply with.
   * @return {Matrix4} A reference to this matrix.
   */
  multiply(e) {
    return this.multiplyMatrices(this, e);
  }
  /**
   * Pre-multiplies this matrix by the given 4x4 matrix.
   *
   * @param {Matrix4} m - The matrix to multiply with.
   * @return {Matrix4} A reference to this matrix.
   */
  premultiply(e) {
    return this.multiplyMatrices(e, this);
  }
  /**
   * Multiples the given 4x4 matrices and stores the result
   * in this matrix.
   *
   * @param {Matrix4} a - The first matrix.
   * @param {Matrix4} b - The second matrix.
   * @return {Matrix4} A reference to this matrix.
   */
  multiplyMatrices(e, n) {
    const i = e.elements, r = n.elements, c = this.elements, h = i[0], d = i[4], v = i[8], g = i[12], S = i[1], x = i[5], M = i[9], b = i[13], R = i[2], w = i[6], C = i[10], E = i[14], U = i[3], N = i[7], O = i[11], I = i[15], V = r[0], Y = r[4], k = r[8], B = r[12], z = r[1], W = r[5], le = r[9], ae = r[13], oe = r[2], pe = r[6], P = r[10], K = r[14], Q = r[3], fe = r[7], q = r[11], te = r[15];
    return c[0] = h * V + d * z + v * oe + g * Q, c[4] = h * Y + d * W + v * pe + g * fe, c[8] = h * k + d * le + v * P + g * q, c[12] = h * B + d * ae + v * K + g * te, c[1] = S * V + x * z + M * oe + b * Q, c[5] = S * Y + x * W + M * pe + b * fe, c[9] = S * k + x * le + M * P + b * q, c[13] = S * B + x * ae + M * K + b * te, c[2] = R * V + w * z + C * oe + E * Q, c[6] = R * Y + w * W + C * pe + E * fe, c[10] = R * k + w * le + C * P + E * q, c[14] = R * B + w * ae + C * K + E * te, c[3] = U * V + N * z + O * oe + I * Q, c[7] = U * Y + N * W + O * pe + I * fe, c[11] = U * k + N * le + O * P + I * q, c[15] = U * B + N * ae + O * K + I * te, this;
  }
  /**
   * Multiplies every component of the matrix by the given scalar.
   *
   * @param {number} s - The scalar.
   * @return {Matrix4} A reference to this matrix.
   */
  multiplyScalar(e) {
    const n = this.elements;
    return n[0] *= e, n[4] *= e, n[8] *= e, n[12] *= e, n[1] *= e, n[5] *= e, n[9] *= e, n[13] *= e, n[2] *= e, n[6] *= e, n[10] *= e, n[14] *= e, n[3] *= e, n[7] *= e, n[11] *= e, n[15] *= e, this;
  }
  /**
   * Computes and returns the determinant of this matrix.
   *
   * Based on the method outlined [here]{@link http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.html}.
   *
   * @return {number} The determinant.
   */
  determinant() {
    const e = this.elements, n = e[0], i = e[4], r = e[8], c = e[12], h = e[1], d = e[5], v = e[9], g = e[13], S = e[2], x = e[6], M = e[10], b = e[14], R = e[3], w = e[7], C = e[11], E = e[15];
    return R * (+c * v * x - r * g * x - c * d * M + i * g * M + r * d * b - i * v * b) + w * (+n * v * b - n * g * M + c * h * M - r * h * b + r * g * S - c * v * S) + C * (+n * g * x - n * d * b - c * h * x + i * h * b + c * d * S - i * g * S) + E * (-r * d * S - n * v * x + n * d * M + r * h * x - i * h * M + i * v * S);
  }
  /**
   * Transposes this matrix in place.
   *
   * @return {Matrix4} A reference to this matrix.
   */
  transpose() {
    const e = this.elements;
    let n;
    return n = e[1], e[1] = e[4], e[4] = n, n = e[2], e[2] = e[8], e[8] = n, n = e[6], e[6] = e[9], e[9] = n, n = e[3], e[3] = e[12], e[12] = n, n = e[7], e[7] = e[13], e[13] = n, n = e[11], e[11] = e[14], e[14] = n, this;
  }
  /**
   * Sets the position component for this matrix from the given vector,
   * without affecting the rest of the matrix.
   *
   * @param {number|Vector3} x - The x component of the vector or alternatively the vector object.
   * @param {number} y - The y component of the vector.
   * @param {number} z - The z component of the vector.
   * @return {Matrix4} A reference to this matrix.
   */
  setPosition(e, n, i) {
    const r = this.elements;
    return e.isVector3 ? (r[12] = e.x, r[13] = e.y, r[14] = e.z) : (r[12] = e, r[13] = n, r[14] = i), this;
  }
  /**
   * Inverts this matrix, using the [analytic method]{@link https://en.wikipedia.org/wiki/Invertible_matrix#Analytic_solution}.
   * You can not invert with a determinant of zero. If you attempt this, the method produces
   * a zero matrix instead.
   *
   * @return {Matrix4} A reference to this matrix.
   */
  invert() {
    const e = this.elements, n = e[0], i = e[1], r = e[2], c = e[3], h = e[4], d = e[5], v = e[6], g = e[7], S = e[8], x = e[9], M = e[10], b = e[11], R = e[12], w = e[13], C = e[14], E = e[15], U = x * C * g - w * M * g + w * v * b - d * C * b - x * v * E + d * M * E, N = R * M * g - S * C * g - R * v * b + h * C * b + S * v * E - h * M * E, O = S * w * g - R * x * g + R * d * b - h * w * b - S * d * E + h * x * E, I = R * x * v - S * w * v - R * d * M + h * w * M + S * d * C - h * x * C, V = n * U + i * N + r * O + c * I;
    if (V === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    const Y = 1 / V;
    return e[0] = U * Y, e[1] = (w * M * c - x * C * c - w * r * b + i * C * b + x * r * E - i * M * E) * Y, e[2] = (d * C * c - w * v * c + w * r * g - i * C * g - d * r * E + i * v * E) * Y, e[3] = (x * v * c - d * M * c - x * r * g + i * M * g + d * r * b - i * v * b) * Y, e[4] = N * Y, e[5] = (S * C * c - R * M * c + R * r * b - n * C * b - S * r * E + n * M * E) * Y, e[6] = (R * v * c - h * C * c - R * r * g + n * C * g + h * r * E - n * v * E) * Y, e[7] = (h * M * c - S * v * c + S * r * g - n * M * g - h * r * b + n * v * b) * Y, e[8] = O * Y, e[9] = (R * x * c - S * w * c - R * i * b + n * w * b + S * i * E - n * x * E) * Y, e[10] = (h * w * c - R * d * c + R * i * g - n * w * g - h * i * E + n * d * E) * Y, e[11] = (S * d * c - h * x * c - S * i * g + n * x * g + h * i * b - n * d * b) * Y, e[12] = I * Y, e[13] = (S * w * r - R * x * r + R * i * M - n * w * M - S * i * C + n * x * C) * Y, e[14] = (R * d * r - h * w * r - R * i * v + n * w * v + h * i * C - n * d * C) * Y, e[15] = (h * x * r - S * d * r + S * i * v - n * x * v - h * i * M + n * d * M) * Y, this;
  }
  /**
   * Multiplies the columns of this matrix by the given vector.
   *
   * @param {Vector3} v - The scale vector.
   * @return {Matrix4} A reference to this matrix.
   */
  scale(e) {
    const n = this.elements, i = e.x, r = e.y, c = e.z;
    return n[0] *= i, n[4] *= r, n[8] *= c, n[1] *= i, n[5] *= r, n[9] *= c, n[2] *= i, n[6] *= r, n[10] *= c, n[3] *= i, n[7] *= r, n[11] *= c, this;
  }
  /**
   * Gets the maximum scale value of the three axes.
   *
   * @return {number} The maximum scale.
   */
  getMaxScaleOnAxis() {
    const e = this.elements, n = e[0] * e[0] + e[1] * e[1] + e[2] * e[2], i = e[4] * e[4] + e[5] * e[5] + e[6] * e[6], r = e[8] * e[8] + e[9] * e[9] + e[10] * e[10];
    return Math.sqrt(Math.max(n, i, r));
  }
  /**
   * Sets this matrix as a translation transform from the given vector.
   *
   * @param {number|Vector3} x - The amount to translate in the X axis or alternatively a translation vector.
   * @param {number} y - The amount to translate in the Y axis.
   * @param {number} z - The amount to translate in the z axis.
   * @return {Matrix4} A reference to this matrix.
   */
  makeTranslation(e, n, i) {
    return e.isVector3 ? this.set(
      1,
      0,
      0,
      e.x,
      0,
      1,
      0,
      e.y,
      0,
      0,
      1,
      e.z,
      0,
      0,
      0,
      1
    ) : this.set(
      1,
      0,
      0,
      e,
      0,
      1,
      0,
      n,
      0,
      0,
      1,
      i,
      0,
      0,
      0,
      1
    ), this;
  }
  /**
   * Sets this matrix as a rotational transformation around the X axis by
   * the given angle.
   *
   * @param {number} theta - The rotation in radians.
   * @return {Matrix4} A reference to this matrix.
   */
  makeRotationX(e) {
    const n = Math.cos(e), i = Math.sin(e);
    return this.set(
      1,
      0,
      0,
      0,
      0,
      n,
      -i,
      0,
      0,
      i,
      n,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  /**
   * Sets this matrix as a rotational transformation around the Y axis by
   * the given angle.
   *
   * @param {number} theta - The rotation in radians.
   * @return {Matrix4} A reference to this matrix.
   */
  makeRotationY(e) {
    const n = Math.cos(e), i = Math.sin(e);
    return this.set(
      n,
      0,
      i,
      0,
      0,
      1,
      0,
      0,
      -i,
      0,
      n,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  /**
   * Sets this matrix as a rotational transformation around the Z axis by
   * the given angle.
   *
   * @param {number} theta - The rotation in radians.
   * @return {Matrix4} A reference to this matrix.
   */
  makeRotationZ(e) {
    const n = Math.cos(e), i = Math.sin(e);
    return this.set(
      n,
      -i,
      0,
      0,
      i,
      n,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  /**
   * Sets this matrix as a rotational transformation around the given axis by
   * the given angle.
   *
   * This is a somewhat controversial but mathematically sound alternative to
   * rotating via Quaternions. See the discussion [here]{@link https://www.gamedev.net/articles/programming/math-and-physics/do-we-really-need-quaternions-r1199}.
   *
   * @param {Vector3} axis - The normalized rotation axis.
   * @param {number} angle - The rotation in radians.
   * @return {Matrix4} A reference to this matrix.
   */
  makeRotationAxis(e, n) {
    const i = Math.cos(n), r = Math.sin(n), c = 1 - i, h = e.x, d = e.y, v = e.z, g = c * h, S = c * d;
    return this.set(
      g * h + i,
      g * d - r * v,
      g * v + r * d,
      0,
      g * d + r * v,
      S * d + i,
      S * v - r * h,
      0,
      g * v - r * d,
      S * v + r * h,
      c * v * v + i,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  /**
   * Sets this matrix as a scale transformation.
   *
   * @param {number} x - The amount to scale in the X axis.
   * @param {number} y - The amount to scale in the Y axis.
   * @param {number} z - The amount to scale in the Z axis.
   * @return {Matrix4} A reference to this matrix.
   */
  makeScale(e, n, i) {
    return this.set(
      e,
      0,
      0,
      0,
      0,
      n,
      0,
      0,
      0,
      0,
      i,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  /**
   * Sets this matrix as a shear transformation.
   *
   * @param {number} xy - The amount to shear X by Y.
   * @param {number} xz - The amount to shear X by Z.
   * @param {number} yx - The amount to shear Y by X.
   * @param {number} yz - The amount to shear Y by Z.
   * @param {number} zx - The amount to shear Z by X.
   * @param {number} zy - The amount to shear Z by Y.
   * @return {Matrix4} A reference to this matrix.
   */
  makeShear(e, n, i, r, c, h) {
    return this.set(
      1,
      i,
      c,
      0,
      e,
      1,
      h,
      0,
      n,
      r,
      1,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  /**
   * Sets this matrix to the transformation composed of the given position,
   * rotation (Quaternion) and scale.
   *
   * @param {Vector3} position - The position vector.
   * @param {Quaternion} quaternion - The rotation as a Quaternion.
   * @param {Vector3} scale - The scale vector.
   * @return {Matrix4} A reference to this matrix.
   */
  compose(e, n, i) {
    const r = this.elements, c = n._x, h = n._y, d = n._z, v = n._w, g = c + c, S = h + h, x = d + d, M = c * g, b = c * S, R = c * x, w = h * S, C = h * x, E = d * x, U = v * g, N = v * S, O = v * x, I = i.x, V = i.y, Y = i.z;
    return r[0] = (1 - (w + E)) * I, r[1] = (b + O) * I, r[2] = (R - N) * I, r[3] = 0, r[4] = (b - O) * V, r[5] = (1 - (M + E)) * V, r[6] = (C + U) * V, r[7] = 0, r[8] = (R + N) * Y, r[9] = (C - U) * Y, r[10] = (1 - (M + w)) * Y, r[11] = 0, r[12] = e.x, r[13] = e.y, r[14] = e.z, r[15] = 1, this;
  }
  /**
   * Decomposes this matrix into its position, rotation and scale components
   * and provides the result in the given objects.
   *
   * Note: Not all matrices are decomposable in this way. For example, if an
   * object has a non-uniformly scaled parent, then the object's world matrix
   * may not be decomposable, and this method may not be appropriate.
   *
   * @param {Vector3} position - The position vector.
   * @param {Quaternion} quaternion - The rotation as a Quaternion.
   * @param {Vector3} scale - The scale vector.
   * @return {Matrix4} A reference to this matrix.
   */
  decompose(e, n, i) {
    const r = this.elements;
    let c = dh.set(r[0], r[1], r[2]).length();
    const h = dh.set(r[4], r[5], r[6]).length(), d = dh.set(r[8], r[9], r[10]).length();
    this.determinant() < 0 && (c = -c), e.x = r[12], e.y = r[13], e.z = r[14], Gr.copy(this);
    const g = 1 / c, S = 1 / h, x = 1 / d;
    return Gr.elements[0] *= g, Gr.elements[1] *= g, Gr.elements[2] *= g, Gr.elements[4] *= S, Gr.elements[5] *= S, Gr.elements[6] *= S, Gr.elements[8] *= x, Gr.elements[9] *= x, Gr.elements[10] *= x, n.setFromRotationMatrix(Gr), i.x = c, i.y = h, i.z = d, this;
  }
  /**
  	 * Creates a perspective projection matrix. This is used internally by
  	 * {@link PerspectiveCamera#updateProjectionMatrix}.
  
  	 * @param {number} left - Left boundary of the viewing frustum at the near plane.
  	 * @param {number} right - Right boundary of the viewing frustum at the near plane.
  	 * @param {number} top - Top boundary of the viewing frustum at the near plane.
  	 * @param {number} bottom - Bottom boundary of the viewing frustum at the near plane.
  	 * @param {number} near - The distance from the camera to the near plane.
  	 * @param {number} far - The distance from the camera to the far plane.
  	 * @param {(WebGLCoordinateSystem|WebGPUCoordinateSystem)} [coordinateSystem=WebGLCoordinateSystem] - The coordinate system.
  	 * @param {boolean} [reversedDepth=false] - Whether to use a reversed depth.
  	 * @return {Matrix4} A reference to this matrix.
  	 */
  makePerspective(e, n, i, r, c, h, d = Gs, v = !1) {
    const g = this.elements, S = 2 * c / (n - e), x = 2 * c / (i - r), M = (n + e) / (n - e), b = (i + r) / (i - r);
    let R, w;
    if (v)
      R = c / (h - c), w = h * c / (h - c);
    else if (d === Gs)
      R = -(h + c) / (h - c), w = -2 * h * c / (h - c);
    else if (d === Fh)
      R = -h / (h - c), w = -h * c / (h - c);
    else
      throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: " + d);
    return g[0] = S, g[4] = 0, g[8] = M, g[12] = 0, g[1] = 0, g[5] = x, g[9] = b, g[13] = 0, g[2] = 0, g[6] = 0, g[10] = R, g[14] = w, g[3] = 0, g[7] = 0, g[11] = -1, g[15] = 0, this;
  }
  /**
  	 * Creates a orthographic projection matrix. This is used internally by
  	 * {@link OrthographicCamera#updateProjectionMatrix}.
  
  	 * @param {number} left - Left boundary of the viewing frustum at the near plane.
  	 * @param {number} right - Right boundary of the viewing frustum at the near plane.
  	 * @param {number} top - Top boundary of the viewing frustum at the near plane.
  	 * @param {number} bottom - Bottom boundary of the viewing frustum at the near plane.
  	 * @param {number} near - The distance from the camera to the near plane.
  	 * @param {number} far - The distance from the camera to the far plane.
  	 * @param {(WebGLCoordinateSystem|WebGPUCoordinateSystem)} [coordinateSystem=WebGLCoordinateSystem] - The coordinate system.
  	 * @param {boolean} [reversedDepth=false] - Whether to use a reversed depth.
  	 * @return {Matrix4} A reference to this matrix.
  	 */
  makeOrthographic(e, n, i, r, c, h, d = Gs, v = !1) {
    const g = this.elements, S = 2 / (n - e), x = 2 / (i - r), M = -(n + e) / (n - e), b = -(i + r) / (i - r);
    let R, w;
    if (v)
      R = 1 / (h - c), w = h / (h - c);
    else if (d === Gs)
      R = -2 / (h - c), w = -(h + c) / (h - c);
    else if (d === Fh)
      R = -1 / (h - c), w = -c / (h - c);
    else
      throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: " + d);
    return g[0] = S, g[4] = 0, g[8] = 0, g[12] = M, g[1] = 0, g[5] = x, g[9] = 0, g[13] = b, g[2] = 0, g[6] = 0, g[10] = R, g[14] = w, g[3] = 0, g[7] = 0, g[11] = 0, g[15] = 1, this;
  }
  /**
   * Returns `true` if this matrix is equal with the given one.
   *
   * @param {Matrix4} matrix - The matrix to test for equality.
   * @return {boolean} Whether this matrix is equal with the given one.
   */
  equals(e) {
    const n = this.elements, i = e.elements;
    for (let r = 0; r < 16; r++)
      if (n[r] !== i[r]) return !1;
    return !0;
  }
  /**
   * Sets the elements of the matrix from the given array.
   *
   * @param {Array<number>} array - The matrix elements in column-major order.
   * @param {number} [offset=0] - Index of the first element in the array.
   * @return {Matrix4} A reference to this matrix.
   */
  fromArray(e, n = 0) {
    for (let i = 0; i < 16; i++)
      this.elements[i] = e[i + n];
    return this;
  }
  /**
   * Writes the elements of this matrix to the given array. If no array is provided,
   * the method returns a new instance.
   *
   * @param {Array<number>} [array=[]] - The target array holding the matrix elements in column-major order.
   * @param {number} [offset=0] - Index of the first element in the array.
   * @return {Array<number>} The matrix elements in column-major order.
   */
  toArray(e = [], n = 0) {
    const i = this.elements;
    return e[n] = i[0], e[n + 1] = i[1], e[n + 2] = i[2], e[n + 3] = i[3], e[n + 4] = i[4], e[n + 5] = i[5], e[n + 6] = i[6], e[n + 7] = i[7], e[n + 8] = i[8], e[n + 9] = i[9], e[n + 10] = i[10], e[n + 11] = i[11], e[n + 12] = i[12], e[n + 13] = i[13], e[n + 14] = i[14], e[n + 15] = i[15], e;
  }
}
const dh = /* @__PURE__ */ new j(), Gr = /* @__PURE__ */ new Ft(), yC = /* @__PURE__ */ new j(0, 0, 0), _C = /* @__PURE__ */ new j(1, 1, 1), yc = /* @__PURE__ */ new j(), tg = /* @__PURE__ */ new j(), Hs = /* @__PURE__ */ new j(), D1 = /* @__PURE__ */ new Ft(), U1 = /* @__PURE__ */ new Es();
class Xs {
  /**
   * Constructs a new euler instance.
   *
   * @param {number} [x=0] - The angle of the x axis in radians.
   * @param {number} [y=0] - The angle of the y axis in radians.
   * @param {number} [z=0] - The angle of the z axis in radians.
   * @param {string} [order=Euler.DEFAULT_ORDER] - A string representing the order that the rotations are applied.
   */
  constructor(e = 0, n = 0, i = 0, r = Xs.DEFAULT_ORDER) {
    this.isEuler = !0, this._x = e, this._y = n, this._z = i, this._order = r;
  }
  /**
   * The angle of the x axis in radians.
   *
   * @type {number}
   * @default 0
   */
  get x() {
    return this._x;
  }
  set x(e) {
    this._x = e, this._onChangeCallback();
  }
  /**
   * The angle of the y axis in radians.
   *
   * @type {number}
   * @default 0
   */
  get y() {
    return this._y;
  }
  set y(e) {
    this._y = e, this._onChangeCallback();
  }
  /**
   * The angle of the z axis in radians.
   *
   * @type {number}
   * @default 0
   */
  get z() {
    return this._z;
  }
  set z(e) {
    this._z = e, this._onChangeCallback();
  }
  /**
   * A string representing the order that the rotations are applied.
   *
   * @type {string}
   * @default 'XYZ'
   */
  get order() {
    return this._order;
  }
  set order(e) {
    this._order = e, this._onChangeCallback();
  }
  /**
   * Sets the Euler components.
   *
   * @param {number} x - The angle of the x axis in radians.
   * @param {number} y - The angle of the y axis in radians.
   * @param {number} z - The angle of the z axis in radians.
   * @param {string} [order] - A string representing the order that the rotations are applied.
   * @return {Euler} A reference to this Euler instance.
   */
  set(e, n, i, r = this._order) {
    return this._x = e, this._y = n, this._z = i, this._order = r, this._onChangeCallback(), this;
  }
  /**
   * Returns a new Euler instance with copied values from this instance.
   *
   * @return {Euler} A clone of this instance.
   */
  clone() {
    return new this.constructor(this._x, this._y, this._z, this._order);
  }
  /**
   * Copies the values of the given Euler instance to this instance.
   *
   * @param {Euler} euler - The Euler instance to copy.
   * @return {Euler} A reference to this Euler instance.
   */
  copy(e) {
    return this._x = e._x, this._y = e._y, this._z = e._z, this._order = e._order, this._onChangeCallback(), this;
  }
  /**
   * Sets the angles of this Euler instance from a pure rotation matrix.
   *
   * @param {Matrix4} m - A 4x4 matrix of which the upper 3x3 of matrix is a pure rotation matrix (i.e. unscaled).
   * @param {string} [order] - A string representing the order that the rotations are applied.
   * @param {boolean} [update=true] - Whether the internal `onChange` callback should be executed or not.
   * @return {Euler} A reference to this Euler instance.
   */
  setFromRotationMatrix(e, n = this._order, i = !0) {
    const r = e.elements, c = r[0], h = r[4], d = r[8], v = r[1], g = r[5], S = r[9], x = r[2], M = r[6], b = r[10];
    switch (n) {
      case "XYZ":
        this._y = Math.asin(Vt(d, -1, 1)), Math.abs(d) < 0.9999999 ? (this._x = Math.atan2(-S, b), this._z = Math.atan2(-h, c)) : (this._x = Math.atan2(M, g), this._z = 0);
        break;
      case "YXZ":
        this._x = Math.asin(-Vt(S, -1, 1)), Math.abs(S) < 0.9999999 ? (this._y = Math.atan2(d, b), this._z = Math.atan2(v, g)) : (this._y = Math.atan2(-x, c), this._z = 0);
        break;
      case "ZXY":
        this._x = Math.asin(Vt(M, -1, 1)), Math.abs(M) < 0.9999999 ? (this._y = Math.atan2(-x, b), this._z = Math.atan2(-h, g)) : (this._y = 0, this._z = Math.atan2(v, c));
        break;
      case "ZYX":
        this._y = Math.asin(-Vt(x, -1, 1)), Math.abs(x) < 0.9999999 ? (this._x = Math.atan2(M, b), this._z = Math.atan2(v, c)) : (this._x = 0, this._z = Math.atan2(-h, g));
        break;
      case "YZX":
        this._z = Math.asin(Vt(v, -1, 1)), Math.abs(v) < 0.9999999 ? (this._x = Math.atan2(-S, g), this._y = Math.atan2(-x, c)) : (this._x = 0, this._y = Math.atan2(d, b));
        break;
      case "XZY":
        this._z = Math.asin(-Vt(h, -1, 1)), Math.abs(h) < 0.9999999 ? (this._x = Math.atan2(M, g), this._y = Math.atan2(d, c)) : (this._x = Math.atan2(-S, b), this._y = 0);
        break;
      default:
        console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " + n);
    }
    return this._order = n, i === !0 && this._onChangeCallback(), this;
  }
  /**
   * Sets the angles of this Euler instance from a normalized quaternion.
   *
   * @param {Quaternion} q - A normalized Quaternion.
   * @param {string} [order] - A string representing the order that the rotations are applied.
   * @param {boolean} [update=true] - Whether the internal `onChange` callback should be executed or not.
   * @return {Euler} A reference to this Euler instance.
   */
  setFromQuaternion(e, n, i) {
    return D1.makeRotationFromQuaternion(e), this.setFromRotationMatrix(D1, n, i);
  }
  /**
   * Sets the angles of this Euler instance from the given vector.
   *
   * @param {Vector3} v - The vector.
   * @param {string} [order] - A string representing the order that the rotations are applied.
   * @return {Euler} A reference to this Euler instance.
   */
  setFromVector3(e, n = this._order) {
    return this.set(e.x, e.y, e.z, n);
  }
  /**
   * Resets the euler angle with a new order by creating a quaternion from this
   * euler angle and then setting this euler angle with the quaternion and the
   * new order.
   *
   * Warning: This discards revolution information.
   *
   * @param {string} [newOrder] - A string representing the new order that the rotations are applied.
   * @return {Euler} A reference to this Euler instance.
   */
  reorder(e) {
    return U1.setFromEuler(this), this.setFromQuaternion(U1, e);
  }
  /**
   * Returns `true` if this Euler instance is equal with the given one.
   *
   * @param {Euler} euler - The Euler instance to test for equality.
   * @return {boolean} Whether this Euler instance is equal with the given one.
   */
  equals(e) {
    return e._x === this._x && e._y === this._y && e._z === this._z && e._order === this._order;
  }
  /**
   * Sets this Euler instance's components to values from the given array. The first three
   * entries of the array are assign to the x,y and z components. An optional fourth entry
   * defines the Euler order.
   *
   * @param {Array<number,number,number,?string>} array - An array holding the Euler component values.
   * @return {Euler} A reference to this Euler instance.
   */
  fromArray(e) {
    return this._x = e[0], this._y = e[1], this._z = e[2], e[3] !== void 0 && (this._order = e[3]), this._onChangeCallback(), this;
  }
  /**
   * Writes the components of this Euler instance to the given array. If no array is provided,
   * the method returns a new instance.
   *
   * @param {Array<number,number,number,string>} [array=[]] - The target array holding the Euler components.
   * @param {number} [offset=0] - Index of the first element in the array.
   * @return {Array<number,number,number,string>} The Euler components.
   */
  toArray(e = [], n = 0) {
    return e[n] = this._x, e[n + 1] = this._y, e[n + 2] = this._z, e[n + 3] = this._order, e;
  }
  _onChange(e) {
    return this._onChangeCallback = e, this;
  }
  _onChangeCallback() {
  }
  *[Symbol.iterator]() {
    yield this._x, yield this._y, yield this._z, yield this._order;
  }
}
Xs.DEFAULT_ORDER = "XYZ";
class qh {
  /**
   * Constructs a new layers instance, with membership
   * initially set to layer `0`.
   */
  constructor() {
    this.mask = 1;
  }
  /**
   * Sets membership to the given layer, and remove membership all other layers.
   *
   * @param {number} layer - The layer to set.
   */
  set(e) {
    this.mask = (1 << e | 0) >>> 0;
  }
  /**
   * Adds membership of the given layer.
   *
   * @param {number} layer - The layer to enable.
   */
  enable(e) {
    this.mask |= 1 << e | 0;
  }
  /**
   * Adds membership to all layers.
   */
  enableAll() {
    this.mask = -1;
  }
  /**
   * Toggles the membership of the given layer.
   *
   * @param {number} layer - The layer to toggle.
   */
  toggle(e) {
    this.mask ^= 1 << e | 0;
  }
  /**
   * Removes membership of the given layer.
   *
   * @param {number} layer - The layer to enable.
   */
  disable(e) {
    this.mask &= ~(1 << e | 0);
  }
  /**
   * Removes the membership from all layers.
   */
  disableAll() {
    this.mask = 0;
  }
  /**
   * Returns `true` if this and the given layers object have at least one
   * layer in common.
   *
   * @param {Layers} layers - The layers to test.
   * @return {boolean } Whether this and the given layers object have at least one layer in common or not.
   */
  test(e) {
    return (this.mask & e.mask) !== 0;
  }
  /**
   * Returns `true` if the given layer is enabled.
   *
   * @param {number} layer - The layer to test.
   * @return {boolean } Whether the given layer is enabled or not.
   */
  isEnabled(e) {
    return (this.mask & (1 << e | 0)) !== 0;
  }
}
let SC = 0;
const N1 = /* @__PURE__ */ new j(), ph = /* @__PURE__ */ new Es(), pl = /* @__PURE__ */ new Ft(), ng = /* @__PURE__ */ new j(), _p = /* @__PURE__ */ new j(), xC = /* @__PURE__ */ new j(), MC = /* @__PURE__ */ new Es(), O1 = /* @__PURE__ */ new j(1, 0, 0), L1 = /* @__PURE__ */ new j(0, 1, 0), z1 = /* @__PURE__ */ new j(0, 0, 1), B1 = { type: "added" }, bC = { type: "removed" }, mh = { type: "childadded", child: null }, v_ = { type: "childremoved", child: null };
class Mn extends qs {
  /**
   * Constructs a new 3D object.
   */
  constructor() {
    super(), this.isObject3D = !0, Object.defineProperty(this, "id", { value: SC++ }), this.uuid = Fs(), this.name = "", this.type = "Object3D", this.parent = null, this.children = [], this.up = Mn.DEFAULT_UP.clone();
    const e = new j(), n = new Xs(), i = new Es(), r = new j(1, 1, 1);
    function c() {
      i.setFromEuler(n, !1);
    }
    function h() {
      n.setFromQuaternion(i, void 0, !1);
    }
    n._onChange(c), i._onChange(h), Object.defineProperties(this, {
      /**
       * Represents the object's local position.
       *
       * @name Object3D#position
       * @type {Vector3}
       * @default (0,0,0)
       */
      position: {
        configurable: !0,
        enumerable: !0,
        value: e
      },
      /**
       * Represents the object's local rotation as Euler angles, in radians.
       *
       * @name Object3D#rotation
       * @type {Euler}
       * @default (0,0,0)
       */
      rotation: {
        configurable: !0,
        enumerable: !0,
        value: n
      },
      /**
       * Represents the object's local rotation as Quaternions.
       *
       * @name Object3D#quaternion
       * @type {Quaternion}
       */
      quaternion: {
        configurable: !0,
        enumerable: !0,
        value: i
      },
      /**
       * Represents the object's local scale.
       *
       * @name Object3D#scale
       * @type {Vector3}
       * @default (1,1,1)
       */
      scale: {
        configurable: !0,
        enumerable: !0,
        value: r
      },
      /**
       * Represents the object's model-view matrix.
       *
       * @name Object3D#modelViewMatrix
       * @type {Matrix4}
       */
      modelViewMatrix: {
        value: new Ft()
      },
      /**
       * Represents the object's normal matrix.
       *
       * @name Object3D#normalMatrix
       * @type {Matrix3}
       */
      normalMatrix: {
        value: new Qt()
      }
    }), this.matrix = new Ft(), this.matrixWorld = new Ft(), this.matrixAutoUpdate = Mn.DEFAULT_MATRIX_AUTO_UPDATE, this.matrixWorldAutoUpdate = Mn.DEFAULT_MATRIX_WORLD_AUTO_UPDATE, this.matrixWorldNeedsUpdate = !1, this.layers = new qh(), this.visible = !0, this.castShadow = !1, this.receiveShadow = !1, this.frustumCulled = !0, this.renderOrder = 0, this.animations = [], this.customDepthMaterial = void 0, this.customDistanceMaterial = void 0, this.userData = {};
  }
  /**
   * A callback that is executed immediately before a 3D object is rendered to a shadow map.
   *
   * @param {Renderer|WebGLRenderer} renderer - The renderer.
   * @param {Object3D} object - The 3D object.
   * @param {Camera} camera - The camera that is used to render the scene.
   * @param {Camera} shadowCamera - The shadow camera.
   * @param {BufferGeometry} geometry - The 3D object's geometry.
   * @param {Material} depthMaterial - The depth material.
   * @param {Object} group - The geometry group data.
   */
  onBeforeShadow() {
  }
  /**
   * A callback that is executed immediately after a 3D object is rendered to a shadow map.
   *
   * @param {Renderer|WebGLRenderer} renderer - The renderer.
   * @param {Object3D} object - The 3D object.
   * @param {Camera} camera - The camera that is used to render the scene.
   * @param {Camera} shadowCamera - The shadow camera.
   * @param {BufferGeometry} geometry - The 3D object's geometry.
   * @param {Material} depthMaterial - The depth material.
   * @param {Object} group - The geometry group data.
   */
  onAfterShadow() {
  }
  /**
   * A callback that is executed immediately before a 3D object is rendered.
   *
   * @param {Renderer|WebGLRenderer} renderer - The renderer.
   * @param {Object3D} object - The 3D object.
   * @param {Camera} camera - The camera that is used to render the scene.
   * @param {BufferGeometry} geometry - The 3D object's geometry.
   * @param {Material} material - The 3D object's material.
   * @param {Object} group - The geometry group data.
   */
  onBeforeRender() {
  }
  /**
   * A callback that is executed immediately after a 3D object is rendered.
   *
   * @param {Renderer|WebGLRenderer} renderer - The renderer.
   * @param {Object3D} object - The 3D object.
   * @param {Camera} camera - The camera that is used to render the scene.
   * @param {BufferGeometry} geometry - The 3D object's geometry.
   * @param {Material} material - The 3D object's material.
   * @param {Object} group - The geometry group data.
   */
  onAfterRender() {
  }
  /**
   * Applies the given transformation matrix to the object and updates the object's position,
   * rotation and scale.
   *
   * @param {Matrix4} matrix - The transformation matrix.
   */
  applyMatrix4(e) {
    this.matrixAutoUpdate && this.updateMatrix(), this.matrix.premultiply(e), this.matrix.decompose(this.position, this.quaternion, this.scale);
  }
  /**
   * Applies a rotation represented by given the quaternion to the 3D object.
   *
   * @param {Quaternion} q - The quaternion.
   * @return {Object3D} A reference to this instance.
   */
  applyQuaternion(e) {
    return this.quaternion.premultiply(e), this;
  }
  /**
   * Sets the given rotation represented as an axis/angle couple to the 3D object.
   *
   * @param {Vector3} axis - The (normalized) axis vector.
   * @param {number} angle - The angle in radians.
   */
  setRotationFromAxisAngle(e, n) {
    this.quaternion.setFromAxisAngle(e, n);
  }
  /**
   * Sets the given rotation represented as Euler angles to the 3D object.
   *
   * @param {Euler} euler - The Euler angles.
   */
  setRotationFromEuler(e) {
    this.quaternion.setFromEuler(e, !0);
  }
  /**
   * Sets the given rotation represented as rotation matrix to the 3D object.
   *
   * @param {Matrix4} m - Although a 4x4 matrix is expected, the upper 3x3 portion must be
   * a pure rotation matrix (i.e, unscaled).
   */
  setRotationFromMatrix(e) {
    this.quaternion.setFromRotationMatrix(e);
  }
  /**
   * Sets the given rotation represented as a Quaternion to the 3D object.
   *
   * @param {Quaternion} q - The Quaternion
   */
  setRotationFromQuaternion(e) {
    this.quaternion.copy(e);
  }
  /**
   * Rotates the 3D object along an axis in local space.
   *
   * @param {Vector3} axis - The (normalized) axis vector.
   * @param {number} angle - The angle in radians.
   * @return {Object3D} A reference to this instance.
   */
  rotateOnAxis(e, n) {
    return ph.setFromAxisAngle(e, n), this.quaternion.multiply(ph), this;
  }
  /**
   * Rotates the 3D object along an axis in world space.
   *
   * @param {Vector3} axis - The (normalized) axis vector.
   * @param {number} angle - The angle in radians.
   * @return {Object3D} A reference to this instance.
   */
  rotateOnWorldAxis(e, n) {
    return ph.setFromAxisAngle(e, n), this.quaternion.premultiply(ph), this;
  }
  /**
   * Rotates the 3D object around its X axis in local space.
   *
   * @param {number} angle - The angle in radians.
   * @return {Object3D} A reference to this instance.
   */
  rotateX(e) {
    return this.rotateOnAxis(O1, e);
  }
  /**
   * Rotates the 3D object around its Y axis in local space.
   *
   * @param {number} angle - The angle in radians.
   * @return {Object3D} A reference to this instance.
   */
  rotateY(e) {
    return this.rotateOnAxis(L1, e);
  }
  /**
   * Rotates the 3D object around its Z axis in local space.
   *
   * @param {number} angle - The angle in radians.
   * @return {Object3D} A reference to this instance.
   */
  rotateZ(e) {
    return this.rotateOnAxis(z1, e);
  }
  /**
   * Translate the 3D object by a distance along the given axis in local space.
   *
   * @param {Vector3} axis - The (normalized) axis vector.
   * @param {number} distance - The distance in world units.
   * @return {Object3D} A reference to this instance.
   */
  translateOnAxis(e, n) {
    return N1.copy(e).applyQuaternion(this.quaternion), this.position.add(N1.multiplyScalar(n)), this;
  }
  /**
   * Translate the 3D object by a distance along its X-axis in local space.
   *
   * @param {number} distance - The distance in world units.
   * @return {Object3D} A reference to this instance.
   */
  translateX(e) {
    return this.translateOnAxis(O1, e);
  }
  /**
   * Translate the 3D object by a distance along its Y-axis in local space.
   *
   * @param {number} distance - The distance in world units.
   * @return {Object3D} A reference to this instance.
   */
  translateY(e) {
    return this.translateOnAxis(L1, e);
  }
  /**
   * Translate the 3D object by a distance along its Z-axis in local space.
   *
   * @param {number} distance - The distance in world units.
   * @return {Object3D} A reference to this instance.
   */
  translateZ(e) {
    return this.translateOnAxis(z1, e);
  }
  /**
   * Converts the given vector from this 3D object's local space to world space.
   *
   * @param {Vector3} vector - The vector to convert.
   * @return {Vector3} The converted vector.
   */
  localToWorld(e) {
    return this.updateWorldMatrix(!0, !1), e.applyMatrix4(this.matrixWorld);
  }
  /**
   * Converts the given vector from this 3D object's word space to local space.
   *
   * @param {Vector3} vector - The vector to convert.
   * @return {Vector3} The converted vector.
   */
  worldToLocal(e) {
    return this.updateWorldMatrix(!0, !1), e.applyMatrix4(pl.copy(this.matrixWorld).invert());
  }
  /**
   * Rotates the object to face a point in world space.
   *
   * This method does not support objects having non-uniformly-scaled parent(s).
   *
   * @param {number|Vector3} x - The x coordinate in world space. Alternatively, a vector representing a position in world space
   * @param {number} [y] - The y coordinate in world space.
   * @param {number} [z] - The z coordinate in world space.
   */
  lookAt(e, n, i) {
    e.isVector3 ? ng.copy(e) : ng.set(e, n, i);
    const r = this.parent;
    this.updateWorldMatrix(!0, !1), _p.setFromMatrixPosition(this.matrixWorld), this.isCamera || this.isLight ? pl.lookAt(_p, ng, this.up) : pl.lookAt(ng, _p, this.up), this.quaternion.setFromRotationMatrix(pl), r && (pl.extractRotation(r.matrixWorld), ph.setFromRotationMatrix(pl), this.quaternion.premultiply(ph.invert()));
  }
  /**
   * Adds the given 3D object as a child to this 3D object. An arbitrary number of
   * objects may be added. Any current parent on an object passed in here will be
   * removed, since an object can have at most one parent.
   *
   * @fires Object3D#added
   * @fires Object3D#childadded
   * @param {Object3D} object - The 3D object to add.
   * @return {Object3D} A reference to this instance.
   */
  add(e) {
    if (arguments.length > 1) {
      for (let n = 0; n < arguments.length; n++)
        this.add(arguments[n]);
      return this;
    }
    return e === this ? (console.error("THREE.Object3D.add: object can't be added as a child of itself.", e), this) : (e && e.isObject3D ? (e.removeFromParent(), e.parent = this, this.children.push(e), e.dispatchEvent(B1), mh.child = e, this.dispatchEvent(mh), mh.child = null) : console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", e), this);
  }
  /**
   * Removes the given 3D object as child from this 3D object.
   * An arbitrary number of objects may be removed.
   *
   * @fires Object3D#removed
   * @fires Object3D#childremoved
   * @param {Object3D} object - The 3D object to remove.
   * @return {Object3D} A reference to this instance.
   */
  remove(e) {
    if (arguments.length > 1) {
      for (let i = 0; i < arguments.length; i++)
        this.remove(arguments[i]);
      return this;
    }
    const n = this.children.indexOf(e);
    return n !== -1 && (e.parent = null, this.children.splice(n, 1), e.dispatchEvent(bC), v_.child = e, this.dispatchEvent(v_), v_.child = null), this;
  }
  /**
   * Removes this 3D object from its current parent.
   *
   * @fires Object3D#removed
   * @fires Object3D#childremoved
   * @return {Object3D} A reference to this instance.
   */
  removeFromParent() {
    const e = this.parent;
    return e !== null && e.remove(this), this;
  }
  /**
   * Removes all child objects.
   *
   * @fires Object3D#removed
   * @fires Object3D#childremoved
   * @return {Object3D} A reference to this instance.
   */
  clear() {
    return this.remove(...this.children);
  }
  /**
   * Adds the given 3D object as a child of this 3D object, while maintaining the object's world
   * transform. This method does not support scene graphs having non-uniformly-scaled nodes(s).
   *
   * @fires Object3D#added
   * @fires Object3D#childadded
   * @param {Object3D} object - The 3D object to attach.
   * @return {Object3D} A reference to this instance.
   */
  attach(e) {
    return this.updateWorldMatrix(!0, !1), pl.copy(this.matrixWorld).invert(), e.parent !== null && (e.parent.updateWorldMatrix(!0, !1), pl.multiply(e.parent.matrixWorld)), e.applyMatrix4(pl), e.removeFromParent(), e.parent = this, this.children.push(e), e.updateWorldMatrix(!1, !0), e.dispatchEvent(B1), mh.child = e, this.dispatchEvent(mh), mh.child = null, this;
  }
  /**
   * Searches through the 3D object and its children, starting with the 3D object
   * itself, and returns the first with a matching ID.
   *
   * @param {number} id - The id.
   * @return {Object3D|undefined} The found 3D object. Returns `undefined` if no 3D object has been found.
   */
  getObjectById(e) {
    return this.getObjectByProperty("id", e);
  }
  /**
   * Searches through the 3D object and its children, starting with the 3D object
   * itself, and returns the first with a matching name.
   *
   * @param {string} name - The name.
   * @return {Object3D|undefined} The found 3D object. Returns `undefined` if no 3D object has been found.
   */
  getObjectByName(e) {
    return this.getObjectByProperty("name", e);
  }
  /**
   * Searches through the 3D object and its children, starting with the 3D object
   * itself, and returns the first with a matching property value.
   *
   * @param {string} name - The name of the property.
   * @param {any} value - The value.
   * @return {Object3D|undefined} The found 3D object. Returns `undefined` if no 3D object has been found.
   */
  getObjectByProperty(e, n) {
    if (this[e] === n) return this;
    for (let i = 0, r = this.children.length; i < r; i++) {
      const h = this.children[i].getObjectByProperty(e, n);
      if (h !== void 0)
        return h;
    }
  }
  /**
   * Searches through the 3D object and its children, starting with the 3D object
   * itself, and returns all 3D objects with a matching property value.
   *
   * @param {string} name - The name of the property.
   * @param {any} value - The value.
   * @param {Array<Object3D>} result - The method stores the result in this array.
   * @return {Array<Object3D>} The found 3D objects.
   */
  getObjectsByProperty(e, n, i = []) {
    this[e] === n && i.push(this);
    const r = this.children;
    for (let c = 0, h = r.length; c < h; c++)
      r[c].getObjectsByProperty(e, n, i);
    return i;
  }
  /**
   * Returns a vector representing the position of the 3D object in world space.
   *
   * @param {Vector3} target - The target vector the result is stored to.
   * @return {Vector3} The 3D object's position in world space.
   */
  getWorldPosition(e) {
    return this.updateWorldMatrix(!0, !1), e.setFromMatrixPosition(this.matrixWorld);
  }
  /**
   * Returns a Quaternion representing the position of the 3D object in world space.
   *
   * @param {Quaternion} target - The target Quaternion the result is stored to.
   * @return {Quaternion} The 3D object's rotation in world space.
   */
  getWorldQuaternion(e) {
    return this.updateWorldMatrix(!0, !1), this.matrixWorld.decompose(_p, e, xC), e;
  }
  /**
   * Returns a vector representing the scale of the 3D object in world space.
   *
   * @param {Vector3} target - The target vector the result is stored to.
   * @return {Vector3} The 3D object's scale in world space.
   */
  getWorldScale(e) {
    return this.updateWorldMatrix(!0, !1), this.matrixWorld.decompose(_p, MC, e), e;
  }
  /**
   * Returns a vector representing the ("look") direction of the 3D object in world space.
   *
   * @param {Vector3} target - The target vector the result is stored to.
   * @return {Vector3} The 3D object's direction in world space.
   */
  getWorldDirection(e) {
    this.updateWorldMatrix(!0, !1);
    const n = this.matrixWorld.elements;
    return e.set(n[8], n[9], n[10]).normalize();
  }
  /**
   * Abstract method to get intersections between a casted ray and this
   * 3D object. Renderable 3D objects such as {@link Mesh}, {@link Line} or {@link Points}
   * implement this method in order to use raycasting.
   *
   * @abstract
   * @param {Raycaster} raycaster - The raycaster.
   * @param {Array<Object>} intersects - An array holding the result of the method.
   */
  raycast() {
  }
  /**
   * Executes the callback on this 3D object and all descendants.
   *
   * Note: Modifying the scene graph inside the callback is discouraged.
   *
   * @param {Function} callback - A callback function that allows to process the current 3D object.
   */
  traverse(e) {
    e(this);
    const n = this.children;
    for (let i = 0, r = n.length; i < r; i++)
      n[i].traverse(e);
  }
  /**
   * Like {@link Object3D#traverse}, but the callback will only be executed for visible 3D objects.
   * Descendants of invisible 3D objects are not traversed.
   *
   * Note: Modifying the scene graph inside the callback is discouraged.
   *
   * @param {Function} callback - A callback function that allows to process the current 3D object.
   */
  traverseVisible(e) {
    if (this.visible === !1) return;
    e(this);
    const n = this.children;
    for (let i = 0, r = n.length; i < r; i++)
      n[i].traverseVisible(e);
  }
  /**
   * Like {@link Object3D#traverse}, but the callback will only be executed for all ancestors.
   *
   * Note: Modifying the scene graph inside the callback is discouraged.
   *
   * @param {Function} callback - A callback function that allows to process the current 3D object.
   */
  traverseAncestors(e) {
    const n = this.parent;
    n !== null && (e(n), n.traverseAncestors(e));
  }
  /**
   * Updates the transformation matrix in local space by computing it from the current
   * position, rotation and scale values.
   */
  updateMatrix() {
    this.matrix.compose(this.position, this.quaternion, this.scale), this.matrixWorldNeedsUpdate = !0;
  }
  /**
   * Updates the transformation matrix in world space of this 3D objects and its descendants.
   *
   * To ensure correct results, this method also recomputes the 3D object's transformation matrix in
   * local space. The computation of the local and world matrix can be controlled with the
   * {@link Object3D#matrixAutoUpdate} and {@link Object3D#matrixWorldAutoUpdate} flags which are both
   * `true` by default.  Set these flags to `false` if you need more control over the update matrix process.
   *
   * @param {boolean} [force=false] - When set to `true`, a recomputation of world matrices is forced even
   * when {@link Object3D#matrixWorldAutoUpdate} is set to `false`.
   */
  updateMatrixWorld(e) {
    this.matrixAutoUpdate && this.updateMatrix(), (this.matrixWorldNeedsUpdate || e) && (this.matrixWorldAutoUpdate === !0 && (this.parent === null ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix)), this.matrixWorldNeedsUpdate = !1, e = !0);
    const n = this.children;
    for (let i = 0, r = n.length; i < r; i++)
      n[i].updateMatrixWorld(e);
  }
  /**
   * An alternative version of {@link Object3D#updateMatrixWorld} with more control over the
   * update of ancestor and descendant nodes.
   *
   * @param {boolean} [updateParents=false] Whether ancestor nodes should be updated or not.
   * @param {boolean} [updateChildren=false] Whether descendant nodes should be updated or not.
   */
  updateWorldMatrix(e, n) {
    const i = this.parent;
    if (e === !0 && i !== null && i.updateWorldMatrix(!0, !1), this.matrixAutoUpdate && this.updateMatrix(), this.matrixWorldAutoUpdate === !0 && (this.parent === null ? this.matrixWorld.copy(this.matrix) : this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix)), n === !0) {
      const r = this.children;
      for (let c = 0, h = r.length; c < h; c++)
        r[c].updateWorldMatrix(!1, !0);
    }
  }
  /**
   * Serializes the 3D object into JSON.
   *
   * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.
   * @return {Object} A JSON object representing the serialized 3D object.
   * @see {@link ObjectLoader#parse}
   */
  toJSON(e) {
    const n = e === void 0 || typeof e == "string", i = {};
    n && (e = {
      geometries: {},
      materials: {},
      textures: {},
      images: {},
      shapes: {},
      skeletons: {},
      animations: {},
      nodes: {}
    }, i.metadata = {
      version: 4.7,
      type: "Object",
      generator: "Object3D.toJSON"
    });
    const r = {};
    r.uuid = this.uuid, r.type = this.type, this.name !== "" && (r.name = this.name), this.castShadow === !0 && (r.castShadow = !0), this.receiveShadow === !0 && (r.receiveShadow = !0), this.visible === !1 && (r.visible = !1), this.frustumCulled === !1 && (r.frustumCulled = !1), this.renderOrder !== 0 && (r.renderOrder = this.renderOrder), Object.keys(this.userData).length > 0 && (r.userData = this.userData), r.layers = this.layers.mask, r.matrix = this.matrix.toArray(), r.up = this.up.toArray(), this.matrixAutoUpdate === !1 && (r.matrixAutoUpdate = !1), this.isInstancedMesh && (r.type = "InstancedMesh", r.count = this.count, r.instanceMatrix = this.instanceMatrix.toJSON(), this.instanceColor !== null && (r.instanceColor = this.instanceColor.toJSON())), this.isBatchedMesh && (r.type = "BatchedMesh", r.perObjectFrustumCulled = this.perObjectFrustumCulled, r.sortObjects = this.sortObjects, r.drawRanges = this._drawRanges, r.reservedRanges = this._reservedRanges, r.geometryInfo = this._geometryInfo.map((d) => ({
      ...d,
      boundingBox: d.boundingBox ? d.boundingBox.toJSON() : void 0,
      boundingSphere: d.boundingSphere ? d.boundingSphere.toJSON() : void 0
    })), r.instanceInfo = this._instanceInfo.map((d) => ({ ...d })), r.availableInstanceIds = this._availableInstanceIds.slice(), r.availableGeometryIds = this._availableGeometryIds.slice(), r.nextIndexStart = this._nextIndexStart, r.nextVertexStart = this._nextVertexStart, r.geometryCount = this._geometryCount, r.maxInstanceCount = this._maxInstanceCount, r.maxVertexCount = this._maxVertexCount, r.maxIndexCount = this._maxIndexCount, r.geometryInitialized = this._geometryInitialized, r.matricesTexture = this._matricesTexture.toJSON(e), r.indirectTexture = this._indirectTexture.toJSON(e), this._colorsTexture !== null && (r.colorsTexture = this._colorsTexture.toJSON(e)), this.boundingSphere !== null && (r.boundingSphere = this.boundingSphere.toJSON()), this.boundingBox !== null && (r.boundingBox = this.boundingBox.toJSON()));
    function c(d, v) {
      return d[v.uuid] === void 0 && (d[v.uuid] = v.toJSON(e)), v.uuid;
    }
    if (this.isScene)
      this.background && (this.background.isColor ? r.background = this.background.toJSON() : this.background.isTexture && (r.background = this.background.toJSON(e).uuid)), this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== !0 && (r.environment = this.environment.toJSON(e).uuid);
    else if (this.isMesh || this.isLine || this.isPoints) {
      r.geometry = c(e.geometries, this.geometry);
      const d = this.geometry.parameters;
      if (d !== void 0 && d.shapes !== void 0) {
        const v = d.shapes;
        if (Array.isArray(v))
          for (let g = 0, S = v.length; g < S; g++) {
            const x = v[g];
            c(e.shapes, x);
          }
        else
          c(e.shapes, v);
      }
    }
    if (this.isSkinnedMesh && (r.bindMode = this.bindMode, r.bindMatrix = this.bindMatrix.toArray(), this.skeleton !== void 0 && (c(e.skeletons, this.skeleton), r.skeleton = this.skeleton.uuid)), this.material !== void 0)
      if (Array.isArray(this.material)) {
        const d = [];
        for (let v = 0, g = this.material.length; v < g; v++)
          d.push(c(e.materials, this.material[v]));
        r.material = d;
      } else
        r.material = c(e.materials, this.material);
    if (this.children.length > 0) {
      r.children = [];
      for (let d = 0; d < this.children.length; d++)
        r.children.push(this.children[d].toJSON(e).object);
    }
    if (this.animations.length > 0) {
      r.animations = [];
      for (let d = 0; d < this.animations.length; d++) {
        const v = this.animations[d];
        r.animations.push(c(e.animations, v));
      }
    }
    if (n) {
      const d = h(e.geometries), v = h(e.materials), g = h(e.textures), S = h(e.images), x = h(e.shapes), M = h(e.skeletons), b = h(e.animations), R = h(e.nodes);
      d.length > 0 && (i.geometries = d), v.length > 0 && (i.materials = v), g.length > 0 && (i.textures = g), S.length > 0 && (i.images = S), x.length > 0 && (i.shapes = x), M.length > 0 && (i.skeletons = M), b.length > 0 && (i.animations = b), R.length > 0 && (i.nodes = R);
    }
    return i.object = r, i;
    function h(d) {
      const v = [];
      for (const g in d) {
        const S = d[g];
        delete S.metadata, v.push(S);
      }
      return v;
    }
  }
  /**
   * Returns a new 3D object with copied values from this instance.
   *
   * @param {boolean} [recursive=true] - When set to `true`, descendants of the 3D object are also cloned.
   * @return {Object3D} A clone of this instance.
   */
  clone(e) {
    return new this.constructor().copy(this, e);
  }
  /**
   * Copies the values of the given 3D object to this instance.
   *
   * @param {Object3D} source - The 3D object to copy.
   * @param {boolean} [recursive=true] - When set to `true`, descendants of the 3D object are cloned.
   * @return {Object3D} A reference to this instance.
   */
  copy(e, n = !0) {
    if (this.name = e.name, this.up.copy(e.up), this.position.copy(e.position), this.rotation.order = e.rotation.order, this.quaternion.copy(e.quaternion), this.scale.copy(e.scale), this.matrix.copy(e.matrix), this.matrixWorld.copy(e.matrixWorld), this.matrixAutoUpdate = e.matrixAutoUpdate, this.matrixWorldAutoUpdate = e.matrixWorldAutoUpdate, this.matrixWorldNeedsUpdate = e.matrixWorldNeedsUpdate, this.layers.mask = e.layers.mask, this.visible = e.visible, this.castShadow = e.castShadow, this.receiveShadow = e.receiveShadow, this.frustumCulled = e.frustumCulled, this.renderOrder = e.renderOrder, this.animations = e.animations.slice(), this.userData = JSON.parse(JSON.stringify(e.userData)), n === !0)
      for (let i = 0; i < e.children.length; i++) {
        const r = e.children[i];
        this.add(r.clone());
      }
    return this;
  }
}
Mn.DEFAULT_UP = /* @__PURE__ */ new j(0, 1, 0);
Mn.DEFAULT_MATRIX_AUTO_UPDATE = !0;
Mn.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = !0;
const Fr = /* @__PURE__ */ new j(), ml = /* @__PURE__ */ new j(), g_ = /* @__PURE__ */ new j(), vl = /* @__PURE__ */ new j(), vh = /* @__PURE__ */ new j(), gh = /* @__PURE__ */ new j(), P1 = /* @__PURE__ */ new j(), y_ = /* @__PURE__ */ new j(), __ = /* @__PURE__ */ new j(), S_ = /* @__PURE__ */ new j(), x_ = /* @__PURE__ */ new xn(), M_ = /* @__PURE__ */ new xn(), b_ = /* @__PURE__ */ new xn();
class bs {
  /**
   * Constructs a new triangle.
   *
   * @param {Vector3} [a=(0,0,0)] - The first corner of the triangle.
   * @param {Vector3} [b=(0,0,0)] - The second corner of the triangle.
   * @param {Vector3} [c=(0,0,0)] - The third corner of the triangle.
   */
  constructor(e = new j(), n = new j(), i = new j()) {
    this.a = e, this.b = n, this.c = i;
  }
  /**
   * Computes the normal vector of a triangle.
   *
   * @param {Vector3} a - The first corner of the triangle.
   * @param {Vector3} b - The second corner of the triangle.
   * @param {Vector3} c - The third corner of the triangle.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The triangle's normal.
   */
  static getNormal(e, n, i, r) {
    r.subVectors(i, n), Fr.subVectors(e, n), r.cross(Fr);
    const c = r.lengthSq();
    return c > 0 ? r.multiplyScalar(1 / Math.sqrt(c)) : r.set(0, 0, 0);
  }
  /**
   * Computes a barycentric coordinates from the given vector.
   * Returns `null` if the triangle is degenerate.
   *
   * @param {Vector3} point - A point in 3D space.
   * @param {Vector3} a - The first corner of the triangle.
   * @param {Vector3} b - The second corner of the triangle.
   * @param {Vector3} c - The third corner of the triangle.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {?Vector3} The barycentric coordinates for the given point
   */
  static getBarycoord(e, n, i, r, c) {
    Fr.subVectors(r, n), ml.subVectors(i, n), g_.subVectors(e, n);
    const h = Fr.dot(Fr), d = Fr.dot(ml), v = Fr.dot(g_), g = ml.dot(ml), S = ml.dot(g_), x = h * g - d * d;
    if (x === 0)
      return c.set(0, 0, 0), null;
    const M = 1 / x, b = (g * v - d * S) * M, R = (h * S - d * v) * M;
    return c.set(1 - b - R, R, b);
  }
  /**
   * Returns `true` if the given point, when projected onto the plane of the
   * triangle, lies within the triangle.
   *
   * @param {Vector3} point - The point in 3D space to test.
   * @param {Vector3} a - The first corner of the triangle.
   * @param {Vector3} b - The second corner of the triangle.
   * @param {Vector3} c - The third corner of the triangle.
   * @return {boolean} Whether the given point, when projected onto the plane of the
   * triangle, lies within the triangle or not.
   */
  static containsPoint(e, n, i, r) {
    return this.getBarycoord(e, n, i, r, vl) === null ? !1 : vl.x >= 0 && vl.y >= 0 && vl.x + vl.y <= 1;
  }
  /**
   * Computes the value barycentrically interpolated for the given point on the
   * triangle. Returns `null` if the triangle is degenerate.
   *
   * @param {Vector3} point - Position of interpolated point.
   * @param {Vector3} p1 - The first corner of the triangle.
   * @param {Vector3} p2 - The second corner of the triangle.
   * @param {Vector3} p3 - The third corner of the triangle.
   * @param {Vector3} v1 - Value to interpolate of first vertex.
   * @param {Vector3} v2 - Value to interpolate of second vertex.
   * @param {Vector3} v3 - Value to interpolate of third vertex.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {?Vector3} The interpolated value.
   */
  static getInterpolation(e, n, i, r, c, h, d, v) {
    return this.getBarycoord(e, n, i, r, vl) === null ? (v.x = 0, v.y = 0, "z" in v && (v.z = 0), "w" in v && (v.w = 0), null) : (v.setScalar(0), v.addScaledVector(c, vl.x), v.addScaledVector(h, vl.y), v.addScaledVector(d, vl.z), v);
  }
  /**
   * Computes the value barycentrically interpolated for the given attribute and indices.
   *
   * @param {BufferAttribute} attr - The attribute to interpolate.
   * @param {number} i1 - Index of first vertex.
   * @param {number} i2 - Index of second vertex.
   * @param {number} i3 - Index of third vertex.
   * @param {Vector3} barycoord - The barycoordinate value to use to interpolate.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The interpolated attribute value.
   */
  static getInterpolatedAttribute(e, n, i, r, c, h) {
    return x_.setScalar(0), M_.setScalar(0), b_.setScalar(0), x_.fromBufferAttribute(e, n), M_.fromBufferAttribute(e, i), b_.fromBufferAttribute(e, r), h.setScalar(0), h.addScaledVector(x_, c.x), h.addScaledVector(M_, c.y), h.addScaledVector(b_, c.z), h;
  }
  /**
   * Returns `true` if the triangle is oriented towards the given direction.
   *
   * @param {Vector3} a - The first corner of the triangle.
   * @param {Vector3} b - The second corner of the triangle.
   * @param {Vector3} c - The third corner of the triangle.
   * @param {Vector3} direction - The (normalized) direction vector.
   * @return {boolean} Whether the triangle is oriented towards the given direction or not.
   */
  static isFrontFacing(e, n, i, r) {
    return Fr.subVectors(i, n), ml.subVectors(e, n), Fr.cross(ml).dot(r) < 0;
  }
  /**
   * Sets the triangle's vertices by copying the given values.
   *
   * @param {Vector3} a - The first corner of the triangle.
   * @param {Vector3} b - The second corner of the triangle.
   * @param {Vector3} c - The third corner of the triangle.
   * @return {Triangle} A reference to this triangle.
   */
  set(e, n, i) {
    return this.a.copy(e), this.b.copy(n), this.c.copy(i), this;
  }
  /**
   * Sets the triangle's vertices by copying the given array values.
   *
   * @param {Array<Vector3>} points - An array with 3D points.
   * @param {number} i0 - The array index representing the first corner of the triangle.
   * @param {number} i1 - The array index representing the second corner of the triangle.
   * @param {number} i2 - The array index representing the third corner of the triangle.
   * @return {Triangle} A reference to this triangle.
   */
  setFromPointsAndIndices(e, n, i, r) {
    return this.a.copy(e[n]), this.b.copy(e[i]), this.c.copy(e[r]), this;
  }
  /**
   * Sets the triangle's vertices by copying the given attribute values.
   *
   * @param {BufferAttribute} attribute - A buffer attribute with 3D points data.
   * @param {number} i0 - The attribute index representing the first corner of the triangle.
   * @param {number} i1 - The attribute index representing the second corner of the triangle.
   * @param {number} i2 - The attribute index representing the third corner of the triangle.
   * @return {Triangle} A reference to this triangle.
   */
  setFromAttributeAndIndices(e, n, i, r) {
    return this.a.fromBufferAttribute(e, n), this.b.fromBufferAttribute(e, i), this.c.fromBufferAttribute(e, r), this;
  }
  /**
   * Returns a new triangle with copied values from this instance.
   *
   * @return {Triangle} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
  /**
   * Copies the values of the given triangle to this instance.
   *
   * @param {Triangle} triangle - The triangle to copy.
   * @return {Triangle} A reference to this triangle.
   */
  copy(e) {
    return this.a.copy(e.a), this.b.copy(e.b), this.c.copy(e.c), this;
  }
  /**
   * Computes the area of the triangle.
   *
   * @return {number} The triangle's area.
   */
  getArea() {
    return Fr.subVectors(this.c, this.b), ml.subVectors(this.a, this.b), Fr.cross(ml).length() * 0.5;
  }
  /**
   * Computes the midpoint of the triangle.
   *
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The triangle's midpoint.
   */
  getMidpoint(e) {
    return e.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
  }
  /**
   * Computes the normal of the triangle.
   *
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The triangle's normal.
   */
  getNormal(e) {
    return bs.getNormal(this.a, this.b, this.c, e);
  }
  /**
   * Computes a plane the triangle lies within.
   *
   * @param {Plane} target - The target vector that is used to store the method's result.
   * @return {Plane} The plane the triangle lies within.
   */
  getPlane(e) {
    return e.setFromCoplanarPoints(this.a, this.b, this.c);
  }
  /**
   * Computes a barycentric coordinates from the given vector.
   * Returns `null` if the triangle is degenerate.
   *
   * @param {Vector3} point - A point in 3D space.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {?Vector3} The barycentric coordinates for the given point
   */
  getBarycoord(e, n) {
    return bs.getBarycoord(e, this.a, this.b, this.c, n);
  }
  /**
   * Computes the value barycentrically interpolated for the given point on the
   * triangle. Returns `null` if the triangle is degenerate.
   *
   * @param {Vector3} point - Position of interpolated point.
   * @param {Vector3} v1 - Value to interpolate of first vertex.
   * @param {Vector3} v2 - Value to interpolate of second vertex.
   * @param {Vector3} v3 - Value to interpolate of third vertex.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {?Vector3} The interpolated value.
   */
  getInterpolation(e, n, i, r, c) {
    return bs.getInterpolation(e, this.a, this.b, this.c, n, i, r, c);
  }
  /**
   * Returns `true` if the given point, when projected onto the plane of the
   * triangle, lies within the triangle.
   *
   * @param {Vector3} point - The point in 3D space to test.
   * @return {boolean} Whether the given point, when projected onto the plane of the
   * triangle, lies within the triangle or not.
   */
  containsPoint(e) {
    return bs.containsPoint(e, this.a, this.b, this.c);
  }
  /**
   * Returns `true` if the triangle is oriented towards the given direction.
   *
   * @param {Vector3} direction - The (normalized) direction vector.
   * @return {boolean} Whether the triangle is oriented towards the given direction or not.
   */
  isFrontFacing(e) {
    return bs.isFrontFacing(this.a, this.b, this.c, e);
  }
  /**
   * Returns `true` if this triangle intersects with the given box.
   *
   * @param {Box3} box - The box to intersect.
   * @return {boolean} Whether this triangle intersects with the given box or not.
   */
  intersectsBox(e) {
    return e.intersectsTriangle(this);
  }
  /**
   * Returns the closest point on the triangle to the given point.
   *
   * @param {Vector3} p - The point to compute the closest point for.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The closest point on the triangle.
   */
  closestPointToPoint(e, n) {
    const i = this.a, r = this.b, c = this.c;
    let h, d;
    vh.subVectors(r, i), gh.subVectors(c, i), y_.subVectors(e, i);
    const v = vh.dot(y_), g = gh.dot(y_);
    if (v <= 0 && g <= 0)
      return n.copy(i);
    __.subVectors(e, r);
    const S = vh.dot(__), x = gh.dot(__);
    if (S >= 0 && x <= S)
      return n.copy(r);
    const M = v * x - S * g;
    if (M <= 0 && v >= 0 && S <= 0)
      return h = v / (v - S), n.copy(i).addScaledVector(vh, h);
    S_.subVectors(e, c);
    const b = vh.dot(S_), R = gh.dot(S_);
    if (R >= 0 && b <= R)
      return n.copy(c);
    const w = b * g - v * R;
    if (w <= 0 && g >= 0 && R <= 0)
      return d = g / (g - R), n.copy(i).addScaledVector(gh, d);
    const C = S * R - b * x;
    if (C <= 0 && x - S >= 0 && b - R >= 0)
      return P1.subVectors(c, r), d = (x - S) / (x - S + (b - R)), n.copy(r).addScaledVector(P1, d);
    const E = 1 / (C + w + M);
    return h = w * E, d = M * E, n.copy(i).addScaledVector(vh, h).addScaledVector(gh, d);
  }
  /**
   * Returns `true` if this triangle is equal with the given one.
   *
   * @param {Triangle} triangle - The triangle to test for equality.
   * @return {boolean} Whether this triangle is equal with the given one.
   */
  equals(e) {
    return e.a.equals(this.a) && e.b.equals(this.b) && e.c.equals(this.c);
  }
}
const EE = {
  aliceblue: 15792383,
  antiquewhite: 16444375,
  aqua: 65535,
  aquamarine: 8388564,
  azure: 15794175,
  beige: 16119260,
  bisque: 16770244,
  black: 0,
  blanchedalmond: 16772045,
  blue: 255,
  blueviolet: 9055202,
  brown: 10824234,
  burlywood: 14596231,
  cadetblue: 6266528,
  chartreuse: 8388352,
  chocolate: 13789470,
  coral: 16744272,
  cornflowerblue: 6591981,
  cornsilk: 16775388,
  crimson: 14423100,
  cyan: 65535,
  darkblue: 139,
  darkcyan: 35723,
  darkgoldenrod: 12092939,
  darkgray: 11119017,
  darkgreen: 25600,
  darkgrey: 11119017,
  darkkhaki: 12433259,
  darkmagenta: 9109643,
  darkolivegreen: 5597999,
  darkorange: 16747520,
  darkorchid: 10040012,
  darkred: 9109504,
  darksalmon: 15308410,
  darkseagreen: 9419919,
  darkslateblue: 4734347,
  darkslategray: 3100495,
  darkslategrey: 3100495,
  darkturquoise: 52945,
  darkviolet: 9699539,
  deeppink: 16716947,
  deepskyblue: 49151,
  dimgray: 6908265,
  dimgrey: 6908265,
  dodgerblue: 2003199,
  firebrick: 11674146,
  floralwhite: 16775920,
  forestgreen: 2263842,
  fuchsia: 16711935,
  gainsboro: 14474460,
  ghostwhite: 16316671,
  gold: 16766720,
  goldenrod: 14329120,
  gray: 8421504,
  green: 32768,
  greenyellow: 11403055,
  grey: 8421504,
  honeydew: 15794160,
  hotpink: 16738740,
  indianred: 13458524,
  indigo: 4915330,
  ivory: 16777200,
  khaki: 15787660,
  lavender: 15132410,
  lavenderblush: 16773365,
  lawngreen: 8190976,
  lemonchiffon: 16775885,
  lightblue: 11393254,
  lightcoral: 15761536,
  lightcyan: 14745599,
  lightgoldenrodyellow: 16448210,
  lightgray: 13882323,
  lightgreen: 9498256,
  lightgrey: 13882323,
  lightpink: 16758465,
  lightsalmon: 16752762,
  lightseagreen: 2142890,
  lightskyblue: 8900346,
  lightslategray: 7833753,
  lightslategrey: 7833753,
  lightsteelblue: 11584734,
  lightyellow: 16777184,
  lime: 65280,
  limegreen: 3329330,
  linen: 16445670,
  magenta: 16711935,
  maroon: 8388608,
  mediumaquamarine: 6737322,
  mediumblue: 205,
  mediumorchid: 12211667,
  mediumpurple: 9662683,
  mediumseagreen: 3978097,
  mediumslateblue: 8087790,
  mediumspringgreen: 64154,
  mediumturquoise: 4772300,
  mediumvioletred: 13047173,
  midnightblue: 1644912,
  mintcream: 16121850,
  mistyrose: 16770273,
  moccasin: 16770229,
  navajowhite: 16768685,
  navy: 128,
  oldlace: 16643558,
  olive: 8421376,
  olivedrab: 7048739,
  orange: 16753920,
  orangered: 16729344,
  orchid: 14315734,
  palegoldenrod: 15657130,
  palegreen: 10025880,
  paleturquoise: 11529966,
  palevioletred: 14381203,
  papayawhip: 16773077,
  peachpuff: 16767673,
  peru: 13468991,
  pink: 16761035,
  plum: 14524637,
  powderblue: 11591910,
  purple: 8388736,
  rebeccapurple: 6697881,
  red: 16711680,
  rosybrown: 12357519,
  royalblue: 4286945,
  saddlebrown: 9127187,
  salmon: 16416882,
  sandybrown: 16032864,
  seagreen: 3050327,
  seashell: 16774638,
  sienna: 10506797,
  silver: 12632256,
  skyblue: 8900331,
  slateblue: 6970061,
  slategray: 7372944,
  slategrey: 7372944,
  snow: 16775930,
  springgreen: 65407,
  steelblue: 4620980,
  tan: 13808780,
  teal: 32896,
  thistle: 14204888,
  tomato: 16737095,
  turquoise: 4251856,
  violet: 15631086,
  wheat: 16113331,
  white: 16777215,
  whitesmoke: 16119285,
  yellow: 16776960,
  yellowgreen: 10145074
}, _c = { h: 0, s: 0, l: 0 }, ig = { h: 0, s: 0, l: 0 };
function E_(s, e, n) {
  return n < 0 && (n += 1), n > 1 && (n -= 1), n < 1 / 6 ? s + (e - s) * 6 * n : n < 1 / 2 ? e : n < 2 / 3 ? s + (e - s) * 6 * (2 / 3 - n) : s;
}
class lt {
  /**
   * Constructs a new color.
   *
   * Note that standard method of specifying color in three.js is with a hexadecimal triplet,
   * and that method is used throughout the rest of the documentation.
   *
   * @param {(number|string|Color)} [r] - The red component of the color. If `g` and `b` are
   * not provided, it can be hexadecimal triplet, a CSS-style string or another `Color` instance.
   * @param {number} [g] - The green component.
   * @param {number} [b] - The blue component.
   */
  constructor(e, n, i) {
    return this.isColor = !0, this.r = 1, this.g = 1, this.b = 1, this.set(e, n, i);
  }
  /**
   * Sets the colors's components from the given values.
   *
   * @param {(number|string|Color)} [r] - The red component of the color. If `g` and `b` are
   * not provided, it can be hexadecimal triplet, a CSS-style string or another `Color` instance.
   * @param {number} [g] - The green component.
   * @param {number} [b] - The blue component.
   * @return {Color} A reference to this color.
   */
  set(e, n, i) {
    if (n === void 0 && i === void 0) {
      const r = e;
      r && r.isColor ? this.copy(r) : typeof r == "number" ? this.setHex(r) : typeof r == "string" && this.setStyle(r);
    } else
      this.setRGB(e, n, i);
    return this;
  }
  /**
   * Sets the colors's components to the given scalar value.
   *
   * @param {number} scalar - The scalar value.
   * @return {Color} A reference to this color.
   */
  setScalar(e) {
    return this.r = e, this.g = e, this.b = e, this;
  }
  /**
   * Sets this color from a hexadecimal value.
   *
   * @param {number} hex - The hexadecimal value.
   * @param {string} [colorSpace=SRGBColorSpace] - The color space.
   * @return {Color} A reference to this color.
   */
  setHex(e, n = ei) {
    return e = Math.floor(e), this.r = (e >> 16 & 255) / 255, this.g = (e >> 8 & 255) / 255, this.b = (e & 255) / 255, vn.colorSpaceToWorking(this, n), this;
  }
  /**
   * Sets this color from RGB values.
   *
   * @param {number} r - Red channel value between `0.0` and `1.0`.
   * @param {number} g - Green channel value between `0.0` and `1.0`.
   * @param {number} b - Blue channel value between `0.0` and `1.0`.
   * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.
   * @return {Color} A reference to this color.
   */
  setRGB(e, n, i, r = vn.workingColorSpace) {
    return this.r = e, this.g = n, this.b = i, vn.colorSpaceToWorking(this, r), this;
  }
  /**
   * Sets this color from RGB values.
   *
   * @param {number} h - Hue value between `0.0` and `1.0`.
   * @param {number} s - Saturation value between `0.0` and `1.0`.
   * @param {number} l - Lightness value between `0.0` and `1.0`.
   * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.
   * @return {Color} A reference to this color.
   */
  setHSL(e, n, i, r = vn.workingColorSpace) {
    if (e = JS(e, 1), n = Vt(n, 0, 1), i = Vt(i, 0, 1), n === 0)
      this.r = this.g = this.b = i;
    else {
      const c = i <= 0.5 ? i * (1 + n) : i + n - i * n, h = 2 * i - c;
      this.r = E_(h, c, e + 1 / 3), this.g = E_(h, c, e), this.b = E_(h, c, e - 1 / 3);
    }
    return vn.colorSpaceToWorking(this, r), this;
  }
  /**
   * Sets this color from a CSS-style string. For example, `rgb(250, 0,0)`,
   * `rgb(100%, 0%, 0%)`, `hsl(0, 100%, 50%)`, `#ff0000`, `#f00`, or `red` ( or
   * any [X11 color name]{@link https://en.wikipedia.org/wiki/X11_color_names#Color_name_chart} -
   * all 140 color names are supported).
   *
   * @param {string} style - Color as a CSS-style string.
   * @param {string} [colorSpace=SRGBColorSpace] - The color space.
   * @return {Color} A reference to this color.
   */
  setStyle(e, n = ei) {
    function i(c) {
      c !== void 0 && parseFloat(c) < 1 && console.warn("THREE.Color: Alpha component of " + e + " will be ignored.");
    }
    let r;
    if (r = /^(\w+)\(([^\)]*)\)/.exec(e)) {
      let c;
      const h = r[1], d = r[2];
      switch (h) {
        case "rgb":
        case "rgba":
          if (c = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(d))
            return i(c[4]), this.setRGB(
              Math.min(255, parseInt(c[1], 10)) / 255,
              Math.min(255, parseInt(c[2], 10)) / 255,
              Math.min(255, parseInt(c[3], 10)) / 255,
              n
            );
          if (c = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(d))
            return i(c[4]), this.setRGB(
              Math.min(100, parseInt(c[1], 10)) / 100,
              Math.min(100, parseInt(c[2], 10)) / 100,
              Math.min(100, parseInt(c[3], 10)) / 100,
              n
            );
          break;
        case "hsl":
        case "hsla":
          if (c = /^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(d))
            return i(c[4]), this.setHSL(
              parseFloat(c[1]) / 360,
              parseFloat(c[2]) / 100,
              parseFloat(c[3]) / 100,
              n
            );
          break;
        default:
          console.warn("THREE.Color: Unknown color model " + e);
      }
    } else if (r = /^\#([A-Fa-f\d]+)$/.exec(e)) {
      const c = r[1], h = c.length;
      if (h === 3)
        return this.setRGB(
          parseInt(c.charAt(0), 16) / 15,
          parseInt(c.charAt(1), 16) / 15,
          parseInt(c.charAt(2), 16) / 15,
          n
        );
      if (h === 6)
        return this.setHex(parseInt(c, 16), n);
      console.warn("THREE.Color: Invalid hex color " + e);
    } else if (e && e.length > 0)
      return this.setColorName(e, n);
    return this;
  }
  /**
   * Sets this color from a color name. Faster than {@link Color#setStyle} if
   * you don't need the other CSS-style formats.
   *
   * For convenience, the list of names is exposed in `Color.NAMES` as a hash.
   * ```js
   * Color.NAMES.aliceblue // returns 0xF0F8FF
   * ```
   *
   * @param {string} style - The color name.
   * @param {string} [colorSpace=SRGBColorSpace] - The color space.
   * @return {Color} A reference to this color.
   */
  setColorName(e, n = ei) {
    const i = EE[e.toLowerCase()];
    return i !== void 0 ? this.setHex(i, n) : console.warn("THREE.Color: Unknown color " + e), this;
  }
  /**
   * Returns a new color with copied values from this instance.
   *
   * @return {Color} A clone of this instance.
   */
  clone() {
    return new this.constructor(this.r, this.g, this.b);
  }
  /**
   * Copies the values of the given color to this instance.
   *
   * @param {Color} color - The color to copy.
   * @return {Color} A reference to this color.
   */
  copy(e) {
    return this.r = e.r, this.g = e.g, this.b = e.b, this;
  }
  /**
   * Copies the given color into this color, and then converts this color from
   * `SRGBColorSpace` to `LinearSRGBColorSpace`.
   *
   * @param {Color} color - The color to copy/convert.
   * @return {Color} A reference to this color.
   */
  copySRGBToLinear(e) {
    return this.r = _l(e.r), this.g = _l(e.g), this.b = _l(e.b), this;
  }
  /**
   * Copies the given color into this color, and then converts this color from
   * `LinearSRGBColorSpace` to `SRGBColorSpace`.
   *
   * @param {Color} color - The color to copy/convert.
   * @return {Color} A reference to this color.
   */
  copyLinearToSRGB(e) {
    return this.r = Ih(e.r), this.g = Ih(e.g), this.b = Ih(e.b), this;
  }
  /**
   * Converts this color from `SRGBColorSpace` to `LinearSRGBColorSpace`.
   *
   * @return {Color} A reference to this color.
   */
  convertSRGBToLinear() {
    return this.copySRGBToLinear(this), this;
  }
  /**
   * Converts this color from `LinearSRGBColorSpace` to `SRGBColorSpace`.
   *
   * @return {Color} A reference to this color.
   */
  convertLinearToSRGB() {
    return this.copyLinearToSRGB(this), this;
  }
  /**
   * Returns the hexadecimal value of this color.
   *
   * @param {string} [colorSpace=SRGBColorSpace] - The color space.
   * @return {number} The hexadecimal value.
   */
  getHex(e = ei) {
    return vn.workingToColorSpace(Aa.copy(this), e), Math.round(Vt(Aa.r * 255, 0, 255)) * 65536 + Math.round(Vt(Aa.g * 255, 0, 255)) * 256 + Math.round(Vt(Aa.b * 255, 0, 255));
  }
  /**
   * Returns the hexadecimal value of this color as a string (for example, 'FFFFFF').
   *
   * @param {string} [colorSpace=SRGBColorSpace] - The color space.
   * @return {string} The hexadecimal value as a string.
   */
  getHexString(e = ei) {
    return ("000000" + this.getHex(e).toString(16)).slice(-6);
  }
  /**
   * Converts the colors RGB values into the HSL format and stores them into the
   * given target object.
   *
   * @param {{h:number,s:number,l:number}} target - The target object that is used to store the method's result.
   * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.
   * @return {{h:number,s:number,l:number}} The HSL representation of this color.
   */
  getHSL(e, n = vn.workingColorSpace) {
    vn.workingToColorSpace(Aa.copy(this), n);
    const i = Aa.r, r = Aa.g, c = Aa.b, h = Math.max(i, r, c), d = Math.min(i, r, c);
    let v, g;
    const S = (d + h) / 2;
    if (d === h)
      v = 0, g = 0;
    else {
      const x = h - d;
      switch (g = S <= 0.5 ? x / (h + d) : x / (2 - h - d), h) {
        case i:
          v = (r - c) / x + (r < c ? 6 : 0);
          break;
        case r:
          v = (c - i) / x + 2;
          break;
        case c:
          v = (i - r) / x + 4;
          break;
      }
      v /= 6;
    }
    return e.h = v, e.s = g, e.l = S, e;
  }
  /**
   * Returns the RGB values of this color and stores them into the given target object.
   *
   * @param {Color} target - The target color that is used to store the method's result.
   * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.
   * @return {Color} The RGB representation of this color.
   */
  getRGB(e, n = vn.workingColorSpace) {
    return vn.workingToColorSpace(Aa.copy(this), n), e.r = Aa.r, e.g = Aa.g, e.b = Aa.b, e;
  }
  /**
   * Returns the value of this color as a CSS style string. Example: `rgb(255,0,0)`.
   *
   * @param {string} [colorSpace=SRGBColorSpace] - The color space.
   * @return {string} The CSS representation of this color.
   */
  getStyle(e = ei) {
    vn.workingToColorSpace(Aa.copy(this), e);
    const n = Aa.r, i = Aa.g, r = Aa.b;
    return e !== ei ? `color(${e} ${n.toFixed(3)} ${i.toFixed(3)} ${r.toFixed(3)})` : `rgb(${Math.round(n * 255)},${Math.round(i * 255)},${Math.round(r * 255)})`;
  }
  /**
   * Adds the given HSL values to this color's values.
   * Internally, this converts the color's RGB values to HSL, adds HSL
   * and then converts the color back to RGB.
   *
   * @param {number} h - Hue value between `0.0` and `1.0`.
   * @param {number} s - Saturation value between `0.0` and `1.0`.
   * @param {number} l - Lightness value between `0.0` and `1.0`.
   * @return {Color} A reference to this color.
   */
  offsetHSL(e, n, i) {
    return this.getHSL(_c), this.setHSL(_c.h + e, _c.s + n, _c.l + i);
  }
  /**
   * Adds the RGB values of the given color to the RGB values of this color.
   *
   * @param {Color} color - The color to add.
   * @return {Color} A reference to this color.
   */
  add(e) {
    return this.r += e.r, this.g += e.g, this.b += e.b, this;
  }
  /**
   * Adds the RGB values of the given colors and stores the result in this instance.
   *
   * @param {Color} color1 - The first color.
   * @param {Color} color2 - The second color.
   * @return {Color} A reference to this color.
   */
  addColors(e, n) {
    return this.r = e.r + n.r, this.g = e.g + n.g, this.b = e.b + n.b, this;
  }
  /**
   * Adds the given scalar value to the RGB values of this color.
   *
   * @param {number} s - The scalar to add.
   * @return {Color} A reference to this color.
   */
  addScalar(e) {
    return this.r += e, this.g += e, this.b += e, this;
  }
  /**
   * Subtracts the RGB values of the given color from the RGB values of this color.
   *
   * @param {Color} color - The color to subtract.
   * @return {Color} A reference to this color.
   */
  sub(e) {
    return this.r = Math.max(0, this.r - e.r), this.g = Math.max(0, this.g - e.g), this.b = Math.max(0, this.b - e.b), this;
  }
  /**
   * Multiplies the RGB values of the given color with the RGB values of this color.
   *
   * @param {Color} color - The color to multiply.
   * @return {Color} A reference to this color.
   */
  multiply(e) {
    return this.r *= e.r, this.g *= e.g, this.b *= e.b, this;
  }
  /**
   * Multiplies the given scalar value with the RGB values of this color.
   *
   * @param {number} s - The scalar to multiply.
   * @return {Color} A reference to this color.
   */
  multiplyScalar(e) {
    return this.r *= e, this.g *= e, this.b *= e, this;
  }
  /**
   * Linearly interpolates this color's RGB values toward the RGB values of the
   * given color. The alpha argument can be thought of as the ratio between
   * the two colors, where `0.0` is this color and `1.0` is the first argument.
   *
   * @param {Color} color - The color to converge on.
   * @param {number} alpha - The interpolation factor in the closed interval `[0,1]`.
   * @return {Color} A reference to this color.
   */
  lerp(e, n) {
    return this.r += (e.r - this.r) * n, this.g += (e.g - this.g) * n, this.b += (e.b - this.b) * n, this;
  }
  /**
   * Linearly interpolates between the given colors and stores the result in this instance.
   * The alpha argument can be thought of as the ratio between the two colors, where `0.0`
   * is the first and `1.0` is the second color.
   *
   * @param {Color} color1 - The first color.
   * @param {Color} color2 - The second color.
   * @param {number} alpha - The interpolation factor in the closed interval `[0,1]`.
   * @return {Color} A reference to this color.
   */
  lerpColors(e, n, i) {
    return this.r = e.r + (n.r - e.r) * i, this.g = e.g + (n.g - e.g) * i, this.b = e.b + (n.b - e.b) * i, this;
  }
  /**
   * Linearly interpolates this color's HSL values toward the HSL values of the
   * given color. It differs from {@link Color#lerp} by not interpolating straight
   * from one color to the other, but instead going through all the hues in between
   * those two colors. The alpha argument can be thought of as the ratio between
   * the two colors, where 0.0 is this color and 1.0 is the first argument.
   *
   * @param {Color} color - The color to converge on.
   * @param {number} alpha - The interpolation factor in the closed interval `[0,1]`.
   * @return {Color} A reference to this color.
   */
  lerpHSL(e, n) {
    this.getHSL(_c), e.getHSL(ig);
    const i = Hp(_c.h, ig.h, n), r = Hp(_c.s, ig.s, n), c = Hp(_c.l, ig.l, n);
    return this.setHSL(i, r, c), this;
  }
  /**
   * Sets the color's RGB components from the given 3D vector.
   *
   * @param {Vector3} v - The vector to set.
   * @return {Color} A reference to this color.
   */
  setFromVector3(e) {
    return this.r = e.x, this.g = e.y, this.b = e.z, this;
  }
  /**
   * Transforms this color with the given 3x3 matrix.
   *
   * @param {Matrix3} m - The matrix.
   * @return {Color} A reference to this color.
   */
  applyMatrix3(e) {
    const n = this.r, i = this.g, r = this.b, c = e.elements;
    return this.r = c[0] * n + c[3] * i + c[6] * r, this.g = c[1] * n + c[4] * i + c[7] * r, this.b = c[2] * n + c[5] * i + c[8] * r, this;
  }
  /**
   * Returns `true` if this color is equal with the given one.
   *
   * @param {Color} c - The color to test for equality.
   * @return {boolean} Whether this bounding color is equal with the given one.
   */
  equals(e) {
    return e.r === this.r && e.g === this.g && e.b === this.b;
  }
  /**
   * Sets this color's RGB components from the given array.
   *
   * @param {Array<number>} array - An array holding the RGB values.
   * @param {number} [offset=0] - The offset into the array.
   * @return {Color} A reference to this color.
   */
  fromArray(e, n = 0) {
    return this.r = e[n], this.g = e[n + 1], this.b = e[n + 2], this;
  }
  /**
   * Writes the RGB components of this color to the given array. If no array is provided,
   * the method returns a new instance.
   *
   * @param {Array<number>} [array=[]] - The target array holding the color components.
   * @param {number} [offset=0] - Index of the first element in the array.
   * @return {Array<number>} The color components.
   */
  toArray(e = [], n = 0) {
    return e[n] = this.r, e[n + 1] = this.g, e[n + 2] = this.b, e;
  }
  /**
   * Sets the components of this color from the given buffer attribute.
   *
   * @param {BufferAttribute} attribute - The buffer attribute holding color data.
   * @param {number} index - The index into the attribute.
   * @return {Color} A reference to this color.
   */
  fromBufferAttribute(e, n) {
    return this.r = e.getX(n), this.g = e.getY(n), this.b = e.getZ(n), this;
  }
  /**
   * This methods defines the serialization result of this class. Returns the color
   * as a hexadecimal value.
   *
   * @return {number} The hexadecimal value.
   */
  toJSON() {
    return this.getHex();
  }
  *[Symbol.iterator]() {
    yield this.r, yield this.g, yield this.b;
  }
}
const Aa = /* @__PURE__ */ new lt();
lt.NAMES = EE;
let EC = 0;
class sa extends qs {
  /**
   * Constructs a new material.
   */
  constructor() {
    super(), this.isMaterial = !0, Object.defineProperty(this, "id", { value: EC++ }), this.uuid = Fs(), this.name = "", this.type = "Material", this.blending = ku, this.side = Po, this.vertexColors = !1, this.opacity = 1, this.transparent = !1, this.alphaHash = !1, this.blendSrc = Zg, this.blendDst = jg, this.blendEquation = Ec, this.blendSrcAlpha = null, this.blendDstAlpha = null, this.blendEquationAlpha = null, this.blendColor = new lt(0, 0, 0), this.blendAlpha = 0, this.depthFunc = Qu, this.depthTest = !0, this.depthWrite = !0, this.stencilWriteMask = 255, this.stencilFunc = xS, this.stencilRef = 0, this.stencilFuncMask = 255, this.stencilFail = Vu, this.stencilZFail = Vu, this.stencilZPass = Vu, this.stencilWrite = !1, this.clippingPlanes = null, this.clipIntersection = !1, this.clipShadows = !1, this.shadowSide = null, this.colorWrite = !0, this.precision = null, this.polygonOffset = !1, this.polygonOffsetFactor = 0, this.polygonOffsetUnits = 0, this.dithering = !1, this.alphaToCoverage = !1, this.premultipliedAlpha = !1, this.forceSinglePass = !1, this.allowOverride = !0, this.visible = !0, this.toneMapped = !0, this.userData = {}, this.version = 0, this._alphaTest = 0;
  }
  /**
   * Sets the alpha value to be used when running an alpha test. The material
   * will not be rendered if the opacity is lower than this value.
   *
   * @type {number}
   * @readonly
   * @default 0
   */
  get alphaTest() {
    return this._alphaTest;
  }
  set alphaTest(e) {
    this._alphaTest > 0 != e > 0 && this.version++, this._alphaTest = e;
  }
  /**
   * An optional callback that is executed immediately before the material is used to render a 3D object.
   *
   * This method can only be used when rendering with {@link WebGLRenderer}.
   *
   * @param {WebGLRenderer} renderer - The renderer.
   * @param {Scene} scene - The scene.
   * @param {Camera} camera - The camera that is used to render the scene.
   * @param {BufferGeometry} geometry - The 3D object's geometry.
   * @param {Object3D} object - The 3D object.
   * @param {Object} group - The geometry group data.
   */
  onBeforeRender() {
  }
  /**
   * An optional callback that is executed immediately before the shader
   * program is compiled. This function is called with the shader source code
   * as a parameter. Useful for the modification of built-in materials.
   *
   * This method can only be used when rendering with {@link WebGLRenderer}. The
   * recommended approach when customizing materials is to use `WebGPURenderer` with the new
   * Node Material system and [TSL]{@link https://github.com/mrdoob/three.js/wiki/Three.js-Shading-Language}.
   *
   * @param {{vertexShader:string,fragmentShader:string,uniforms:Object}} shaderobject - The object holds the uniforms and the vertex and fragment shader source.
   * @param {WebGLRenderer} renderer - A reference to the renderer.
   */
  onBeforeCompile() {
  }
  /**
   * In case {@link Material#onBeforeCompile} is used, this callback can be used to identify
   * values of settings used in `onBeforeCompile()`, so three.js can reuse a cached
   * shader or recompile the shader for this material as needed.
   *
   * This method can only be used when rendering with {@link WebGLRenderer}.
   *
   * @return {string} The custom program cache key.
   */
  customProgramCacheKey() {
    return this.onBeforeCompile.toString();
  }
  /**
   * This method can be used to set default values from parameter objects.
   * It is a generic implementation so it can be used with different types
   * of materials.
   *
   * @param {Object} [values] - The material values to set.
   */
  setValues(e) {
    if (e !== void 0)
      for (const n in e) {
        const i = e[n];
        if (i === void 0) {
          console.warn(`THREE.Material: parameter '${n}' has value of undefined.`);
          continue;
        }
        const r = this[n];
        if (r === void 0) {
          console.warn(`THREE.Material: '${n}' is not a property of THREE.${this.type}.`);
          continue;
        }
        r && r.isColor ? r.set(i) : r && r.isVector3 && i && i.isVector3 ? r.copy(i) : this[n] = i;
      }
  }
  /**
   * Serializes the material into JSON.
   *
   * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.
   * @return {Object} A JSON object representing the serialized material.
   * @see {@link ObjectLoader#parse}
   */
  toJSON(e) {
    const n = e === void 0 || typeof e == "string";
    n && (e = {
      textures: {},
      images: {}
    });
    const i = {
      metadata: {
        version: 4.7,
        type: "Material",
        generator: "Material.toJSON"
      }
    };
    i.uuid = this.uuid, i.type = this.type, this.name !== "" && (i.name = this.name), this.color && this.color.isColor && (i.color = this.color.getHex()), this.roughness !== void 0 && (i.roughness = this.roughness), this.metalness !== void 0 && (i.metalness = this.metalness), this.sheen !== void 0 && (i.sheen = this.sheen), this.sheenColor && this.sheenColor.isColor && (i.sheenColor = this.sheenColor.getHex()), this.sheenRoughness !== void 0 && (i.sheenRoughness = this.sheenRoughness), this.emissive && this.emissive.isColor && (i.emissive = this.emissive.getHex()), this.emissiveIntensity !== void 0 && this.emissiveIntensity !== 1 && (i.emissiveIntensity = this.emissiveIntensity), this.specular && this.specular.isColor && (i.specular = this.specular.getHex()), this.specularIntensity !== void 0 && (i.specularIntensity = this.specularIntensity), this.specularColor && this.specularColor.isColor && (i.specularColor = this.specularColor.getHex()), this.shininess !== void 0 && (i.shininess = this.shininess), this.clearcoat !== void 0 && (i.clearcoat = this.clearcoat), this.clearcoatRoughness !== void 0 && (i.clearcoatRoughness = this.clearcoatRoughness), this.clearcoatMap && this.clearcoatMap.isTexture && (i.clearcoatMap = this.clearcoatMap.toJSON(e).uuid), this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture && (i.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(e).uuid), this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture && (i.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(e).uuid, i.clearcoatNormalScale = this.clearcoatNormalScale.toArray()), this.dispersion !== void 0 && (i.dispersion = this.dispersion), this.iridescence !== void 0 && (i.iridescence = this.iridescence), this.iridescenceIOR !== void 0 && (i.iridescenceIOR = this.iridescenceIOR), this.iridescenceThicknessRange !== void 0 && (i.iridescenceThicknessRange = this.iridescenceThicknessRange), this.iridescenceMap && this.iridescenceMap.isTexture && (i.iridescenceMap = this.iridescenceMap.toJSON(e).uuid), this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture && (i.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON(e).uuid), this.anisotropy !== void 0 && (i.anisotropy = this.anisotropy), this.anisotropyRotation !== void 0 && (i.anisotropyRotation = this.anisotropyRotation), this.anisotropyMap && this.anisotropyMap.isTexture && (i.anisotropyMap = this.anisotropyMap.toJSON(e).uuid), this.map && this.map.isTexture && (i.map = this.map.toJSON(e).uuid), this.matcap && this.matcap.isTexture && (i.matcap = this.matcap.toJSON(e).uuid), this.alphaMap && this.alphaMap.isTexture && (i.alphaMap = this.alphaMap.toJSON(e).uuid), this.lightMap && this.lightMap.isTexture && (i.lightMap = this.lightMap.toJSON(e).uuid, i.lightMapIntensity = this.lightMapIntensity), this.aoMap && this.aoMap.isTexture && (i.aoMap = this.aoMap.toJSON(e).uuid, i.aoMapIntensity = this.aoMapIntensity), this.bumpMap && this.bumpMap.isTexture && (i.bumpMap = this.bumpMap.toJSON(e).uuid, i.bumpScale = this.bumpScale), this.normalMap && this.normalMap.isTexture && (i.normalMap = this.normalMap.toJSON(e).uuid, i.normalMapType = this.normalMapType, i.normalScale = this.normalScale.toArray()), this.displacementMap && this.displacementMap.isTexture && (i.displacementMap = this.displacementMap.toJSON(e).uuid, i.displacementScale = this.displacementScale, i.displacementBias = this.displacementBias), this.roughnessMap && this.roughnessMap.isTexture && (i.roughnessMap = this.roughnessMap.toJSON(e).uuid), this.metalnessMap && this.metalnessMap.isTexture && (i.metalnessMap = this.metalnessMap.toJSON(e).uuid), this.emissiveMap && this.emissiveMap.isTexture && (i.emissiveMap = this.emissiveMap.toJSON(e).uuid), this.specularMap && this.specularMap.isTexture && (i.specularMap = this.specularMap.toJSON(e).uuid), this.specularIntensityMap && this.specularIntensityMap.isTexture && (i.specularIntensityMap = this.specularIntensityMap.toJSON(e).uuid), this.specularColorMap && this.specularColorMap.isTexture && (i.specularColorMap = this.specularColorMap.toJSON(e).uuid), this.envMap && this.envMap.isTexture && (i.envMap = this.envMap.toJSON(e).uuid, this.combine !== void 0 && (i.combine = this.combine)), this.envMapRotation !== void 0 && (i.envMapRotation = this.envMapRotation.toArray()), this.envMapIntensity !== void 0 && (i.envMapIntensity = this.envMapIntensity), this.reflectivity !== void 0 && (i.reflectivity = this.reflectivity), this.refractionRatio !== void 0 && (i.refractionRatio = this.refractionRatio), this.gradientMap && this.gradientMap.isTexture && (i.gradientMap = this.gradientMap.toJSON(e).uuid), this.transmission !== void 0 && (i.transmission = this.transmission), this.transmissionMap && this.transmissionMap.isTexture && (i.transmissionMap = this.transmissionMap.toJSON(e).uuid), this.thickness !== void 0 && (i.thickness = this.thickness), this.thicknessMap && this.thicknessMap.isTexture && (i.thicknessMap = this.thicknessMap.toJSON(e).uuid), this.attenuationDistance !== void 0 && this.attenuationDistance !== 1 / 0 && (i.attenuationDistance = this.attenuationDistance), this.attenuationColor !== void 0 && (i.attenuationColor = this.attenuationColor.getHex()), this.size !== void 0 && (i.size = this.size), this.shadowSide !== null && (i.shadowSide = this.shadowSide), this.sizeAttenuation !== void 0 && (i.sizeAttenuation = this.sizeAttenuation), this.blending !== ku && (i.blending = this.blending), this.side !== Po && (i.side = this.side), this.vertexColors === !0 && (i.vertexColors = !0), this.opacity < 1 && (i.opacity = this.opacity), this.transparent === !0 && (i.transparent = !0), this.blendSrc !== Zg && (i.blendSrc = this.blendSrc), this.blendDst !== jg && (i.blendDst = this.blendDst), this.blendEquation !== Ec && (i.blendEquation = this.blendEquation), this.blendSrcAlpha !== null && (i.blendSrcAlpha = this.blendSrcAlpha), this.blendDstAlpha !== null && (i.blendDstAlpha = this.blendDstAlpha), this.blendEquationAlpha !== null && (i.blendEquationAlpha = this.blendEquationAlpha), this.blendColor && this.blendColor.isColor && (i.blendColor = this.blendColor.getHex()), this.blendAlpha !== 0 && (i.blendAlpha = this.blendAlpha), this.depthFunc !== Qu && (i.depthFunc = this.depthFunc), this.depthTest === !1 && (i.depthTest = this.depthTest), this.depthWrite === !1 && (i.depthWrite = this.depthWrite), this.colorWrite === !1 && (i.colorWrite = this.colorWrite), this.stencilWriteMask !== 255 && (i.stencilWriteMask = this.stencilWriteMask), this.stencilFunc !== xS && (i.stencilFunc = this.stencilFunc), this.stencilRef !== 0 && (i.stencilRef = this.stencilRef), this.stencilFuncMask !== 255 && (i.stencilFuncMask = this.stencilFuncMask), this.stencilFail !== Vu && (i.stencilFail = this.stencilFail), this.stencilZFail !== Vu && (i.stencilZFail = this.stencilZFail), this.stencilZPass !== Vu && (i.stencilZPass = this.stencilZPass), this.stencilWrite === !0 && (i.stencilWrite = this.stencilWrite), this.rotation !== void 0 && this.rotation !== 0 && (i.rotation = this.rotation), this.polygonOffset === !0 && (i.polygonOffset = !0), this.polygonOffsetFactor !== 0 && (i.polygonOffsetFactor = this.polygonOffsetFactor), this.polygonOffsetUnits !== 0 && (i.polygonOffsetUnits = this.polygonOffsetUnits), this.linewidth !== void 0 && this.linewidth !== 1 && (i.linewidth = this.linewidth), this.dashSize !== void 0 && (i.dashSize = this.dashSize), this.gapSize !== void 0 && (i.gapSize = this.gapSize), this.scale !== void 0 && (i.scale = this.scale), this.dithering === !0 && (i.dithering = !0), this.alphaTest > 0 && (i.alphaTest = this.alphaTest), this.alphaHash === !0 && (i.alphaHash = !0), this.alphaToCoverage === !0 && (i.alphaToCoverage = !0), this.premultipliedAlpha === !0 && (i.premultipliedAlpha = !0), this.forceSinglePass === !0 && (i.forceSinglePass = !0), this.wireframe === !0 && (i.wireframe = !0), this.wireframeLinewidth > 1 && (i.wireframeLinewidth = this.wireframeLinewidth), this.wireframeLinecap !== "round" && (i.wireframeLinecap = this.wireframeLinecap), this.wireframeLinejoin !== "round" && (i.wireframeLinejoin = this.wireframeLinejoin), this.flatShading === !0 && (i.flatShading = !0), this.visible === !1 && (i.visible = !1), this.toneMapped === !1 && (i.toneMapped = !1), this.fog === !1 && (i.fog = !1), Object.keys(this.userData).length > 0 && (i.userData = this.userData);
    function r(c) {
      const h = [];
      for (const d in c) {
        const v = c[d];
        delete v.metadata, h.push(v);
      }
      return h;
    }
    if (n) {
      const c = r(e.textures), h = r(e.images);
      c.length > 0 && (i.textures = c), h.length > 0 && (i.images = h);
    }
    return i;
  }
  /**
   * Returns a new material with copied values from this instance.
   *
   * @return {Material} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
  /**
   * Copies the values of the given material to this instance.
   *
   * @param {Material} source - The material to copy.
   * @return {Material} A reference to this instance.
   */
  copy(e) {
    this.name = e.name, this.blending = e.blending, this.side = e.side, this.vertexColors = e.vertexColors, this.opacity = e.opacity, this.transparent = e.transparent, this.blendSrc = e.blendSrc, this.blendDst = e.blendDst, this.blendEquation = e.blendEquation, this.blendSrcAlpha = e.blendSrcAlpha, this.blendDstAlpha = e.blendDstAlpha, this.blendEquationAlpha = e.blendEquationAlpha, this.blendColor.copy(e.blendColor), this.blendAlpha = e.blendAlpha, this.depthFunc = e.depthFunc, this.depthTest = e.depthTest, this.depthWrite = e.depthWrite, this.stencilWriteMask = e.stencilWriteMask, this.stencilFunc = e.stencilFunc, this.stencilRef = e.stencilRef, this.stencilFuncMask = e.stencilFuncMask, this.stencilFail = e.stencilFail, this.stencilZFail = e.stencilZFail, this.stencilZPass = e.stencilZPass, this.stencilWrite = e.stencilWrite;
    const n = e.clippingPlanes;
    let i = null;
    if (n !== null) {
      const r = n.length;
      i = new Array(r);
      for (let c = 0; c !== r; ++c)
        i[c] = n[c].clone();
    }
    return this.clippingPlanes = i, this.clipIntersection = e.clipIntersection, this.clipShadows = e.clipShadows, this.shadowSide = e.shadowSide, this.colorWrite = e.colorWrite, this.precision = e.precision, this.polygonOffset = e.polygonOffset, this.polygonOffsetFactor = e.polygonOffsetFactor, this.polygonOffsetUnits = e.polygonOffsetUnits, this.dithering = e.dithering, this.alphaTest = e.alphaTest, this.alphaHash = e.alphaHash, this.alphaToCoverage = e.alphaToCoverage, this.premultipliedAlpha = e.premultipliedAlpha, this.forceSinglePass = e.forceSinglePass, this.visible = e.visible, this.toneMapped = e.toneMapped, this.userData = JSON.parse(JSON.stringify(e.userData)), this;
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   *
   * @fires Material#dispose
   */
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
  /**
   * Setting this property to `true` indicates the engine the material
   * needs to be recompiled.
   *
   * @type {boolean}
   * @default false
   * @param {boolean} value
   */
  set needsUpdate(e) {
    e === !0 && this.version++;
  }
}
class Uc extends sa {
  /**
   * Constructs a new mesh basic material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(e) {
    super(), this.isMeshBasicMaterial = !0, this.type = "MeshBasicMaterial", this.color = new lt(16777215), this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.envMapRotation = new Xs(), this.combine = cm, this.reflectivity = 1, this.refractionRatio = 0.98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.specularMap = e.specularMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.envMapRotation.copy(e.envMapRotation), this.combine = e.combine, this.reflectivity = e.reflectivity, this.refractionRatio = e.refractionRatio, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.fog = e.fog, this;
  }
}
const yl = /* @__PURE__ */ TC();
function TC() {
  const s = new ArrayBuffer(4), e = new Float32Array(s), n = new Uint32Array(s), i = new Uint32Array(512), r = new Uint32Array(512);
  for (let v = 0; v < 256; ++v) {
    const g = v - 127;
    g < -27 ? (i[v] = 0, i[v | 256] = 32768, r[v] = 24, r[v | 256] = 24) : g < -14 ? (i[v] = 1024 >> -g - 14, i[v | 256] = 1024 >> -g - 14 | 32768, r[v] = -g - 1, r[v | 256] = -g - 1) : g <= 15 ? (i[v] = g + 15 << 10, i[v | 256] = g + 15 << 10 | 32768, r[v] = 13, r[v | 256] = 13) : g < 128 ? (i[v] = 31744, i[v | 256] = 64512, r[v] = 24, r[v | 256] = 24) : (i[v] = 31744, i[v | 256] = 64512, r[v] = 13, r[v | 256] = 13);
  }
  const c = new Uint32Array(2048), h = new Uint32Array(64), d = new Uint32Array(64);
  for (let v = 1; v < 1024; ++v) {
    let g = v << 13, S = 0;
    for (; (g & 8388608) === 0; )
      g <<= 1, S -= 8388608;
    g &= -8388609, S += 947912704, c[v] = g | S;
  }
  for (let v = 1024; v < 2048; ++v)
    c[v] = 939524096 + (v - 1024 << 13);
  for (let v = 1; v < 31; ++v)
    h[v] = v << 23;
  h[31] = 1199570944, h[32] = 2147483648;
  for (let v = 33; v < 63; ++v)
    h[v] = 2147483648 + (v - 32 << 23);
  h[63] = 3347054592;
  for (let v = 1; v < 64; ++v)
    v !== 32 && (d[v] = 1024);
  return {
    floatView: e,
    uint32View: n,
    baseTable: i,
    shiftTable: r,
    mantissaTable: c,
    exponentTable: h,
    offsetTable: d
  };
}
function Ss(s) {
  Math.abs(s) > 65504 && console.warn("THREE.DataUtils.toHalfFloat(): Value out of range."), s = Vt(s, -65504, 65504), yl.floatView[0] = s;
  const e = yl.uint32View[0], n = e >> 23 & 511;
  return yl.baseTable[n] + ((e & 8388607) >> yl.shiftTable[n]);
}
function wp(s) {
  const e = s >> 10;
  return yl.uint32View[0] = yl.mantissaTable[yl.offsetTable[e] + (s & 1023)] + yl.exponentTable[e], yl.floatView[0];
}
class AC {
  /**
   * Returns a half precision floating point value (FP16) from the given single
   * precision floating point value (FP32).
   *
   * @param {number} val - A single precision floating point value.
   * @return {number} The FP16 value.
   */
  static toHalfFloat(e) {
    return Ss(e);
  }
  /**
   * Returns a single precision floating point value (FP32) from the given half
   * precision floating point value (FP16).
   *
   * @param {number} val - A half precision floating point value.
   * @return {number} The FP32 value.
   */
  static fromHalfFloat(e) {
    return wp(e);
  }
}
const zi = /* @__PURE__ */ new j(), ag = /* @__PURE__ */ new De();
let RC = 0;
class Nn {
  /**
   * Constructs a new buffer attribute.
   *
   * @param {TypedArray} array - The array holding the attribute data.
   * @param {number} itemSize - The item size.
   * @param {boolean} [normalized=false] - Whether the data are normalized or not.
   */
  constructor(e, n, i = !1) {
    if (Array.isArray(e))
      throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
    this.isBufferAttribute = !0, Object.defineProperty(this, "id", { value: RC++ }), this.name = "", this.array = e, this.itemSize = n, this.count = e !== void 0 ? e.length / n : 0, this.normalized = i, this.usage = Kp, this.updateRanges = [], this.gpuType = es, this.version = 0;
  }
  /**
   * A callback function that is executed after the renderer has transferred the attribute
   * array data to the GPU.
   */
  onUploadCallback() {
  }
  /**
   * Flag to indicate that this attribute has changed and should be re-sent to
   * the GPU. Set this to `true` when you modify the value of the array.
   *
   * @type {number}
   * @default false
   * @param {boolean} value
   */
  set needsUpdate(e) {
    e === !0 && this.version++;
  }
  /**
   * Sets the usage of this buffer attribute.
   *
   * @param {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)} value - The usage to set.
   * @return {BufferAttribute} A reference to this buffer attribute.
   */
  setUsage(e) {
    return this.usage = e, this;
  }
  /**
   * Adds a range of data in the data array to be updated on the GPU.
   *
   * @param {number} start - Position at which to start update.
   * @param {number} count - The number of components to update.
   */
  addUpdateRange(e, n) {
    this.updateRanges.push({ start: e, count: n });
  }
  /**
   * Clears the update ranges.
   */
  clearUpdateRanges() {
    this.updateRanges.length = 0;
  }
  /**
   * Copies the values of the given buffer attribute to this instance.
   *
   * @param {BufferAttribute} source - The buffer attribute to copy.
   * @return {BufferAttribute} A reference to this instance.
   */
  copy(e) {
    return this.name = e.name, this.array = new e.array.constructor(e.array), this.itemSize = e.itemSize, this.count = e.count, this.normalized = e.normalized, this.usage = e.usage, this.gpuType = e.gpuType, this;
  }
  /**
   * Copies a vector from the given buffer attribute to this one. The start
   * and destination position in the attribute buffers are represented by the
   * given indices.
   *
   * @param {number} index1 - The destination index into this buffer attribute.
   * @param {BufferAttribute} attribute - The buffer attribute to copy from.
   * @param {number} index2 - The source index into the given buffer attribute.
   * @return {BufferAttribute} A reference to this instance.
   */
  copyAt(e, n, i) {
    e *= this.itemSize, i *= n.itemSize;
    for (let r = 0, c = this.itemSize; r < c; r++)
      this.array[e + r] = n.array[i + r];
    return this;
  }
  /**
   * Copies the given array data into this buffer attribute.
   *
   * @param {(TypedArray|Array)} array - The array to copy.
   * @return {BufferAttribute} A reference to this instance.
   */
  copyArray(e) {
    return this.array.set(e), this;
  }
  /**
   * Applies the given 3x3 matrix to the given attribute. Works with
   * item size `2` and `3`.
   *
   * @param {Matrix3} m - The matrix to apply.
   * @return {BufferAttribute} A reference to this instance.
   */
  applyMatrix3(e) {
    if (this.itemSize === 2)
      for (let n = 0, i = this.count; n < i; n++)
        ag.fromBufferAttribute(this, n), ag.applyMatrix3(e), this.setXY(n, ag.x, ag.y);
    else if (this.itemSize === 3)
      for (let n = 0, i = this.count; n < i; n++)
        zi.fromBufferAttribute(this, n), zi.applyMatrix3(e), this.setXYZ(n, zi.x, zi.y, zi.z);
    return this;
  }
  /**
   * Applies the given 4x4 matrix to the given attribute. Only works with
   * item size `3`.
   *
   * @param {Matrix4} m - The matrix to apply.
   * @return {BufferAttribute} A reference to this instance.
   */
  applyMatrix4(e) {
    for (let n = 0, i = this.count; n < i; n++)
      zi.fromBufferAttribute(this, n), zi.applyMatrix4(e), this.setXYZ(n, zi.x, zi.y, zi.z);
    return this;
  }
  /**
   * Applies the given 3x3 normal matrix to the given attribute. Only works with
   * item size `3`.
   *
   * @param {Matrix3} m - The normal matrix to apply.
   * @return {BufferAttribute} A reference to this instance.
   */
  applyNormalMatrix(e) {
    for (let n = 0, i = this.count; n < i; n++)
      zi.fromBufferAttribute(this, n), zi.applyNormalMatrix(e), this.setXYZ(n, zi.x, zi.y, zi.z);
    return this;
  }
  /**
   * Applies the given 4x4 matrix to the given attribute. Only works with
   * item size `3` and with direction vectors.
   *
   * @param {Matrix4} m - The matrix to apply.
   * @return {BufferAttribute} A reference to this instance.
   */
  transformDirection(e) {
    for (let n = 0, i = this.count; n < i; n++)
      zi.fromBufferAttribute(this, n), zi.transformDirection(e), this.setXYZ(n, zi.x, zi.y, zi.z);
    return this;
  }
  /**
   * Sets the given array data in the buffer attribute.
   *
   * @param {(TypedArray|Array)} value - The array data to set.
   * @param {number} [offset=0] - The offset in this buffer attribute's array.
   * @return {BufferAttribute} A reference to this instance.
   */
  set(e, n = 0) {
    return this.array.set(e, n), this;
  }
  /**
   * Returns the given component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} component - The component index.
   * @return {number} The returned value.
   */
  getComponent(e, n) {
    let i = this.array[e * this.itemSize + n];
    return this.normalized && (i = $a(i, this.array)), i;
  }
  /**
   * Sets the given value to the given component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} component - The component index.
   * @param {number} value - The value to set.
   * @return {BufferAttribute} A reference to this instance.
   */
  setComponent(e, n, i) {
    return this.normalized && (i = $t(i, this.array)), this.array[e * this.itemSize + n] = i, this;
  }
  /**
   * Returns the x component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @return {number} The x component.
   */
  getX(e) {
    let n = this.array[e * this.itemSize];
    return this.normalized && (n = $a(n, this.array)), n;
  }
  /**
   * Sets the x component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} x - The value to set.
   * @return {BufferAttribute} A reference to this instance.
   */
  setX(e, n) {
    return this.normalized && (n = $t(n, this.array)), this.array[e * this.itemSize] = n, this;
  }
  /**
   * Returns the y component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @return {number} The y component.
   */
  getY(e) {
    let n = this.array[e * this.itemSize + 1];
    return this.normalized && (n = $a(n, this.array)), n;
  }
  /**
   * Sets the y component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} y - The value to set.
   * @return {BufferAttribute} A reference to this instance.
   */
  setY(e, n) {
    return this.normalized && (n = $t(n, this.array)), this.array[e * this.itemSize + 1] = n, this;
  }
  /**
   * Returns the z component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @return {number} The z component.
   */
  getZ(e) {
    let n = this.array[e * this.itemSize + 2];
    return this.normalized && (n = $a(n, this.array)), n;
  }
  /**
   * Sets the z component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} z - The value to set.
   * @return {BufferAttribute} A reference to this instance.
   */
  setZ(e, n) {
    return this.normalized && (n = $t(n, this.array)), this.array[e * this.itemSize + 2] = n, this;
  }
  /**
   * Returns the w component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @return {number} The w component.
   */
  getW(e) {
    let n = this.array[e * this.itemSize + 3];
    return this.normalized && (n = $a(n, this.array)), n;
  }
  /**
   * Sets the w component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} w - The value to set.
   * @return {BufferAttribute} A reference to this instance.
   */
  setW(e, n) {
    return this.normalized && (n = $t(n, this.array)), this.array[e * this.itemSize + 3] = n, this;
  }
  /**
   * Sets the x and y component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} x - The value for the x component to set.
   * @param {number} y - The value for the y component to set.
   * @return {BufferAttribute} A reference to this instance.
   */
  setXY(e, n, i) {
    return e *= this.itemSize, this.normalized && (n = $t(n, this.array), i = $t(i, this.array)), this.array[e + 0] = n, this.array[e + 1] = i, this;
  }
  /**
   * Sets the x, y and z component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} x - The value for the x component to set.
   * @param {number} y - The value for the y component to set.
   * @param {number} z - The value for the z component to set.
   * @return {BufferAttribute} A reference to this instance.
   */
  setXYZ(e, n, i, r) {
    return e *= this.itemSize, this.normalized && (n = $t(n, this.array), i = $t(i, this.array), r = $t(r, this.array)), this.array[e + 0] = n, this.array[e + 1] = i, this.array[e + 2] = r, this;
  }
  /**
   * Sets the x, y, z and w component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} x - The value for the x component to set.
   * @param {number} y - The value for the y component to set.
   * @param {number} z - The value for the z component to set.
   * @param {number} w - The value for the w component to set.
   * @return {BufferAttribute} A reference to this instance.
   */
  setXYZW(e, n, i, r, c) {
    return e *= this.itemSize, this.normalized && (n = $t(n, this.array), i = $t(i, this.array), r = $t(r, this.array), c = $t(c, this.array)), this.array[e + 0] = n, this.array[e + 1] = i, this.array[e + 2] = r, this.array[e + 3] = c, this;
  }
  /**
   * Sets the given callback function that is executed after the Renderer has transferred
   * the attribute array data to the GPU. Can be used to perform clean-up operations after
   * the upload when attribute data are not needed anymore on the CPU side.
   *
   * @param {Function} callback - The `onUpload()` callback.
   * @return {BufferAttribute} A reference to this instance.
   */
  onUpload(e) {
    return this.onUploadCallback = e, this;
  }
  /**
   * Returns a new buffer attribute with copied values from this instance.
   *
   * @return {BufferAttribute} A clone of this instance.
   */
  clone() {
    return new this.constructor(this.array, this.itemSize).copy(this);
  }
  /**
   * Serializes the buffer attribute into JSON.
   *
   * @return {Object} A JSON object representing the serialized buffer attribute.
   */
  toJSON() {
    const e = {
      itemSize: this.itemSize,
      type: this.array.constructor.name,
      array: Array.from(this.array),
      normalized: this.normalized
    };
    return this.name !== "" && (e.name = this.name), this.usage !== Kp && (e.usage = this.usage), e;
  }
}
class CC extends Nn {
  /**
   * Constructs a new buffer attribute.
   *
   * @param {(Array<number>|Int8Array)} array - The array holding the attribute data.
   * @param {number} itemSize - The item size.
   * @param {boolean} [normalized=false] - Whether the data are normalized or not.
   */
  constructor(e, n, i) {
    super(new Int8Array(e), n, i);
  }
}
class wC extends Nn {
  /**
   * Constructs a new buffer attribute.
   *
   * @param {(Array<number>|Uint8Array)} array - The array holding the attribute data.
   * @param {number} itemSize - The item size.
   * @param {boolean} [normalized=false] - Whether the data are normalized or not.
   */
  constructor(e, n, i) {
    super(new Uint8Array(e), n, i);
  }
}
class DC extends Nn {
  /**
   * Constructs a new buffer attribute.
   *
   * @param {(Array<number>|Uint8ClampedArray)} array - The array holding the attribute data.
   * @param {number} itemSize - The item size.
   * @param {boolean} [normalized=false] - Whether the data are normalized or not.
   */
  constructor(e, n, i) {
    super(new Uint8ClampedArray(e), n, i);
  }
}
class UC extends Nn {
  /**
   * Constructs a new buffer attribute.
   *
   * @param {(Array<number>|Int16Array)} array - The array holding the attribute data.
   * @param {number} itemSize - The item size.
   * @param {boolean} [normalized=false] - Whether the data are normalized or not.
   */
  constructor(e, n, i) {
    super(new Int16Array(e), n, i);
  }
}
class ex extends Nn {
  /**
   * Constructs a new buffer attribute.
   *
   * @param {(Array<number>|Uint16Array)} array - The array holding the attribute data.
   * @param {number} itemSize - The item size.
   * @param {boolean} [normalized=false] - Whether the data are normalized or not.
   */
  constructor(e, n, i) {
    super(new Uint16Array(e), n, i);
  }
}
class NC extends Nn {
  /**
   * Constructs a new buffer attribute.
   *
   * @param {(Array<number>|Int32Array)} array - The array holding the attribute data.
   * @param {number} itemSize - The item size.
   * @param {boolean} [normalized=false] - Whether the data are normalized or not.
   */
  constructor(e, n, i) {
    super(new Int32Array(e), n, i);
  }
}
class tx extends Nn {
  /**
   * Constructs a new buffer attribute.
   *
   * @param {(Array<number>|Uint32Array)} array - The array holding the attribute data.
   * @param {number} itemSize - The item size.
   * @param {boolean} [normalized=false] - Whether the data are normalized or not.
   */
  constructor(e, n, i) {
    super(new Uint32Array(e), n, i);
  }
}
class OC extends Nn {
  /**
   * Constructs a new buffer attribute.
   *
   * @param {(Array<number>|Uint16Array)} array - The array holding the attribute data.
   * @param {number} itemSize - The item size.
   * @param {boolean} [normalized=false] - Whether the data are normalized or not.
   */
  constructor(e, n, i) {
    super(new Uint16Array(e), n, i), this.isFloat16BufferAttribute = !0;
  }
  getX(e) {
    let n = wp(this.array[e * this.itemSize]);
    return this.normalized && (n = $a(n, this.array)), n;
  }
  setX(e, n) {
    return this.normalized && (n = $t(n, this.array)), this.array[e * this.itemSize] = Ss(n), this;
  }
  getY(e) {
    let n = wp(this.array[e * this.itemSize + 1]);
    return this.normalized && (n = $a(n, this.array)), n;
  }
  setY(e, n) {
    return this.normalized && (n = $t(n, this.array)), this.array[e * this.itemSize + 1] = Ss(n), this;
  }
  getZ(e) {
    let n = wp(this.array[e * this.itemSize + 2]);
    return this.normalized && (n = $a(n, this.array)), n;
  }
  setZ(e, n) {
    return this.normalized && (n = $t(n, this.array)), this.array[e * this.itemSize + 2] = Ss(n), this;
  }
  getW(e) {
    let n = wp(this.array[e * this.itemSize + 3]);
    return this.normalized && (n = $a(n, this.array)), n;
  }
  setW(e, n) {
    return this.normalized && (n = $t(n, this.array)), this.array[e * this.itemSize + 3] = Ss(n), this;
  }
  setXY(e, n, i) {
    return e *= this.itemSize, this.normalized && (n = $t(n, this.array), i = $t(i, this.array)), this.array[e + 0] = Ss(n), this.array[e + 1] = Ss(i), this;
  }
  setXYZ(e, n, i, r) {
    return e *= this.itemSize, this.normalized && (n = $t(n, this.array), i = $t(i, this.array), r = $t(r, this.array)), this.array[e + 0] = Ss(n), this.array[e + 1] = Ss(i), this.array[e + 2] = Ss(r), this;
  }
  setXYZW(e, n, i, r, c) {
    return e *= this.itemSize, this.normalized && (n = $t(n, this.array), i = $t(i, this.array), r = $t(r, this.array), c = $t(c, this.array)), this.array[e + 0] = Ss(n), this.array[e + 1] = Ss(i), this.array[e + 2] = Ss(r), this.array[e + 3] = Ss(c), this;
  }
}
class yt extends Nn {
  /**
   * Constructs a new buffer attribute.
   *
   * @param {(Array<number>|Float32Array)} array - The array holding the attribute data.
   * @param {number} itemSize - The item size.
   * @param {boolean} [normalized=false] - Whether the data are normalized or not.
   */
  constructor(e, n, i) {
    super(new Float32Array(e), n, i);
  }
}
let LC = 0;
const ur = /* @__PURE__ */ new Ft(), T_ = /* @__PURE__ */ new Mn(), yh = /* @__PURE__ */ new j(), Vs = /* @__PURE__ */ new wa(), Sp = /* @__PURE__ */ new wa(), aa = /* @__PURE__ */ new j();
class Kt extends qs {
  /**
   * Constructs a new geometry.
   */
  constructor() {
    super(), this.isBufferGeometry = !0, Object.defineProperty(this, "id", { value: LC++ }), this.uuid = Fs(), this.name = "", this.type = "BufferGeometry", this.index = null, this.indirect = null, this.attributes = {}, this.morphAttributes = {}, this.morphTargetsRelative = !1, this.groups = [], this.boundingBox = null, this.boundingSphere = null, this.drawRange = { start: 0, count: 1 / 0 }, this.userData = {};
  }
  /**
   * Returns the index of this geometry.
   *
   * @return {?BufferAttribute} The index. Returns `null` if no index is defined.
   */
  getIndex() {
    return this.index;
  }
  /**
   * Sets the given index to this geometry.
   *
   * @param {Array<number>|BufferAttribute} index - The index to set.
   * @return {BufferGeometry} A reference to this instance.
   */
  setIndex(e) {
    return Array.isArray(e) ? this.index = new (xE(e) ? tx : ex)(e, 1) : this.index = e, this;
  }
  /**
   * Sets the given indirect attribute to this geometry.
   *
   * @param {BufferAttribute} indirect - The attribute holding indirect draw calls.
   * @return {BufferGeometry} A reference to this instance.
   */
  setIndirect(e) {
    return this.indirect = e, this;
  }
  /**
   * Returns the indirect attribute of this geometry.
   *
   * @return {?BufferAttribute} The indirect attribute. Returns `null` if no indirect attribute is defined.
   */
  getIndirect() {
    return this.indirect;
  }
  /**
   * Returns the buffer attribute for the given name.
   *
   * @param {string} name - The attribute name.
   * @return {BufferAttribute|InterleavedBufferAttribute|undefined} The buffer attribute.
   * Returns `undefined` if not attribute has been found.
   */
  getAttribute(e) {
    return this.attributes[e];
  }
  /**
   * Sets the given attribute for the given name.
   *
   * @param {string} name - The attribute name.
   * @param {BufferAttribute|InterleavedBufferAttribute} attribute - The attribute to set.
   * @return {BufferGeometry} A reference to this instance.
   */
  setAttribute(e, n) {
    return this.attributes[e] = n, this;
  }
  /**
   * Deletes the attribute for the given name.
   *
   * @param {string} name - The attribute name to delete.
   * @return {BufferGeometry} A reference to this instance.
   */
  deleteAttribute(e) {
    return delete this.attributes[e], this;
  }
  /**
   * Returns `true` if this geometry has an attribute for the given name.
   *
   * @param {string} name - The attribute name.
   * @return {boolean} Whether this geometry has an attribute for the given name or not.
   */
  hasAttribute(e) {
    return this.attributes[e] !== void 0;
  }
  /**
   * Adds a group to this geometry.
   *
   * @param {number} start - The first element in this draw call. That is the first
   * vertex for non-indexed geometry, otherwise the first triangle index.
   * @param {number} count - Specifies how many vertices (or indices) are part of this group.
   * @param {number} [materialIndex=0] - The material array index to use.
   */
  addGroup(e, n, i = 0) {
    this.groups.push({
      start: e,
      count: n,
      materialIndex: i
    });
  }
  /**
   * Clears all groups.
   */
  clearGroups() {
    this.groups = [];
  }
  /**
   * Sets the draw range for this geometry.
   *
   * @param {number} start - The first vertex for non-indexed geometry, otherwise the first triangle index.
   * @param {number} count - For non-indexed BufferGeometry, `count` is the number of vertices to render.
   * For indexed BufferGeometry, `count` is the number of indices to render.
   */
  setDrawRange(e, n) {
    this.drawRange.start = e, this.drawRange.count = n;
  }
  /**
   * Applies the given 4x4 transformation matrix to the geometry.
   *
   * @param {Matrix4} matrix - The matrix to apply.
   * @return {BufferGeometry} A reference to this instance.
   */
  applyMatrix4(e) {
    const n = this.attributes.position;
    n !== void 0 && (n.applyMatrix4(e), n.needsUpdate = !0);
    const i = this.attributes.normal;
    if (i !== void 0) {
      const c = new Qt().getNormalMatrix(e);
      i.applyNormalMatrix(c), i.needsUpdate = !0;
    }
    const r = this.attributes.tangent;
    return r !== void 0 && (r.transformDirection(e), r.needsUpdate = !0), this.boundingBox !== null && this.computeBoundingBox(), this.boundingSphere !== null && this.computeBoundingSphere(), this;
  }
  /**
   * Applies the rotation represented by the Quaternion to the geometry.
   *
   * @param {Quaternion} q - The Quaternion to apply.
   * @return {BufferGeometry} A reference to this instance.
   */
  applyQuaternion(e) {
    return ur.makeRotationFromQuaternion(e), this.applyMatrix4(ur), this;
  }
  /**
   * Rotates the geometry about the X axis. This is typically done as a one time
   * operation, and not during a loop. Use {@link Object3D#rotation} for typical
   * real-time mesh rotation.
   *
   * @param {number} angle - The angle in radians.
   * @return {BufferGeometry} A reference to this instance.
   */
  rotateX(e) {
    return ur.makeRotationX(e), this.applyMatrix4(ur), this;
  }
  /**
   * Rotates the geometry about the Y axis. This is typically done as a one time
   * operation, and not during a loop. Use {@link Object3D#rotation} for typical
   * real-time mesh rotation.
   *
   * @param {number} angle - The angle in radians.
   * @return {BufferGeometry} A reference to this instance.
   */
  rotateY(e) {
    return ur.makeRotationY(e), this.applyMatrix4(ur), this;
  }
  /**
   * Rotates the geometry about the Z axis. This is typically done as a one time
   * operation, and not during a loop. Use {@link Object3D#rotation} for typical
   * real-time mesh rotation.
   *
   * @param {number} angle - The angle in radians.
   * @return {BufferGeometry} A reference to this instance.
   */
  rotateZ(e) {
    return ur.makeRotationZ(e), this.applyMatrix4(ur), this;
  }
  /**
   * Translates the geometry. This is typically done as a one time
   * operation, and not during a loop. Use {@link Object3D#position} for typical
   * real-time mesh rotation.
   *
   * @param {number} x - The x offset.
   * @param {number} y - The y offset.
   * @param {number} z - The z offset.
   * @return {BufferGeometry} A reference to this instance.
   */
  translate(e, n, i) {
    return ur.makeTranslation(e, n, i), this.applyMatrix4(ur), this;
  }
  /**
   * Scales the geometry. This is typically done as a one time
   * operation, and not during a loop. Use {@link Object3D#scale} for typical
   * real-time mesh rotation.
   *
   * @param {number} x - The x scale.
   * @param {number} y - The y scale.
   * @param {number} z - The z scale.
   * @return {BufferGeometry} A reference to this instance.
   */
  scale(e, n, i) {
    return ur.makeScale(e, n, i), this.applyMatrix4(ur), this;
  }
  /**
   * Rotates the geometry to face a point in 3D space. This is typically done as a one time
   * operation, and not during a loop. Use {@link Object3D#lookAt} for typical
   * real-time mesh rotation.
   *
   * @param {Vector3} vector - The target point.
   * @return {BufferGeometry} A reference to this instance.
   */
  lookAt(e) {
    return T_.lookAt(e), T_.updateMatrix(), this.applyMatrix4(T_.matrix), this;
  }
  /**
   * Center the geometry based on its bounding box.
   *
   * @return {BufferGeometry} A reference to this instance.
   */
  center() {
    return this.computeBoundingBox(), this.boundingBox.getCenter(yh).negate(), this.translate(yh.x, yh.y, yh.z), this;
  }
  /**
   * Defines a geometry by creating a `position` attribute based on the given array of points. The array
   * can hold 2D or 3D vectors. When using two-dimensional data, the `z` coordinate for all vertices is
   * set to `0`.
   *
   * If the method is used with an existing `position` attribute, the vertex data are overwritten with the
   * data from the array. The length of the array must match the vertex count.
   *
   * @param {Array<Vector2>|Array<Vector3>} points - The points.
   * @return {BufferGeometry} A reference to this instance.
   */
  setFromPoints(e) {
    const n = this.getAttribute("position");
    if (n === void 0) {
      const i = [];
      for (let r = 0, c = e.length; r < c; r++) {
        const h = e[r];
        i.push(h.x, h.y, h.z || 0);
      }
      this.setAttribute("position", new yt(i, 3));
    } else {
      const i = Math.min(e.length, n.count);
      for (let r = 0; r < i; r++) {
        const c = e[r];
        n.setXYZ(r, c.x, c.y, c.z || 0);
      }
      e.length > n.count && console.warn("THREE.BufferGeometry: Buffer size too small for points data. Use .dispose() and create a new geometry."), n.needsUpdate = !0;
    }
    return this;
  }
  /**
   * Computes the bounding box of the geometry, and updates the `boundingBox` member.
   * The bounding box is not computed by the engine; it must be computed by your app.
   * You may need to recompute the bounding box if the geometry vertices are modified.
   */
  computeBoundingBox() {
    this.boundingBox === null && (this.boundingBox = new wa());
    const e = this.attributes.position, n = this.morphAttributes.position;
    if (e && e.isGLBufferAttribute) {
      console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.", this), this.boundingBox.set(
        new j(-1 / 0, -1 / 0, -1 / 0),
        new j(1 / 0, 1 / 0, 1 / 0)
      );
      return;
    }
    if (e !== void 0) {
      if (this.boundingBox.setFromBufferAttribute(e), n)
        for (let i = 0, r = n.length; i < r; i++) {
          const c = n[i];
          Vs.setFromBufferAttribute(c), this.morphTargetsRelative ? (aa.addVectors(this.boundingBox.min, Vs.min), this.boundingBox.expandByPoint(aa), aa.addVectors(this.boundingBox.max, Vs.max), this.boundingBox.expandByPoint(aa)) : (this.boundingBox.expandByPoint(Vs.min), this.boundingBox.expandByPoint(Vs.max));
        }
    } else
      this.boundingBox.makeEmpty();
    (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) && console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
  }
  /**
   * Computes the bounding sphere of the geometry, and updates the `boundingSphere` member.
   * The engine automatically computes the bounding sphere when it is needed, e.g., for ray casting or view frustum culling.
   * You may need to recompute the bounding sphere if the geometry vertices are modified.
   */
  computeBoundingSphere() {
    this.boundingSphere === null && (this.boundingSphere = new ma());
    const e = this.attributes.position, n = this.morphAttributes.position;
    if (e && e.isGLBufferAttribute) {
      console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.", this), this.boundingSphere.set(new j(), 1 / 0);
      return;
    }
    if (e) {
      const i = this.boundingSphere.center;
      if (Vs.setFromBufferAttribute(e), n)
        for (let c = 0, h = n.length; c < h; c++) {
          const d = n[c];
          Sp.setFromBufferAttribute(d), this.morphTargetsRelative ? (aa.addVectors(Vs.min, Sp.min), Vs.expandByPoint(aa), aa.addVectors(Vs.max, Sp.max), Vs.expandByPoint(aa)) : (Vs.expandByPoint(Sp.min), Vs.expandByPoint(Sp.max));
        }
      Vs.getCenter(i);
      let r = 0;
      for (let c = 0, h = e.count; c < h; c++)
        aa.fromBufferAttribute(e, c), r = Math.max(r, i.distanceToSquared(aa));
      if (n)
        for (let c = 0, h = n.length; c < h; c++) {
          const d = n[c], v = this.morphTargetsRelative;
          for (let g = 0, S = d.count; g < S; g++)
            aa.fromBufferAttribute(d, g), v && (yh.fromBufferAttribute(e, g), aa.add(yh)), r = Math.max(r, i.distanceToSquared(aa));
        }
      this.boundingSphere.radius = Math.sqrt(r), isNaN(this.boundingSphere.radius) && console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
    }
  }
  /**
   * Calculates and adds a tangent attribute to this geometry.
   *
   * The computation is only supported for indexed geometries and if position, normal, and uv attributes
   * are defined. When using a tangent space normal map, prefer the MikkTSpace algorithm provided by
   * {@link BufferGeometryUtils#computeMikkTSpaceTangents} instead.
   */
  computeTangents() {
    const e = this.index, n = this.attributes;
    if (e === null || n.position === void 0 || n.normal === void 0 || n.uv === void 0) {
      console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");
      return;
    }
    const i = n.position, r = n.normal, c = n.uv;
    this.hasAttribute("tangent") === !1 && this.setAttribute("tangent", new Nn(new Float32Array(4 * i.count), 4));
    const h = this.getAttribute("tangent"), d = [], v = [];
    for (let k = 0; k < i.count; k++)
      d[k] = new j(), v[k] = new j();
    const g = new j(), S = new j(), x = new j(), M = new De(), b = new De(), R = new De(), w = new j(), C = new j();
    function E(k, B, z) {
      g.fromBufferAttribute(i, k), S.fromBufferAttribute(i, B), x.fromBufferAttribute(i, z), M.fromBufferAttribute(c, k), b.fromBufferAttribute(c, B), R.fromBufferAttribute(c, z), S.sub(g), x.sub(g), b.sub(M), R.sub(M);
      const W = 1 / (b.x * R.y - R.x * b.y);
      isFinite(W) && (w.copy(S).multiplyScalar(R.y).addScaledVector(x, -b.y).multiplyScalar(W), C.copy(x).multiplyScalar(b.x).addScaledVector(S, -R.x).multiplyScalar(W), d[k].add(w), d[B].add(w), d[z].add(w), v[k].add(C), v[B].add(C), v[z].add(C));
    }
    let U = this.groups;
    U.length === 0 && (U = [{
      start: 0,
      count: e.count
    }]);
    for (let k = 0, B = U.length; k < B; ++k) {
      const z = U[k], W = z.start, le = z.count;
      for (let ae = W, oe = W + le; ae < oe; ae += 3)
        E(
          e.getX(ae + 0),
          e.getX(ae + 1),
          e.getX(ae + 2)
        );
    }
    const N = new j(), O = new j(), I = new j(), V = new j();
    function Y(k) {
      I.fromBufferAttribute(r, k), V.copy(I);
      const B = d[k];
      N.copy(B), N.sub(I.multiplyScalar(I.dot(B))).normalize(), O.crossVectors(V, B);
      const W = O.dot(v[k]) < 0 ? -1 : 1;
      h.setXYZW(k, N.x, N.y, N.z, W);
    }
    for (let k = 0, B = U.length; k < B; ++k) {
      const z = U[k], W = z.start, le = z.count;
      for (let ae = W, oe = W + le; ae < oe; ae += 3)
        Y(e.getX(ae + 0)), Y(e.getX(ae + 1)), Y(e.getX(ae + 2));
    }
  }
  /**
   * Computes vertex normals for the given vertex data. For indexed geometries, the method sets
   * each vertex normal to be the average of the face normals of the faces that share that vertex.
   * For non-indexed geometries, vertices are not shared, and the method sets each vertex normal
   * to be the same as the face normal.
   */
  computeVertexNormals() {
    const e = this.index, n = this.getAttribute("position");
    if (n !== void 0) {
      let i = this.getAttribute("normal");
      if (i === void 0)
        i = new Nn(new Float32Array(n.count * 3), 3), this.setAttribute("normal", i);
      else
        for (let M = 0, b = i.count; M < b; M++)
          i.setXYZ(M, 0, 0, 0);
      const r = new j(), c = new j(), h = new j(), d = new j(), v = new j(), g = new j(), S = new j(), x = new j();
      if (e)
        for (let M = 0, b = e.count; M < b; M += 3) {
          const R = e.getX(M + 0), w = e.getX(M + 1), C = e.getX(M + 2);
          r.fromBufferAttribute(n, R), c.fromBufferAttribute(n, w), h.fromBufferAttribute(n, C), S.subVectors(h, c), x.subVectors(r, c), S.cross(x), d.fromBufferAttribute(i, R), v.fromBufferAttribute(i, w), g.fromBufferAttribute(i, C), d.add(S), v.add(S), g.add(S), i.setXYZ(R, d.x, d.y, d.z), i.setXYZ(w, v.x, v.y, v.z), i.setXYZ(C, g.x, g.y, g.z);
        }
      else
        for (let M = 0, b = n.count; M < b; M += 3)
          r.fromBufferAttribute(n, M + 0), c.fromBufferAttribute(n, M + 1), h.fromBufferAttribute(n, M + 2), S.subVectors(h, c), x.subVectors(r, c), S.cross(x), i.setXYZ(M + 0, S.x, S.y, S.z), i.setXYZ(M + 1, S.x, S.y, S.z), i.setXYZ(M + 2, S.x, S.y, S.z);
      this.normalizeNormals(), i.needsUpdate = !0;
    }
  }
  /**
   * Ensures every normal vector in a geometry will have a magnitude of `1`. This will
   * correct lighting on the geometry surfaces.
   */
  normalizeNormals() {
    const e = this.attributes.normal;
    for (let n = 0, i = e.count; n < i; n++)
      aa.fromBufferAttribute(e, n), aa.normalize(), e.setXYZ(n, aa.x, aa.y, aa.z);
  }
  /**
   * Return a new non-index version of this indexed geometry. If the geometry
   * is already non-indexed, the method is a NOOP.
   *
   * @return {BufferGeometry} The non-indexed version of this indexed geometry.
   */
  toNonIndexed() {
    function e(d, v) {
      const g = d.array, S = d.itemSize, x = d.normalized, M = new g.constructor(v.length * S);
      let b = 0, R = 0;
      for (let w = 0, C = v.length; w < C; w++) {
        d.isInterleavedBufferAttribute ? b = v[w] * d.data.stride + d.offset : b = v[w] * S;
        for (let E = 0; E < S; E++)
          M[R++] = g[b++];
      }
      return new Nn(M, S, x);
    }
    if (this.index === null)
      return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."), this;
    const n = new Kt(), i = this.index.array, r = this.attributes;
    for (const d in r) {
      const v = r[d], g = e(v, i);
      n.setAttribute(d, g);
    }
    const c = this.morphAttributes;
    for (const d in c) {
      const v = [], g = c[d];
      for (let S = 0, x = g.length; S < x; S++) {
        const M = g[S], b = e(M, i);
        v.push(b);
      }
      n.morphAttributes[d] = v;
    }
    n.morphTargetsRelative = this.morphTargetsRelative;
    const h = this.groups;
    for (let d = 0, v = h.length; d < v; d++) {
      const g = h[d];
      n.addGroup(g.start, g.count, g.materialIndex);
    }
    return n;
  }
  /**
   * Serializes the geometry into JSON.
   *
   * @return {Object} A JSON object representing the serialized geometry.
   */
  toJSON() {
    const e = {
      metadata: {
        version: 4.7,
        type: "BufferGeometry",
        generator: "BufferGeometry.toJSON"
      }
    };
    if (e.uuid = this.uuid, e.type = this.type, this.name !== "" && (e.name = this.name), Object.keys(this.userData).length > 0 && (e.userData = this.userData), this.parameters !== void 0) {
      const v = this.parameters;
      for (const g in v)
        v[g] !== void 0 && (e[g] = v[g]);
      return e;
    }
    e.data = { attributes: {} };
    const n = this.index;
    n !== null && (e.data.index = {
      type: n.array.constructor.name,
      array: Array.prototype.slice.call(n.array)
    });
    const i = this.attributes;
    for (const v in i) {
      const g = i[v];
      e.data.attributes[v] = g.toJSON(e.data);
    }
    const r = {};
    let c = !1;
    for (const v in this.morphAttributes) {
      const g = this.morphAttributes[v], S = [];
      for (let x = 0, M = g.length; x < M; x++) {
        const b = g[x];
        S.push(b.toJSON(e.data));
      }
      S.length > 0 && (r[v] = S, c = !0);
    }
    c && (e.data.morphAttributes = r, e.data.morphTargetsRelative = this.morphTargetsRelative);
    const h = this.groups;
    h.length > 0 && (e.data.groups = JSON.parse(JSON.stringify(h)));
    const d = this.boundingSphere;
    return d !== null && (e.data.boundingSphere = d.toJSON()), e;
  }
  /**
   * Returns a new geometry with copied values from this instance.
   *
   * @return {BufferGeometry} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
  /**
   * Copies the values of the given geometry to this instance.
   *
   * @param {BufferGeometry} source - The geometry to copy.
   * @return {BufferGeometry} A reference to this instance.
   */
  copy(e) {
    this.index = null, this.attributes = {}, this.morphAttributes = {}, this.groups = [], this.boundingBox = null, this.boundingSphere = null;
    const n = {};
    this.name = e.name;
    const i = e.index;
    i !== null && this.setIndex(i.clone());
    const r = e.attributes;
    for (const g in r) {
      const S = r[g];
      this.setAttribute(g, S.clone(n));
    }
    const c = e.morphAttributes;
    for (const g in c) {
      const S = [], x = c[g];
      for (let M = 0, b = x.length; M < b; M++)
        S.push(x[M].clone(n));
      this.morphAttributes[g] = S;
    }
    this.morphTargetsRelative = e.morphTargetsRelative;
    const h = e.groups;
    for (let g = 0, S = h.length; g < S; g++) {
      const x = h[g];
      this.addGroup(x.start, x.count, x.materialIndex);
    }
    const d = e.boundingBox;
    d !== null && (this.boundingBox = d.clone());
    const v = e.boundingSphere;
    return v !== null && (this.boundingSphere = v.clone()), this.drawRange.start = e.drawRange.start, this.drawRange.count = e.drawRange.count, this.userData = e.userData, this;
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   *
   * @fires BufferGeometry#dispose
   */
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
}
const I1 = /* @__PURE__ */ new Ft(), Cu = /* @__PURE__ */ new Kh(), sg = /* @__PURE__ */ new ma(), H1 = /* @__PURE__ */ new j(), rg = /* @__PURE__ */ new j(), og = /* @__PURE__ */ new j(), lg = /* @__PURE__ */ new j(), A_ = /* @__PURE__ */ new j(), cg = /* @__PURE__ */ new j(), V1 = /* @__PURE__ */ new j(), ug = /* @__PURE__ */ new j();
class Ci extends Mn {
  /**
   * Constructs a new mesh.
   *
   * @param {BufferGeometry} [geometry] - The mesh geometry.
   * @param {Material|Array<Material>} [material] - The mesh material.
   */
  constructor(e = new Kt(), n = new Uc()) {
    super(), this.isMesh = !0, this.type = "Mesh", this.geometry = e, this.material = n, this.morphTargetDictionary = void 0, this.morphTargetInfluences = void 0, this.count = 1, this.updateMorphTargets();
  }
  copy(e, n) {
    return super.copy(e, n), e.morphTargetInfluences !== void 0 && (this.morphTargetInfluences = e.morphTargetInfluences.slice()), e.morphTargetDictionary !== void 0 && (this.morphTargetDictionary = Object.assign({}, e.morphTargetDictionary)), this.material = Array.isArray(e.material) ? e.material.slice() : e.material, this.geometry = e.geometry, this;
  }
  /**
   * Sets the values of {@link Mesh#morphTargetDictionary} and {@link Mesh#morphTargetInfluences}
   * to make sure existing morph targets can influence this 3D object.
   */
  updateMorphTargets() {
    const n = this.geometry.morphAttributes, i = Object.keys(n);
    if (i.length > 0) {
      const r = n[i[0]];
      if (r !== void 0) {
        this.morphTargetInfluences = [], this.morphTargetDictionary = {};
        for (let c = 0, h = r.length; c < h; c++) {
          const d = r[c].name || String(c);
          this.morphTargetInfluences.push(0), this.morphTargetDictionary[d] = c;
        }
      }
    }
  }
  /**
   * Returns the local-space position of the vertex at the given index, taking into
   * account the current animation state of both morph targets and skinning.
   *
   * @param {number} index - The vertex index.
   * @param {Vector3} target - The target object that is used to store the method's result.
   * @return {Vector3} The vertex position in local space.
   */
  getVertexPosition(e, n) {
    const i = this.geometry, r = i.attributes.position, c = i.morphAttributes.position, h = i.morphTargetsRelative;
    n.fromBufferAttribute(r, e);
    const d = this.morphTargetInfluences;
    if (c && d) {
      cg.set(0, 0, 0);
      for (let v = 0, g = c.length; v < g; v++) {
        const S = d[v], x = c[v];
        S !== 0 && (A_.fromBufferAttribute(x, e), h ? cg.addScaledVector(A_, S) : cg.addScaledVector(A_.sub(n), S));
      }
      n.add(cg);
    }
    return n;
  }
  /**
   * Computes intersection points between a casted ray and this line.
   *
   * @param {Raycaster} raycaster - The raycaster.
   * @param {Array<Object>} intersects - The target array that holds the intersection points.
   */
  raycast(e, n) {
    const i = this.geometry, r = this.material, c = this.matrixWorld;
    r !== void 0 && (i.boundingSphere === null && i.computeBoundingSphere(), sg.copy(i.boundingSphere), sg.applyMatrix4(c), Cu.copy(e.ray).recast(e.near), !(sg.containsPoint(Cu.origin) === !1 && (Cu.intersectSphere(sg, H1) === null || Cu.origin.distanceToSquared(H1) > (e.far - e.near) ** 2)) && (I1.copy(c).invert(), Cu.copy(e.ray).applyMatrix4(I1), !(i.boundingBox !== null && Cu.intersectsBox(i.boundingBox) === !1) && this._computeIntersections(e, n, Cu)));
  }
  _computeIntersections(e, n, i) {
    let r;
    const c = this.geometry, h = this.material, d = c.index, v = c.attributes.position, g = c.attributes.uv, S = c.attributes.uv1, x = c.attributes.normal, M = c.groups, b = c.drawRange;
    if (d !== null)
      if (Array.isArray(h))
        for (let R = 0, w = M.length; R < w; R++) {
          const C = M[R], E = h[C.materialIndex], U = Math.max(C.start, b.start), N = Math.min(d.count, Math.min(C.start + C.count, b.start + b.count));
          for (let O = U, I = N; O < I; O += 3) {
            const V = d.getX(O), Y = d.getX(O + 1), k = d.getX(O + 2);
            r = fg(this, E, e, i, g, S, x, V, Y, k), r && (r.faceIndex = Math.floor(O / 3), r.face.materialIndex = C.materialIndex, n.push(r));
          }
        }
      else {
        const R = Math.max(0, b.start), w = Math.min(d.count, b.start + b.count);
        for (let C = R, E = w; C < E; C += 3) {
          const U = d.getX(C), N = d.getX(C + 1), O = d.getX(C + 2);
          r = fg(this, h, e, i, g, S, x, U, N, O), r && (r.faceIndex = Math.floor(C / 3), n.push(r));
        }
      }
    else if (v !== void 0)
      if (Array.isArray(h))
        for (let R = 0, w = M.length; R < w; R++) {
          const C = M[R], E = h[C.materialIndex], U = Math.max(C.start, b.start), N = Math.min(v.count, Math.min(C.start + C.count, b.start + b.count));
          for (let O = U, I = N; O < I; O += 3) {
            const V = O, Y = O + 1, k = O + 2;
            r = fg(this, E, e, i, g, S, x, V, Y, k), r && (r.faceIndex = Math.floor(O / 3), r.face.materialIndex = C.materialIndex, n.push(r));
          }
        }
      else {
        const R = Math.max(0, b.start), w = Math.min(v.count, b.start + b.count);
        for (let C = R, E = w; C < E; C += 3) {
          const U = C, N = C + 1, O = C + 2;
          r = fg(this, h, e, i, g, S, x, U, N, O), r && (r.faceIndex = Math.floor(C / 3), n.push(r));
        }
      }
  }
}
function zC(s, e, n, i, r, c, h, d) {
  let v;
  if (e.side === ji ? v = i.intersectTriangle(h, c, r, !0, d) : v = i.intersectTriangle(r, c, h, e.side === Po, d), v === null) return null;
  ug.copy(d), ug.applyMatrix4(s.matrixWorld);
  const g = n.ray.origin.distanceTo(ug);
  return g < n.near || g > n.far ? null : {
    distance: g,
    point: ug.clone(),
    object: s
  };
}
function fg(s, e, n, i, r, c, h, d, v, g) {
  s.getVertexPosition(d, rg), s.getVertexPosition(v, og), s.getVertexPosition(g, lg);
  const S = zC(s, e, n, i, rg, og, lg, V1);
  if (S) {
    const x = new j();
    bs.getBarycoord(V1, rg, og, lg, x), r && (S.uv = bs.getInterpolatedAttribute(r, d, v, g, x, new De())), c && (S.uv1 = bs.getInterpolatedAttribute(c, d, v, g, x, new De())), h && (S.normal = bs.getInterpolatedAttribute(h, d, v, g, x, new j()), S.normal.dot(i.direction) > 0 && S.normal.multiplyScalar(-1));
    const M = {
      a: d,
      b: v,
      c: g,
      normal: new j(),
      materialIndex: 0
    };
    bs.getNormal(rg, og, lg, M.normal), S.face = M, S.barycoord = x;
  }
  return S;
}
class af extends Kt {
  /**
   * Constructs a new box geometry.
   *
   * @param {number} [width=1] - The width. That is, the length of the edges parallel to the X axis.
   * @param {number} [height=1] - The height. That is, the length of the edges parallel to the Y axis.
   * @param {number} [depth=1] - The depth. That is, the length of the edges parallel to the Z axis.
   * @param {number} [widthSegments=1] - Number of segmented rectangular faces along the width of the sides.
   * @param {number} [heightSegments=1] - Number of segmented rectangular faces along the height of the sides.
   * @param {number} [depthSegments=1] - Number of segmented rectangular faces along the depth of the sides.
   */
  constructor(e = 1, n = 1, i = 1, r = 1, c = 1, h = 1) {
    super(), this.type = "BoxGeometry", this.parameters = {
      width: e,
      height: n,
      depth: i,
      widthSegments: r,
      heightSegments: c,
      depthSegments: h
    };
    const d = this;
    r = Math.floor(r), c = Math.floor(c), h = Math.floor(h);
    const v = [], g = [], S = [], x = [];
    let M = 0, b = 0;
    R("z", "y", "x", -1, -1, i, n, e, h, c, 0), R("z", "y", "x", 1, -1, i, n, -e, h, c, 1), R("x", "z", "y", 1, 1, e, i, n, r, h, 2), R("x", "z", "y", 1, -1, e, i, -n, r, h, 3), R("x", "y", "z", 1, -1, e, n, i, r, c, 4), R("x", "y", "z", -1, -1, e, n, -i, r, c, 5), this.setIndex(v), this.setAttribute("position", new yt(g, 3)), this.setAttribute("normal", new yt(S, 3)), this.setAttribute("uv", new yt(x, 2));
    function R(w, C, E, U, N, O, I, V, Y, k, B) {
      const z = O / Y, W = I / k, le = O / 2, ae = I / 2, oe = V / 2, pe = Y + 1, P = k + 1;
      let K = 0, Q = 0;
      const fe = new j();
      for (let q = 0; q < P; q++) {
        const te = q * W - ae;
        for (let Me = 0; Me < pe; Me++) {
          const Re = Me * z - le;
          fe[w] = Re * U, fe[C] = te * N, fe[E] = oe, g.push(fe.x, fe.y, fe.z), fe[w] = 0, fe[C] = 0, fe[E] = V > 0 ? 1 : -1, S.push(fe.x, fe.y, fe.z), x.push(Me / Y), x.push(1 - q / k), K += 1;
        }
      }
      for (let q = 0; q < k; q++)
        for (let te = 0; te < Y; te++) {
          const Me = M + te + pe * q, Re = M + te + pe * (q + 1), Ne = M + (te + 1) + pe * (q + 1), he = M + (te + 1) + pe * q;
          v.push(Me, Re, he), v.push(Re, Ne, he), Q += 6;
        }
      d.addGroup(b, Q, B), b += Q, M += K;
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {BoxGeometry} A new instance.
   */
  static fromJSON(e) {
    return new af(e.width, e.height, e.depth, e.widthSegments, e.heightSegments, e.depthSegments);
  }
}
function Yh(s) {
  const e = {};
  for (const n in s) {
    e[n] = {};
    for (const i in s[n]) {
      const r = s[n][i];
      r && (r.isColor || r.isMatrix3 || r.isMatrix4 || r.isVector2 || r.isVector3 || r.isVector4 || r.isTexture || r.isQuaternion) ? r.isRenderTargetTexture ? (console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."), e[n][i] = null) : e[n][i] = r.clone() : Array.isArray(r) ? e[n][i] = r.slice() : e[n][i] = r;
    }
  }
  return e;
}
function Ja(s) {
  const e = {};
  for (let n = 0; n < s.length; n++) {
    const i = Yh(s[n]);
    for (const r in i)
      e[r] = i[r];
  }
  return e;
}
function BC(s) {
  const e = [];
  for (let n = 0; n < s.length; n++)
    e.push(s[n].clone());
  return e;
}
function TE(s) {
  const e = s.getRenderTarget();
  return e === null ? s.outputColorSpace : e.isXRRenderTarget === !0 ? e.texture.colorSpace : vn.workingColorSpace;
}
const AE = { clone: Yh, merge: Ja };
var PC = `void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}`, IC = `void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}`;
class ts extends sa {
  /**
   * Constructs a new shader material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(e) {
    super(), this.isShaderMaterial = !0, this.type = "ShaderMaterial", this.defines = {}, this.uniforms = {}, this.uniformsGroups = [], this.vertexShader = PC, this.fragmentShader = IC, this.linewidth = 1, this.wireframe = !1, this.wireframeLinewidth = 1, this.fog = !1, this.lights = !1, this.clipping = !1, this.forceSinglePass = !0, this.extensions = {
      clipCullDistance: !1,
      // set to use vertex shader clipping
      multiDraw: !1
      // set to use vertex shader multi_draw / enable gl_DrawID
    }, this.defaultAttributeValues = {
      color: [1, 1, 1],
      uv: [0, 0],
      uv1: [0, 0]
    }, this.index0AttributeName = void 0, this.uniformsNeedUpdate = !1, this.glslVersion = null, e !== void 0 && this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.fragmentShader = e.fragmentShader, this.vertexShader = e.vertexShader, this.uniforms = Yh(e.uniforms), this.uniformsGroups = BC(e.uniformsGroups), this.defines = Object.assign({}, e.defines), this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.fog = e.fog, this.lights = e.lights, this.clipping = e.clipping, this.extensions = Object.assign({}, e.extensions), this.glslVersion = e.glslVersion, this;
  }
  toJSON(e) {
    const n = super.toJSON(e);
    n.glslVersion = this.glslVersion, n.uniforms = {};
    for (const r in this.uniforms) {
      const h = this.uniforms[r].value;
      h && h.isTexture ? n.uniforms[r] = {
        type: "t",
        value: h.toJSON(e).uuid
      } : h && h.isColor ? n.uniforms[r] = {
        type: "c",
        value: h.getHex()
      } : h && h.isVector2 ? n.uniforms[r] = {
        type: "v2",
        value: h.toArray()
      } : h && h.isVector3 ? n.uniforms[r] = {
        type: "v3",
        value: h.toArray()
      } : h && h.isVector4 ? n.uniforms[r] = {
        type: "v4",
        value: h.toArray()
      } : h && h.isMatrix3 ? n.uniforms[r] = {
        type: "m3",
        value: h.toArray()
      } : h && h.isMatrix4 ? n.uniforms[r] = {
        type: "m4",
        value: h.toArray()
      } : n.uniforms[r] = {
        value: h
      };
    }
    Object.keys(this.defines).length > 0 && (n.defines = this.defines), n.vertexShader = this.vertexShader, n.fragmentShader = this.fragmentShader, n.lights = this.lights, n.clipping = this.clipping;
    const i = {};
    for (const r in this.extensions)
      this.extensions[r] === !0 && (i[r] = !0);
    return Object.keys(i).length > 0 && (n.extensions = i), n;
  }
}
class fm extends Mn {
  /**
   * Constructs a new camera.
   */
  constructor() {
    super(), this.isCamera = !0, this.type = "Camera", this.matrixWorldInverse = new Ft(), this.projectionMatrix = new Ft(), this.projectionMatrixInverse = new Ft(), this.coordinateSystem = Gs, this._reversedDepth = !1;
  }
  /**
   * The flag that indicates whether the camera uses a reversed depth buffer.
   *
   * @type {boolean}
   * @default false
   */
  get reversedDepth() {
    return this._reversedDepth;
  }
  copy(e, n) {
    return super.copy(e, n), this.matrixWorldInverse.copy(e.matrixWorldInverse), this.projectionMatrix.copy(e.projectionMatrix), this.projectionMatrixInverse.copy(e.projectionMatrixInverse), this.coordinateSystem = e.coordinateSystem, this;
  }
  /**
   * Returns a vector representing the ("look") direction of the 3D object in world space.
   *
   * This method is overwritten since cameras have a different forward vector compared to other
   * 3D objects. A camera looks down its local, negative z-axis by default.
   *
   * @param {Vector3} target - The target vector the result is stored to.
   * @return {Vector3} The 3D object's direction in world space.
   */
  getWorldDirection(e) {
    return super.getWorldDirection(e).negate();
  }
  updateMatrixWorld(e) {
    super.updateMatrixWorld(e), this.matrixWorldInverse.copy(this.matrixWorld).invert();
  }
  updateWorldMatrix(e, n) {
    super.updateWorldMatrix(e, n), this.matrixWorldInverse.copy(this.matrixWorld).invert();
  }
  clone() {
    return new this.constructor().copy(this);
  }
}
const Sc = /* @__PURE__ */ new j(), G1 = /* @__PURE__ */ new De(), F1 = /* @__PURE__ */ new De();
class Zi extends fm {
  /**
   * Constructs a new perspective camera.
   *
   * @param {number} [fov=50] - The vertical field of view.
   * @param {number} [aspect=1] - The aspect ratio.
   * @param {number} [near=0.1] - The camera's near plane.
   * @param {number} [far=2000] - The camera's far plane.
   */
  constructor(e = 50, n = 1, i = 0.1, r = 2e3) {
    super(), this.isPerspectiveCamera = !0, this.type = "PerspectiveCamera", this.fov = e, this.zoom = 1, this.near = i, this.far = r, this.focus = 10, this.aspect = n, this.view = null, this.filmGauge = 35, this.filmOffset = 0, this.updateProjectionMatrix();
  }
  copy(e, n) {
    return super.copy(e, n), this.fov = e.fov, this.zoom = e.zoom, this.near = e.near, this.far = e.far, this.focus = e.focus, this.aspect = e.aspect, this.view = e.view === null ? null : Object.assign({}, e.view), this.filmGauge = e.filmGauge, this.filmOffset = e.filmOffset, this;
  }
  /**
   * Sets the FOV by focal length in respect to the current {@link PerspectiveCamera#filmGauge}.
   *
   * The default film gauge is 35, so that the focal length can be specified for
   * a 35mm (full frame) camera.
   *
   * @param {number} focalLength - Values for focal length and film gauge must have the same unit.
   */
  setFocalLength(e) {
    const n = 0.5 * this.getFilmHeight() / e;
    this.fov = Xh * 2 * Math.atan(n), this.updateProjectionMatrix();
  }
  /**
   * Returns the focal length from the current {@link PerspectiveCamera#fov} and
   * {@link PerspectiveCamera#filmGauge}.
   *
   * @return {number} The computed focal length.
   */
  getFocalLength() {
    const e = Math.tan(Wu * 0.5 * this.fov);
    return 0.5 * this.getFilmHeight() / e;
  }
  /**
   * Returns the current vertical field of view angle in degrees considering {@link PerspectiveCamera#zoom}.
   *
   * @return {number} The effective FOV.
   */
  getEffectiveFOV() {
    return Xh * 2 * Math.atan(
      Math.tan(Wu * 0.5 * this.fov) / this.zoom
    );
  }
  /**
   * Returns the width of the image on the film. If {@link PerspectiveCamera#aspect} is greater than or
   * equal to one (landscape format), the result equals {@link PerspectiveCamera#filmGauge}.
   *
   * @return {number} The film width.
   */
  getFilmWidth() {
    return this.filmGauge * Math.min(this.aspect, 1);
  }
  /**
   * Returns the height of the image on the film. If {@link PerspectiveCamera#aspect} is greater than or
   * equal to one (landscape format), the result equals {@link PerspectiveCamera#filmGauge}.
   *
   * @return {number} The film width.
   */
  getFilmHeight() {
    return this.filmGauge / Math.max(this.aspect, 1);
  }
  /**
   * Computes the 2D bounds of the camera's viewable rectangle at a given distance along the viewing direction.
   * Sets `minTarget` and `maxTarget` to the coordinates of the lower-left and upper-right corners of the view rectangle.
   *
   * @param {number} distance - The viewing distance.
   * @param {Vector2} minTarget - The lower-left corner of the view rectangle is written into this vector.
   * @param {Vector2} maxTarget - The upper-right corner of the view rectangle is written into this vector.
   */
  getViewBounds(e, n, i) {
    Sc.set(-1, -1, 0.5).applyMatrix4(this.projectionMatrixInverse), n.set(Sc.x, Sc.y).multiplyScalar(-e / Sc.z), Sc.set(1, 1, 0.5).applyMatrix4(this.projectionMatrixInverse), i.set(Sc.x, Sc.y).multiplyScalar(-e / Sc.z);
  }
  /**
   * Computes the width and height of the camera's viewable rectangle at a given distance along the viewing direction.
   *
   * @param {number} distance - The viewing distance.
   * @param {Vector2} target - The target vector that is used to store result where x is width and y is height.
   * @returns {Vector2} The view size.
   */
  getViewSize(e, n) {
    return this.getViewBounds(e, G1, F1), n.subVectors(F1, G1);
  }
  /**
   * Sets an offset in a larger frustum. This is useful for multi-window or
   * multi-monitor/multi-machine setups.
   *
   * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
   * the monitors are in grid like this
   *```
   *   +---+---+---+
   *   | A | B | C |
   *   +---+---+---+
   *   | D | E | F |
   *   +---+---+---+
   *```
   * then for each monitor you would call it like this:
   *```js
   * const w = 1920;
   * const h = 1080;
   * const fullWidth = w * 3;
   * const fullHeight = h * 2;
   *
   * // --A--
   * camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
   * // --B--
   * camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
   * // --C--
   * camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
   * // --D--
   * camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
   * // --E--
   * camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
   * // --F--
   * camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
   * ```
   *
   * Note there is no reason monitors have to be the same size or in a grid.
   *
   * @param {number} fullWidth - The full width of multiview setup.
   * @param {number} fullHeight - The full height of multiview setup.
   * @param {number} x - The horizontal offset of the subcamera.
   * @param {number} y - The vertical offset of the subcamera.
   * @param {number} width - The width of subcamera.
   * @param {number} height - The height of subcamera.
   */
  setViewOffset(e, n, i, r, c, h) {
    this.aspect = e / n, this.view === null && (this.view = {
      enabled: !0,
      fullWidth: 1,
      fullHeight: 1,
      offsetX: 0,
      offsetY: 0,
      width: 1,
      height: 1
    }), this.view.enabled = !0, this.view.fullWidth = e, this.view.fullHeight = n, this.view.offsetX = i, this.view.offsetY = r, this.view.width = c, this.view.height = h, this.updateProjectionMatrix();
  }
  /**
   * Removes the view offset from the projection matrix.
   */
  clearViewOffset() {
    this.view !== null && (this.view.enabled = !1), this.updateProjectionMatrix();
  }
  /**
   * Updates the camera's projection matrix. Must be called after any change of
   * camera properties.
   */
  updateProjectionMatrix() {
    const e = this.near;
    let n = e * Math.tan(Wu * 0.5 * this.fov) / this.zoom, i = 2 * n, r = this.aspect * i, c = -0.5 * r;
    const h = this.view;
    if (this.view !== null && this.view.enabled) {
      const v = h.fullWidth, g = h.fullHeight;
      c += h.offsetX * r / v, n -= h.offsetY * i / g, r *= h.width / v, i *= h.height / g;
    }
    const d = this.filmOffset;
    d !== 0 && (c += e * d / this.getFilmWidth()), this.projectionMatrix.makePerspective(c, c + r, n, n - i, e, this.far, this.coordinateSystem, this.reversedDepth), this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
  }
  toJSON(e) {
    const n = super.toJSON(e);
    return n.object.fov = this.fov, n.object.zoom = this.zoom, n.object.near = this.near, n.object.far = this.far, n.object.focus = this.focus, n.object.aspect = this.aspect, this.view !== null && (n.object.view = Object.assign({}, this.view)), n.object.filmGauge = this.filmGauge, n.object.filmOffset = this.filmOffset, n;
  }
}
const _h = -90, Sh = 1;
class RE extends Mn {
  /**
   * Constructs a new cube camera.
   *
   * @param {number} near - The camera's near plane.
   * @param {number} far - The camera's far plane.
   * @param {WebGLCubeRenderTarget} renderTarget - The cube render target.
   */
  constructor(e, n, i) {
    super(), this.type = "CubeCamera", this.renderTarget = i, this.coordinateSystem = null, this.activeMipmapLevel = 0;
    const r = new Zi(_h, Sh, e, n);
    r.layers = this.layers, this.add(r);
    const c = new Zi(_h, Sh, e, n);
    c.layers = this.layers, this.add(c);
    const h = new Zi(_h, Sh, e, n);
    h.layers = this.layers, this.add(h);
    const d = new Zi(_h, Sh, e, n);
    d.layers = this.layers, this.add(d);
    const v = new Zi(_h, Sh, e, n);
    v.layers = this.layers, this.add(v);
    const g = new Zi(_h, Sh, e, n);
    g.layers = this.layers, this.add(g);
  }
  /**
   * Must be called when the coordinate system of the cube camera is changed.
   */
  updateCoordinateSystem() {
    const e = this.coordinateSystem, n = this.children.concat(), [i, r, c, h, d, v] = n;
    for (const g of n) this.remove(g);
    if (e === Gs)
      i.up.set(0, 1, 0), i.lookAt(1, 0, 0), r.up.set(0, 1, 0), r.lookAt(-1, 0, 0), c.up.set(0, 0, -1), c.lookAt(0, 1, 0), h.up.set(0, 0, 1), h.lookAt(0, -1, 0), d.up.set(0, 1, 0), d.lookAt(0, 0, 1), v.up.set(0, 1, 0), v.lookAt(0, 0, -1);
    else if (e === Fh)
      i.up.set(0, -1, 0), i.lookAt(-1, 0, 0), r.up.set(0, -1, 0), r.lookAt(1, 0, 0), c.up.set(0, 0, 1), c.lookAt(0, 1, 0), h.up.set(0, 0, -1), h.lookAt(0, -1, 0), d.up.set(0, -1, 0), d.lookAt(0, 0, 1), v.up.set(0, -1, 0), v.lookAt(0, 0, -1);
    else
      throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: " + e);
    for (const g of n)
      this.add(g), g.updateMatrixWorld();
  }
  /**
   * Calling this method will render the given scene with the given renderer
   * into the cube render target of the camera.
   *
   * @param {(Renderer|WebGLRenderer)} renderer - The renderer.
   * @param {Scene} scene - The scene to render.
   */
  update(e, n) {
    this.parent === null && this.updateMatrixWorld();
    const { renderTarget: i, activeMipmapLevel: r } = this;
    this.coordinateSystem !== e.coordinateSystem && (this.coordinateSystem = e.coordinateSystem, this.updateCoordinateSystem());
    const [c, h, d, v, g, S] = this.children, x = e.getRenderTarget(), M = e.getActiveCubeFace(), b = e.getActiveMipmapLevel(), R = e.xr.enabled;
    e.xr.enabled = !1;
    const w = i.texture.generateMipmaps;
    i.texture.generateMipmaps = !1, e.setRenderTarget(i, 0, r), e.render(n, c), e.setRenderTarget(i, 1, r), e.render(n, h), e.setRenderTarget(i, 2, r), e.render(n, d), e.setRenderTarget(i, 3, r), e.render(n, v), e.setRenderTarget(i, 4, r), e.render(n, g), i.texture.generateMipmaps = w, e.setRenderTarget(i, 5, r), e.render(n, S), e.setRenderTarget(x, M, b), e.xr.enabled = R, i.texture.needsPMREMUpdate = !0;
  }
}
class hm extends si {
  /**
   * Constructs a new cube texture.
   *
   * @param {Array<Image>} [images=[]] - An array holding a image for each side of a cube.
   * @param {number} [mapping=CubeReflectionMapping] - The texture mapping.
   * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.
   * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.
   * @param {number} [magFilter=LinearFilter] - The mag filter value.
   * @param {number} [minFilter=LinearMipmapLinearFilter] - The min filter value.
   * @param {number} [format=RGBAFormat] - The texture format.
   * @param {number} [type=UnsignedByteType] - The texture type.
   * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.
   * @param {string} [colorSpace=NoColorSpace] - The color space value.
   */
  constructor(e = [], n = Sl, i, r, c, h, d, v, g, S) {
    super(e, n, i, r, c, h, d, v, g, S), this.isCubeTexture = !0, this.flipY = !1;
  }
  /**
   * Alias for {@link CubeTexture#image}.
   *
   * @type {Array<Image>}
   */
  get images() {
    return this.image;
  }
  set images(e) {
    this.image = e;
  }
}
class CE extends Ua {
  /**
   * Constructs a new cube render target.
   *
   * @param {number} [size=1] - The size of the render target.
   * @param {RenderTarget~Options} [options] - The configuration object.
   */
  constructor(e = 1, n = {}) {
    super(e, e, n), this.isWebGLCubeRenderTarget = !0;
    const i = { width: e, height: e, depth: 1 }, r = [i, i, i, i, i, i];
    this.texture = new hm(r), this._setTextureOptions(n), this.texture.isRenderTargetTexture = !0;
  }
  /**
   * Converts the given equirectangular texture to a cube map.
   *
   * @param {WebGLRenderer} renderer - The renderer.
   * @param {Texture} texture - The equirectangular texture.
   * @return {WebGLCubeRenderTarget} A reference to this cube render target.
   */
  fromEquirectangularTexture(e, n) {
    this.texture.type = n.type, this.texture.colorSpace = n.colorSpace, this.texture.generateMipmaps = n.generateMipmaps, this.texture.minFilter = n.minFilter, this.texture.magFilter = n.magFilter;
    const i = {
      uniforms: {
        tEquirect: { value: null }
      },
      vertexShader: (
        /* glsl */
        `

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`
      ),
      fragmentShader: (
        /* glsl */
        `

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`
      )
    }, r = new af(5, 5, 5), c = new ts({
      name: "CubemapFromEquirect",
      uniforms: Yh(i.uniforms),
      vertexShader: i.vertexShader,
      fragmentShader: i.fragmentShader,
      side: ji,
      blending: dr
    });
    c.uniforms.tEquirect.value = n;
    const h = new Ci(r, c), d = n.minFilter;
    return n.minFilter === Lo && (n.minFilter = di), new RE(1, 10, this).update(e, h), n.minFilter = d, h.geometry.dispose(), h.material.dispose(), this;
  }
  /**
   * Clears this cube render target.
   *
   * @param {WebGLRenderer} renderer - The renderer.
   * @param {boolean} [color=true] - Whether the color buffer should be cleared or not.
   * @param {boolean} [depth=true] - Whether the depth buffer should be cleared or not.
   * @param {boolean} [stencil=true] - Whether the stencil buffer should be cleared or not.
   */
  clear(e, n = !0, i = !0, r = !0) {
    const c = e.getRenderTarget();
    for (let h = 0; h < 6; h++)
      e.setRenderTarget(this, h), e.clear(n, i, r);
    e.setRenderTarget(c);
  }
}
class zh extends Mn {
  constructor() {
    super(), this.isGroup = !0, this.type = "Group";
  }
}
const HC = { type: "move" };
class Yg {
  /**
   * Constructs a new XR controller.
   */
  constructor() {
    this._targetRay = null, this._grip = null, this._hand = null;
  }
  /**
   * Returns a group representing the hand space of the XR controller.
   *
   * @return {Group} A group representing the hand space of the XR controller.
   */
  getHandSpace() {
    return this._hand === null && (this._hand = new zh(), this._hand.matrixAutoUpdate = !1, this._hand.visible = !1, this._hand.joints = {}, this._hand.inputState = { pinching: !1 }), this._hand;
  }
  /**
   * Returns a group representing the target ray space of the XR controller.
   *
   * @return {Group} A group representing the target ray space of the XR controller.
   */
  getTargetRaySpace() {
    return this._targetRay === null && (this._targetRay = new zh(), this._targetRay.matrixAutoUpdate = !1, this._targetRay.visible = !1, this._targetRay.hasLinearVelocity = !1, this._targetRay.linearVelocity = new j(), this._targetRay.hasAngularVelocity = !1, this._targetRay.angularVelocity = new j()), this._targetRay;
  }
  /**
   * Returns a group representing the grip space of the XR controller.
   *
   * @return {Group} A group representing the grip space of the XR controller.
   */
  getGripSpace() {
    return this._grip === null && (this._grip = new zh(), this._grip.matrixAutoUpdate = !1, this._grip.visible = !1, this._grip.hasLinearVelocity = !1, this._grip.linearVelocity = new j(), this._grip.hasAngularVelocity = !1, this._grip.angularVelocity = new j()), this._grip;
  }
  /**
   * Dispatches the given event to the groups representing
   * the different coordinate spaces of the XR controller.
   *
   * @param {Object} event - The event to dispatch.
   * @return {WebXRController} A reference to this instance.
   */
  dispatchEvent(e) {
    return this._targetRay !== null && this._targetRay.dispatchEvent(e), this._grip !== null && this._grip.dispatchEvent(e), this._hand !== null && this._hand.dispatchEvent(e), this;
  }
  /**
   * Connects the controller with the given XR input source.
   *
   * @param {XRInputSource} inputSource - The input source.
   * @return {WebXRController} A reference to this instance.
   */
  connect(e) {
    if (e && e.hand) {
      const n = this._hand;
      if (n)
        for (const i of e.hand.values())
          this._getHandJoint(n, i);
    }
    return this.dispatchEvent({ type: "connected", data: e }), this;
  }
  /**
   * Disconnects the controller from the given XR input source.
   *
   * @param {XRInputSource} inputSource - The input source.
   * @return {WebXRController} A reference to this instance.
   */
  disconnect(e) {
    return this.dispatchEvent({ type: "disconnected", data: e }), this._targetRay !== null && (this._targetRay.visible = !1), this._grip !== null && (this._grip.visible = !1), this._hand !== null && (this._hand.visible = !1), this;
  }
  /**
   * Updates the controller with the given input source, XR frame and reference space.
   * This updates the transformations of the groups that represent the different
   * coordinate systems of the controller.
   *
   * @param {XRInputSource} inputSource - The input source.
   * @param {XRFrame} frame - The XR frame.
   * @param {XRReferenceSpace} referenceSpace - The reference space.
   * @return {WebXRController} A reference to this instance.
   */
  update(e, n, i) {
    let r = null, c = null, h = null;
    const d = this._targetRay, v = this._grip, g = this._hand;
    if (e && n.session.visibilityState !== "visible-blurred") {
      if (g && e.hand) {
        h = !0;
        for (const w of e.hand.values()) {
          const C = n.getJointPose(w, i), E = this._getHandJoint(g, w);
          C !== null && (E.matrix.fromArray(C.transform.matrix), E.matrix.decompose(E.position, E.rotation, E.scale), E.matrixWorldNeedsUpdate = !0, E.jointRadius = C.radius), E.visible = C !== null;
        }
        const S = g.joints["index-finger-tip"], x = g.joints["thumb-tip"], M = S.position.distanceTo(x.position), b = 0.02, R = 5e-3;
        g.inputState.pinching && M > b + R ? (g.inputState.pinching = !1, this.dispatchEvent({
          type: "pinchend",
          handedness: e.handedness,
          target: this
        })) : !g.inputState.pinching && M <= b - R && (g.inputState.pinching = !0, this.dispatchEvent({
          type: "pinchstart",
          handedness: e.handedness,
          target: this
        }));
      } else
        v !== null && e.gripSpace && (c = n.getPose(e.gripSpace, i), c !== null && (v.matrix.fromArray(c.transform.matrix), v.matrix.decompose(v.position, v.rotation, v.scale), v.matrixWorldNeedsUpdate = !0, c.linearVelocity ? (v.hasLinearVelocity = !0, v.linearVelocity.copy(c.linearVelocity)) : v.hasLinearVelocity = !1, c.angularVelocity ? (v.hasAngularVelocity = !0, v.angularVelocity.copy(c.angularVelocity)) : v.hasAngularVelocity = !1));
      d !== null && (r = n.getPose(e.targetRaySpace, i), r === null && c !== null && (r = c), r !== null && (d.matrix.fromArray(r.transform.matrix), d.matrix.decompose(d.position, d.rotation, d.scale), d.matrixWorldNeedsUpdate = !0, r.linearVelocity ? (d.hasLinearVelocity = !0, d.linearVelocity.copy(r.linearVelocity)) : d.hasLinearVelocity = !1, r.angularVelocity ? (d.hasAngularVelocity = !0, d.angularVelocity.copy(r.angularVelocity)) : d.hasAngularVelocity = !1, this.dispatchEvent(HC)));
    }
    return d !== null && (d.visible = r !== null), v !== null && (v.visible = c !== null), g !== null && (g.visible = h !== null), this;
  }
  /**
   * Returns a group representing the hand joint for the given input joint.
   *
   * @private
   * @param {Group} hand - The group representing the hand space.
   * @param {XRJointSpace} inputjoint - The hand joint data.
   * @return {Group} A group representing the hand joint for the given input joint.
   */
  _getHandJoint(e, n) {
    if (e.joints[n.jointName] === void 0) {
      const i = new zh();
      i.matrixAutoUpdate = !1, i.visible = !1, e.joints[n.jointName] = i, e.add(i);
    }
    return e.joints[n.jointName];
  }
}
class j0 {
  /**
   * Constructs a new fog.
   *
   * @param {number|Color} color - The fog's color.
   * @param {number} [density=0.00025] - Defines how fast the fog will grow dense.
   */
  constructor(e, n = 25e-5) {
    this.isFogExp2 = !0, this.name = "", this.color = new lt(e), this.density = n;
  }
  /**
   * Returns a new fog with copied values from this instance.
   *
   * @return {FogExp2} A clone of this instance.
   */
  clone() {
    return new j0(this.color, this.density);
  }
  /**
   * Serializes the fog into JSON.
   *
   * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.
   * @return {Object} A JSON object representing the serialized fog
   */
  toJSON() {
    return {
      type: "FogExp2",
      name: this.name,
      color: this.color.getHex(),
      density: this.density
    };
  }
}
class Q0 {
  /**
   * Constructs a new fog.
   *
   * @param {number|Color} color - The fog's color.
   * @param {number} [near=1] - The minimum distance to start applying fog.
   * @param {number} [far=1000] - The maximum distance at which fog stops being calculated and applied.
   */
  constructor(e, n = 1, i = 1e3) {
    this.isFog = !0, this.name = "", this.color = new lt(e), this.near = n, this.far = i;
  }
  /**
   * Returns a new fog with copied values from this instance.
   *
   * @return {Fog} A clone of this instance.
   */
  clone() {
    return new Q0(this.color, this.near, this.far);
  }
  /**
   * Serializes the fog into JSON.
   *
   * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.
   * @return {Object} A JSON object representing the serialized fog
   */
  toJSON() {
    return {
      type: "Fog",
      name: this.name,
      color: this.color.getHex(),
      near: this.near,
      far: this.far
    };
  }
}
class $p extends Mn {
  /**
   * Constructs a new scene.
   */
  constructor() {
    super(), this.isScene = !0, this.type = "Scene", this.background = null, this.environment = null, this.fog = null, this.backgroundBlurriness = 0, this.backgroundIntensity = 1, this.backgroundRotation = new Xs(), this.environmentIntensity = 1, this.environmentRotation = new Xs(), this.overrideMaterial = null, typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
  }
  copy(e, n) {
    return super.copy(e, n), e.background !== null && (this.background = e.background.clone()), e.environment !== null && (this.environment = e.environment.clone()), e.fog !== null && (this.fog = e.fog.clone()), this.backgroundBlurriness = e.backgroundBlurriness, this.backgroundIntensity = e.backgroundIntensity, this.backgroundRotation.copy(e.backgroundRotation), this.environmentIntensity = e.environmentIntensity, this.environmentRotation.copy(e.environmentRotation), e.overrideMaterial !== null && (this.overrideMaterial = e.overrideMaterial.clone()), this.matrixAutoUpdate = e.matrixAutoUpdate, this;
  }
  toJSON(e) {
    const n = super.toJSON(e);
    return this.fog !== null && (n.object.fog = this.fog.toJSON()), this.backgroundBlurriness > 0 && (n.object.backgroundBlurriness = this.backgroundBlurriness), this.backgroundIntensity !== 1 && (n.object.backgroundIntensity = this.backgroundIntensity), n.object.backgroundRotation = this.backgroundRotation.toArray(), this.environmentIntensity !== 1 && (n.object.environmentIntensity = this.environmentIntensity), n.object.environmentRotation = this.environmentRotation.toArray(), n;
  }
}
class K0 {
  /**
   * Constructs a new interleaved buffer.
   *
   * @param {TypedArray} array - A typed array with a shared buffer storing attribute data.
   * @param {number} stride - The number of typed-array elements per vertex.
   */
  constructor(e, n) {
    this.isInterleavedBuffer = !0, this.array = e, this.stride = n, this.count = e !== void 0 ? e.length / n : 0, this.usage = Kp, this.updateRanges = [], this.version = 0, this.uuid = Fs();
  }
  /**
   * A callback function that is executed after the renderer has transferred the attribute array
   * data to the GPU.
   */
  onUploadCallback() {
  }
  /**
   * Flag to indicate that this attribute has changed and should be re-sent to
   * the GPU. Set this to `true` when you modify the value of the array.
   *
   * @type {number}
   * @default false
   * @param {boolean} value
   */
  set needsUpdate(e) {
    e === !0 && this.version++;
  }
  /**
   * Sets the usage of this interleaved buffer.
   *
   * @param {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)} value - The usage to set.
   * @return {InterleavedBuffer} A reference to this interleaved buffer.
   */
  setUsage(e) {
    return this.usage = e, this;
  }
  /**
   * Adds a range of data in the data array to be updated on the GPU.
   *
   * @param {number} start - Position at which to start update.
   * @param {number} count - The number of components to update.
   */
  addUpdateRange(e, n) {
    this.updateRanges.push({ start: e, count: n });
  }
  /**
   * Clears the update ranges.
   */
  clearUpdateRanges() {
    this.updateRanges.length = 0;
  }
  /**
   * Copies the values of the given interleaved buffer to this instance.
   *
   * @param {InterleavedBuffer} source - The interleaved buffer to copy.
   * @return {InterleavedBuffer} A reference to this instance.
   */
  copy(e) {
    return this.array = new e.array.constructor(e.array), this.count = e.count, this.stride = e.stride, this.usage = e.usage, this;
  }
  /**
   * Copies a vector from the given interleaved buffer to this one. The start
   * and destination position in the attribute buffers are represented by the
   * given indices.
   *
   * @param {number} index1 - The destination index into this interleaved buffer.
   * @param {InterleavedBuffer} interleavedBuffer - The interleaved buffer to copy from.
   * @param {number} index2 - The source index into the given interleaved buffer.
   * @return {InterleavedBuffer} A reference to this instance.
   */
  copyAt(e, n, i) {
    e *= this.stride, i *= n.stride;
    for (let r = 0, c = this.stride; r < c; r++)
      this.array[e + r] = n.array[i + r];
    return this;
  }
  /**
   * Sets the given array data in the interleaved buffer.
   *
   * @param {(TypedArray|Array)} value - The array data to set.
   * @param {number} [offset=0] - The offset in this interleaved buffer's array.
   * @return {InterleavedBuffer} A reference to this instance.
   */
  set(e, n = 0) {
    return this.array.set(e, n), this;
  }
  /**
   * Returns a new interleaved buffer with copied values from this instance.
   *
   * @param {Object} [data] - An object with shared array buffers that allows to retain shared structures.
   * @return {InterleavedBuffer} A clone of this instance.
   */
  clone(e) {
    e.arrayBuffers === void 0 && (e.arrayBuffers = {}), this.array.buffer._uuid === void 0 && (this.array.buffer._uuid = Fs()), e.arrayBuffers[this.array.buffer._uuid] === void 0 && (e.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer);
    const n = new this.array.constructor(e.arrayBuffers[this.array.buffer._uuid]), i = new this.constructor(n, this.stride);
    return i.setUsage(this.usage), i;
  }
  /**
   * Sets the given callback function that is executed after the Renderer has transferred
   * the array data to the GPU. Can be used to perform clean-up operations after
   * the upload when data are not needed anymore on the CPU side.
   *
   * @param {Function} callback - The `onUpload()` callback.
   * @return {InterleavedBuffer} A reference to this instance.
   */
  onUpload(e) {
    return this.onUploadCallback = e, this;
  }
  /**
   * Serializes the interleaved buffer into JSON.
   *
   * @param {Object} [data] - An optional value holding meta information about the serialization.
   * @return {Object} A JSON object representing the serialized interleaved buffer.
   */
  toJSON(e) {
    return e.arrayBuffers === void 0 && (e.arrayBuffers = {}), this.array.buffer._uuid === void 0 && (this.array.buffer._uuid = Fs()), e.arrayBuffers[this.array.buffer._uuid] === void 0 && (e.arrayBuffers[this.array.buffer._uuid] = Array.from(new Uint32Array(this.array.buffer))), {
      uuid: this.uuid,
      buffer: this.array.buffer._uuid,
      type: this.array.constructor.name,
      stride: this.stride
    };
  }
}
const Ka = /* @__PURE__ */ new j();
class $u {
  /**
   * Constructs a new interleaved buffer attribute.
   *
   * @param {InterleavedBuffer} interleavedBuffer - The buffer holding the interleaved data.
   * @param {number} itemSize - The item size.
   * @param {number} offset - The attribute offset into the buffer.
   * @param {boolean} [normalized=false] - Whether the data are normalized or not.
   */
  constructor(e, n, i, r = !1) {
    this.isInterleavedBufferAttribute = !0, this.name = "", this.data = e, this.itemSize = n, this.offset = i, this.normalized = r;
  }
  /**
   * The item count of this buffer attribute.
   *
   * @type {number}
   * @readonly
   */
  get count() {
    return this.data.count;
  }
  /**
   * The array holding the interleaved buffer attribute data.
   *
   * @type {TypedArray}
   */
  get array() {
    return this.data.array;
  }
  /**
   * Flag to indicate that this attribute has changed and should be re-sent to
   * the GPU. Set this to `true` when you modify the value of the array.
   *
   * @type {number}
   * @default false
   * @param {boolean} value
   */
  set needsUpdate(e) {
    this.data.needsUpdate = e;
  }
  /**
   * Applies the given 4x4 matrix to the given attribute. Only works with
   * item size `3`.
   *
   * @param {Matrix4} m - The matrix to apply.
   * @return {InterleavedBufferAttribute} A reference to this instance.
   */
  applyMatrix4(e) {
    for (let n = 0, i = this.data.count; n < i; n++)
      Ka.fromBufferAttribute(this, n), Ka.applyMatrix4(e), this.setXYZ(n, Ka.x, Ka.y, Ka.z);
    return this;
  }
  /**
   * Applies the given 3x3 normal matrix to the given attribute. Only works with
   * item size `3`.
   *
   * @param {Matrix3} m - The normal matrix to apply.
   * @return {InterleavedBufferAttribute} A reference to this instance.
   */
  applyNormalMatrix(e) {
    for (let n = 0, i = this.count; n < i; n++)
      Ka.fromBufferAttribute(this, n), Ka.applyNormalMatrix(e), this.setXYZ(n, Ka.x, Ka.y, Ka.z);
    return this;
  }
  /**
   * Applies the given 4x4 matrix to the given attribute. Only works with
   * item size `3` and with direction vectors.
   *
   * @param {Matrix4} m - The matrix to apply.
   * @return {InterleavedBufferAttribute} A reference to this instance.
   */
  transformDirection(e) {
    for (let n = 0, i = this.count; n < i; n++)
      Ka.fromBufferAttribute(this, n), Ka.transformDirection(e), this.setXYZ(n, Ka.x, Ka.y, Ka.z);
    return this;
  }
  /**
   * Returns the given component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} component - The component index.
   * @return {number} The returned value.
   */
  getComponent(e, n) {
    let i = this.array[e * this.data.stride + this.offset + n];
    return this.normalized && (i = $a(i, this.array)), i;
  }
  /**
   * Sets the given value to the given component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} component - The component index.
   * @param {number} value - The value to set.
   * @return {InterleavedBufferAttribute} A reference to this instance.
   */
  setComponent(e, n, i) {
    return this.normalized && (i = $t(i, this.array)), this.data.array[e * this.data.stride + this.offset + n] = i, this;
  }
  /**
   * Sets the x component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} x - The value to set.
   * @return {InterleavedBufferAttribute} A reference to this instance.
   */
  setX(e, n) {
    return this.normalized && (n = $t(n, this.array)), this.data.array[e * this.data.stride + this.offset] = n, this;
  }
  /**
   * Sets the y component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} y - The value to set.
   * @return {InterleavedBufferAttribute} A reference to this instance.
   */
  setY(e, n) {
    return this.normalized && (n = $t(n, this.array)), this.data.array[e * this.data.stride + this.offset + 1] = n, this;
  }
  /**
   * Sets the z component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} z - The value to set.
   * @return {InterleavedBufferAttribute} A reference to this instance.
   */
  setZ(e, n) {
    return this.normalized && (n = $t(n, this.array)), this.data.array[e * this.data.stride + this.offset + 2] = n, this;
  }
  /**
   * Sets the w component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} w - The value to set.
   * @return {InterleavedBufferAttribute} A reference to this instance.
   */
  setW(e, n) {
    return this.normalized && (n = $t(n, this.array)), this.data.array[e * this.data.stride + this.offset + 3] = n, this;
  }
  /**
   * Returns the x component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @return {number} The x component.
   */
  getX(e) {
    let n = this.data.array[e * this.data.stride + this.offset];
    return this.normalized && (n = $a(n, this.array)), n;
  }
  /**
   * Returns the y component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @return {number} The y component.
   */
  getY(e) {
    let n = this.data.array[e * this.data.stride + this.offset + 1];
    return this.normalized && (n = $a(n, this.array)), n;
  }
  /**
   * Returns the z component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @return {number} The z component.
   */
  getZ(e) {
    let n = this.data.array[e * this.data.stride + this.offset + 2];
    return this.normalized && (n = $a(n, this.array)), n;
  }
  /**
   * Returns the w component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @return {number} The w component.
   */
  getW(e) {
    let n = this.data.array[e * this.data.stride + this.offset + 3];
    return this.normalized && (n = $a(n, this.array)), n;
  }
  /**
   * Sets the x and y component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} x - The value for the x component to set.
   * @param {number} y - The value for the y component to set.
   * @return {InterleavedBufferAttribute} A reference to this instance.
   */
  setXY(e, n, i) {
    return e = e * this.data.stride + this.offset, this.normalized && (n = $t(n, this.array), i = $t(i, this.array)), this.data.array[e + 0] = n, this.data.array[e + 1] = i, this;
  }
  /**
   * Sets the x, y and z component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} x - The value for the x component to set.
   * @param {number} y - The value for the y component to set.
   * @param {number} z - The value for the z component to set.
   * @return {InterleavedBufferAttribute} A reference to this instance.
   */
  setXYZ(e, n, i, r) {
    return e = e * this.data.stride + this.offset, this.normalized && (n = $t(n, this.array), i = $t(i, this.array), r = $t(r, this.array)), this.data.array[e + 0] = n, this.data.array[e + 1] = i, this.data.array[e + 2] = r, this;
  }
  /**
   * Sets the x, y, z and w component of the vector at the given index.
   *
   * @param {number} index - The index into the buffer attribute.
   * @param {number} x - The value for the x component to set.
   * @param {number} y - The value for the y component to set.
   * @param {number} z - The value for the z component to set.
   * @param {number} w - The value for the w component to set.
   * @return {InterleavedBufferAttribute} A reference to this instance.
   */
  setXYZW(e, n, i, r, c) {
    return e = e * this.data.stride + this.offset, this.normalized && (n = $t(n, this.array), i = $t(i, this.array), r = $t(r, this.array), c = $t(c, this.array)), this.data.array[e + 0] = n, this.data.array[e + 1] = i, this.data.array[e + 2] = r, this.data.array[e + 3] = c, this;
  }
  /**
   * Returns a new buffer attribute with copied values from this instance.
   *
   * If no parameter is provided, cloning an interleaved buffer attribute will de-interleave buffer data.
   *
   * @param {Object} [data] - An object with interleaved buffers that allows to retain the interleaved property.
   * @return {BufferAttribute|InterleavedBufferAttribute} A clone of this instance.
   */
  clone(e) {
    if (e === void 0) {
      console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");
      const n = [];
      for (let i = 0; i < this.count; i++) {
        const r = i * this.data.stride + this.offset;
        for (let c = 0; c < this.itemSize; c++)
          n.push(this.data.array[r + c]);
      }
      return new Nn(new this.array.constructor(n), this.itemSize, this.normalized);
    } else
      return e.interleavedBuffers === void 0 && (e.interleavedBuffers = {}), e.interleavedBuffers[this.data.uuid] === void 0 && (e.interleavedBuffers[this.data.uuid] = this.data.clone(e)), new $u(e.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);
  }
  /**
   * Serializes the buffer attribute into JSON.
   *
   * If no parameter is provided, cloning an interleaved buffer attribute will de-interleave buffer data.
   *
   * @param {Object} [data] - An optional value holding meta information about the serialization.
   * @return {Object} A JSON object representing the serialized buffer attribute.
   */
  toJSON(e) {
    if (e === void 0) {
      console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");
      const n = [];
      for (let i = 0; i < this.count; i++) {
        const r = i * this.data.stride + this.offset;
        for (let c = 0; c < this.itemSize; c++)
          n.push(this.data.array[r + c]);
      }
      return {
        itemSize: this.itemSize,
        type: this.array.constructor.name,
        array: n,
        normalized: this.normalized
      };
    } else
      return e.interleavedBuffers === void 0 && (e.interleavedBuffers = {}), e.interleavedBuffers[this.data.uuid] === void 0 && (e.interleavedBuffers[this.data.uuid] = this.data.toJSON(e)), {
        isInterleavedBufferAttribute: !0,
        itemSize: this.itemSize,
        data: this.data.uuid,
        offset: this.offset,
        normalized: this.normalized
      };
  }
}
class nx extends sa {
  /**
   * Constructs a new sprite material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(e) {
    super(), this.isSpriteMaterial = !0, this.type = "SpriteMaterial", this.color = new lt(16777215), this.map = null, this.alphaMap = null, this.rotation = 0, this.sizeAttenuation = !0, this.transparent = !0, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.alphaMap = e.alphaMap, this.rotation = e.rotation, this.sizeAttenuation = e.sizeAttenuation, this.fog = e.fog, this;
  }
}
let xh;
const xp = /* @__PURE__ */ new j(), Mh = /* @__PURE__ */ new j(), bh = /* @__PURE__ */ new j(), Eh = /* @__PURE__ */ new De(), Mp = /* @__PURE__ */ new De(), wE = /* @__PURE__ */ new Ft(), hg = /* @__PURE__ */ new j(), bp = /* @__PURE__ */ new j(), dg = /* @__PURE__ */ new j(), X1 = /* @__PURE__ */ new De(), R_ = /* @__PURE__ */ new De(), q1 = /* @__PURE__ */ new De();
class DE extends Mn {
  /**
   * Constructs a new sprite.
   *
   * @param {SpriteMaterial} [material] - The sprite material.
   */
  constructor(e = new nx()) {
    if (super(), this.isSprite = !0, this.type = "Sprite", xh === void 0) {
      xh = new Kt();
      const n = new Float32Array([
        -0.5,
        -0.5,
        0,
        0,
        0,
        0.5,
        -0.5,
        0,
        1,
        0,
        0.5,
        0.5,
        0,
        1,
        1,
        -0.5,
        0.5,
        0,
        0,
        1
      ]), i = new K0(n, 5);
      xh.setIndex([0, 1, 2, 0, 2, 3]), xh.setAttribute("position", new $u(i, 3, 0, !1)), xh.setAttribute("uv", new $u(i, 2, 3, !1));
    }
    this.geometry = xh, this.material = e, this.center = new De(0.5, 0.5), this.count = 1;
  }
  /**
   * Computes intersection points between a casted ray and this sprite.
   *
   * @param {Raycaster} raycaster - The raycaster.
   * @param {Array<Object>} intersects - The target array that holds the intersection points.
   */
  raycast(e, n) {
    e.camera === null && console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'), Mh.setFromMatrixScale(this.matrixWorld), wE.copy(e.camera.matrixWorld), this.modelViewMatrix.multiplyMatrices(e.camera.matrixWorldInverse, this.matrixWorld), bh.setFromMatrixPosition(this.modelViewMatrix), e.camera.isPerspectiveCamera && this.material.sizeAttenuation === !1 && Mh.multiplyScalar(-bh.z);
    const i = this.material.rotation;
    let r, c;
    i !== 0 && (c = Math.cos(i), r = Math.sin(i));
    const h = this.center;
    pg(hg.set(-0.5, -0.5, 0), bh, h, Mh, r, c), pg(bp.set(0.5, -0.5, 0), bh, h, Mh, r, c), pg(dg.set(0.5, 0.5, 0), bh, h, Mh, r, c), X1.set(0, 0), R_.set(1, 0), q1.set(1, 1);
    let d = e.ray.intersectTriangle(hg, bp, dg, !1, xp);
    if (d === null && (pg(bp.set(-0.5, 0.5, 0), bh, h, Mh, r, c), R_.set(0, 1), d = e.ray.intersectTriangle(hg, dg, bp, !1, xp), d === null))
      return;
    const v = e.ray.origin.distanceTo(xp);
    v < e.near || v > e.far || n.push({
      distance: v,
      point: xp.clone(),
      uv: bs.getInterpolation(xp, hg, bp, dg, X1, R_, q1, new De()),
      face: null,
      object: this
    });
  }
  copy(e, n) {
    return super.copy(e, n), e.center !== void 0 && this.center.copy(e.center), this.material = e.material, this;
  }
}
function pg(s, e, n, i, r, c) {
  Eh.subVectors(s, n).addScalar(0.5).multiply(i), r !== void 0 ? (Mp.x = c * Eh.x - r * Eh.y, Mp.y = r * Eh.x + c * Eh.y) : Mp.copy(Eh), s.copy(e), s.x += Mp.x, s.y += Mp.y, s.applyMatrix4(wE);
}
const mg = /* @__PURE__ */ new j(), Y1 = /* @__PURE__ */ new j();
class UE extends Mn {
  /**
   * Constructs a new LOD.
   */
  constructor() {
    super(), this.isLOD = !0, this._currentLevel = 0, this.type = "LOD", Object.defineProperties(this, {
      /**
       * This array holds the LOD levels.
       *
       * @name LOD#levels
       * @type {Array<{object:Object3D,distance:number,hysteresis:number}>}
       */
      levels: {
        enumerable: !0,
        value: []
      }
    }), this.autoUpdate = !0;
  }
  copy(e) {
    super.copy(e, !1);
    const n = e.levels;
    for (let i = 0, r = n.length; i < r; i++) {
      const c = n[i];
      this.addLevel(c.object.clone(), c.distance, c.hysteresis);
    }
    return this.autoUpdate = e.autoUpdate, this;
  }
  /**
   * Adds a mesh that will display at a certain distance and greater. Typically
   * the further away the distance, the lower the detail on the mesh.
   *
   * @param {Object3D} object - The 3D object to display at this level.
   * @param {number} [distance=0] - The distance at which to display this level of detail.
   * @param {number} [hysteresis=0] - Threshold used to avoid flickering at LOD boundaries, as a fraction of distance.
   * @return {LOD} A reference to this instance.
   */
  addLevel(e, n = 0, i = 0) {
    n = Math.abs(n);
    const r = this.levels;
    let c;
    for (c = 0; c < r.length && !(n < r[c].distance); c++)
      ;
    return r.splice(c, 0, { distance: n, hysteresis: i, object: e }), this.add(e), this;
  }
  /**
   * Removes an existing level, based on the distance from the camera.
   * Returns `true` when the level has been removed. Otherwise `false`.
   *
   * @param {number} distance - Distance of the level to remove.
   * @return {boolean} Whether the level has been removed or not.
   */
  removeLevel(e) {
    const n = this.levels;
    for (let i = 0; i < n.length; i++)
      if (n[i].distance === e) {
        const r = n.splice(i, 1);
        return this.remove(r[0].object), !0;
      }
    return !1;
  }
  /**
   * Returns the currently active LOD level index.
   *
   * @return {number} The current active LOD level index.
   */
  getCurrentLevel() {
    return this._currentLevel;
  }
  /**
   * Returns a reference to the first 3D object that is greater than
   * the given distance.
   *
   * @param {number} distance - The LOD distance.
   * @return {Object3D|null} The found 3D object. `null` if no 3D object has been found.
   */
  getObjectForDistance(e) {
    const n = this.levels;
    if (n.length > 0) {
      let i, r;
      for (i = 1, r = n.length; i < r; i++) {
        let c = n[i].distance;
        if (n[i].object.visible && (c -= c * n[i].hysteresis), e < c)
          break;
      }
      return n[i - 1].object;
    }
    return null;
  }
  /**
   * Computes intersection points between a casted ray and this LOD.
   *
   * @param {Raycaster} raycaster - The raycaster.
   * @param {Array<Object>} intersects - The target array that holds the intersection points.
   */
  raycast(e, n) {
    if (this.levels.length > 0) {
      mg.setFromMatrixPosition(this.matrixWorld);
      const r = e.ray.origin.distanceTo(mg);
      this.getObjectForDistance(r).raycast(e, n);
    }
  }
  /**
   * Updates the LOD by computing which LOD level should be visible according
   * to the current distance of the given camera.
   *
   * @param {Camera} camera - The camera the scene is rendered with.
   */
  update(e) {
    const n = this.levels;
    if (n.length > 1) {
      mg.setFromMatrixPosition(e.matrixWorld), Y1.setFromMatrixPosition(this.matrixWorld);
      const i = mg.distanceTo(Y1) / e.zoom;
      n[0].object.visible = !0;
      let r, c;
      for (r = 1, c = n.length; r < c; r++) {
        let h = n[r].distance;
        if (n[r].object.visible && (h -= h * n[r].hysteresis), i >= h)
          n[r - 1].object.visible = !1, n[r].object.visible = !0;
        else
          break;
      }
      for (this._currentLevel = r - 1; r < c; r++)
        n[r].object.visible = !1;
    }
  }
  toJSON(e) {
    const n = super.toJSON(e);
    this.autoUpdate === !1 && (n.object.autoUpdate = !1), n.object.levels = [];
    const i = this.levels;
    for (let r = 0, c = i.length; r < c; r++) {
      const h = i[r];
      n.object.levels.push({
        object: h.object.uuid,
        distance: h.distance,
        hysteresis: h.hysteresis
      });
    }
    return n;
  }
}
const k1 = /* @__PURE__ */ new j(), W1 = /* @__PURE__ */ new xn(), Z1 = /* @__PURE__ */ new xn(), VC = /* @__PURE__ */ new j(), j1 = /* @__PURE__ */ new Ft(), vg = /* @__PURE__ */ new j(), C_ = /* @__PURE__ */ new ma(), Q1 = /* @__PURE__ */ new Ft(), w_ = /* @__PURE__ */ new Kh();
class NE extends Ci {
  /**
   * Constructs a new skinned mesh.
   *
   * @param {BufferGeometry} [geometry] - The mesh geometry.
   * @param {Material|Array<Material>} [material] - The mesh material.
   */
  constructor(e, n) {
    super(e, n), this.isSkinnedMesh = !0, this.type = "SkinnedMesh", this.bindMode = SS, this.bindMatrix = new Ft(), this.bindMatrixInverse = new Ft(), this.boundingBox = null, this.boundingSphere = null;
  }
  /**
   * Computes the bounding box of the skinned mesh, and updates {@link SkinnedMesh#boundingBox}.
   * The bounding box is not automatically computed by the engine; this method must be called by your app.
   * If the skinned mesh is animated, the bounding box should be recomputed per frame in order to reflect
   * the current animation state.
   */
  computeBoundingBox() {
    const e = this.geometry;
    this.boundingBox === null && (this.boundingBox = new wa()), this.boundingBox.makeEmpty();
    const n = e.getAttribute("position");
    for (let i = 0; i < n.count; i++)
      this.getVertexPosition(i, vg), this.boundingBox.expandByPoint(vg);
  }
  /**
   * Computes the bounding sphere of the skinned mesh, and updates {@link SkinnedMesh#boundingSphere}.
   * The bounding sphere is automatically computed by the engine once when it is needed, e.g., for ray casting
   * and view frustum culling. If the skinned mesh is animated, the bounding sphere should be recomputed
   * per frame in order to reflect the current animation state.
   */
  computeBoundingSphere() {
    const e = this.geometry;
    this.boundingSphere === null && (this.boundingSphere = new ma()), this.boundingSphere.makeEmpty();
    const n = e.getAttribute("position");
    for (let i = 0; i < n.count; i++)
      this.getVertexPosition(i, vg), this.boundingSphere.expandByPoint(vg);
  }
  copy(e, n) {
    return super.copy(e, n), this.bindMode = e.bindMode, this.bindMatrix.copy(e.bindMatrix), this.bindMatrixInverse.copy(e.bindMatrixInverse), this.skeleton = e.skeleton, e.boundingBox !== null && (this.boundingBox = e.boundingBox.clone()), e.boundingSphere !== null && (this.boundingSphere = e.boundingSphere.clone()), this;
  }
  raycast(e, n) {
    const i = this.material, r = this.matrixWorld;
    i !== void 0 && (this.boundingSphere === null && this.computeBoundingSphere(), C_.copy(this.boundingSphere), C_.applyMatrix4(r), e.ray.intersectsSphere(C_) !== !1 && (Q1.copy(r).invert(), w_.copy(e.ray).applyMatrix4(Q1), !(this.boundingBox !== null && w_.intersectsBox(this.boundingBox) === !1) && this._computeIntersections(e, n, w_)));
  }
  getVertexPosition(e, n) {
    return super.getVertexPosition(e, n), this.applyBoneTransform(e, n), n;
  }
  /**
   * Binds the given skeleton to the skinned mesh.
   *
   * @param {Skeleton} skeleton - The skeleton to bind.
   * @param {Matrix4} [bindMatrix] - The bind matrix. If no bind matrix is provided,
   * the skinned mesh's world matrix will be used instead.
   */
  bind(e, n) {
    this.skeleton = e, n === void 0 && (this.updateMatrixWorld(!0), this.skeleton.calculateInverses(), n = this.matrixWorld), this.bindMatrix.copy(n), this.bindMatrixInverse.copy(n).invert();
  }
  /**
   * This method sets the skinned mesh in the rest pose).
   */
  pose() {
    this.skeleton.pose();
  }
  /**
   * Normalizes the skin weights which are defined as a buffer attribute
   * in the skinned mesh's geometry.
   */
  normalizeSkinWeights() {
    const e = new xn(), n = this.geometry.attributes.skinWeight;
    for (let i = 0, r = n.count; i < r; i++) {
      e.fromBufferAttribute(n, i);
      const c = 1 / e.manhattanLength();
      c !== 1 / 0 ? e.multiplyScalar(c) : e.set(1, 0, 0, 0), n.setXYZW(i, e.x, e.y, e.z, e.w);
    }
  }
  updateMatrixWorld(e) {
    super.updateMatrixWorld(e), this.bindMode === SS ? this.bindMatrixInverse.copy(this.matrixWorld).invert() : this.bindMode === lE ? this.bindMatrixInverse.copy(this.bindMatrix).invert() : console.warn("THREE.SkinnedMesh: Unrecognized bindMode: " + this.bindMode);
  }
  /**
   * Applies the bone transform associated with the given index to the given
   * vertex position. Returns the updated vector.
   *
   * @param {number} index - The vertex index.
   * @param {Vector3} target - The target object that is used to store the method's result.
   * the skinned mesh's world matrix will be used instead.
   * @return {Vector3} The updated vertex position.
   */
  applyBoneTransform(e, n) {
    const i = this.skeleton, r = this.geometry;
    W1.fromBufferAttribute(r.attributes.skinIndex, e), Z1.fromBufferAttribute(r.attributes.skinWeight, e), k1.copy(n).applyMatrix4(this.bindMatrix), n.set(0, 0, 0);
    for (let c = 0; c < 4; c++) {
      const h = Z1.getComponent(c);
      if (h !== 0) {
        const d = W1.getComponent(c);
        j1.multiplyMatrices(i.bones[d].matrixWorld, i.boneInverses[d]), n.addScaledVector(VC.copy(k1).applyMatrix4(j1), h);
      }
    }
    return n.applyMatrix4(this.bindMatrixInverse);
  }
}
class ix extends Mn {
  /**
   * Constructs a new bone.
   */
  constructor() {
    super(), this.isBone = !0, this.type = "Bone";
  }
}
class Bo extends si {
  /**
   * Constructs a new data texture.
   *
   * @param {?TypedArray} [data=null] - The buffer data.
   * @param {number} [width=1] - The width of the texture.
   * @param {number} [height=1] - The height of the texture.
   * @param {number} [format=RGBAFormat] - The texture format.
   * @param {number} [type=UnsignedByteType] - The texture type.
   * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.
   * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.
   * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.
   * @param {number} [magFilter=NearestFilter] - The mag filter value.
   * @param {number} [minFilter=NearestFilter] - The min filter value.
   * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.
   * @param {string} [colorSpace=NoColorSpace] - The color space.
   */
  constructor(e = null, n = 1, i = 1, r, c, h, d, v, g = wi, S = wi, x, M) {
    super(null, h, d, v, g, S, r, c, x, M), this.isDataTexture = !0, this.image = { data: e, width: n, height: i }, this.generateMipmaps = !1, this.flipY = !1, this.unpackAlignment = 1;
  }
}
const K1 = /* @__PURE__ */ new Ft(), GC = /* @__PURE__ */ new Ft();
class J0 {
  /**
   * Constructs a new skeleton.
   *
   * @param {Array<Bone>} [bones] - An array of bones.
   * @param {Array<Matrix4>} [boneInverses] - An array of bone inverse matrices.
   * If not provided, these matrices will be computed automatically via {@link Skeleton#calculateInverses}.
   */
  constructor(e = [], n = []) {
    this.uuid = Fs(), this.bones = e.slice(0), this.boneInverses = n, this.boneMatrices = null, this.boneTexture = null, this.init();
  }
  /**
   * Initializes the skeleton. This method gets automatically called by the constructor
   * but depending on how the skeleton is created it might be necessary to call this method
   * manually.
   */
  init() {
    const e = this.bones, n = this.boneInverses;
    if (this.boneMatrices = new Float32Array(e.length * 16), n.length === 0)
      this.calculateInverses();
    else if (e.length !== n.length) {
      console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones."), this.boneInverses = [];
      for (let i = 0, r = this.bones.length; i < r; i++)
        this.boneInverses.push(new Ft());
    }
  }
  /**
   * Computes the bone inverse matrices. This method resets {@link Skeleton#boneInverses}
   * and fills it with new matrices.
   */
  calculateInverses() {
    this.boneInverses.length = 0;
    for (let e = 0, n = this.bones.length; e < n; e++) {
      const i = new Ft();
      this.bones[e] && i.copy(this.bones[e].matrixWorld).invert(), this.boneInverses.push(i);
    }
  }
  /**
   * Resets the skeleton to the base pose.
   */
  pose() {
    for (let e = 0, n = this.bones.length; e < n; e++) {
      const i = this.bones[e];
      i && i.matrixWorld.copy(this.boneInverses[e]).invert();
    }
    for (let e = 0, n = this.bones.length; e < n; e++) {
      const i = this.bones[e];
      i && (i.parent && i.parent.isBone ? (i.matrix.copy(i.parent.matrixWorld).invert(), i.matrix.multiply(i.matrixWorld)) : i.matrix.copy(i.matrixWorld), i.matrix.decompose(i.position, i.quaternion, i.scale));
    }
  }
  /**
   * Resets the skeleton to the base pose.
   */
  update() {
    const e = this.bones, n = this.boneInverses, i = this.boneMatrices, r = this.boneTexture;
    for (let c = 0, h = e.length; c < h; c++) {
      const d = e[c] ? e[c].matrixWorld : GC;
      K1.multiplyMatrices(d, n[c]), K1.toArray(i, c * 16);
    }
    r !== null && (r.needsUpdate = !0);
  }
  /**
   * Returns a new skeleton with copied values from this instance.
   *
   * @return {Skeleton} A clone of this instance.
   */
  clone() {
    return new J0(this.bones, this.boneInverses);
  }
  /**
   * Computes a data texture for passing bone data to the vertex shader.
   *
   * @return {Skeleton} A reference of this instance.
   */
  computeBoneTexture() {
    let e = Math.sqrt(this.bones.length * 4);
    e = Math.ceil(e / 4) * 4, e = Math.max(e, 4);
    const n = new Float32Array(e * e * 4);
    n.set(this.boneMatrices);
    const i = new Bo(n, e, e, Ca, es);
    return i.needsUpdate = !0, this.boneMatrices = n, this.boneTexture = i, this;
  }
  /**
   * Searches through the skeleton's bone array and returns the first with a
   * matching name.
   *
   * @param {string} name - The name of the bone.
   * @return {Bone|undefined} The found bone. `undefined` if no bone has been found.
   */
  getBoneByName(e) {
    for (let n = 0, i = this.bones.length; n < i; n++) {
      const r = this.bones[n];
      if (r.name === e)
        return r;
    }
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
    this.boneTexture !== null && (this.boneTexture.dispose(), this.boneTexture = null);
  }
  /**
   * Setups the skeleton by the given JSON and bones.
   *
   * @param {Object} json - The skeleton as serialized JSON.
   * @param {Object<string, Bone>} bones - An array of bones.
   * @return {Skeleton} A reference of this instance.
   */
  fromJSON(e, n) {
    this.uuid = e.uuid;
    for (let i = 0, r = e.bones.length; i < r; i++) {
      const c = e.bones[i];
      let h = n[c];
      h === void 0 && (console.warn("THREE.Skeleton: No bone found with UUID:", c), h = new ix()), this.bones.push(h), this.boneInverses.push(new Ft().fromArray(e.boneInverses[i]));
    }
    return this.init(), this;
  }
  /**
   * Serializes the skeleton into JSON.
   *
   * @return {Object} A JSON object representing the serialized skeleton.
   * @see {@link ObjectLoader#parse}
   */
  toJSON() {
    const e = {
      metadata: {
        version: 4.7,
        type: "Skeleton",
        generator: "Skeleton.toJSON"
      },
      bones: [],
      boneInverses: []
    };
    e.uuid = this.uuid;
    const n = this.bones, i = this.boneInverses;
    for (let r = 0, c = n.length; r < c; r++) {
      const h = n[r];
      e.bones.push(h.uuid);
      const d = i[r];
      e.boneInverses.push(d.toArray());
    }
    return e;
  }
}
class kh extends Nn {
  /**
   * Constructs a new instanced buffer attribute.
   *
   * @param {TypedArray} array - The array holding the attribute data.
   * @param {number} itemSize - The item size.
   * @param {boolean} [normalized=false] - Whether the data are normalized or not.
   * @param {number} [meshPerAttribute=1] - How often a value of this buffer attribute should be repeated.
   */
  constructor(e, n, i, r = 1) {
    super(e, n, i), this.isInstancedBufferAttribute = !0, this.meshPerAttribute = r;
  }
  copy(e) {
    return super.copy(e), this.meshPerAttribute = e.meshPerAttribute, this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.meshPerAttribute = this.meshPerAttribute, e.isInstancedBufferAttribute = !0, e;
  }
}
const Th = /* @__PURE__ */ new Ft(), J1 = /* @__PURE__ */ new Ft(), gg = [], $1 = /* @__PURE__ */ new wa(), FC = /* @__PURE__ */ new Ft(), Ep = /* @__PURE__ */ new Ci(), Tp = /* @__PURE__ */ new ma();
class OE extends Ci {
  /**
   * Constructs a new instanced mesh.
   *
   * @param {BufferGeometry} [geometry] - The mesh geometry.
   * @param {Material|Array<Material>} [material] - The mesh material.
   * @param {number} count - The number of instances.
   */
  constructor(e, n, i) {
    super(e, n), this.isInstancedMesh = !0, this.instanceMatrix = new kh(new Float32Array(i * 16), 16), this.instanceColor = null, this.morphTexture = null, this.count = i, this.boundingBox = null, this.boundingSphere = null;
    for (let r = 0; r < i; r++)
      this.setMatrixAt(r, FC);
  }
  /**
   * Computes the bounding box of the instanced mesh, and updates {@link InstancedMesh#boundingBox}.
   * The bounding box is not automatically computed by the engine; this method must be called by your app.
   * You may need to recompute the bounding box if an instance is transformed via {@link InstancedMesh#setMatrixAt}.
   */
  computeBoundingBox() {
    const e = this.geometry, n = this.count;
    this.boundingBox === null && (this.boundingBox = new wa()), e.boundingBox === null && e.computeBoundingBox(), this.boundingBox.makeEmpty();
    for (let i = 0; i < n; i++)
      this.getMatrixAt(i, Th), $1.copy(e.boundingBox).applyMatrix4(Th), this.boundingBox.union($1);
  }
  /**
   * Computes the bounding sphere of the instanced mesh, and updates {@link InstancedMesh#boundingSphere}
   * The engine automatically computes the bounding sphere when it is needed, e.g., for ray casting or view frustum culling.
   * You may need to recompute the bounding sphere if an instance is transformed via {@link InstancedMesh#setMatrixAt}.
   */
  computeBoundingSphere() {
    const e = this.geometry, n = this.count;
    this.boundingSphere === null && (this.boundingSphere = new ma()), e.boundingSphere === null && e.computeBoundingSphere(), this.boundingSphere.makeEmpty();
    for (let i = 0; i < n; i++)
      this.getMatrixAt(i, Th), Tp.copy(e.boundingSphere).applyMatrix4(Th), this.boundingSphere.union(Tp);
  }
  copy(e, n) {
    return super.copy(e, n), this.instanceMatrix.copy(e.instanceMatrix), e.morphTexture !== null && (this.morphTexture = e.morphTexture.clone()), e.instanceColor !== null && (this.instanceColor = e.instanceColor.clone()), this.count = e.count, e.boundingBox !== null && (this.boundingBox = e.boundingBox.clone()), e.boundingSphere !== null && (this.boundingSphere = e.boundingSphere.clone()), this;
  }
  /**
   * Gets the color of the defined instance.
   *
   * @param {number} index - The instance index.
   * @param {Color} color - The target object that is used to store the method's result.
   */
  getColorAt(e, n) {
    n.fromArray(this.instanceColor.array, e * 3);
  }
  /**
   * Gets the local transformation matrix of the defined instance.
   *
   * @param {number} index - The instance index.
   * @param {Matrix4} matrix - The target object that is used to store the method's result.
   */
  getMatrixAt(e, n) {
    n.fromArray(this.instanceMatrix.array, e * 16);
  }
  /**
   * Gets the morph target weights of the defined instance.
   *
   * @param {number} index - The instance index.
   * @param {Mesh} object - The target object that is used to store the method's result.
   */
  getMorphAt(e, n) {
    const i = n.morphTargetInfluences, r = this.morphTexture.source.data.data, c = i.length + 1, h = e * c + 1;
    for (let d = 0; d < i.length; d++)
      i[d] = r[h + d];
  }
  raycast(e, n) {
    const i = this.matrixWorld, r = this.count;
    if (Ep.geometry = this.geometry, Ep.material = this.material, Ep.material !== void 0 && (this.boundingSphere === null && this.computeBoundingSphere(), Tp.copy(this.boundingSphere), Tp.applyMatrix4(i), e.ray.intersectsSphere(Tp) !== !1))
      for (let c = 0; c < r; c++) {
        this.getMatrixAt(c, Th), J1.multiplyMatrices(i, Th), Ep.matrixWorld = J1, Ep.raycast(e, gg);
        for (let h = 0, d = gg.length; h < d; h++) {
          const v = gg[h];
          v.instanceId = c, v.object = this, n.push(v);
        }
        gg.length = 0;
      }
  }
  /**
   * Sets the given color to the defined instance. Make sure you set the `needsUpdate` flag of
   * {@link InstancedMesh#instanceColor} to `true` after updating all the colors.
   *
   * @param {number} index - The instance index.
   * @param {Color} color - The instance color.
   */
  setColorAt(e, n) {
    this.instanceColor === null && (this.instanceColor = new kh(new Float32Array(this.instanceMatrix.count * 3).fill(1), 3)), n.toArray(this.instanceColor.array, e * 3);
  }
  /**
   * Sets the given local transformation matrix to the defined instance. Make sure you set the `needsUpdate` flag of
   * {@link InstancedMesh#instanceMatrix} to `true` after updating all the colors.
   *
   * @param {number} index - The instance index.
   * @param {Matrix4} matrix - The local transformation.
   */
  setMatrixAt(e, n) {
    n.toArray(this.instanceMatrix.array, e * 16);
  }
  /**
   * Sets the morph target weights to the defined instance. Make sure you set the `needsUpdate` flag of
   * {@link InstancedMesh#morphTexture} to `true` after updating all the influences.
   *
   * @param {number} index - The instance index.
   * @param {Mesh} object -  A mesh which `morphTargetInfluences` property containing the morph target weights
   * of a single instance.
   */
  setMorphAt(e, n) {
    const i = n.morphTargetInfluences, r = i.length + 1;
    this.morphTexture === null && (this.morphTexture = new Bo(new Float32Array(r * this.count), r, this.count, X0, es));
    const c = this.morphTexture.source.data.data;
    let h = 0;
    for (let g = 0; g < i.length; g++)
      h += i[g];
    const d = this.geometry.morphTargetsRelative ? 1 : 1 - h, v = r * e;
    c[v] = d, c.set(i, v + 1);
  }
  updateMorphTargets() {
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
    this.dispatchEvent({ type: "dispose" }), this.morphTexture !== null && (this.morphTexture.dispose(), this.morphTexture = null);
  }
}
const D_ = /* @__PURE__ */ new j(), XC = /* @__PURE__ */ new j(), qC = /* @__PURE__ */ new Qt();
class bc {
  /**
   * Constructs a new plane.
   *
   * @param {Vector3} [normal=(1,0,0)] - A unit length vector defining the normal of the plane.
   * @param {number} [constant=0] - The signed distance from the origin to the plane.
   */
  constructor(e = new j(1, 0, 0), n = 0) {
    this.isPlane = !0, this.normal = e, this.constant = n;
  }
  /**
   * Sets the plane components by copying the given values.
   *
   * @param {Vector3} normal - The normal.
   * @param {number} constant - The constant.
   * @return {Plane} A reference to this plane.
   */
  set(e, n) {
    return this.normal.copy(e), this.constant = n, this;
  }
  /**
   * Sets the plane components by defining `x`, `y`, `z` as the
   * plane normal and `w` as the constant.
   *
   * @param {number} x - The value for the normal's x component.
   * @param {number} y - The value for the normal's y component.
   * @param {number} z - The value for the normal's z component.
   * @param {number} w - The constant value.
   * @return {Plane} A reference to this plane.
   */
  setComponents(e, n, i, r) {
    return this.normal.set(e, n, i), this.constant = r, this;
  }
  /**
   * Sets the plane from the given normal and coplanar point (that is a point
   * that lies onto the plane).
   *
   * @param {Vector3} normal - The normal.
   * @param {Vector3} point - A coplanar point.
   * @return {Plane} A reference to this plane.
   */
  setFromNormalAndCoplanarPoint(e, n) {
    return this.normal.copy(e), this.constant = -n.dot(this.normal), this;
  }
  /**
   * Sets the plane from three coplanar points. The winding order is
   * assumed to be counter-clockwise, and determines the direction of
   * the plane normal.
   *
   * @param {Vector3} a - The first coplanar point.
   * @param {Vector3} b - The second coplanar point.
   * @param {Vector3} c - The third coplanar point.
   * @return {Plane} A reference to this plane.
   */
  setFromCoplanarPoints(e, n, i) {
    const r = D_.subVectors(i, n).cross(XC.subVectors(e, n)).normalize();
    return this.setFromNormalAndCoplanarPoint(r, e), this;
  }
  /**
   * Copies the values of the given plane to this instance.
   *
   * @param {Plane} plane - The plane to copy.
   * @return {Plane} A reference to this plane.
   */
  copy(e) {
    return this.normal.copy(e.normal), this.constant = e.constant, this;
  }
  /**
   * Normalizes the plane normal and adjusts the constant accordingly.
   *
   * @return {Plane} A reference to this plane.
   */
  normalize() {
    const e = 1 / this.normal.length();
    return this.normal.multiplyScalar(e), this.constant *= e, this;
  }
  /**
   * Negates both the plane normal and the constant.
   *
   * @return {Plane} A reference to this plane.
   */
  negate() {
    return this.constant *= -1, this.normal.negate(), this;
  }
  /**
   * Returns the signed distance from the given point to this plane.
   *
   * @param {Vector3} point - The point to compute the distance for.
   * @return {number} The signed distance.
   */
  distanceToPoint(e) {
    return this.normal.dot(e) + this.constant;
  }
  /**
   * Returns the signed distance from the given sphere to this plane.
   *
   * @param {Sphere} sphere - The sphere to compute the distance for.
   * @return {number} The signed distance.
   */
  distanceToSphere(e) {
    return this.distanceToPoint(e.center) - e.radius;
  }
  /**
   * Projects a the given point onto the plane.
   *
   * @param {Vector3} point - The point to project.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The projected point on the plane.
   */
  projectPoint(e, n) {
    return n.copy(e).addScaledVector(this.normal, -this.distanceToPoint(e));
  }
  /**
   * Returns the intersection point of the passed line and the plane. Returns
   * `null` if the line does not intersect. Returns the line's starting point if
   * the line is coplanar with the plane.
   *
   * @param {Line3} line - The line to compute the intersection for.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {?Vector3} The intersection point.
   */
  intersectLine(e, n) {
    const i = e.delta(D_), r = this.normal.dot(i);
    if (r === 0)
      return this.distanceToPoint(e.start) === 0 ? n.copy(e.start) : null;
    const c = -(e.start.dot(this.normal) + this.constant) / r;
    return c < 0 || c > 1 ? null : n.copy(e.start).addScaledVector(i, c);
  }
  /**
   * Returns `true` if the given line segment intersects with (passes through) the plane.
   *
   * @param {Line3} line - The line to test.
   * @return {boolean} Whether the given line segment intersects with the plane or not.
   */
  intersectsLine(e) {
    const n = this.distanceToPoint(e.start), i = this.distanceToPoint(e.end);
    return n < 0 && i > 0 || i < 0 && n > 0;
  }
  /**
   * Returns `true` if the given bounding box intersects with the plane.
   *
   * @param {Box3} box - The bounding box to test.
   * @return {boolean} Whether the given bounding box intersects with the plane or not.
   */
  intersectsBox(e) {
    return e.intersectsPlane(this);
  }
  /**
   * Returns `true` if the given bounding sphere intersects with the plane.
   *
   * @param {Sphere} sphere - The bounding sphere to test.
   * @return {boolean} Whether the given bounding sphere intersects with the plane or not.
   */
  intersectsSphere(e) {
    return e.intersectsPlane(this);
  }
  /**
   * Returns a coplanar vector to the plane, by calculating the
   * projection of the normal at the origin onto the plane.
   *
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The coplanar point.
   */
  coplanarPoint(e) {
    return e.copy(this.normal).multiplyScalar(-this.constant);
  }
  /**
   * Apply a 4x4 matrix to the plane. The matrix must be an affine, homogeneous transform.
   *
   * The optional normal matrix can be pre-computed like so:
   * ```js
   * const optionalNormalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );
   * ```
   *
   * @param {Matrix4} matrix - The transformation matrix.
   * @param {Matrix4} [optionalNormalMatrix] - A pre-computed normal matrix.
   * @return {Plane} A reference to this plane.
   */
  applyMatrix4(e, n) {
    const i = n || qC.getNormalMatrix(e), r = this.coplanarPoint(D_).applyMatrix4(e), c = this.normal.applyMatrix3(i).normalize();
    return this.constant = -r.dot(c), this;
  }
  /**
   * Translates the plane by the distance defined by the given offset vector.
   * Note that this only affects the plane constant and will not affect the normal vector.
   *
   * @param {Vector3} offset - The offset vector.
   * @return {Plane} A reference to this plane.
   */
  translate(e) {
    return this.constant -= e.dot(this.normal), this;
  }
  /**
   * Returns `true` if this plane is equal with the given one.
   *
   * @param {Plane} plane - The plane to test for equality.
   * @return {boolean} Whether this plane is equal with the given one.
   */
  equals(e) {
    return e.normal.equals(this.normal) && e.constant === this.constant;
  }
  /**
   * Returns a new plane with copied values from this instance.
   *
   * @return {Plane} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
}
const wu = /* @__PURE__ */ new ma(), YC = /* @__PURE__ */ new De(0.5, 0.5), yg = /* @__PURE__ */ new j();
class Jh {
  /**
   * Constructs a new frustum.
   *
   * @param {Plane} [p0] - The first plane that encloses the frustum.
   * @param {Plane} [p1] - The second plane that encloses the frustum.
   * @param {Plane} [p2] - The third plane that encloses the frustum.
   * @param {Plane} [p3] - The fourth plane that encloses the frustum.
   * @param {Plane} [p4] - The fifth plane that encloses the frustum.
   * @param {Plane} [p5] - The sixth plane that encloses the frustum.
   */
  constructor(e = new bc(), n = new bc(), i = new bc(), r = new bc(), c = new bc(), h = new bc()) {
    this.planes = [e, n, i, r, c, h];
  }
  /**
   * Sets the frustum planes by copying the given planes.
   *
   * @param {Plane} [p0] - The first plane that encloses the frustum.
   * @param {Plane} [p1] - The second plane that encloses the frustum.
   * @param {Plane} [p2] - The third plane that encloses the frustum.
   * @param {Plane} [p3] - The fourth plane that encloses the frustum.
   * @param {Plane} [p4] - The fifth plane that encloses the frustum.
   * @param {Plane} [p5] - The sixth plane that encloses the frustum.
   * @return {Frustum} A reference to this frustum.
   */
  set(e, n, i, r, c, h) {
    const d = this.planes;
    return d[0].copy(e), d[1].copy(n), d[2].copy(i), d[3].copy(r), d[4].copy(c), d[5].copy(h), this;
  }
  /**
   * Copies the values of the given frustum to this instance.
   *
   * @param {Frustum} frustum - The frustum to copy.
   * @return {Frustum} A reference to this frustum.
   */
  copy(e) {
    const n = this.planes;
    for (let i = 0; i < 6; i++)
      n[i].copy(e.planes[i]);
    return this;
  }
  /**
   * Sets the frustum planes from the given projection matrix.
   *
   * @param {Matrix4} m - The projection matrix.
   * @param {(WebGLCoordinateSystem|WebGPUCoordinateSystem)} coordinateSystem - The coordinate system.
   * @param {boolean} [reversedDepth=false] - Whether to use a reversed depth.
   * @return {Frustum} A reference to this frustum.
   */
  setFromProjectionMatrix(e, n = Gs, i = !1) {
    const r = this.planes, c = e.elements, h = c[0], d = c[1], v = c[2], g = c[3], S = c[4], x = c[5], M = c[6], b = c[7], R = c[8], w = c[9], C = c[10], E = c[11], U = c[12], N = c[13], O = c[14], I = c[15];
    if (r[0].setComponents(g - h, b - S, E - R, I - U).normalize(), r[1].setComponents(g + h, b + S, E + R, I + U).normalize(), r[2].setComponents(g + d, b + x, E + w, I + N).normalize(), r[3].setComponents(g - d, b - x, E - w, I - N).normalize(), i)
      r[4].setComponents(v, M, C, O).normalize(), r[5].setComponents(g - v, b - M, E - C, I - O).normalize();
    else if (r[4].setComponents(g - v, b - M, E - C, I - O).normalize(), n === Gs)
      r[5].setComponents(g + v, b + M, E + C, I + O).normalize();
    else if (n === Fh)
      r[5].setComponents(v, M, C, O).normalize();
    else
      throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: " + n);
    return this;
  }
  /**
   * Returns `true` if the 3D object's bounding sphere is intersecting this frustum.
   *
   * Note that the 3D object must have a geometry so that the bounding sphere can be calculated.
   *
   * @param {Object3D} object - The 3D object to test.
   * @return {boolean} Whether the 3D object's bounding sphere is intersecting this frustum or not.
   */
  intersectsObject(e) {
    if (e.boundingSphere !== void 0)
      e.boundingSphere === null && e.computeBoundingSphere(), wu.copy(e.boundingSphere).applyMatrix4(e.matrixWorld);
    else {
      const n = e.geometry;
      n.boundingSphere === null && n.computeBoundingSphere(), wu.copy(n.boundingSphere).applyMatrix4(e.matrixWorld);
    }
    return this.intersectsSphere(wu);
  }
  /**
   * Returns `true` if the given sprite is intersecting this frustum.
   *
   * @param {Sprite} sprite - The sprite to test.
   * @return {boolean} Whether the sprite is intersecting this frustum or not.
   */
  intersectsSprite(e) {
    wu.center.set(0, 0, 0);
    const n = YC.distanceTo(e.center);
    return wu.radius = 0.7071067811865476 + n, wu.applyMatrix4(e.matrixWorld), this.intersectsSphere(wu);
  }
  /**
   * Returns `true` if the given bounding sphere is intersecting this frustum.
   *
   * @param {Sphere} sphere - The bounding sphere to test.
   * @return {boolean} Whether the bounding sphere is intersecting this frustum or not.
   */
  intersectsSphere(e) {
    const n = this.planes, i = e.center, r = -e.radius;
    for (let c = 0; c < 6; c++)
      if (n[c].distanceToPoint(i) < r)
        return !1;
    return !0;
  }
  /**
   * Returns `true` if the given bounding box is intersecting this frustum.
   *
   * @param {Box3} box - The bounding box to test.
   * @return {boolean} Whether the bounding box is intersecting this frustum or not.
   */
  intersectsBox(e) {
    const n = this.planes;
    for (let i = 0; i < 6; i++) {
      const r = n[i];
      if (yg.x = r.normal.x > 0 ? e.max.x : e.min.x, yg.y = r.normal.y > 0 ? e.max.y : e.min.y, yg.z = r.normal.z > 0 ? e.max.z : e.min.z, r.distanceToPoint(yg) < 0)
        return !1;
    }
    return !0;
  }
  /**
   * Returns `true` if the given point lies within the frustum.
   *
   * @param {Vector3} point - The point to test.
   * @return {boolean} Whether the point lies within this frustum or not.
   */
  containsPoint(e) {
    const n = this.planes;
    for (let i = 0; i < 6; i++)
      if (n[i].distanceToPoint(e) < 0)
        return !1;
    return !0;
  }
  /**
   * Returns a new frustum with copied values from this instance.
   *
   * @return {Frustum} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
}
const No = /* @__PURE__ */ new Ft(), Oo = /* @__PURE__ */ new Jh();
class $0 {
  /**
   * Constructs a new frustum array.
   *
   */
  constructor() {
    this.coordinateSystem = Gs;
  }
  /**
   * Returns `true` if the 3D object's bounding sphere is intersecting any frustum
   * from the camera array.
   *
   * @param {Object3D} object - The 3D object to test.
   * @param {Object} cameraArray - An object with a cameras property containing an array of cameras.
   * @return {boolean} Whether the 3D object is visible in any camera.
   */
  intersectsObject(e, n) {
    if (!n.isArrayCamera || n.cameras.length === 0)
      return !1;
    for (let i = 0; i < n.cameras.length; i++) {
      const r = n.cameras[i];
      if (No.multiplyMatrices(
        r.projectionMatrix,
        r.matrixWorldInverse
      ), Oo.setFromProjectionMatrix(
        No,
        r.coordinateSystem,
        r.reversedDepth
      ), Oo.intersectsObject(e))
        return !0;
    }
    return !1;
  }
  /**
   * Returns `true` if the given sprite is intersecting any frustum
   * from the camera array.
   *
   * @param {Sprite} sprite - The sprite to test.
   * @param {Object} cameraArray - An object with a cameras property containing an array of cameras.
   * @return {boolean} Whether the sprite is visible in any camera.
   */
  intersectsSprite(e, n) {
    if (!n || !n.cameras || n.cameras.length === 0)
      return !1;
    for (let i = 0; i < n.cameras.length; i++) {
      const r = n.cameras[i];
      if (No.multiplyMatrices(
        r.projectionMatrix,
        r.matrixWorldInverse
      ), Oo.setFromProjectionMatrix(
        No,
        r.coordinateSystem,
        r.reversedDepth
      ), Oo.intersectsSprite(e))
        return !0;
    }
    return !1;
  }
  /**
   * Returns `true` if the given bounding sphere is intersecting any frustum
   * from the camera array.
   *
   * @param {Sphere} sphere - The bounding sphere to test.
   * @param {Object} cameraArray - An object with a cameras property containing an array of cameras.
   * @return {boolean} Whether the sphere is visible in any camera.
   */
  intersectsSphere(e, n) {
    if (!n || !n.cameras || n.cameras.length === 0)
      return !1;
    for (let i = 0; i < n.cameras.length; i++) {
      const r = n.cameras[i];
      if (No.multiplyMatrices(
        r.projectionMatrix,
        r.matrixWorldInverse
      ), Oo.setFromProjectionMatrix(
        No,
        r.coordinateSystem,
        r.reversedDepth
      ), Oo.intersectsSphere(e))
        return !0;
    }
    return !1;
  }
  /**
   * Returns `true` if the given bounding box is intersecting any frustum
   * from the camera array.
   *
   * @param {Box3} box - The bounding box to test.
   * @param {Object} cameraArray - An object with a cameras property containing an array of cameras.
   * @return {boolean} Whether the box is visible in any camera.
   */
  intersectsBox(e, n) {
    if (!n || !n.cameras || n.cameras.length === 0)
      return !1;
    for (let i = 0; i < n.cameras.length; i++) {
      const r = n.cameras[i];
      if (No.multiplyMatrices(
        r.projectionMatrix,
        r.matrixWorldInverse
      ), Oo.setFromProjectionMatrix(
        No,
        r.coordinateSystem,
        r.reversedDepth
      ), Oo.intersectsBox(e))
        return !0;
    }
    return !1;
  }
  /**
   * Returns `true` if the given point lies within any frustum
   * from the camera array.
   *
   * @param {Vector3} point - The point to test.
   * @param {Object} cameraArray - An object with a cameras property containing an array of cameras.
   * @return {boolean} Whether the point is visible in any camera.
   */
  containsPoint(e, n) {
    if (!n || !n.cameras || n.cameras.length === 0)
      return !1;
    for (let i = 0; i < n.cameras.length; i++) {
      const r = n.cameras[i];
      if (No.multiplyMatrices(
        r.projectionMatrix,
        r.matrixWorldInverse
      ), Oo.setFromProjectionMatrix(
        No,
        r.coordinateSystem,
        r.reversedDepth
      ), Oo.containsPoint(e))
        return !0;
    }
    return !1;
  }
  /**
   * Returns a new frustum array with copied values from this instance.
   *
   * @return {FrustumArray} A clone of this instance.
   */
  clone() {
    return new $0();
  }
}
function U_(s, e) {
  return s - e;
}
function kC(s, e) {
  return s.z - e.z;
}
function WC(s, e) {
  return e.z - s.z;
}
class ZC {
  constructor() {
    this.index = 0, this.pool = [], this.list = [];
  }
  push(e, n, i, r) {
    const c = this.pool, h = this.list;
    this.index >= c.length && c.push({
      start: -1,
      count: -1,
      z: -1,
      index: -1
    });
    const d = c[this.index];
    h.push(d), this.index++, d.start = e, d.count = n, d.z = i, d.index = r;
  }
  reset() {
    this.list.length = 0, this.index = 0;
  }
}
const _s = /* @__PURE__ */ new Ft(), jC = /* @__PURE__ */ new lt(1, 1, 1), eM = /* @__PURE__ */ new Jh(), QC = /* @__PURE__ */ new $0(), _g = /* @__PURE__ */ new wa(), Du = /* @__PURE__ */ new ma(), Ap = /* @__PURE__ */ new j(), tM = /* @__PURE__ */ new j(), KC = /* @__PURE__ */ new j(), N_ = /* @__PURE__ */ new ZC(), Ra = /* @__PURE__ */ new Ci(), Sg = [];
function JC(s, e, n = 0) {
  const i = e.itemSize;
  if (s.isInterleavedBufferAttribute || s.array.constructor !== e.array.constructor) {
    const r = s.count;
    for (let c = 0; c < r; c++)
      for (let h = 0; h < i; h++)
        e.setComponent(c + n, h, s.getComponent(c, h));
  } else
    e.array.set(s.array, n * i);
  e.needsUpdate = !0;
}
function Uu(s, e) {
  if (s.constructor !== e.constructor) {
    const n = Math.min(s.length, e.length);
    for (let i = 0; i < n; i++)
      e[i] = s[i];
  } else {
    const n = Math.min(s.length, e.length);
    e.set(new s.constructor(s.buffer, 0, n));
  }
}
class LE extends Ci {
  /**
   * Constructs a new batched mesh.
   *
   * @param {number} maxInstanceCount - The maximum number of individual instances planned to be added and rendered.
   * @param {number} maxVertexCount - The maximum number of vertices to be used by all unique geometries.
   * @param {number} [maxIndexCount=maxVertexCount*2] - The maximum number of indices to be used by all unique geometries
   * @param {Material|Array<Material>} [material] - The mesh material.
   */
  constructor(e, n, i = n * 2, r) {
    super(new Kt(), r), this.isBatchedMesh = !0, this.perObjectFrustumCulled = !0, this.sortObjects = !0, this.boundingBox = null, this.boundingSphere = null, this.customSort = null, this._instanceInfo = [], this._geometryInfo = [], this._availableInstanceIds = [], this._availableGeometryIds = [], this._nextIndexStart = 0, this._nextVertexStart = 0, this._geometryCount = 0, this._visibilityChanged = !0, this._geometryInitialized = !1, this._maxInstanceCount = e, this._maxVertexCount = n, this._maxIndexCount = i, this._multiDrawCounts = new Int32Array(e), this._multiDrawStarts = new Int32Array(e), this._multiDrawCount = 0, this._multiDrawInstances = null, this._matricesTexture = null, this._indirectTexture = null, this._colorsTexture = null, this._initMatricesTexture(), this._initIndirectTexture();
  }
  /**
   * The maximum number of individual instances that can be stored in the batch.
   *
   * @type {number}
   * @readonly
   */
  get maxInstanceCount() {
    return this._maxInstanceCount;
  }
  /**
   * The instance count.
   *
   * @type {number}
   * @readonly
   */
  get instanceCount() {
    return this._instanceInfo.length - this._availableInstanceIds.length;
  }
  /**
   * The number of unused vertices.
   *
   * @type {number}
   * @readonly
   */
  get unusedVertexCount() {
    return this._maxVertexCount - this._nextVertexStart;
  }
  /**
   * The number of unused indices.
   *
   * @type {number}
   * @readonly
   */
  get unusedIndexCount() {
    return this._maxIndexCount - this._nextIndexStart;
  }
  _initMatricesTexture() {
    let e = Math.sqrt(this._maxInstanceCount * 4);
    e = Math.ceil(e / 4) * 4, e = Math.max(e, 4);
    const n = new Float32Array(e * e * 4), i = new Bo(n, e, e, Ca, es);
    this._matricesTexture = i;
  }
  _initIndirectTexture() {
    let e = Math.sqrt(this._maxInstanceCount);
    e = Math.ceil(e);
    const n = new Uint32Array(e * e), i = new Bo(n, e, e, um, Io);
    this._indirectTexture = i;
  }
  _initColorsTexture() {
    let e = Math.sqrt(this._maxInstanceCount);
    e = Math.ceil(e);
    const n = new Float32Array(e * e * 4).fill(1), i = new Bo(n, e, e, Ca, es);
    i.colorSpace = vn.workingColorSpace, this._colorsTexture = i;
  }
  _initializeGeometry(e) {
    const n = this.geometry, i = this._maxVertexCount, r = this._maxIndexCount;
    if (this._geometryInitialized === !1) {
      for (const c in e.attributes) {
        const h = e.getAttribute(c), { array: d, itemSize: v, normalized: g } = h, S = new d.constructor(i * v), x = new Nn(S, v, g);
        n.setAttribute(c, x);
      }
      if (e.getIndex() !== null) {
        const c = i > 65535 ? new Uint32Array(r) : new Uint16Array(r);
        n.setIndex(new Nn(c, 1));
      }
      this._geometryInitialized = !0;
    }
  }
  // Make sure the geometry is compatible with the existing combined geometry attributes
  _validateGeometry(e) {
    const n = this.geometry;
    if (!!e.getIndex() != !!n.getIndex())
      throw new Error('THREE.BatchedMesh: All geometries must consistently have "index".');
    for (const i in n.attributes) {
      if (!e.hasAttribute(i))
        throw new Error(`THREE.BatchedMesh: Added geometry missing "${i}". All geometries must have consistent attributes.`);
      const r = e.getAttribute(i), c = n.getAttribute(i);
      if (r.itemSize !== c.itemSize || r.normalized !== c.normalized)
        throw new Error("THREE.BatchedMesh: All attributes must have a consistent itemSize and normalized value.");
    }
  }
  /**
   * Validates the instance defined by the given ID.
   *
   * @param {number} instanceId - The instance to validate.
   */
  validateInstanceId(e) {
    const n = this._instanceInfo;
    if (e < 0 || e >= n.length || n[e].active === !1)
      throw new Error(`THREE.BatchedMesh: Invalid instanceId ${e}. Instance is either out of range or has been deleted.`);
  }
  /**
   * Validates the geometry defined by the given ID.
   *
   * @param {number} geometryId - The geometry to validate.
   */
  validateGeometryId(e) {
    const n = this._geometryInfo;
    if (e < 0 || e >= n.length || n[e].active === !1)
      throw new Error(`THREE.BatchedMesh: Invalid geometryId ${e}. Geometry is either out of range or has been deleted.`);
  }
  /**
   * Takes a sort a function that is run before render. The function takes a list of instances to
   * sort and a camera. The objects in the list include a "z" field to perform a depth-ordered sort with.
   *
   * @param {Function} func - The custom sort function.
   * @return {BatchedMesh} A reference to this batched mesh.
   */
  setCustomSort(e) {
    return this.customSort = e, this;
  }
  /**
   * Computes the bounding box, updating {@link BatchedMesh#boundingBox}.
   * Bounding boxes aren't computed by default. They need to be explicitly computed,
   * otherwise they are `null`.
   */
  computeBoundingBox() {
    this.boundingBox === null && (this.boundingBox = new wa());
    const e = this.boundingBox, n = this._instanceInfo;
    e.makeEmpty();
    for (let i = 0, r = n.length; i < r; i++) {
      if (n[i].active === !1) continue;
      const c = n[i].geometryIndex;
      this.getMatrixAt(i, _s), this.getBoundingBoxAt(c, _g).applyMatrix4(_s), e.union(_g);
    }
  }
  /**
   * Computes the bounding sphere, updating {@link BatchedMesh#boundingSphere}.
   * Bounding spheres aren't computed by default. They need to be explicitly computed,
   * otherwise they are `null`.
   */
  computeBoundingSphere() {
    this.boundingSphere === null && (this.boundingSphere = new ma());
    const e = this.boundingSphere, n = this._instanceInfo;
    e.makeEmpty();
    for (let i = 0, r = n.length; i < r; i++) {
      if (n[i].active === !1) continue;
      const c = n[i].geometryIndex;
      this.getMatrixAt(i, _s), this.getBoundingSphereAt(c, Du).applyMatrix4(_s), e.union(Du);
    }
  }
  /**
   * Adds a new instance to the batch using the geometry of the given ID and returns
   * a new id referring to the new instance to be used by other functions.
   *
   * @param {number} geometryId - The ID of a previously added geometry via {@link BatchedMesh#addGeometry}.
   * @return {number} The instance ID.
   */
  addInstance(e) {
    if (this._instanceInfo.length >= this.maxInstanceCount && this._availableInstanceIds.length === 0)
      throw new Error("THREE.BatchedMesh: Maximum item count reached.");
    const i = {
      visible: !0,
      active: !0,
      geometryIndex: e
    };
    let r = null;
    this._availableInstanceIds.length > 0 ? (this._availableInstanceIds.sort(U_), r = this._availableInstanceIds.shift(), this._instanceInfo[r] = i) : (r = this._instanceInfo.length, this._instanceInfo.push(i));
    const c = this._matricesTexture;
    _s.identity().toArray(c.image.data, r * 16), c.needsUpdate = !0;
    const h = this._colorsTexture;
    return h && (jC.toArray(h.image.data, r * 4), h.needsUpdate = !0), this._visibilityChanged = !0, r;
  }
  /**
   * Adds the given geometry to the batch and returns the associated
   * geometry id referring to it to be used in other functions.
   *
   * @param {BufferGeometry} geometry - The geometry to add.
   * @param {number} [reservedVertexCount=-1] - Optional parameter specifying the amount of
   * vertex buffer space to reserve for the added geometry. This is necessary if it is planned
   * to set a new geometry at this index at a later time that is larger than the original geometry.
   * Defaults to the length of the given geometry vertex buffer.
   * @param {number} [reservedIndexCount=-1] - Optional parameter specifying the amount of index
   * buffer space to reserve for the added geometry. This is necessary if it is planned to set a
   * new geometry at this index at a later time that is larger than the original geometry. Defaults to
   * the length of the given geometry index buffer.
   * @return {number} The geometry ID.
   */
  addGeometry(e, n = -1, i = -1) {
    this._initializeGeometry(e), this._validateGeometry(e);
    const r = {
      // geometry information
      vertexStart: -1,
      vertexCount: -1,
      reservedVertexCount: -1,
      indexStart: -1,
      indexCount: -1,
      reservedIndexCount: -1,
      // draw range information
      start: -1,
      count: -1,
      // state
      boundingBox: null,
      boundingSphere: null,
      active: !0
    }, c = this._geometryInfo;
    r.vertexStart = this._nextVertexStart, r.reservedVertexCount = n === -1 ? e.getAttribute("position").count : n;
    const h = e.getIndex();
    if (h !== null && (r.indexStart = this._nextIndexStart, r.reservedIndexCount = i === -1 ? h.count : i), r.indexStart !== -1 && r.indexStart + r.reservedIndexCount > this._maxIndexCount || r.vertexStart + r.reservedVertexCount > this._maxVertexCount)
      throw new Error("THREE.BatchedMesh: Reserved space request exceeds the maximum buffer size.");
    let v;
    return this._availableGeometryIds.length > 0 ? (this._availableGeometryIds.sort(U_), v = this._availableGeometryIds.shift(), c[v] = r) : (v = this._geometryCount, this._geometryCount++, c.push(r)), this.setGeometryAt(v, e), this._nextIndexStart = r.indexStart + r.reservedIndexCount, this._nextVertexStart = r.vertexStart + r.reservedVertexCount, v;
  }
  /**
   * Replaces the geometry at the given ID with the provided geometry. Throws an error if there
   * is not enough space reserved for geometry. Calling this will change all instances that are
   * rendering that geometry.
   *
   * @param {number} geometryId - The ID of the geometry that should be replaced with the given geometry.
   * @param {BufferGeometry} geometry - The new geometry.
   * @return {number} The geometry ID.
   */
  setGeometryAt(e, n) {
    if (e >= this._geometryCount)
      throw new Error("THREE.BatchedMesh: Maximum geometry count reached.");
    this._validateGeometry(n);
    const i = this.geometry, r = i.getIndex() !== null, c = i.getIndex(), h = n.getIndex(), d = this._geometryInfo[e];
    if (r && h.count > d.reservedIndexCount || n.attributes.position.count > d.reservedVertexCount)
      throw new Error("THREE.BatchedMesh: Reserved space not large enough for provided geometry.");
    const v = d.vertexStart, g = d.reservedVertexCount;
    d.vertexCount = n.getAttribute("position").count;
    for (const S in i.attributes) {
      const x = n.getAttribute(S), M = i.getAttribute(S);
      JC(x, M, v);
      const b = x.itemSize;
      for (let R = x.count, w = g; R < w; R++) {
        const C = v + R;
        for (let E = 0; E < b; E++)
          M.setComponent(C, E, 0);
      }
      M.needsUpdate = !0, M.addUpdateRange(v * b, g * b);
    }
    if (r) {
      const S = d.indexStart, x = d.reservedIndexCount;
      d.indexCount = n.getIndex().count;
      for (let M = 0; M < h.count; M++)
        c.setX(S + M, v + h.getX(M));
      for (let M = h.count, b = x; M < b; M++)
        c.setX(S + M, v);
      c.needsUpdate = !0, c.addUpdateRange(S, d.reservedIndexCount);
    }
    return d.start = r ? d.indexStart : d.vertexStart, d.count = r ? d.indexCount : d.vertexCount, d.boundingBox = null, n.boundingBox !== null && (d.boundingBox = n.boundingBox.clone()), d.boundingSphere = null, n.boundingSphere !== null && (d.boundingSphere = n.boundingSphere.clone()), this._visibilityChanged = !0, e;
  }
  /**
   * Deletes the geometry defined by the given ID from this batch. Any instances referencing
   * this geometry will also be removed as a side effect.
   *
   * @param {number} geometryId - The ID of the geometry to remove from the batch.
   * @return {BatchedMesh} A reference to this batched mesh.
   */
  deleteGeometry(e) {
    const n = this._geometryInfo;
    if (e >= n.length || n[e].active === !1)
      return this;
    const i = this._instanceInfo;
    for (let r = 0, c = i.length; r < c; r++)
      i[r].active && i[r].geometryIndex === e && this.deleteInstance(r);
    return n[e].active = !1, this._availableGeometryIds.push(e), this._visibilityChanged = !0, this;
  }
  /**
   * Deletes an existing instance from the batch using the given ID.
   *
   * @param {number} instanceId - The ID of the instance to remove from the batch.
   * @return {BatchedMesh} A reference to this batched mesh.
   */
  deleteInstance(e) {
    return this.validateInstanceId(e), this._instanceInfo[e].active = !1, this._availableInstanceIds.push(e), this._visibilityChanged = !0, this;
  }
  /**
   * Repacks the sub geometries in [name] to remove any unused space remaining from
   * previously deleted geometry, freeing up space to add new geometry.
   *
   * @param {number} instanceId - The ID of the instance to remove from the batch.
   * @return {BatchedMesh} A reference to this batched mesh.
   */
  optimize() {
    let e = 0, n = 0;
    const i = this._geometryInfo, r = i.map((h, d) => d).sort((h, d) => i[h].vertexStart - i[d].vertexStart), c = this.geometry;
    for (let h = 0, d = i.length; h < d; h++) {
      const v = r[h], g = i[v];
      if (g.active !== !1) {
        if (c.index !== null) {
          if (g.indexStart !== n) {
            const { indexStart: S, vertexStart: x, reservedIndexCount: M } = g, b = c.index, R = b.array, w = e - x;
            for (let C = S; C < S + M; C++)
              R[C] = R[C] + w;
            b.array.copyWithin(n, S, S + M), b.addUpdateRange(n, M), g.indexStart = n;
          }
          n += g.reservedIndexCount;
        }
        if (g.vertexStart !== e) {
          const { vertexStart: S, reservedVertexCount: x } = g, M = c.attributes;
          for (const b in M) {
            const R = M[b], { array: w, itemSize: C } = R;
            w.copyWithin(e * C, S * C, (S + x) * C), R.addUpdateRange(e * C, x * C);
          }
          g.vertexStart = e;
        }
        e += g.reservedVertexCount, g.start = c.index ? g.indexStart : g.vertexStart, this._nextIndexStart = c.index ? g.indexStart + g.reservedIndexCount : 0, this._nextVertexStart = g.vertexStart + g.reservedVertexCount;
      }
    }
    return this;
  }
  /**
   * Returns the bounding box for the given geometry.
   *
   * @param {number} geometryId - The ID of the geometry to return the bounding box for.
   * @param {Box3} target - The target object that is used to store the method's result.
   * @return {Box3|null} The geometry's bounding box. Returns `null` if no geometry has been found for the given ID.
   */
  getBoundingBoxAt(e, n) {
    if (e >= this._geometryCount)
      return null;
    const i = this.geometry, r = this._geometryInfo[e];
    if (r.boundingBox === null) {
      const c = new wa(), h = i.index, d = i.attributes.position;
      for (let v = r.start, g = r.start + r.count; v < g; v++) {
        let S = v;
        h && (S = h.getX(S)), c.expandByPoint(Ap.fromBufferAttribute(d, S));
      }
      r.boundingBox = c;
    }
    return n.copy(r.boundingBox), n;
  }
  /**
   * Returns the bounding sphere for the given geometry.
   *
   * @param {number} geometryId - The ID of the geometry to return the bounding sphere for.
   * @param {Sphere} target - The target object that is used to store the method's result.
   * @return {Sphere|null} The geometry's bounding sphere. Returns `null` if no geometry has been found for the given ID.
   */
  getBoundingSphereAt(e, n) {
    if (e >= this._geometryCount)
      return null;
    const i = this.geometry, r = this._geometryInfo[e];
    if (r.boundingSphere === null) {
      const c = new ma();
      this.getBoundingBoxAt(e, _g), _g.getCenter(c.center);
      const h = i.index, d = i.attributes.position;
      let v = 0;
      for (let g = r.start, S = r.start + r.count; g < S; g++) {
        let x = g;
        h && (x = h.getX(x)), Ap.fromBufferAttribute(d, x), v = Math.max(v, c.center.distanceToSquared(Ap));
      }
      c.radius = Math.sqrt(v), r.boundingSphere = c;
    }
    return n.copy(r.boundingSphere), n;
  }
  /**
   * Sets the given local transformation matrix to the defined instance.
   * Negatively scaled matrices are not supported.
   *
   * @param {number} instanceId - The ID of an instance to set the matrix of.
   * @param {Matrix4} matrix - A 4x4 matrix representing the local transformation of a single instance.
   * @return {BatchedMesh} A reference to this batched mesh.
   */
  setMatrixAt(e, n) {
    this.validateInstanceId(e);
    const i = this._matricesTexture, r = this._matricesTexture.image.data;
    return n.toArray(r, e * 16), i.needsUpdate = !0, this;
  }
  /**
   * Returns the local transformation matrix of the defined instance.
   *
   * @param {number} instanceId - The ID of an instance to get the matrix of.
   * @param {Matrix4} matrix - The target object that is used to store the method's result.
   * @return {Matrix4} The instance's local transformation matrix.
   */
  getMatrixAt(e, n) {
    return this.validateInstanceId(e), n.fromArray(this._matricesTexture.image.data, e * 16);
  }
  /**
   * Sets the given color to the defined instance.
   *
   * @param {number} instanceId - The ID of an instance to set the color of.
   * @param {Color} color - The color to set the instance to.
   * @return {BatchedMesh} A reference to this batched mesh.
   */
  setColorAt(e, n) {
    return this.validateInstanceId(e), this._colorsTexture === null && this._initColorsTexture(), n.toArray(this._colorsTexture.image.data, e * 4), this._colorsTexture.needsUpdate = !0, this;
  }
  /**
   * Returns the color of the defined instance.
   *
   * @param {number} instanceId - The ID of an instance to get the color of.
   * @param {Color} color - The target object that is used to store the method's result.
   * @return {Color} The instance's color.
   */
  getColorAt(e, n) {
    return this.validateInstanceId(e), n.fromArray(this._colorsTexture.image.data, e * 4);
  }
  /**
   * Sets the visibility of the instance.
   *
   * @param {number} instanceId - The id of the instance to set the visibility of.
   * @param {boolean} visible - Whether the instance is visible or not.
   * @return {BatchedMesh} A reference to this batched mesh.
   */
  setVisibleAt(e, n) {
    return this.validateInstanceId(e), this._instanceInfo[e].visible === n ? this : (this._instanceInfo[e].visible = n, this._visibilityChanged = !0, this);
  }
  /**
   * Returns the visibility state of the defined instance.
   *
   * @param {number} instanceId - The ID of an instance to get the visibility state of.
   * @return {boolean} Whether the instance is visible or not.
   */
  getVisibleAt(e) {
    return this.validateInstanceId(e), this._instanceInfo[e].visible;
  }
  /**
   * Sets the geometry ID of the instance at the given index.
   *
   * @param {number} instanceId - The ID of the instance to set the geometry ID of.
   * @param {number} geometryId - The geometry ID to be use by the instance.
   * @return {BatchedMesh} A reference to this batched mesh.
   */
  setGeometryIdAt(e, n) {
    return this.validateInstanceId(e), this.validateGeometryId(n), this._instanceInfo[e].geometryIndex = n, this;
  }
  /**
   * Returns the geometry ID of the defined instance.
   *
   * @param {number} instanceId - The ID of an instance to get the geometry ID of.
   * @return {number} The instance's geometry ID.
   */
  getGeometryIdAt(e) {
    return this.validateInstanceId(e), this._instanceInfo[e].geometryIndex;
  }
  /**
   * Get the range representing the subset of triangles related to the attached geometry,
   * indicating the starting offset and count, or `null` if invalid.
   *
   * @param {number} geometryId - The id of the geometry to get the range of.
   * @param {Object} [target] - The target object that is used to store the method's result.
   * @return {{
   * 	vertexStart:number,vertexCount:number,reservedVertexCount:number,
   * 	indexStart:number,indexCount:number,reservedIndexCount:number,
   * 	start:number,count:number
   * }} The result object with range data.
   */
  getGeometryRangeAt(e, n = {}) {
    this.validateGeometryId(e);
    const i = this._geometryInfo[e];
    return n.vertexStart = i.vertexStart, n.vertexCount = i.vertexCount, n.reservedVertexCount = i.reservedVertexCount, n.indexStart = i.indexStart, n.indexCount = i.indexCount, n.reservedIndexCount = i.reservedIndexCount, n.start = i.start, n.count = i.count, n;
  }
  /**
   * Resizes the necessary buffers to support the provided number of instances.
   * If the provided arguments shrink the number of instances but there are not enough
   * unused Ids at the end of the list then an error is thrown.
   *
   * @param {number} maxInstanceCount - The max number of individual instances that can be added and rendered by the batch.
  */
  setInstanceCount(e) {
    const n = this._availableInstanceIds, i = this._instanceInfo;
    for (n.sort(U_); n[n.length - 1] === i.length - 1; )
      i.pop(), n.pop();
    if (e < i.length)
      throw new Error(`BatchedMesh: Instance ids outside the range ${e} are being used. Cannot shrink instance count.`);
    const r = new Int32Array(e), c = new Int32Array(e);
    Uu(this._multiDrawCounts, r), Uu(this._multiDrawStarts, c), this._multiDrawCounts = r, this._multiDrawStarts = c, this._maxInstanceCount = e;
    const h = this._indirectTexture, d = this._matricesTexture, v = this._colorsTexture;
    h.dispose(), this._initIndirectTexture(), Uu(h.image.data, this._indirectTexture.image.data), d.dispose(), this._initMatricesTexture(), Uu(d.image.data, this._matricesTexture.image.data), v && (v.dispose(), this._initColorsTexture(), Uu(v.image.data, this._colorsTexture.image.data));
  }
  /**
   * Resizes the available space in the batch's vertex and index buffer attributes to the provided sizes.
   * If the provided arguments shrink the geometry buffers but there is not enough unused space at the
   * end of the geometry attributes then an error is thrown.
   *
   * @param {number} maxVertexCount - The maximum number of vertices to be used by all unique geometries to resize to.
   * @param {number} maxIndexCount - The maximum number of indices to be used by all unique geometries to resize to.
  */
  setGeometrySize(e, n) {
    const i = [...this._geometryInfo].filter((d) => d.active);
    if (Math.max(...i.map((d) => d.vertexStart + d.reservedVertexCount)) > e)
      throw new Error(`BatchedMesh: Geometry vertex values are being used outside the range ${n}. Cannot shrink further.`);
    if (this.geometry.index && Math.max(...i.map((v) => v.indexStart + v.reservedIndexCount)) > n)
      throw new Error(`BatchedMesh: Geometry index values are being used outside the range ${n}. Cannot shrink further.`);
    const c = this.geometry;
    c.dispose(), this._maxVertexCount = e, this._maxIndexCount = n, this._geometryInitialized && (this._geometryInitialized = !1, this.geometry = new Kt(), this._initializeGeometry(c));
    const h = this.geometry;
    c.index && Uu(c.index.array, h.index.array);
    for (const d in c.attributes)
      Uu(c.attributes[d].array, h.attributes[d].array);
  }
  raycast(e, n) {
    const i = this._instanceInfo, r = this._geometryInfo, c = this.matrixWorld, h = this.geometry;
    Ra.material = this.material, Ra.geometry.index = h.index, Ra.geometry.attributes = h.attributes, Ra.geometry.boundingBox === null && (Ra.geometry.boundingBox = new wa()), Ra.geometry.boundingSphere === null && (Ra.geometry.boundingSphere = new ma());
    for (let d = 0, v = i.length; d < v; d++) {
      if (!i[d].visible || !i[d].active)
        continue;
      const g = i[d].geometryIndex, S = r[g];
      Ra.geometry.setDrawRange(S.start, S.count), this.getMatrixAt(d, Ra.matrixWorld).premultiply(c), this.getBoundingBoxAt(g, Ra.geometry.boundingBox), this.getBoundingSphereAt(g, Ra.geometry.boundingSphere), Ra.raycast(e, Sg);
      for (let x = 0, M = Sg.length; x < M; x++) {
        const b = Sg[x];
        b.object = this, b.batchId = d, n.push(b);
      }
      Sg.length = 0;
    }
    Ra.material = null, Ra.geometry.index = null, Ra.geometry.attributes = {}, Ra.geometry.setDrawRange(0, 1 / 0);
  }
  copy(e) {
    return super.copy(e), this.geometry = e.geometry.clone(), this.perObjectFrustumCulled = e.perObjectFrustumCulled, this.sortObjects = e.sortObjects, this.boundingBox = e.boundingBox !== null ? e.boundingBox.clone() : null, this.boundingSphere = e.boundingSphere !== null ? e.boundingSphere.clone() : null, this._geometryInfo = e._geometryInfo.map((n) => ({
      ...n,
      boundingBox: n.boundingBox !== null ? n.boundingBox.clone() : null,
      boundingSphere: n.boundingSphere !== null ? n.boundingSphere.clone() : null
    })), this._instanceInfo = e._instanceInfo.map((n) => ({ ...n })), this._availableInstanceIds = e._availableInstanceIds.slice(), this._availableGeometryIds = e._availableGeometryIds.slice(), this._nextIndexStart = e._nextIndexStart, this._nextVertexStart = e._nextVertexStart, this._geometryCount = e._geometryCount, this._maxInstanceCount = e._maxInstanceCount, this._maxVertexCount = e._maxVertexCount, this._maxIndexCount = e._maxIndexCount, this._geometryInitialized = e._geometryInitialized, this._multiDrawCounts = e._multiDrawCounts.slice(), this._multiDrawStarts = e._multiDrawStarts.slice(), this._indirectTexture = e._indirectTexture.clone(), this._indirectTexture.image.data = this._indirectTexture.image.data.slice(), this._matricesTexture = e._matricesTexture.clone(), this._matricesTexture.image.data = this._matricesTexture.image.data.slice(), this._colorsTexture !== null && (this._colorsTexture = e._colorsTexture.clone(), this._colorsTexture.image.data = this._colorsTexture.image.data.slice()), this;
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
    this.geometry.dispose(), this._matricesTexture.dispose(), this._matricesTexture = null, this._indirectTexture.dispose(), this._indirectTexture = null, this._colorsTexture !== null && (this._colorsTexture.dispose(), this._colorsTexture = null);
  }
  onBeforeRender(e, n, i, r, c) {
    if (!this._visibilityChanged && !this.perObjectFrustumCulled && !this.sortObjects)
      return;
    const h = r.getIndex(), d = h === null ? 1 : h.array.BYTES_PER_ELEMENT, v = this._instanceInfo, g = this._multiDrawStarts, S = this._multiDrawCounts, x = this._geometryInfo, M = this.perObjectFrustumCulled, b = this._indirectTexture, R = b.image.data, w = i.isArrayCamera ? QC : eM;
    M && !i.isArrayCamera && (_s.multiplyMatrices(i.projectionMatrix, i.matrixWorldInverse).multiply(this.matrixWorld), eM.setFromProjectionMatrix(
      _s,
      i.coordinateSystem,
      i.reversedDepth
    ));
    let C = 0;
    if (this.sortObjects) {
      _s.copy(this.matrixWorld).invert(), Ap.setFromMatrixPosition(i.matrixWorld).applyMatrix4(_s), tM.set(0, 0, -1).transformDirection(i.matrixWorld).transformDirection(_s);
      for (let N = 0, O = v.length; N < O; N++)
        if (v[N].visible && v[N].active) {
          const I = v[N].geometryIndex;
          this.getMatrixAt(N, _s), this.getBoundingSphereAt(I, Du).applyMatrix4(_s);
          let V = !1;
          if (M && (V = !w.intersectsSphere(Du, i)), !V) {
            const Y = x[I], k = KC.subVectors(Du.center, Ap).dot(tM);
            N_.push(Y.start, Y.count, k, N);
          }
        }
      const E = N_.list, U = this.customSort;
      U === null ? E.sort(c.transparent ? WC : kC) : U.call(this, E, i);
      for (let N = 0, O = E.length; N < O; N++) {
        const I = E[N];
        g[C] = I.start * d, S[C] = I.count, R[C] = I.index, C++;
      }
      N_.reset();
    } else
      for (let E = 0, U = v.length; E < U; E++)
        if (v[E].visible && v[E].active) {
          const N = v[E].geometryIndex;
          let O = !1;
          if (M && (this.getMatrixAt(E, _s), this.getBoundingSphereAt(N, Du).applyMatrix4(_s), O = !w.intersectsSphere(Du, i)), !O) {
            const I = x[N];
            g[C] = I.start * d, S[C] = I.count, R[C] = E, C++;
          }
        }
    b.needsUpdate = !0, this._multiDrawCount = C, this._visibilityChanged = !1;
  }
  onBeforeShadow(e, n, i, r, c, h) {
    this.onBeforeRender(e, null, r, c, h);
  }
}
class ns extends sa {
  /**
   * Constructs a new line basic material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(e) {
    super(), this.isLineBasicMaterial = !0, this.type = "LineBasicMaterial", this.color = new lt(16777215), this.map = null, this.linewidth = 1, this.linecap = "round", this.linejoin = "round", this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.linewidth = e.linewidth, this.linecap = e.linecap, this.linejoin = e.linejoin, this.fog = e.fog, this;
  }
}
const D0 = /* @__PURE__ */ new j(), U0 = /* @__PURE__ */ new j(), nM = /* @__PURE__ */ new Ft(), Rp = /* @__PURE__ */ new Kh(), xg = /* @__PURE__ */ new ma(), O_ = /* @__PURE__ */ new j(), iM = /* @__PURE__ */ new j();
class Cc extends Mn {
  /**
   * Constructs a new line.
   *
   * @param {BufferGeometry} [geometry] - The line geometry.
   * @param {Material|Array<Material>} [material] - The line material.
   */
  constructor(e = new Kt(), n = new ns()) {
    super(), this.isLine = !0, this.type = "Line", this.geometry = e, this.material = n, this.morphTargetDictionary = void 0, this.morphTargetInfluences = void 0, this.updateMorphTargets();
  }
  copy(e, n) {
    return super.copy(e, n), this.material = Array.isArray(e.material) ? e.material.slice() : e.material, this.geometry = e.geometry, this;
  }
  /**
   * Computes an array of distance values which are necessary for rendering dashed lines.
   * For each vertex in the geometry, the method calculates the cumulative length from the
   * current point to the very beginning of the line.
   *
   * @return {Line} A reference to this line.
   */
  computeLineDistances() {
    const e = this.geometry;
    if (e.index === null) {
      const n = e.attributes.position, i = [0];
      for (let r = 1, c = n.count; r < c; r++)
        D0.fromBufferAttribute(n, r - 1), U0.fromBufferAttribute(n, r), i[r] = i[r - 1], i[r] += D0.distanceTo(U0);
      e.setAttribute("lineDistance", new yt(i, 1));
    } else
      console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
    return this;
  }
  /**
   * Computes intersection points between a casted ray and this line.
   *
   * @param {Raycaster} raycaster - The raycaster.
   * @param {Array<Object>} intersects - The target array that holds the intersection points.
   */
  raycast(e, n) {
    const i = this.geometry, r = this.matrixWorld, c = e.params.Line.threshold, h = i.drawRange;
    if (i.boundingSphere === null && i.computeBoundingSphere(), xg.copy(i.boundingSphere), xg.applyMatrix4(r), xg.radius += c, e.ray.intersectsSphere(xg) === !1) return;
    nM.copy(r).invert(), Rp.copy(e.ray).applyMatrix4(nM);
    const d = c / ((this.scale.x + this.scale.y + this.scale.z) / 3), v = d * d, g = this.isLineSegments ? 2 : 1, S = i.index, M = i.attributes.position;
    if (S !== null) {
      const b = Math.max(0, h.start), R = Math.min(S.count, h.start + h.count);
      for (let w = b, C = R - 1; w < C; w += g) {
        const E = S.getX(w), U = S.getX(w + 1), N = Mg(this, e, Rp, v, E, U, w);
        N && n.push(N);
      }
      if (this.isLineLoop) {
        const w = S.getX(R - 1), C = S.getX(b), E = Mg(this, e, Rp, v, w, C, R - 1);
        E && n.push(E);
      }
    } else {
      const b = Math.max(0, h.start), R = Math.min(M.count, h.start + h.count);
      for (let w = b, C = R - 1; w < C; w += g) {
        const E = Mg(this, e, Rp, v, w, w + 1, w);
        E && n.push(E);
      }
      if (this.isLineLoop) {
        const w = Mg(this, e, Rp, v, R - 1, b, R - 1);
        w && n.push(w);
      }
    }
  }
  /**
   * Sets the values of {@link Line#morphTargetDictionary} and {@link Line#morphTargetInfluences}
   * to make sure existing morph targets can influence this 3D object.
   */
  updateMorphTargets() {
    const n = this.geometry.morphAttributes, i = Object.keys(n);
    if (i.length > 0) {
      const r = n[i[0]];
      if (r !== void 0) {
        this.morphTargetInfluences = [], this.morphTargetDictionary = {};
        for (let c = 0, h = r.length; c < h; c++) {
          const d = r[c].name || String(c);
          this.morphTargetInfluences.push(0), this.morphTargetDictionary[d] = c;
        }
      }
    }
  }
}
function Mg(s, e, n, i, r, c, h) {
  const d = s.geometry.attributes.position;
  if (D0.fromBufferAttribute(d, r), U0.fromBufferAttribute(d, c), n.distanceSqToSegment(D0, U0, O_, iM) > i) return;
  O_.applyMatrix4(s.matrixWorld);
  const g = e.ray.origin.distanceTo(O_);
  if (!(g < e.near || g > e.far))
    return {
      distance: g,
      // What do we want? intersection point on the ray or on the segment??
      // point: raycaster.ray.at( distance ),
      point: iM.clone().applyMatrix4(s.matrixWorld),
      index: h,
      face: null,
      faceIndex: null,
      barycoord: null,
      object: s
    };
}
const aM = /* @__PURE__ */ new j(), sM = /* @__PURE__ */ new j();
class Vo extends Cc {
  /**
   * Constructs a new line segments.
   *
   * @param {BufferGeometry} [geometry] - The line geometry.
   * @param {Material|Array<Material>} [material] - The line material.
   */
  constructor(e, n) {
    super(e, n), this.isLineSegments = !0, this.type = "LineSegments";
  }
  computeLineDistances() {
    const e = this.geometry;
    if (e.index === null) {
      const n = e.attributes.position, i = [];
      for (let r = 0, c = n.count; r < c; r += 2)
        aM.fromBufferAttribute(n, r), sM.fromBufferAttribute(n, r + 1), i[r] = r === 0 ? 0 : i[r - 1], i[r + 1] = i[r] + aM.distanceTo(sM);
      e.setAttribute("lineDistance", new yt(i, 1));
    } else
      console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
    return this;
  }
}
class zE extends Cc {
  /**
   * Constructs a new line loop.
   *
   * @param {BufferGeometry} [geometry] - The line geometry.
   * @param {Material|Array<Material>} [material] - The line material.
   */
  constructor(e, n) {
    super(e, n), this.isLineLoop = !0, this.type = "LineLoop";
  }
}
class ax extends sa {
  /**
   * Constructs a new points material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(e) {
    super(), this.isPointsMaterial = !0, this.type = "PointsMaterial", this.color = new lt(16777215), this.map = null, this.alphaMap = null, this.size = 1, this.sizeAttenuation = !0, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.alphaMap = e.alphaMap, this.size = e.size, this.sizeAttenuation = e.sizeAttenuation, this.fog = e.fog, this;
  }
}
const rM = /* @__PURE__ */ new Ft(), bS = /* @__PURE__ */ new Kh(), bg = /* @__PURE__ */ new ma(), Eg = /* @__PURE__ */ new j();
class BE extends Mn {
  /**
   * Constructs a new point cloud.
   *
   * @param {BufferGeometry} [geometry] - The points geometry.
   * @param {Material|Array<Material>} [material] - The points material.
   */
  constructor(e = new Kt(), n = new ax()) {
    super(), this.isPoints = !0, this.type = "Points", this.geometry = e, this.material = n, this.morphTargetDictionary = void 0, this.morphTargetInfluences = void 0, this.updateMorphTargets();
  }
  copy(e, n) {
    return super.copy(e, n), this.material = Array.isArray(e.material) ? e.material.slice() : e.material, this.geometry = e.geometry, this;
  }
  /**
   * Computes intersection points between a casted ray and this point cloud.
   *
   * @param {Raycaster} raycaster - The raycaster.
   * @param {Array<Object>} intersects - The target array that holds the intersection points.
   */
  raycast(e, n) {
    const i = this.geometry, r = this.matrixWorld, c = e.params.Points.threshold, h = i.drawRange;
    if (i.boundingSphere === null && i.computeBoundingSphere(), bg.copy(i.boundingSphere), bg.applyMatrix4(r), bg.radius += c, e.ray.intersectsSphere(bg) === !1) return;
    rM.copy(r).invert(), bS.copy(e.ray).applyMatrix4(rM);
    const d = c / ((this.scale.x + this.scale.y + this.scale.z) / 3), v = d * d, g = i.index, x = i.attributes.position;
    if (g !== null) {
      const M = Math.max(0, h.start), b = Math.min(g.count, h.start + h.count);
      for (let R = M, w = b; R < w; R++) {
        const C = g.getX(R);
        Eg.fromBufferAttribute(x, C), oM(Eg, C, v, r, e, n, this);
      }
    } else {
      const M = Math.max(0, h.start), b = Math.min(x.count, h.start + h.count);
      for (let R = M, w = b; R < w; R++)
        Eg.fromBufferAttribute(x, R), oM(Eg, R, v, r, e, n, this);
    }
  }
  /**
   * Sets the values of {@link Points#morphTargetDictionary} and {@link Points#morphTargetInfluences}
   * to make sure existing morph targets can influence this 3D object.
   */
  updateMorphTargets() {
    const n = this.geometry.morphAttributes, i = Object.keys(n);
    if (i.length > 0) {
      const r = n[i[0]];
      if (r !== void 0) {
        this.morphTargetInfluences = [], this.morphTargetDictionary = {};
        for (let c = 0, h = r.length; c < h; c++) {
          const d = r[c].name || String(c);
          this.morphTargetInfluences.push(0), this.morphTargetDictionary[d] = c;
        }
      }
    }
  }
}
function oM(s, e, n, i, r, c, h) {
  const d = bS.distanceSqToPoint(s);
  if (d < n) {
    const v = new j();
    bS.closestPointToPoint(s, v), v.applyMatrix4(i);
    const g = r.ray.origin.distanceTo(v);
    if (g < r.near || g > r.far) return;
    c.push({
      distance: g,
      distanceToRay: Math.sqrt(d),
      point: v,
      index: e,
      face: null,
      faceIndex: null,
      barycoord: null,
      object: h
    });
  }
}
class PE extends si {
  /**
   * Constructs a new video texture.
   *
   * @param {HTMLVideoElement} video - The video element to use as a data source for the texture.
   * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.
   * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.
   * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.
   * @param {number} [magFilter=LinearFilter] - The mag filter value.
   * @param {number} [minFilter=LinearFilter] - The min filter value.
   * @param {number} [format=RGBAFormat] - The texture format.
   * @param {number} [type=UnsignedByteType] - The texture type.
   * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.
   */
  constructor(e, n, i, r, c = di, h = di, d, v, g) {
    super(e, n, i, r, c, h, d, v, g), this.isVideoTexture = !0, this.generateMipmaps = !1, this._requestVideoFrameCallbackId = 0;
    const S = this;
    function x() {
      S.needsUpdate = !0, S._requestVideoFrameCallbackId = e.requestVideoFrameCallback(x);
    }
    "requestVideoFrameCallback" in e && (this._requestVideoFrameCallbackId = e.requestVideoFrameCallback(x));
  }
  clone() {
    return new this.constructor(this.image).copy(this);
  }
  /**
   * This method is called automatically by the renderer and sets {@link Texture#needsUpdate}
   * to `true` every time a new frame is available.
   *
   * Only relevant if `requestVideoFrameCallback` is not supported in the browser.
   */
  update() {
    const e = this.image;
    "requestVideoFrameCallback" in e === !1 && e.readyState >= e.HAVE_CURRENT_DATA && (this.needsUpdate = !0);
  }
  /**
   * @override
   */
  dispose() {
    this._requestVideoFrameCallbackId !== 0 && this.source.data.cancelVideoFrameCallback(this._requestVideoFrameCallbackId), super.dispose();
  }
}
class $C extends PE {
  /**
   * Constructs a new video frame texture.
   *
   * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.
   * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.
   * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.
   * @param {number} [magFilter=LinearFilter] - The mag filter value.
   * @param {number} [minFilter=LinearFilter] - The min filter value.
   * @param {number} [format=RGBAFormat] - The texture format.
   * @param {number} [type=UnsignedByteType] - The texture type.
   * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.
   */
  constructor(e, n, i, r, c, h, d, v) {
    super({}, e, n, i, r, c, h, d, v), this.isVideoFrameTexture = !0;
  }
  /**
   * This method overwritten with an empty implementation since
   * this type of texture is updated via `setFrame()`.
   */
  update() {
  }
  clone() {
    return new this.constructor().copy(this);
  }
  /**
   * Sets the current frame of the video. This will automatically update the texture
   * so the data can be used for rendering.
   *
   * @param {VideoFrame} frame - The video frame.
   */
  setFrame(e) {
    this.image = e, this.needsUpdate = !0;
  }
}
class e3 extends si {
  /**
   * Constructs a new framebuffer texture.
   *
   * @param {number} [width] - The width of the texture.
   * @param {number} [height] - The height of the texture.
   */
  constructor(e, n) {
    super({ width: e, height: n }), this.isFramebufferTexture = !0, this.magFilter = wi, this.minFilter = wi, this.generateMipmaps = !1, this.needsUpdate = !0;
  }
}
class ey extends si {
  /**
   * Constructs a new compressed texture.
   *
   * @param {Array<Object>} mipmaps - This array holds for all mipmaps (including the bases mip)
   * the data and dimensions.
   * @param {number} width - The width of the texture.
   * @param {number} height - The height of the texture.
   * @param {number} [format=RGBAFormat] - The texture format.
   * @param {number} [type=UnsignedByteType] - The texture type.
   * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.
   * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.
   * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.
   * @param {number} [magFilter=LinearFilter] - The mag filter value.
   * @param {number} [minFilter=LinearMipmapLinearFilter] - The min filter value.
   * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.
   * @param {string} [colorSpace=NoColorSpace] - The color space.
   */
  constructor(e, n, i, r, c, h, d, v, g, S, x, M) {
    super(null, h, d, v, g, S, r, c, x, M), this.isCompressedTexture = !0, this.image = { width: n, height: i }, this.mipmaps = e, this.flipY = !1, this.generateMipmaps = !1;
  }
}
class t3 extends ey {
  /**
   * Constructs a new compressed array texture.
   *
   * @param {Array<Object>} mipmaps - This array holds for all mipmaps (including the bases mip)
   * the data and dimensions.
   * @param {number} width - The width of the texture.
   * @param {number} height - The height of the texture.
   * @param {number} depth - The depth of the texture.
   * @param {number} [format=RGBAFormat] - The min filter value.
   * @param {number} [type=UnsignedByteType] - The min filter value.
   */
  constructor(e, n, i, r, c, h) {
    super(e, n, i, c, h), this.isCompressedArrayTexture = !0, this.image.depth = r, this.wrapR = hr, this.layerUpdates = /* @__PURE__ */ new Set();
  }
  /**
   * Describes that a specific layer of the texture needs to be updated.
   * Normally when {@link Texture#needsUpdate} is set to `true`, the
   * entire compressed texture array is sent to the GPU. Marking specific
   * layers will only transmit subsets of all mipmaps associated with a
   * specific depth in the array which is often much more performant.
   *
   * @param {number} layerIndex - The layer index that should be updated.
   */
  addLayerUpdate(e) {
    this.layerUpdates.add(e);
  }
  /**
   * Resets the layer updates registry.
   */
  clearLayerUpdates() {
    this.layerUpdates.clear();
  }
}
class n3 extends ey {
  /**
   * Constructs a new compressed texture.
   *
   * @param {Array<CompressedTexture>} images - An array of compressed textures.
   * @param {number} [format=RGBAFormat] - The texture format.
   * @param {number} [type=UnsignedByteType] - The texture type.
   */
  constructor(e, n, i) {
    super(void 0, e[0].width, e[0].height, n, i, Sl), this.isCompressedCubeTexture = !0, this.isCubeTexture = !0, this.image = e;
  }
}
class i3 extends si {
  /**
   * Constructs a new texture.
   *
   * @param {HTMLCanvasElement} [canvas] - The HTML canvas element.
   * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.
   * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.
   * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.
   * @param {number} [magFilter=LinearFilter] - The mag filter value.
   * @param {number} [minFilter=LinearMipmapLinearFilter] - The min filter value.
   * @param {number} [format=RGBAFormat] - The texture format.
   * @param {number} [type=UnsignedByteType] - The texture type.
   * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.
   */
  constructor(e, n, i, r, c, h, d, v, g) {
    super(e, n, i, r, c, h, d, v, g), this.isCanvasTexture = !0, this.needsUpdate = !0;
  }
}
class ty extends si {
  /**
   * Constructs a new depth texture.
   *
   * @param {number} width - The width of the texture.
   * @param {number} height - The height of the texture.
   * @param {number} [type=UnsignedIntType] - The texture type.
   * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.
   * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.
   * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.
   * @param {number} [magFilter=LinearFilter] - The mag filter value.
   * @param {number} [minFilter=LinearFilter] - The min filter value.
   * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.
   * @param {number} [format=DepthFormat] - The texture format.
   * @param {number} [depth=1] - The depth of the texture.
   */
  constructor(e, n, i = Io, r, c, h, d = wi, v = wi, g, S = Gh, x = 1) {
    if (S !== Gh && S !== Ju)
      throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
    const M = { width: e, height: n, depth: x };
    super(M, r, c, h, d, v, S, i, g), this.isDepthTexture = !0, this.flipY = !1, this.generateMipmaps = !1, this.compareFunction = null;
  }
  copy(e) {
    return super.copy(e), this.source = new Ac(Object.assign({}, e.image)), this.compareFunction = e.compareFunction, this;
  }
  toJSON(e) {
    const n = super.toJSON(e);
    return this.compareFunction !== null && (n.compareFunction = this.compareFunction), n;
  }
}
class ny extends Kt {
  /**
   * Constructs a new capsule geometry.
   *
   * @param {number} [radius=1] - Radius of the capsule.
   * @param {number} [height=1] - Height of the middle section.
   * @param {number} [capSegments=4] - Number of curve segments used to build each cap.
   * @param {number} [radialSegments=8] - Number of segmented faces around the circumference of the capsule. Must be an integer >= 3.
   * @param {number} [heightSegments=1] - Number of rows of faces along the height of the middle section. Must be an integer >= 1.
   */
  constructor(e = 1, n = 1, i = 4, r = 8, c = 1) {
    super(), this.type = "CapsuleGeometry", this.parameters = {
      radius: e,
      height: n,
      capSegments: i,
      radialSegments: r,
      heightSegments: c
    }, n = Math.max(0, n), i = Math.max(1, Math.floor(i)), r = Math.max(3, Math.floor(r)), c = Math.max(1, Math.floor(c));
    const h = [], d = [], v = [], g = [], S = n / 2, x = Math.PI / 2 * e, M = n, b = 2 * x + M, R = i * 2 + c, w = r + 1, C = new j(), E = new j();
    for (let U = 0; U <= R; U++) {
      let N = 0, O = 0, I = 0, V = 0;
      if (U <= i) {
        const B = U / i, z = B * Math.PI / 2;
        O = -S - e * Math.cos(z), I = e * Math.sin(z), V = -e * Math.cos(z), N = B * x;
      } else if (U <= i + c) {
        const B = (U - i) / c;
        O = -S + B * n, I = e, V = 0, N = x + B * M;
      } else {
        const B = (U - i - c) / i, z = B * Math.PI / 2;
        O = S + e * Math.sin(z), I = e * Math.cos(z), V = e * Math.sin(z), N = x + M + B * x;
      }
      const Y = Math.max(0, Math.min(1, N / b));
      let k = 0;
      U === 0 ? k = 0.5 / r : U === R && (k = -0.5 / r);
      for (let B = 0; B <= r; B++) {
        const z = B / r, W = z * Math.PI * 2, le = Math.sin(W), ae = Math.cos(W);
        E.x = -I * ae, E.y = O, E.z = I * le, d.push(E.x, E.y, E.z), C.set(
          -I * ae,
          V,
          I * le
        ), C.normalize(), v.push(C.x, C.y, C.z), g.push(z + k, Y);
      }
      if (U > 0) {
        const B = (U - 1) * w;
        for (let z = 0; z < r; z++) {
          const W = B + z, le = B + z + 1, ae = U * w + z, oe = U * w + z + 1;
          h.push(W, le, ae), h.push(le, oe, ae);
        }
      }
    }
    this.setIndex(h), this.setAttribute("position", new yt(d, 3)), this.setAttribute("normal", new yt(v, 3)), this.setAttribute("uv", new yt(g, 2));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {CapsuleGeometry} A new instance.
   */
  static fromJSON(e) {
    return new ny(e.radius, e.height, e.capSegments, e.radialSegments, e.heightSegments);
  }
}
class iy extends Kt {
  /**
   * Constructs a new circle geometry.
   *
   * @param {number} [radius=1] - Radius of the circle.
   * @param {number} [segments=32] - Number of segments (triangles), minimum = `3`.
   * @param {number} [thetaStart=0] - Start angle for first segment in radians.
   * @param {number} [thetaLength=Math.PI*2] - The central angle, often called theta,
   * of the circular sector in radians. The default value results in a complete circle.
   */
  constructor(e = 1, n = 32, i = 0, r = Math.PI * 2) {
    super(), this.type = "CircleGeometry", this.parameters = {
      radius: e,
      segments: n,
      thetaStart: i,
      thetaLength: r
    }, n = Math.max(3, n);
    const c = [], h = [], d = [], v = [], g = new j(), S = new De();
    h.push(0, 0, 0), d.push(0, 0, 1), v.push(0.5, 0.5);
    for (let x = 0, M = 3; x <= n; x++, M += 3) {
      const b = i + x / n * r;
      g.x = e * Math.cos(b), g.y = e * Math.sin(b), h.push(g.x, g.y, g.z), d.push(0, 0, 1), S.x = (h[M] / e + 1) / 2, S.y = (h[M + 1] / e + 1) / 2, v.push(S.x, S.y);
    }
    for (let x = 1; x <= n; x++)
      c.push(x, x + 1, 0);
    this.setIndex(c), this.setAttribute("position", new yt(h, 3)), this.setAttribute("normal", new yt(d, 3)), this.setAttribute("uv", new yt(v, 2));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {CircleGeometry} A new instance.
   */
  static fromJSON(e) {
    return new iy(e.radius, e.segments, e.thetaStart, e.thetaLength);
  }
}
class dm extends Kt {
  /**
   * Constructs a new cylinder geometry.
   *
   * @param {number} [radiusTop=1] - Radius of the cylinder at the top.
   * @param {number} [radiusBottom=1] - Radius of the cylinder at the bottom.
   * @param {number} [height=1] - Height of the cylinder.
   * @param {number} [radialSegments=32] - Number of segmented faces around the circumference of the cylinder.
   * @param {number} [heightSegments=1] - Number of rows of faces along the height of the cylinder.
   * @param {boolean} [openEnded=false] - Whether the base of the cylinder is open or capped.
   * @param {number} [thetaStart=0] - Start angle for first segment, in radians.
   * @param {number} [thetaLength=Math.PI*2] - The central angle, often called theta, of the circular sector, in radians.
   * The default value results in a complete cylinder.
   */
  constructor(e = 1, n = 1, i = 1, r = 32, c = 1, h = !1, d = 0, v = Math.PI * 2) {
    super(), this.type = "CylinderGeometry", this.parameters = {
      radiusTop: e,
      radiusBottom: n,
      height: i,
      radialSegments: r,
      heightSegments: c,
      openEnded: h,
      thetaStart: d,
      thetaLength: v
    };
    const g = this;
    r = Math.floor(r), c = Math.floor(c);
    const S = [], x = [], M = [], b = [];
    let R = 0;
    const w = [], C = i / 2;
    let E = 0;
    U(), h === !1 && (e > 0 && N(!0), n > 0 && N(!1)), this.setIndex(S), this.setAttribute("position", new yt(x, 3)), this.setAttribute("normal", new yt(M, 3)), this.setAttribute("uv", new yt(b, 2));
    function U() {
      const O = new j(), I = new j();
      let V = 0;
      const Y = (n - e) / i;
      for (let k = 0; k <= c; k++) {
        const B = [], z = k / c, W = z * (n - e) + e;
        for (let le = 0; le <= r; le++) {
          const ae = le / r, oe = ae * v + d, pe = Math.sin(oe), P = Math.cos(oe);
          I.x = W * pe, I.y = -z * i + C, I.z = W * P, x.push(I.x, I.y, I.z), O.set(pe, Y, P).normalize(), M.push(O.x, O.y, O.z), b.push(ae, 1 - z), B.push(R++);
        }
        w.push(B);
      }
      for (let k = 0; k < r; k++)
        for (let B = 0; B < c; B++) {
          const z = w[B][k], W = w[B + 1][k], le = w[B + 1][k + 1], ae = w[B][k + 1];
          (e > 0 || B !== 0) && (S.push(z, W, ae), V += 3), (n > 0 || B !== c - 1) && (S.push(W, le, ae), V += 3);
        }
      g.addGroup(E, V, 0), E += V;
    }
    function N(O) {
      const I = R, V = new De(), Y = new j();
      let k = 0;
      const B = O === !0 ? e : n, z = O === !0 ? 1 : -1;
      for (let le = 1; le <= r; le++)
        x.push(0, C * z, 0), M.push(0, z, 0), b.push(0.5, 0.5), R++;
      const W = R;
      for (let le = 0; le <= r; le++) {
        const oe = le / r * v + d, pe = Math.cos(oe), P = Math.sin(oe);
        Y.x = B * P, Y.y = C * z, Y.z = B * pe, x.push(Y.x, Y.y, Y.z), M.push(0, z, 0), V.x = pe * 0.5 + 0.5, V.y = P * 0.5 * z + 0.5, b.push(V.x, V.y), R++;
      }
      for (let le = 0; le < r; le++) {
        const ae = I + le, oe = W + le;
        O === !0 ? S.push(oe, oe + 1, ae) : S.push(oe + 1, oe, ae), k += 3;
      }
      g.addGroup(E, k, O === !0 ? 1 : 2), E += k;
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {CylinderGeometry} A new instance.
   */
  static fromJSON(e) {
    return new dm(e.radiusTop, e.radiusBottom, e.height, e.radialSegments, e.heightSegments, e.openEnded, e.thetaStart, e.thetaLength);
  }
}
class pm extends dm {
  /**
   * Constructs a new cone geometry.
   *
   * @param {number} [radius=1] - Radius of the cone base.
   * @param {number} [height=1] - Height of the cone.
   * @param {number} [radialSegments=32] - Number of segmented faces around the circumference of the cone.
   * @param {number} [heightSegments=1] - Number of rows of faces along the height of the cone.
   * @param {boolean} [openEnded=false] - Whether the base of the cone is open or capped.
   * @param {number} [thetaStart=0] - Start angle for first segment, in radians.
   * @param {number} [thetaLength=Math.PI*2] - The central angle, often called theta, of the circular sector, in radians.
   * The default value results in a complete cone.
   */
  constructor(e = 1, n = 1, i = 32, r = 1, c = !1, h = 0, d = Math.PI * 2) {
    super(0, e, n, i, r, c, h, d), this.type = "ConeGeometry", this.parameters = {
      radius: e,
      height: n,
      radialSegments: i,
      heightSegments: r,
      openEnded: c,
      thetaStart: h,
      thetaLength: d
    };
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {ConeGeometry} A new instance.
   */
  static fromJSON(e) {
    return new pm(e.radius, e.height, e.radialSegments, e.heightSegments, e.openEnded, e.thetaStart, e.thetaLength);
  }
}
class Nc extends Kt {
  /**
   * Constructs a new polyhedron geometry.
   *
   * @param {Array<number>} [vertices] - A flat array of vertices describing the base shape.
   * @param {Array<number>} [indices] - A flat array of indices describing the base shape.
   * @param {number} [radius=1] - The radius of the shape.
   * @param {number} [detail=0] - How many levels to subdivide the geometry. The more detail, the smoother the shape.
   */
  constructor(e = [], n = [], i = 1, r = 0) {
    super(), this.type = "PolyhedronGeometry", this.parameters = {
      vertices: e,
      indices: n,
      radius: i,
      detail: r
    };
    const c = [], h = [];
    d(r), g(i), S(), this.setAttribute("position", new yt(c, 3)), this.setAttribute("normal", new yt(c.slice(), 3)), this.setAttribute("uv", new yt(h, 2)), r === 0 ? this.computeVertexNormals() : this.normalizeNormals();
    function d(U) {
      const N = new j(), O = new j(), I = new j();
      for (let V = 0; V < n.length; V += 3)
        b(n[V + 0], N), b(n[V + 1], O), b(n[V + 2], I), v(N, O, I, U);
    }
    function v(U, N, O, I) {
      const V = I + 1, Y = [];
      for (let k = 0; k <= V; k++) {
        Y[k] = [];
        const B = U.clone().lerp(O, k / V), z = N.clone().lerp(O, k / V), W = V - k;
        for (let le = 0; le <= W; le++)
          le === 0 && k === V ? Y[k][le] = B : Y[k][le] = B.clone().lerp(z, le / W);
      }
      for (let k = 0; k < V; k++)
        for (let B = 0; B < 2 * (V - k) - 1; B++) {
          const z = Math.floor(B / 2);
          B % 2 === 0 ? (M(Y[k][z + 1]), M(Y[k + 1][z]), M(Y[k][z])) : (M(Y[k][z + 1]), M(Y[k + 1][z + 1]), M(Y[k + 1][z]));
        }
    }
    function g(U) {
      const N = new j();
      for (let O = 0; O < c.length; O += 3)
        N.x = c[O + 0], N.y = c[O + 1], N.z = c[O + 2], N.normalize().multiplyScalar(U), c[O + 0] = N.x, c[O + 1] = N.y, c[O + 2] = N.z;
    }
    function S() {
      const U = new j();
      for (let N = 0; N < c.length; N += 3) {
        U.x = c[N + 0], U.y = c[N + 1], U.z = c[N + 2];
        const O = C(U) / 2 / Math.PI + 0.5, I = E(U) / Math.PI + 0.5;
        h.push(O, 1 - I);
      }
      R(), x();
    }
    function x() {
      for (let U = 0; U < h.length; U += 6) {
        const N = h[U + 0], O = h[U + 2], I = h[U + 4], V = Math.max(N, O, I), Y = Math.min(N, O, I);
        V > 0.9 && Y < 0.1 && (N < 0.2 && (h[U + 0] += 1), O < 0.2 && (h[U + 2] += 1), I < 0.2 && (h[U + 4] += 1));
      }
    }
    function M(U) {
      c.push(U.x, U.y, U.z);
    }
    function b(U, N) {
      const O = U * 3;
      N.x = e[O + 0], N.y = e[O + 1], N.z = e[O + 2];
    }
    function R() {
      const U = new j(), N = new j(), O = new j(), I = new j(), V = new De(), Y = new De(), k = new De();
      for (let B = 0, z = 0; B < c.length; B += 9, z += 6) {
        U.set(c[B + 0], c[B + 1], c[B + 2]), N.set(c[B + 3], c[B + 4], c[B + 5]), O.set(c[B + 6], c[B + 7], c[B + 8]), V.set(h[z + 0], h[z + 1]), Y.set(h[z + 2], h[z + 3]), k.set(h[z + 4], h[z + 5]), I.copy(U).add(N).add(O).divideScalar(3);
        const W = C(I);
        w(V, z + 0, U, W), w(Y, z + 2, N, W), w(k, z + 4, O, W);
      }
    }
    function w(U, N, O, I) {
      I < 0 && U.x === 1 && (h[N] = U.x - 1), O.x === 0 && O.z === 0 && (h[N] = I / 2 / Math.PI + 0.5);
    }
    function C(U) {
      return Math.atan2(U.z, -U.x);
    }
    function E(U) {
      return Math.atan2(-U.y, Math.sqrt(U.x * U.x + U.z * U.z));
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {PolyhedronGeometry} A new instance.
   */
  static fromJSON(e) {
    return new Nc(e.vertices, e.indices, e.radius, e.details);
  }
}
class ay extends Nc {
  /**
   * Constructs a new dodecahedron geometry.
   *
   * @param {number} [radius=1] - Radius of the dodecahedron.
   * @param {number} [detail=0] - Setting this to a value greater than `0` adds vertices making it no longer a dodecahedron.
   */
  constructor(e = 1, n = 0) {
    const i = (1 + Math.sqrt(5)) / 2, r = 1 / i, c = [
      // (±1, ±1, ±1)
      -1,
      -1,
      -1,
      -1,
      -1,
      1,
      -1,
      1,
      -1,
      -1,
      1,
      1,
      1,
      -1,
      -1,
      1,
      -1,
      1,
      1,
      1,
      -1,
      1,
      1,
      1,
      // (0, ±1/φ, ±φ)
      0,
      -r,
      -i,
      0,
      -r,
      i,
      0,
      r,
      -i,
      0,
      r,
      i,
      // (±1/φ, ±φ, 0)
      -r,
      -i,
      0,
      -r,
      i,
      0,
      r,
      -i,
      0,
      r,
      i,
      0,
      // (±φ, 0, ±1/φ)
      -i,
      0,
      -r,
      i,
      0,
      -r,
      -i,
      0,
      r,
      i,
      0,
      r
    ], h = [
      3,
      11,
      7,
      3,
      7,
      15,
      3,
      15,
      13,
      7,
      19,
      17,
      7,
      17,
      6,
      7,
      6,
      15,
      17,
      4,
      8,
      17,
      8,
      10,
      17,
      10,
      6,
      8,
      0,
      16,
      8,
      16,
      2,
      8,
      2,
      10,
      0,
      12,
      1,
      0,
      1,
      18,
      0,
      18,
      16,
      6,
      10,
      2,
      6,
      2,
      13,
      6,
      13,
      15,
      2,
      16,
      18,
      2,
      18,
      3,
      2,
      3,
      13,
      18,
      1,
      9,
      18,
      9,
      11,
      18,
      11,
      3,
      4,
      14,
      12,
      4,
      12,
      0,
      4,
      0,
      8,
      11,
      9,
      5,
      11,
      5,
      19,
      11,
      19,
      7,
      19,
      5,
      14,
      19,
      14,
      4,
      19,
      4,
      17,
      1,
      12,
      14,
      1,
      14,
      5,
      1,
      5,
      9
    ];
    super(c, h, e, n), this.type = "DodecahedronGeometry", this.parameters = {
      radius: e,
      detail: n
    };
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {DodecahedronGeometry} A new instance.
   */
  static fromJSON(e) {
    return new ay(e.radius, e.detail);
  }
}
const Tg = /* @__PURE__ */ new j(), Ag = /* @__PURE__ */ new j(), L_ = /* @__PURE__ */ new j(), Rg = /* @__PURE__ */ new bs();
class IE extends Kt {
  /**
   * Constructs a new edges geometry.
   *
   * @param {?BufferGeometry} [geometry=null] - The geometry.
   * @param {number} [thresholdAngle=1] - An edge is only rendered if the angle (in degrees)
   * between the face normals of the adjoining faces exceeds this value.
   */
  constructor(e = null, n = 1) {
    if (super(), this.type = "EdgesGeometry", this.parameters = {
      geometry: e,
      thresholdAngle: n
    }, e !== null) {
      const r = Math.pow(10, 4), c = Math.cos(Wu * n), h = e.getIndex(), d = e.getAttribute("position"), v = h ? h.count : d.count, g = [0, 0, 0], S = ["a", "b", "c"], x = new Array(3), M = {}, b = [];
      for (let R = 0; R < v; R += 3) {
        h ? (g[0] = h.getX(R), g[1] = h.getX(R + 1), g[2] = h.getX(R + 2)) : (g[0] = R, g[1] = R + 1, g[2] = R + 2);
        const { a: w, b: C, c: E } = Rg;
        if (w.fromBufferAttribute(d, g[0]), C.fromBufferAttribute(d, g[1]), E.fromBufferAttribute(d, g[2]), Rg.getNormal(L_), x[0] = `${Math.round(w.x * r)},${Math.round(w.y * r)},${Math.round(w.z * r)}`, x[1] = `${Math.round(C.x * r)},${Math.round(C.y * r)},${Math.round(C.z * r)}`, x[2] = `${Math.round(E.x * r)},${Math.round(E.y * r)},${Math.round(E.z * r)}`, !(x[0] === x[1] || x[1] === x[2] || x[2] === x[0]))
          for (let U = 0; U < 3; U++) {
            const N = (U + 1) % 3, O = x[U], I = x[N], V = Rg[S[U]], Y = Rg[S[N]], k = `${O}_${I}`, B = `${I}_${O}`;
            B in M && M[B] ? (L_.dot(M[B].normal) <= c && (b.push(V.x, V.y, V.z), b.push(Y.x, Y.y, Y.z)), M[B] = null) : k in M || (M[k] = {
              index0: g[U],
              index1: g[N],
              normal: L_.clone()
            });
          }
      }
      for (const R in M)
        if (M[R]) {
          const { index0: w, index1: C } = M[R];
          Tg.fromBufferAttribute(d, w), Ag.fromBufferAttribute(d, C), b.push(Tg.x, Tg.y, Tg.z), b.push(Ag.x, Ag.y, Ag.z);
        }
      this.setAttribute("position", new yt(b, 3));
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
}
class Zr {
  /**
   * Constructs a new curve.
   */
  constructor() {
    this.type = "Curve", this.arcLengthDivisions = 200, this.needsUpdate = !1, this.cacheArcLengths = null;
  }
  /**
   * This method returns a vector in 2D or 3D space (depending on the curve definition)
   * for the given interpolation factor.
   *
   * @abstract
   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.
   * @param {(Vector2|Vector3)} [optionalTarget] - The optional target vector the result is written to.
   * @return {(Vector2|Vector3)} The position on the curve. It can be a 2D or 3D vector depending on the curve definition.
   */
  getPoint() {
    console.warn("THREE.Curve: .getPoint() not implemented.");
  }
  /**
   * This method returns a vector in 2D or 3D space (depending on the curve definition)
   * for the given interpolation factor. Unlike {@link Curve#getPoint}, this method honors the length
   * of the curve which equidistant samples.
   *
   * @param {number} u - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.
   * @param {(Vector2|Vector3)} [optionalTarget] - The optional target vector the result is written to.
   * @return {(Vector2|Vector3)} The position on the curve. It can be a 2D or 3D vector depending on the curve definition.
   */
  getPointAt(e, n) {
    const i = this.getUtoTmapping(e);
    return this.getPoint(i, n);
  }
  /**
   * This method samples the curve via {@link Curve#getPoint} and returns an array of points representing
   * the curve shape.
   *
   * @param {number} [divisions=5] - The number of divisions.
   * @return {Array<(Vector2|Vector3)>} An array holding the sampled curve values. The number of points is `divisions + 1`.
   */
  getPoints(e = 5) {
    const n = [];
    for (let i = 0; i <= e; i++)
      n.push(this.getPoint(i / e));
    return n;
  }
  // Get sequence of points using getPointAt( u )
  /**
   * This method samples the curve via {@link Curve#getPointAt} and returns an array of points representing
   * the curve shape. Unlike {@link Curve#getPoints}, this method returns equi-spaced points across the entire
   * curve.
   *
   * @param {number} [divisions=5] - The number of divisions.
   * @return {Array<(Vector2|Vector3)>} An array holding the sampled curve values. The number of points is `divisions + 1`.
   */
  getSpacedPoints(e = 5) {
    const n = [];
    for (let i = 0; i <= e; i++)
      n.push(this.getPointAt(i / e));
    return n;
  }
  /**
   * Returns the total arc length of the curve.
   *
   * @return {number} The length of the curve.
   */
  getLength() {
    const e = this.getLengths();
    return e[e.length - 1];
  }
  /**
   * Returns an array of cumulative segment lengths of the curve.
   *
   * @param {number} [divisions=this.arcLengthDivisions] - The number of divisions.
   * @return {Array<number>} An array holding the cumulative segment lengths.
   */
  getLengths(e = this.arcLengthDivisions) {
    if (this.cacheArcLengths && this.cacheArcLengths.length === e + 1 && !this.needsUpdate)
      return this.cacheArcLengths;
    this.needsUpdate = !1;
    const n = [];
    let i, r = this.getPoint(0), c = 0;
    n.push(0);
    for (let h = 1; h <= e; h++)
      i = this.getPoint(h / e), c += i.distanceTo(r), n.push(c), r = i;
    return this.cacheArcLengths = n, n;
  }
  /**
   * Update the cumulative segment distance cache. The method must be called
   * every time curve parameters are changed. If an updated curve is part of a
   * composed curve like {@link CurvePath}, this method must be called on the
   * composed curve, too.
   */
  updateArcLengths() {
    this.needsUpdate = !0, this.getLengths();
  }
  /**
   * Given an interpolation factor in the range `[0,1]`, this method returns an updated
   * interpolation factor in the same range that can be ued to sample equidistant points
   * from a curve.
   *
   * @param {number} u - The interpolation factor.
   * @param {?number} distance - An optional distance on the curve.
   * @return {number} The updated interpolation factor.
   */
  getUtoTmapping(e, n = null) {
    const i = this.getLengths();
    let r = 0;
    const c = i.length;
    let h;
    n ? h = n : h = e * i[c - 1];
    let d = 0, v = c - 1, g;
    for (; d <= v; )
      if (r = Math.floor(d + (v - d) / 2), g = i[r] - h, g < 0)
        d = r + 1;
      else if (g > 0)
        v = r - 1;
      else {
        v = r;
        break;
      }
    if (r = v, i[r] === h)
      return r / (c - 1);
    const S = i[r], M = i[r + 1] - S, b = (h - S) / M;
    return (r + b) / (c - 1);
  }
  /**
   * Returns a unit vector tangent for the given interpolation factor.
   * If the derived curve does not implement its tangent derivation,
   * two points a small delta apart will be used to find its gradient
   * which seems to give a reasonable approximation.
   *
   * @param {number} t - The interpolation factor.
   * @param {(Vector2|Vector3)} [optionalTarget] - The optional target vector the result is written to.
   * @return {(Vector2|Vector3)} The tangent vector.
   */
  getTangent(e, n) {
    let r = e - 1e-4, c = e + 1e-4;
    r < 0 && (r = 0), c > 1 && (c = 1);
    const h = this.getPoint(r), d = this.getPoint(c), v = n || (h.isVector2 ? new De() : new j());
    return v.copy(d).sub(h).normalize(), v;
  }
  /**
   * Same as {@link Curve#getTangent} but with equidistant samples.
   *
   * @param {number} u - The interpolation factor.
   * @param {(Vector2|Vector3)} [optionalTarget] - The optional target vector the result is written to.
   * @return {(Vector2|Vector3)} The tangent vector.
   * @see {@link Curve#getPointAt}
   */
  getTangentAt(e, n) {
    const i = this.getUtoTmapping(e);
    return this.getTangent(i, n);
  }
  /**
   * Generates the Frenet Frames. Requires a curve definition in 3D space. Used
   * in geometries like {@link TubeGeometry} or {@link ExtrudeGeometry}.
   *
   * @param {number} segments - The number of segments.
   * @param {boolean} [closed=false] - Whether the curve is closed or not.
   * @return {{tangents: Array<Vector3>, normals: Array<Vector3>, binormals: Array<Vector3>}} The Frenet Frames.
   */
  computeFrenetFrames(e, n = !1) {
    const i = new j(), r = [], c = [], h = [], d = new j(), v = new Ft();
    for (let b = 0; b <= e; b++) {
      const R = b / e;
      r[b] = this.getTangentAt(R, new j());
    }
    c[0] = new j(), h[0] = new j();
    let g = Number.MAX_VALUE;
    const S = Math.abs(r[0].x), x = Math.abs(r[0].y), M = Math.abs(r[0].z);
    S <= g && (g = S, i.set(1, 0, 0)), x <= g && (g = x, i.set(0, 1, 0)), M <= g && i.set(0, 0, 1), d.crossVectors(r[0], i).normalize(), c[0].crossVectors(r[0], d), h[0].crossVectors(r[0], c[0]);
    for (let b = 1; b <= e; b++) {
      if (c[b] = c[b - 1].clone(), h[b] = h[b - 1].clone(), d.crossVectors(r[b - 1], r[b]), d.length() > Number.EPSILON) {
        d.normalize();
        const R = Math.acos(Vt(r[b - 1].dot(r[b]), -1, 1));
        c[b].applyMatrix4(v.makeRotationAxis(d, R));
      }
      h[b].crossVectors(r[b], c[b]);
    }
    if (n === !0) {
      let b = Math.acos(Vt(c[0].dot(c[e]), -1, 1));
      b /= e, r[0].dot(d.crossVectors(c[0], c[e])) > 0 && (b = -b);
      for (let R = 1; R <= e; R++)
        c[R].applyMatrix4(v.makeRotationAxis(r[R], b * R)), h[R].crossVectors(r[R], c[R]);
    }
    return {
      tangents: r,
      normals: c,
      binormals: h
    };
  }
  /**
   * Returns a new curve with copied values from this instance.
   *
   * @return {Curve} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
  /**
   * Copies the values of the given curve to this instance.
   *
   * @param {Curve} source - The curve to copy.
   * @return {Curve} A reference to this curve.
   */
  copy(e) {
    return this.arcLengthDivisions = e.arcLengthDivisions, this;
  }
  /**
   * Serializes the curve into JSON.
   *
   * @return {Object} A JSON object representing the serialized curve.
   * @see {@link ObjectLoader#parse}
   */
  toJSON() {
    const e = {
      metadata: {
        version: 4.7,
        type: "Curve",
        generator: "Curve.toJSON"
      }
    };
    return e.arcLengthDivisions = this.arcLengthDivisions, e.type = this.type, e;
  }
  /**
   * Deserializes the curve from the given JSON.
   *
   * @param {Object} json - The JSON holding the serialized curve.
   * @return {Curve} A reference to this curve.
   */
  fromJSON(e) {
    return this.arcLengthDivisions = e.arcLengthDivisions, this;
  }
}
class sy extends Zr {
  /**
   * Constructs a new ellipse curve.
   *
   * @param {number} [aX=0] - The X center of the ellipse.
   * @param {number} [aY=0] - The Y center of the ellipse.
   * @param {number} [xRadius=1] - The radius of the ellipse in the x direction.
   * @param {number} [yRadius=1] - The radius of the ellipse in the y direction.
   * @param {number} [aStartAngle=0] - The start angle of the curve in radians starting from the positive X axis.
   * @param {number} [aEndAngle=Math.PI*2] - The end angle of the curve in radians starting from the positive X axis.
   * @param {boolean} [aClockwise=false] - Whether the ellipse is drawn clockwise or not.
   * @param {number} [aRotation=0] - The rotation angle of the ellipse in radians, counterclockwise from the positive X axis.
   */
  constructor(e = 0, n = 0, i = 1, r = 1, c = 0, h = Math.PI * 2, d = !1, v = 0) {
    super(), this.isEllipseCurve = !0, this.type = "EllipseCurve", this.aX = e, this.aY = n, this.xRadius = i, this.yRadius = r, this.aStartAngle = c, this.aEndAngle = h, this.aClockwise = d, this.aRotation = v;
  }
  /**
   * Returns a point on the curve.
   *
   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.
   * @param {Vector2} [optionalTarget] - The optional target vector the result is written to.
   * @return {Vector2} The position on the curve.
   */
  getPoint(e, n = new De()) {
    const i = n, r = Math.PI * 2;
    let c = this.aEndAngle - this.aStartAngle;
    const h = Math.abs(c) < Number.EPSILON;
    for (; c < 0; ) c += r;
    for (; c > r; ) c -= r;
    c < Number.EPSILON && (h ? c = 0 : c = r), this.aClockwise === !0 && !h && (c === r ? c = -r : c = c - r);
    const d = this.aStartAngle + e * c;
    let v = this.aX + this.xRadius * Math.cos(d), g = this.aY + this.yRadius * Math.sin(d);
    if (this.aRotation !== 0) {
      const S = Math.cos(this.aRotation), x = Math.sin(this.aRotation), M = v - this.aX, b = g - this.aY;
      v = M * S - b * x + this.aX, g = M * x + b * S + this.aY;
    }
    return i.set(v, g);
  }
  copy(e) {
    return super.copy(e), this.aX = e.aX, this.aY = e.aY, this.xRadius = e.xRadius, this.yRadius = e.yRadius, this.aStartAngle = e.aStartAngle, this.aEndAngle = e.aEndAngle, this.aClockwise = e.aClockwise, this.aRotation = e.aRotation, this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.aX = this.aX, e.aY = this.aY, e.xRadius = this.xRadius, e.yRadius = this.yRadius, e.aStartAngle = this.aStartAngle, e.aEndAngle = this.aEndAngle, e.aClockwise = this.aClockwise, e.aRotation = this.aRotation, e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.aX = e.aX, this.aY = e.aY, this.xRadius = e.xRadius, this.yRadius = e.yRadius, this.aStartAngle = e.aStartAngle, this.aEndAngle = e.aEndAngle, this.aClockwise = e.aClockwise, this.aRotation = e.aRotation, this;
  }
}
class HE extends sy {
  /**
   * Constructs a new arc curve.
   *
   * @param {number} [aX=0] - The X center of the ellipse.
   * @param {number} [aY=0] - The Y center of the ellipse.
   * @param {number} [aRadius=1] - The radius of the ellipse in the x direction.
   * @param {number} [aStartAngle=0] - The start angle of the curve in radians starting from the positive X axis.
   * @param {number} [aEndAngle=Math.PI*2] - The end angle of the curve in radians starting from the positive X axis.
   * @param {boolean} [aClockwise=false] - Whether the ellipse is drawn clockwise or not.
   */
  constructor(e, n, i, r, c, h) {
    super(e, n, i, i, r, c, h), this.isArcCurve = !0, this.type = "ArcCurve";
  }
}
function sx() {
  let s = 0, e = 0, n = 0, i = 0;
  function r(c, h, d, v) {
    s = c, e = d, n = -3 * c + 3 * h - 2 * d - v, i = 2 * c - 2 * h + d + v;
  }
  return {
    initCatmullRom: function(c, h, d, v, g) {
      r(h, d, g * (d - c), g * (v - h));
    },
    initNonuniformCatmullRom: function(c, h, d, v, g, S, x) {
      let M = (h - c) / g - (d - c) / (g + S) + (d - h) / S, b = (d - h) / S - (v - h) / (S + x) + (v - d) / x;
      M *= S, b *= S, r(h, d, M, b);
    },
    calc: function(c) {
      const h = c * c, d = h * c;
      return s + e * c + n * h + i * d;
    }
  };
}
const Cg = /* @__PURE__ */ new j(), z_ = /* @__PURE__ */ new sx(), B_ = /* @__PURE__ */ new sx(), P_ = /* @__PURE__ */ new sx();
class VE extends Zr {
  /**
   * Constructs a new Catmull-Rom curve.
   *
   * @param {Array<Vector3>} [points] - An array of 3D points defining the curve.
   * @param {boolean} [closed=false] - Whether the curve is closed or not.
   * @param {('centripetal'|'chordal'|'catmullrom')} [curveType='centripetal'] - The curve type.
   * @param {number} [tension=0.5] - Tension of the curve.
   */
  constructor(e = [], n = !1, i = "centripetal", r = 0.5) {
    super(), this.isCatmullRomCurve3 = !0, this.type = "CatmullRomCurve3", this.points = e, this.closed = n, this.curveType = i, this.tension = r;
  }
  /**
   * Returns a point on the curve.
   *
   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.
   * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.
   * @return {Vector3} The position on the curve.
   */
  getPoint(e, n = new j()) {
    const i = n, r = this.points, c = r.length, h = (c - (this.closed ? 0 : 1)) * e;
    let d = Math.floor(h), v = h - d;
    this.closed ? d += d > 0 ? 0 : (Math.floor(Math.abs(d) / c) + 1) * c : v === 0 && d === c - 1 && (d = c - 2, v = 1);
    let g, S;
    this.closed || d > 0 ? g = r[(d - 1) % c] : (Cg.subVectors(r[0], r[1]).add(r[0]), g = Cg);
    const x = r[d % c], M = r[(d + 1) % c];
    if (this.closed || d + 2 < c ? S = r[(d + 2) % c] : (Cg.subVectors(r[c - 1], r[c - 2]).add(r[c - 1]), S = Cg), this.curveType === "centripetal" || this.curveType === "chordal") {
      const b = this.curveType === "chordal" ? 0.5 : 0.25;
      let R = Math.pow(g.distanceToSquared(x), b), w = Math.pow(x.distanceToSquared(M), b), C = Math.pow(M.distanceToSquared(S), b);
      w < 1e-4 && (w = 1), R < 1e-4 && (R = w), C < 1e-4 && (C = w), z_.initNonuniformCatmullRom(g.x, x.x, M.x, S.x, R, w, C), B_.initNonuniformCatmullRom(g.y, x.y, M.y, S.y, R, w, C), P_.initNonuniformCatmullRom(g.z, x.z, M.z, S.z, R, w, C);
    } else this.curveType === "catmullrom" && (z_.initCatmullRom(g.x, x.x, M.x, S.x, this.tension), B_.initCatmullRom(g.y, x.y, M.y, S.y, this.tension), P_.initCatmullRom(g.z, x.z, M.z, S.z, this.tension));
    return i.set(
      z_.calc(v),
      B_.calc(v),
      P_.calc(v)
    ), i;
  }
  copy(e) {
    super.copy(e), this.points = [];
    for (let n = 0, i = e.points.length; n < i; n++) {
      const r = e.points[n];
      this.points.push(r.clone());
    }
    return this.closed = e.closed, this.curveType = e.curveType, this.tension = e.tension, this;
  }
  toJSON() {
    const e = super.toJSON();
    e.points = [];
    for (let n = 0, i = this.points.length; n < i; n++) {
      const r = this.points[n];
      e.points.push(r.toArray());
    }
    return e.closed = this.closed, e.curveType = this.curveType, e.tension = this.tension, e;
  }
  fromJSON(e) {
    super.fromJSON(e), this.points = [];
    for (let n = 0, i = e.points.length; n < i; n++) {
      const r = e.points[n];
      this.points.push(new j().fromArray(r));
    }
    return this.closed = e.closed, this.curveType = e.curveType, this.tension = e.tension, this;
  }
}
function lM(s, e, n, i, r) {
  const c = (i - e) * 0.5, h = (r - n) * 0.5, d = s * s, v = s * d;
  return (2 * n - 2 * i + c + h) * v + (-3 * n + 3 * i - 2 * c - h) * d + c * s + n;
}
function a3(s, e) {
  const n = 1 - s;
  return n * n * e;
}
function s3(s, e) {
  return 2 * (1 - s) * s * e;
}
function r3(s, e) {
  return s * s * e;
}
function Vp(s, e, n, i) {
  return a3(s, e) + s3(s, n) + r3(s, i);
}
function o3(s, e) {
  const n = 1 - s;
  return n * n * n * e;
}
function l3(s, e) {
  const n = 1 - s;
  return 3 * n * n * s * e;
}
function c3(s, e) {
  return 3 * (1 - s) * s * s * e;
}
function u3(s, e) {
  return s * s * s * e;
}
function Gp(s, e, n, i, r) {
  return o3(s, e) + l3(s, n) + c3(s, i) + u3(s, r);
}
class rx extends Zr {
  /**
   * Constructs a new Cubic Bezier curve.
   *
   * @param {Vector2} [v0] - The start point.
   * @param {Vector2} [v1] - The first control point.
   * @param {Vector2} [v2] - The second control point.
   * @param {Vector2} [v3] - The end point.
   */
  constructor(e = new De(), n = new De(), i = new De(), r = new De()) {
    super(), this.isCubicBezierCurve = !0, this.type = "CubicBezierCurve", this.v0 = e, this.v1 = n, this.v2 = i, this.v3 = r;
  }
  /**
   * Returns a point on the curve.
   *
   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.
   * @param {Vector2} [optionalTarget] - The optional target vector the result is written to.
   * @return {Vector2} The position on the curve.
   */
  getPoint(e, n = new De()) {
    const i = n, r = this.v0, c = this.v1, h = this.v2, d = this.v3;
    return i.set(
      Gp(e, r.x, c.x, h.x, d.x),
      Gp(e, r.y, c.y, h.y, d.y)
    ), i;
  }
  copy(e) {
    return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this.v3.copy(e.v3), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e.v3 = this.v3.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this.v3.fromArray(e.v3), this;
  }
}
class GE extends Zr {
  /**
   * Constructs a new Cubic Bezier curve.
   *
   * @param {Vector3} [v0] - The start point.
   * @param {Vector3} [v1] - The first control point.
   * @param {Vector3} [v2] - The second control point.
   * @param {Vector3} [v3] - The end point.
   */
  constructor(e = new j(), n = new j(), i = new j(), r = new j()) {
    super(), this.isCubicBezierCurve3 = !0, this.type = "CubicBezierCurve3", this.v0 = e, this.v1 = n, this.v2 = i, this.v3 = r;
  }
  /**
   * Returns a point on the curve.
   *
   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.
   * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.
   * @return {Vector3} The position on the curve.
   */
  getPoint(e, n = new j()) {
    const i = n, r = this.v0, c = this.v1, h = this.v2, d = this.v3;
    return i.set(
      Gp(e, r.x, c.x, h.x, d.x),
      Gp(e, r.y, c.y, h.y, d.y),
      Gp(e, r.z, c.z, h.z, d.z)
    ), i;
  }
  copy(e) {
    return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this.v3.copy(e.v3), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e.v3 = this.v3.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this.v3.fromArray(e.v3), this;
  }
}
class ox extends Zr {
  /**
   * Constructs a new line curve.
   *
   * @param {Vector2} [v1] - The start point.
   * @param {Vector2} [v2] - The end point.
   */
  constructor(e = new De(), n = new De()) {
    super(), this.isLineCurve = !0, this.type = "LineCurve", this.v1 = e, this.v2 = n;
  }
  /**
   * Returns a point on the line.
   *
   * @param {number} t - A interpolation factor representing a position on the line. Must be in the range `[0,1]`.
   * @param {Vector2} [optionalTarget] - The optional target vector the result is written to.
   * @return {Vector2} The position on the line.
   */
  getPoint(e, n = new De()) {
    const i = n;
    return e === 1 ? i.copy(this.v2) : (i.copy(this.v2).sub(this.v1), i.multiplyScalar(e).add(this.v1)), i;
  }
  // Line curve is linear, so we can overwrite default getPointAt
  getPointAt(e, n) {
    return this.getPoint(e, n);
  }
  getTangent(e, n = new De()) {
    return n.subVectors(this.v2, this.v1).normalize();
  }
  getTangentAt(e, n) {
    return this.getTangent(e, n);
  }
  copy(e) {
    return super.copy(e), this.v1.copy(e.v1), this.v2.copy(e.v2), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this;
  }
}
class FE extends Zr {
  /**
   * Constructs a new line curve.
   *
   * @param {Vector3} [v1] - The start point.
   * @param {Vector3} [v2] - The end point.
   */
  constructor(e = new j(), n = new j()) {
    super(), this.isLineCurve3 = !0, this.type = "LineCurve3", this.v1 = e, this.v2 = n;
  }
  /**
   * Returns a point on the line.
   *
   * @param {number} t - A interpolation factor representing a position on the line. Must be in the range `[0,1]`.
   * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.
   * @return {Vector3} The position on the line.
   */
  getPoint(e, n = new j()) {
    const i = n;
    return e === 1 ? i.copy(this.v2) : (i.copy(this.v2).sub(this.v1), i.multiplyScalar(e).add(this.v1)), i;
  }
  // Line curve is linear, so we can overwrite default getPointAt
  getPointAt(e, n) {
    return this.getPoint(e, n);
  }
  getTangent(e, n = new j()) {
    return n.subVectors(this.v2, this.v1).normalize();
  }
  getTangentAt(e, n) {
    return this.getTangent(e, n);
  }
  copy(e) {
    return super.copy(e), this.v1.copy(e.v1), this.v2.copy(e.v2), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this;
  }
}
class lx extends Zr {
  /**
   * Constructs a new Quadratic Bezier curve.
   *
   * @param {Vector2} [v0] - The start point.
   * @param {Vector2} [v1] - The control point.
   * @param {Vector2} [v2] - The end point.
   */
  constructor(e = new De(), n = new De(), i = new De()) {
    super(), this.isQuadraticBezierCurve = !0, this.type = "QuadraticBezierCurve", this.v0 = e, this.v1 = n, this.v2 = i;
  }
  /**
   * Returns a point on the curve.
   *
   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.
   * @param {Vector2} [optionalTarget] - The optional target vector the result is written to.
   * @return {Vector2} The position on the curve.
   */
  getPoint(e, n = new De()) {
    const i = n, r = this.v0, c = this.v1, h = this.v2;
    return i.set(
      Vp(e, r.x, c.x, h.x),
      Vp(e, r.y, c.y, h.y)
    ), i;
  }
  copy(e) {
    return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this;
  }
}
class cx extends Zr {
  /**
   * Constructs a new Quadratic Bezier curve.
   *
   * @param {Vector3} [v0] - The start point.
   * @param {Vector3} [v1] - The control point.
   * @param {Vector3} [v2] - The end point.
   */
  constructor(e = new j(), n = new j(), i = new j()) {
    super(), this.isQuadraticBezierCurve3 = !0, this.type = "QuadraticBezierCurve3", this.v0 = e, this.v1 = n, this.v2 = i;
  }
  /**
   * Returns a point on the curve.
   *
   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.
   * @param {Vector3} [optionalTarget] - The optional target vector the result is written to.
   * @return {Vector3} The position on the curve.
   */
  getPoint(e, n = new j()) {
    const i = n, r = this.v0, c = this.v1, h = this.v2;
    return i.set(
      Vp(e, r.x, c.x, h.x),
      Vp(e, r.y, c.y, h.y),
      Vp(e, r.z, c.z, h.z)
    ), i;
  }
  copy(e) {
    return super.copy(e), this.v0.copy(e.v0), this.v1.copy(e.v1), this.v2.copy(e.v2), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.v0 = this.v0.toArray(), e.v1 = this.v1.toArray(), e.v2 = this.v2.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.v0.fromArray(e.v0), this.v1.fromArray(e.v1), this.v2.fromArray(e.v2), this;
  }
}
class ux extends Zr {
  /**
   * Constructs a new 2D spline curve.
   *
   * @param {Array<Vector2>} [points] -  An array of 2D points defining the curve.
   */
  constructor(e = []) {
    super(), this.isSplineCurve = !0, this.type = "SplineCurve", this.points = e;
  }
  /**
   * Returns a point on the curve.
   *
   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.
   * @param {Vector2} [optionalTarget] - The optional target vector the result is written to.
   * @return {Vector2} The position on the curve.
   */
  getPoint(e, n = new De()) {
    const i = n, r = this.points, c = (r.length - 1) * e, h = Math.floor(c), d = c - h, v = r[h === 0 ? h : h - 1], g = r[h], S = r[h > r.length - 2 ? r.length - 1 : h + 1], x = r[h > r.length - 3 ? r.length - 1 : h + 2];
    return i.set(
      lM(d, v.x, g.x, S.x, x.x),
      lM(d, v.y, g.y, S.y, x.y)
    ), i;
  }
  copy(e) {
    super.copy(e), this.points = [];
    for (let n = 0, i = e.points.length; n < i; n++) {
      const r = e.points[n];
      this.points.push(r.clone());
    }
    return this;
  }
  toJSON() {
    const e = super.toJSON();
    e.points = [];
    for (let n = 0, i = this.points.length; n < i; n++) {
      const r = this.points[n];
      e.points.push(r.toArray());
    }
    return e;
  }
  fromJSON(e) {
    super.fromJSON(e), this.points = [];
    for (let n = 0, i = e.points.length; n < i; n++) {
      const r = e.points[n];
      this.points.push(new De().fromArray(r));
    }
    return this;
  }
}
var N0 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  ArcCurve: HE,
  CatmullRomCurve3: VE,
  CubicBezierCurve: rx,
  CubicBezierCurve3: GE,
  EllipseCurve: sy,
  LineCurve: ox,
  LineCurve3: FE,
  QuadraticBezierCurve: lx,
  QuadraticBezierCurve3: cx,
  SplineCurve: ux
});
class XE extends Zr {
  /**
   * Constructs a new curve path.
   */
  constructor() {
    super(), this.type = "CurvePath", this.curves = [], this.autoClose = !1;
  }
  /**
   * Adds a curve to this curve path.
   *
   * @param {Curve} curve - The curve to add.
   */
  add(e) {
    this.curves.push(e);
  }
  /**
   * Adds a line curve to close the path.
   *
   * @return {CurvePath} A reference to this curve path.
   */
  closePath() {
    const e = this.curves[0].getPoint(0), n = this.curves[this.curves.length - 1].getPoint(1);
    if (!e.equals(n)) {
      const i = e.isVector2 === !0 ? "LineCurve" : "LineCurve3";
      this.curves.push(new N0[i](n, e));
    }
    return this;
  }
  /**
   * This method returns a vector in 2D or 3D space (depending on the curve definitions)
   * for the given interpolation factor.
   *
   * @param {number} t - A interpolation factor representing a position on the curve. Must be in the range `[0,1]`.
   * @param {(Vector2|Vector3)} [optionalTarget] - The optional target vector the result is written to.
   * @return {?(Vector2|Vector3)} The position on the curve. It can be a 2D or 3D vector depending on the curve definition.
   */
  getPoint(e, n) {
    const i = e * this.getLength(), r = this.getCurveLengths();
    let c = 0;
    for (; c < r.length; ) {
      if (r[c] >= i) {
        const h = r[c] - i, d = this.curves[c], v = d.getLength(), g = v === 0 ? 0 : 1 - h / v;
        return d.getPointAt(g, n);
      }
      c++;
    }
    return null;
  }
  getLength() {
    const e = this.getCurveLengths();
    return e[e.length - 1];
  }
  updateArcLengths() {
    this.needsUpdate = !0, this.cacheLengths = null, this.getCurveLengths();
  }
  /**
   * Returns list of cumulative curve lengths of the defined curves.
   *
   * @return {Array<number>} The curve lengths.
   */
  getCurveLengths() {
    if (this.cacheLengths && this.cacheLengths.length === this.curves.length)
      return this.cacheLengths;
    const e = [];
    let n = 0;
    for (let i = 0, r = this.curves.length; i < r; i++)
      n += this.curves[i].getLength(), e.push(n);
    return this.cacheLengths = e, e;
  }
  getSpacedPoints(e = 40) {
    const n = [];
    for (let i = 0; i <= e; i++)
      n.push(this.getPoint(i / e));
    return this.autoClose && n.push(n[0]), n;
  }
  getPoints(e = 12) {
    const n = [];
    let i;
    for (let r = 0, c = this.curves; r < c.length; r++) {
      const h = c[r], d = h.isEllipseCurve ? e * 2 : h.isLineCurve || h.isLineCurve3 ? 1 : h.isSplineCurve ? e * h.points.length : e, v = h.getPoints(d);
      for (let g = 0; g < v.length; g++) {
        const S = v[g];
        i && i.equals(S) || (n.push(S), i = S);
      }
    }
    return this.autoClose && n.length > 1 && !n[n.length - 1].equals(n[0]) && n.push(n[0]), n;
  }
  copy(e) {
    super.copy(e), this.curves = [];
    for (let n = 0, i = e.curves.length; n < i; n++) {
      const r = e.curves[n];
      this.curves.push(r.clone());
    }
    return this.autoClose = e.autoClose, this;
  }
  toJSON() {
    const e = super.toJSON();
    e.autoClose = this.autoClose, e.curves = [];
    for (let n = 0, i = this.curves.length; n < i; n++) {
      const r = this.curves[n];
      e.curves.push(r.toJSON());
    }
    return e;
  }
  fromJSON(e) {
    super.fromJSON(e), this.autoClose = e.autoClose, this.curves = [];
    for (let n = 0, i = e.curves.length; n < i; n++) {
      const r = e.curves[n];
      this.curves.push(new N0[r.type]().fromJSON(r));
    }
    return this;
  }
}
class O0 extends XE {
  /**
   * Constructs a new path.
   *
   * @param {Array<Vector2>} [points] - An array of 2D points defining the path.
   */
  constructor(e) {
    super(), this.type = "Path", this.currentPoint = new De(), e && this.setFromPoints(e);
  }
  /**
   * Creates a path from the given list of points. The points are added
   * to the path as instances of {@link LineCurve}.
   *
   * @param {Array<Vector2>} points - An array of 2D points.
   * @return {Path} A reference to this path.
   */
  setFromPoints(e) {
    this.moveTo(e[0].x, e[0].y);
    for (let n = 1, i = e.length; n < i; n++)
      this.lineTo(e[n].x, e[n].y);
    return this;
  }
  /**
   * Moves {@link Path#currentPoint} to the given point.
   *
   * @param {number} x - The x coordinate.
   * @param {number} y - The y coordinate.
   * @return {Path} A reference to this path.
   */
  moveTo(e, n) {
    return this.currentPoint.set(e, n), this;
  }
  /**
   * Adds an instance of {@link LineCurve} to the path by connecting
   * the current point with the given one.
   *
   * @param {number} x - The x coordinate of the end point.
   * @param {number} y - The y coordinate of the end point.
   * @return {Path} A reference to this path.
   */
  lineTo(e, n) {
    const i = new ox(this.currentPoint.clone(), new De(e, n));
    return this.curves.push(i), this.currentPoint.set(e, n), this;
  }
  /**
   * Adds an instance of {@link QuadraticBezierCurve} to the path by connecting
   * the current point with the given one.
   *
   * @param {number} aCPx - The x coordinate of the control point.
   * @param {number} aCPy - The y coordinate of the control point.
   * @param {number} aX - The x coordinate of the end point.
   * @param {number} aY - The y coordinate of the end point.
   * @return {Path} A reference to this path.
   */
  quadraticCurveTo(e, n, i, r) {
    const c = new lx(
      this.currentPoint.clone(),
      new De(e, n),
      new De(i, r)
    );
    return this.curves.push(c), this.currentPoint.set(i, r), this;
  }
  /**
   * Adds an instance of {@link CubicBezierCurve} to the path by connecting
   * the current point with the given one.
   *
   * @param {number} aCP1x - The x coordinate of the first control point.
   * @param {number} aCP1y - The y coordinate of the first control point.
   * @param {number} aCP2x - The x coordinate of the second control point.
   * @param {number} aCP2y - The y coordinate of the second control point.
   * @param {number} aX - The x coordinate of the end point.
   * @param {number} aY - The y coordinate of the end point.
   * @return {Path} A reference to this path.
   */
  bezierCurveTo(e, n, i, r, c, h) {
    const d = new rx(
      this.currentPoint.clone(),
      new De(e, n),
      new De(i, r),
      new De(c, h)
    );
    return this.curves.push(d), this.currentPoint.set(c, h), this;
  }
  /**
   * Adds an instance of {@link SplineCurve} to the path by connecting
   * the current point with the given list of points.
   *
   * @param {Array<Vector2>} pts - An array of points in 2D space.
   * @return {Path} A reference to this path.
   */
  splineThru(e) {
    const n = [this.currentPoint.clone()].concat(e), i = new ux(n);
    return this.curves.push(i), this.currentPoint.copy(e[e.length - 1]), this;
  }
  /**
   * Adds an arc as an instance of {@link EllipseCurve} to the path, positioned relative
   * to the current point.
   *
   * @param {number} [aX=0] - The x coordinate of the center of the arc offsetted from the previous curve.
   * @param {number} [aY=0] - The y coordinate of the center of the arc offsetted from the previous curve.
   * @param {number} [aRadius=1] - The radius of the arc.
   * @param {number} [aStartAngle=0] - The start angle in radians.
   * @param {number} [aEndAngle=Math.PI*2] - The end angle in radians.
   * @param {boolean} [aClockwise=false] - Whether to sweep the arc clockwise or not.
   * @return {Path} A reference to this path.
   */
  arc(e, n, i, r, c, h) {
    const d = this.currentPoint.x, v = this.currentPoint.y;
    return this.absarc(
      e + d,
      n + v,
      i,
      r,
      c,
      h
    ), this;
  }
  /**
   * Adds an absolutely positioned arc as an instance of {@link EllipseCurve} to the path.
   *
   * @param {number} [aX=0] - The x coordinate of the center of the arc.
   * @param {number} [aY=0] - The y coordinate of the center of the arc.
   * @param {number} [aRadius=1] - The radius of the arc.
   * @param {number} [aStartAngle=0] - The start angle in radians.
   * @param {number} [aEndAngle=Math.PI*2] - The end angle in radians.
   * @param {boolean} [aClockwise=false] - Whether to sweep the arc clockwise or not.
   * @return {Path} A reference to this path.
   */
  absarc(e, n, i, r, c, h) {
    return this.absellipse(e, n, i, i, r, c, h), this;
  }
  /**
   * Adds an ellipse as an instance of {@link EllipseCurve} to the path, positioned relative
   * to the current point
   *
   * @param {number} [aX=0] - The x coordinate of the center of the ellipse offsetted from the previous curve.
   * @param {number} [aY=0] - The y coordinate of the center of the ellipse offsetted from the previous curve.
   * @param {number} [xRadius=1] - The radius of the ellipse in the x axis.
   * @param {number} [yRadius=1] - The radius of the ellipse in the y axis.
   * @param {number} [aStartAngle=0] - The start angle in radians.
   * @param {number} [aEndAngle=Math.PI*2] - The end angle in radians.
   * @param {boolean} [aClockwise=false] - Whether to sweep the ellipse clockwise or not.
   * @param {number} [aRotation=0] - The rotation angle of the ellipse in radians, counterclockwise from the positive X axis.
   * @return {Path} A reference to this path.
   */
  ellipse(e, n, i, r, c, h, d, v) {
    const g = this.currentPoint.x, S = this.currentPoint.y;
    return this.absellipse(e + g, n + S, i, r, c, h, d, v), this;
  }
  /**
   * Adds an absolutely positioned ellipse as an instance of {@link EllipseCurve} to the path.
   *
   * @param {number} [aX=0] - The x coordinate of the absolute center of the ellipse.
   * @param {number} [aY=0] - The y coordinate of the absolute center of the ellipse.
   * @param {number} [xRadius=1] - The radius of the ellipse in the x axis.
   * @param {number} [yRadius=1] - The radius of the ellipse in the y axis.
   * @param {number} [aStartAngle=0] - The start angle in radians.
   * @param {number} [aEndAngle=Math.PI*2] - The end angle in radians.
   * @param {boolean} [aClockwise=false] - Whether to sweep the ellipse clockwise or not.
   * @param {number} [aRotation=0] - The rotation angle of the ellipse in radians, counterclockwise from the positive X axis.
   * @return {Path} A reference to this path.
   */
  absellipse(e, n, i, r, c, h, d, v) {
    const g = new sy(e, n, i, r, c, h, d, v);
    if (this.curves.length > 0) {
      const x = g.getPoint(0);
      x.equals(this.currentPoint) || this.lineTo(x.x, x.y);
    }
    this.curves.push(g);
    const S = g.getPoint(1);
    return this.currentPoint.copy(S), this;
  }
  copy(e) {
    return super.copy(e), this.currentPoint.copy(e.currentPoint), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.currentPoint = this.currentPoint.toArray(), e;
  }
  fromJSON(e) {
    return super.fromJSON(e), this.currentPoint.fromArray(e.currentPoint), this;
  }
}
class Zu extends O0 {
  /**
   * Constructs a new shape.
   *
   * @param {Array<Vector2>} [points] - An array of 2D points defining the shape.
   */
  constructor(e) {
    super(e), this.uuid = Fs(), this.type = "Shape", this.holes = [];
  }
  /**
   * Returns an array representing each contour of the holes
   * as a list of 2D points.
   *
   * @param {number} divisions - The fineness of the result.
   * @return {Array<Array<Vector2>>} The holes as a series of 2D points.
   */
  getPointsHoles(e) {
    const n = [];
    for (let i = 0, r = this.holes.length; i < r; i++)
      n[i] = this.holes[i].getPoints(e);
    return n;
  }
  // get points of shape and holes (keypoints based on segments parameter)
  /**
   * Returns an object that holds contour data for the shape and its holes as
   * arrays of 2D points.
   *
   * @param {number} divisions - The fineness of the result.
   * @return {{shape:Array<Vector2>,holes:Array<Array<Vector2>>}} An object with contour data.
   */
  extractPoints(e) {
    return {
      shape: this.getPoints(e),
      holes: this.getPointsHoles(e)
    };
  }
  copy(e) {
    super.copy(e), this.holes = [];
    for (let n = 0, i = e.holes.length; n < i; n++) {
      const r = e.holes[n];
      this.holes.push(r.clone());
    }
    return this;
  }
  toJSON() {
    const e = super.toJSON();
    e.uuid = this.uuid, e.holes = [];
    for (let n = 0, i = this.holes.length; n < i; n++) {
      const r = this.holes[n];
      e.holes.push(r.toJSON());
    }
    return e;
  }
  fromJSON(e) {
    super.fromJSON(e), this.uuid = e.uuid, this.holes = [];
    for (let n = 0, i = e.holes.length; n < i; n++) {
      const r = e.holes[n];
      this.holes.push(new O0().fromJSON(r));
    }
    return this;
  }
}
function f3(s, e, n = 2) {
  const i = e && e.length, r = i ? e[0] * n : s.length;
  let c = qE(s, 0, r, n, !0);
  const h = [];
  if (!c || c.next === c.prev) return h;
  let d, v, g;
  if (i && (c = v3(s, e, c, n)), s.length > 80 * n) {
    d = 1 / 0, v = 1 / 0;
    let S = -1 / 0, x = -1 / 0;
    for (let M = n; M < r; M += n) {
      const b = s[M], R = s[M + 1];
      b < d && (d = b), R < v && (v = R), b > S && (S = b), R > x && (x = R);
    }
    g = Math.max(S - d, x - v), g = g !== 0 ? 32767 / g : 0;
  }
  return em(c, h, n, d, v, g, 0), h;
}
function qE(s, e, n, i, r) {
  let c;
  if (r === R3(s, e, n, i) > 0)
    for (let h = e; h < n; h += i) c = cM(h / i | 0, s[h], s[h + 1], c);
  else
    for (let h = n - i; h >= e; h -= i) c = cM(h / i | 0, s[h], s[h + 1], c);
  return c && Wh(c, c.next) && (nm(c), c = c.next), c;
}
function ef(s, e) {
  if (!s) return s;
  e || (e = s);
  let n = s, i;
  do
    if (i = !1, !n.steiner && (Wh(n, n.next) || hi(n.prev, n, n.next) === 0)) {
      if (nm(n), n = e = n.prev, n === n.next) break;
      i = !0;
    } else
      n = n.next;
  while (i || n !== e);
  return e;
}
function em(s, e, n, i, r, c, h) {
  if (!s) return;
  !h && c && x3(s, i, r, c);
  let d = s;
  for (; s.prev !== s.next; ) {
    const v = s.prev, g = s.next;
    if (c ? d3(s, i, r, c) : h3(s)) {
      e.push(v.i, s.i, g.i), nm(s), s = g.next, d = g.next;
      continue;
    }
    if (s = g, s === d) {
      h ? h === 1 ? (s = p3(ef(s), e), em(s, e, n, i, r, c, 2)) : h === 2 && m3(s, e, n, i, r, c) : em(ef(s), e, n, i, r, c, 1);
      break;
    }
  }
}
function h3(s) {
  const e = s.prev, n = s, i = s.next;
  if (hi(e, n, i) >= 0) return !1;
  const r = e.x, c = n.x, h = i.x, d = e.y, v = n.y, g = i.y, S = Math.min(r, c, h), x = Math.min(d, v, g), M = Math.max(r, c, h), b = Math.max(d, v, g);
  let R = i.next;
  for (; R !== e; ) {
    if (R.x >= S && R.x <= M && R.y >= x && R.y <= b && Dp(r, d, c, v, h, g, R.x, R.y) && hi(R.prev, R, R.next) >= 0) return !1;
    R = R.next;
  }
  return !0;
}
function d3(s, e, n, i) {
  const r = s.prev, c = s, h = s.next;
  if (hi(r, c, h) >= 0) return !1;
  const d = r.x, v = c.x, g = h.x, S = r.y, x = c.y, M = h.y, b = Math.min(d, v, g), R = Math.min(S, x, M), w = Math.max(d, v, g), C = Math.max(S, x, M), E = ES(b, R, e, n, i), U = ES(w, C, e, n, i);
  let N = s.prevZ, O = s.nextZ;
  for (; N && N.z >= E && O && O.z <= U; ) {
    if (N.x >= b && N.x <= w && N.y >= R && N.y <= C && N !== r && N !== h && Dp(d, S, v, x, g, M, N.x, N.y) && hi(N.prev, N, N.next) >= 0 || (N = N.prevZ, O.x >= b && O.x <= w && O.y >= R && O.y <= C && O !== r && O !== h && Dp(d, S, v, x, g, M, O.x, O.y) && hi(O.prev, O, O.next) >= 0)) return !1;
    O = O.nextZ;
  }
  for (; N && N.z >= E; ) {
    if (N.x >= b && N.x <= w && N.y >= R && N.y <= C && N !== r && N !== h && Dp(d, S, v, x, g, M, N.x, N.y) && hi(N.prev, N, N.next) >= 0) return !1;
    N = N.prevZ;
  }
  for (; O && O.z <= U; ) {
    if (O.x >= b && O.x <= w && O.y >= R && O.y <= C && O !== r && O !== h && Dp(d, S, v, x, g, M, O.x, O.y) && hi(O.prev, O, O.next) >= 0) return !1;
    O = O.nextZ;
  }
  return !0;
}
function p3(s, e) {
  let n = s;
  do {
    const i = n.prev, r = n.next.next;
    !Wh(i, r) && kE(i, n, n.next, r) && tm(i, r) && tm(r, i) && (e.push(i.i, n.i, r.i), nm(n), nm(n.next), n = s = r), n = n.next;
  } while (n !== s);
  return ef(n);
}
function m3(s, e, n, i, r, c) {
  let h = s;
  do {
    let d = h.next.next;
    for (; d !== h.prev; ) {
      if (h.i !== d.i && E3(h, d)) {
        let v = WE(h, d);
        h = ef(h, h.next), v = ef(v, v.next), em(h, e, n, i, r, c, 0), em(v, e, n, i, r, c, 0);
        return;
      }
      d = d.next;
    }
    h = h.next;
  } while (h !== s);
}
function v3(s, e, n, i) {
  const r = [];
  for (let c = 0, h = e.length; c < h; c++) {
    const d = e[c] * i, v = c < h - 1 ? e[c + 1] * i : s.length, g = qE(s, d, v, i, !1);
    g === g.next && (g.steiner = !0), r.push(b3(g));
  }
  r.sort(g3);
  for (let c = 0; c < r.length; c++)
    n = y3(r[c], n);
  return n;
}
function g3(s, e) {
  let n = s.x - e.x;
  if (n === 0 && (n = s.y - e.y, n === 0)) {
    const i = (s.next.y - s.y) / (s.next.x - s.x), r = (e.next.y - e.y) / (e.next.x - e.x);
    n = i - r;
  }
  return n;
}
function y3(s, e) {
  const n = _3(s, e);
  if (!n)
    return e;
  const i = WE(n, s);
  return ef(i, i.next), ef(n, n.next);
}
function _3(s, e) {
  let n = e;
  const i = s.x, r = s.y;
  let c = -1 / 0, h;
  if (Wh(s, n)) return n;
  do {
    if (Wh(s, n.next)) return n.next;
    if (r <= n.y && r >= n.next.y && n.next.y !== n.y) {
      const x = n.x + (r - n.y) * (n.next.x - n.x) / (n.next.y - n.y);
      if (x <= i && x > c && (c = x, h = n.x < n.next.x ? n : n.next, x === i))
        return h;
    }
    n = n.next;
  } while (n !== e);
  if (!h) return null;
  const d = h, v = h.x, g = h.y;
  let S = 1 / 0;
  n = h;
  do {
    if (i >= n.x && n.x >= v && i !== n.x && YE(r < g ? i : c, r, v, g, r < g ? c : i, r, n.x, n.y)) {
      const x = Math.abs(r - n.y) / (i - n.x);
      tm(n, s) && (x < S || x === S && (n.x > h.x || n.x === h.x && S3(h, n))) && (h = n, S = x);
    }
    n = n.next;
  } while (n !== d);
  return h;
}
function S3(s, e) {
  return hi(s.prev, s, e.prev) < 0 && hi(e.next, s, s.next) < 0;
}
function x3(s, e, n, i) {
  let r = s;
  do
    r.z === 0 && (r.z = ES(r.x, r.y, e, n, i)), r.prevZ = r.prev, r.nextZ = r.next, r = r.next;
  while (r !== s);
  r.prevZ.nextZ = null, r.prevZ = null, M3(r);
}
function M3(s) {
  let e, n = 1;
  do {
    let i = s, r;
    s = null;
    let c = null;
    for (e = 0; i; ) {
      e++;
      let h = i, d = 0;
      for (let g = 0; g < n && (d++, h = h.nextZ, !!h); g++)
        ;
      let v = n;
      for (; d > 0 || v > 0 && h; )
        d !== 0 && (v === 0 || !h || i.z <= h.z) ? (r = i, i = i.nextZ, d--) : (r = h, h = h.nextZ, v--), c ? c.nextZ = r : s = r, r.prevZ = c, c = r;
      i = h;
    }
    c.nextZ = null, n *= 2;
  } while (e > 1);
  return s;
}
function ES(s, e, n, i, r) {
  return s = (s - n) * r | 0, e = (e - i) * r | 0, s = (s | s << 8) & 16711935, s = (s | s << 4) & 252645135, s = (s | s << 2) & 858993459, s = (s | s << 1) & 1431655765, e = (e | e << 8) & 16711935, e = (e | e << 4) & 252645135, e = (e | e << 2) & 858993459, e = (e | e << 1) & 1431655765, s | e << 1;
}
function b3(s) {
  let e = s, n = s;
  do
    (e.x < n.x || e.x === n.x && e.y < n.y) && (n = e), e = e.next;
  while (e !== s);
  return n;
}
function YE(s, e, n, i, r, c, h, d) {
  return (r - h) * (e - d) >= (s - h) * (c - d) && (s - h) * (i - d) >= (n - h) * (e - d) && (n - h) * (c - d) >= (r - h) * (i - d);
}
function Dp(s, e, n, i, r, c, h, d) {
  return !(s === h && e === d) && YE(s, e, n, i, r, c, h, d);
}
function E3(s, e) {
  return s.next.i !== e.i && s.prev.i !== e.i && !T3(s, e) && // dones't intersect other edges
  (tm(s, e) && tm(e, s) && A3(s, e) && // locally visible
  (hi(s.prev, s, e.prev) || hi(s, e.prev, e)) || // does not create opposite-facing sectors
  Wh(s, e) && hi(s.prev, s, s.next) > 0 && hi(e.prev, e, e.next) > 0);
}
function hi(s, e, n) {
  return (e.y - s.y) * (n.x - e.x) - (e.x - s.x) * (n.y - e.y);
}
function Wh(s, e) {
  return s.x === e.x && s.y === e.y;
}
function kE(s, e, n, i) {
  const r = Dg(hi(s, e, n)), c = Dg(hi(s, e, i)), h = Dg(hi(n, i, s)), d = Dg(hi(n, i, e));
  return !!(r !== c && h !== d || r === 0 && wg(s, n, e) || c === 0 && wg(s, i, e) || h === 0 && wg(n, s, i) || d === 0 && wg(n, e, i));
}
function wg(s, e, n) {
  return e.x <= Math.max(s.x, n.x) && e.x >= Math.min(s.x, n.x) && e.y <= Math.max(s.y, n.y) && e.y >= Math.min(s.y, n.y);
}
function Dg(s) {
  return s > 0 ? 1 : s < 0 ? -1 : 0;
}
function T3(s, e) {
  let n = s;
  do {
    if (n.i !== s.i && n.next.i !== s.i && n.i !== e.i && n.next.i !== e.i && kE(n, n.next, s, e)) return !0;
    n = n.next;
  } while (n !== s);
  return !1;
}
function tm(s, e) {
  return hi(s.prev, s, s.next) < 0 ? hi(s, e, s.next) >= 0 && hi(s, s.prev, e) >= 0 : hi(s, e, s.prev) < 0 || hi(s, s.next, e) < 0;
}
function A3(s, e) {
  let n = s, i = !1;
  const r = (s.x + e.x) / 2, c = (s.y + e.y) / 2;
  do
    n.y > c != n.next.y > c && n.next.y !== n.y && r < (n.next.x - n.x) * (c - n.y) / (n.next.y - n.y) + n.x && (i = !i), n = n.next;
  while (n !== s);
  return i;
}
function WE(s, e) {
  const n = TS(s.i, s.x, s.y), i = TS(e.i, e.x, e.y), r = s.next, c = e.prev;
  return s.next = e, e.prev = s, n.next = r, r.prev = n, i.next = n, n.prev = i, c.next = i, i.prev = c, i;
}
function cM(s, e, n, i) {
  const r = TS(s, e, n);
  return i ? (r.next = i.next, r.prev = i, i.next.prev = r, i.next = r) : (r.prev = r, r.next = r), r;
}
function nm(s) {
  s.next.prev = s.prev, s.prev.next = s.next, s.prevZ && (s.prevZ.nextZ = s.nextZ), s.nextZ && (s.nextZ.prevZ = s.prevZ);
}
function TS(s, e, n) {
  return {
    i: s,
    // vertex index in coordinates array
    x: e,
    y: n,
    // vertex coordinates
    prev: null,
    // previous and next vertex nodes in a polygon ring
    next: null,
    z: 0,
    // z-order curve value
    prevZ: null,
    // previous and next nodes in z-order
    nextZ: null,
    steiner: !1
    // indicates whether this is a steiner point
  };
}
function R3(s, e, n, i) {
  let r = 0;
  for (let c = e, h = n - i; c < n; c += i)
    r += (s[h] - s[c]) * (s[c + 1] + s[h + 1]), h = c;
  return r;
}
class C3 {
  /**
   * Triangulates the given shape definition by returning an array of triangles.
   *
   * @param {Array<number>} data - An array with 2D points.
   * @param {Array<number>} holeIndices - An array with indices defining holes.
   * @param {number} [dim=2] - The number of coordinates per vertex in the input array.
   * @return {Array<number>} An array representing the triangulated faces. Each face is defined by three consecutive numbers
   * representing vertex indices.
   */
  static triangulate(e, n, i = 2) {
    return f3(e, n, i);
  }
}
class kr {
  /**
   * Calculate area of a ( 2D ) contour polygon.
   *
   * @param {Array<Vector2>} contour - An array of 2D points.
   * @return {number} The area.
   */
  static area(e) {
    const n = e.length;
    let i = 0;
    for (let r = n - 1, c = 0; c < n; r = c++)
      i += e[r].x * e[c].y - e[c].x * e[r].y;
    return i * 0.5;
  }
  /**
   * Returns `true` if the given contour uses a clockwise winding order.
   *
   * @param {Array<Vector2>} pts - An array of 2D points defining a polygon.
   * @return {boolean} Whether the given contour uses a clockwise winding order or not.
   */
  static isClockWise(e) {
    return kr.area(e) < 0;
  }
  /**
   * Triangulates the given shape definition.
   *
   * @param {Array<Vector2>} contour - An array of 2D points defining the contour.
   * @param {Array<Array<Vector2>>} holes - An array that holds arrays of 2D points defining the holes.
   * @return {Array<Array<number>>} An array that holds for each face definition an array with three indices.
   */
  static triangulateShape(e, n) {
    const i = [], r = [], c = [];
    uM(e), fM(i, e);
    let h = e.length;
    n.forEach(uM);
    for (let v = 0; v < n.length; v++)
      r.push(h), h += n[v].length, fM(i, n[v]);
    const d = C3.triangulate(i, r);
    for (let v = 0; v < d.length; v += 3)
      c.push(d.slice(v, v + 3));
    return c;
  }
}
function uM(s) {
  const e = s.length;
  e > 2 && s[e - 1].equals(s[0]) && s.pop();
}
function fM(s, e) {
  for (let n = 0; n < e.length; n++)
    s.push(e[n].x), s.push(e[n].y);
}
class ry extends Kt {
  /**
   * Constructs a new extrude geometry.
   *
   * @param {Shape|Array<Shape>} [shapes] - A shape or an array of shapes.
   * @param {ExtrudeGeometry~Options} [options] - The extrude settings.
   */
  constructor(e = new Zu([new De(0.5, 0.5), new De(-0.5, 0.5), new De(-0.5, -0.5), new De(0.5, -0.5)]), n = {}) {
    super(), this.type = "ExtrudeGeometry", this.parameters = {
      shapes: e,
      options: n
    }, e = Array.isArray(e) ? e : [e];
    const i = this, r = [], c = [];
    for (let d = 0, v = e.length; d < v; d++) {
      const g = e[d];
      h(g);
    }
    this.setAttribute("position", new yt(r, 3)), this.setAttribute("uv", new yt(c, 2)), this.computeVertexNormals();
    function h(d) {
      const v = [], g = n.curveSegments !== void 0 ? n.curveSegments : 12, S = n.steps !== void 0 ? n.steps : 1, x = n.depth !== void 0 ? n.depth : 1;
      let M = n.bevelEnabled !== void 0 ? n.bevelEnabled : !0, b = n.bevelThickness !== void 0 ? n.bevelThickness : 0.2, R = n.bevelSize !== void 0 ? n.bevelSize : b - 0.1, w = n.bevelOffset !== void 0 ? n.bevelOffset : 0, C = n.bevelSegments !== void 0 ? n.bevelSegments : 3;
      const E = n.extrudePath, U = n.UVGenerator !== void 0 ? n.UVGenerator : w3;
      let N, O = !1, I, V, Y, k;
      E && (N = E.getSpacedPoints(S), O = !0, M = !1, I = E.computeFrenetFrames(S, !1), V = new j(), Y = new j(), k = new j()), M || (C = 0, b = 0, R = 0, w = 0);
      const B = d.extractPoints(g);
      let z = B.shape;
      const W = B.holes;
      if (!kr.isClockWise(z)) {
        z = z.reverse();
        for (let He = 0, Ue = W.length; He < Ue; He++) {
          const Xe = W[He];
          kr.isClockWise(Xe) && (W[He] = Xe.reverse());
        }
      }
      function ae(He) {
        const Xe = 10000000000000001e-36;
        let Ce = He[0];
        for (let et = 1; et <= He.length; et++) {
          const Ge = et % He.length, Ze = He[Ge], At = Ze.x - Ce.x, Bt = Ze.y - Ce.y, Z = At * At + Bt * Bt, H = Math.max(
            Math.abs(Ze.x),
            Math.abs(Ze.y),
            Math.abs(Ce.x),
            Math.abs(Ce.y)
          ), me = Xe * H * H;
          if (Z <= me) {
            He.splice(Ge, 1), et--;
            continue;
          }
          Ce = Ze;
        }
      }
      ae(z), W.forEach(ae);
      const oe = W.length, pe = z;
      for (let He = 0; He < oe; He++) {
        const Ue = W[He];
        z = z.concat(Ue);
      }
      function P(He, Ue, Xe) {
        return Ue || console.error("THREE.ExtrudeGeometry: vec does not exist"), He.clone().addScaledVector(Ue, Xe);
      }
      const K = z.length;
      function Q(He, Ue, Xe) {
        let Ce, et, Ge;
        const Ze = He.x - Ue.x, At = He.y - Ue.y, Bt = Xe.x - He.x, Z = Xe.y - He.y, H = Ze * Ze + At * At, me = Ze * Z - At * Bt;
        if (Math.abs(me) > Number.EPSILON) {
          const Te = Math.sqrt(H), ze = Math.sqrt(Bt * Bt + Z * Z), Ae = Ue.x - At / Te, at = Ue.y + Ze / Te, Qe = Xe.x - Z / ze, dt = Xe.y + Bt / ze, pt = ((Qe - Ae) * Z - (dt - at) * Bt) / (Ze * Z - At * Bt);
          Ce = Ae + Ze * pt - He.x, et = at + At * pt - He.y;
          const Ve = Ce * Ce + et * et;
          if (Ve <= 2)
            return new De(Ce, et);
          Ge = Math.sqrt(Ve / 2);
        } else {
          let Te = !1;
          Ze > Number.EPSILON ? Bt > Number.EPSILON && (Te = !0) : Ze < -Number.EPSILON ? Bt < -Number.EPSILON && (Te = !0) : Math.sign(At) === Math.sign(Z) && (Te = !0), Te ? (Ce = -At, et = Ze, Ge = Math.sqrt(H)) : (Ce = Ze, et = At, Ge = Math.sqrt(H / 2));
        }
        return new De(Ce / Ge, et / Ge);
      }
      const fe = [];
      for (let He = 0, Ue = pe.length, Xe = Ue - 1, Ce = He + 1; He < Ue; He++, Xe++, Ce++)
        Xe === Ue && (Xe = 0), Ce === Ue && (Ce = 0), fe[He] = Q(pe[He], pe[Xe], pe[Ce]);
      const q = [];
      let te, Me = fe.concat();
      for (let He = 0, Ue = oe; He < Ue; He++) {
        const Xe = W[He];
        te = [];
        for (let Ce = 0, et = Xe.length, Ge = et - 1, Ze = Ce + 1; Ce < et; Ce++, Ge++, Ze++)
          Ge === et && (Ge = 0), Ze === et && (Ze = 0), te[Ce] = Q(Xe[Ce], Xe[Ge], Xe[Ze]);
        q.push(te), Me = Me.concat(te);
      }
      let Re;
      if (C === 0)
        Re = kr.triangulateShape(pe, W);
      else {
        const He = [], Ue = [];
        for (let Xe = 0; Xe < C; Xe++) {
          const Ce = Xe / C, et = b * Math.cos(Ce * Math.PI / 2), Ge = R * Math.sin(Ce * Math.PI / 2) + w;
          for (let Ze = 0, At = pe.length; Ze < At; Ze++) {
            const Bt = P(pe[Ze], fe[Ze], Ge);
            ut(Bt.x, Bt.y, -et), Ce === 0 && He.push(Bt);
          }
          for (let Ze = 0, At = oe; Ze < At; Ze++) {
            const Bt = W[Ze];
            te = q[Ze];
            const Z = [];
            for (let H = 0, me = Bt.length; H < me; H++) {
              const Te = P(Bt[H], te[H], Ge);
              ut(Te.x, Te.y, -et), Ce === 0 && Z.push(Te);
            }
            Ce === 0 && Ue.push(Z);
          }
        }
        Re = kr.triangulateShape(He, Ue);
      }
      const Ne = Re.length, he = R + w;
      for (let He = 0; He < K; He++) {
        const Ue = M ? P(z[He], Me[He], he) : z[He];
        O ? (Y.copy(I.normals[0]).multiplyScalar(Ue.x), V.copy(I.binormals[0]).multiplyScalar(Ue.y), k.copy(N[0]).add(Y).add(V), ut(k.x, k.y, k.z)) : ut(Ue.x, Ue.y, 0);
      }
      for (let He = 1; He <= S; He++)
        for (let Ue = 0; Ue < K; Ue++) {
          const Xe = M ? P(z[Ue], Me[Ue], he) : z[Ue];
          O ? (Y.copy(I.normals[He]).multiplyScalar(Xe.x), V.copy(I.binormals[He]).multiplyScalar(Xe.y), k.copy(N[He]).add(Y).add(V), ut(k.x, k.y, k.z)) : ut(Xe.x, Xe.y, x / S * He);
        }
      for (let He = C - 1; He >= 0; He--) {
        const Ue = He / C, Xe = b * Math.cos(Ue * Math.PI / 2), Ce = R * Math.sin(Ue * Math.PI / 2) + w;
        for (let et = 0, Ge = pe.length; et < Ge; et++) {
          const Ze = P(pe[et], fe[et], Ce);
          ut(Ze.x, Ze.y, x + Xe);
        }
        for (let et = 0, Ge = W.length; et < Ge; et++) {
          const Ze = W[et];
          te = q[et];
          for (let At = 0, Bt = Ze.length; At < Bt; At++) {
            const Z = P(Ze[At], te[At], Ce);
            O ? ut(Z.x, Z.y + N[S - 1].y, N[S - 1].x + Xe) : ut(Z.x, Z.y, x + Xe);
          }
        }
      }
      we(), Fe();
      function we() {
        const He = r.length / 3;
        if (M) {
          let Ue = 0, Xe = K * Ue;
          for (let Ce = 0; Ce < Ne; Ce++) {
            const et = Re[Ce];
            Tt(et[2] + Xe, et[1] + Xe, et[0] + Xe);
          }
          Ue = S + C * 2, Xe = K * Ue;
          for (let Ce = 0; Ce < Ne; Ce++) {
            const et = Re[Ce];
            Tt(et[0] + Xe, et[1] + Xe, et[2] + Xe);
          }
        } else {
          for (let Ue = 0; Ue < Ne; Ue++) {
            const Xe = Re[Ue];
            Tt(Xe[2], Xe[1], Xe[0]);
          }
          for (let Ue = 0; Ue < Ne; Ue++) {
            const Xe = Re[Ue];
            Tt(Xe[0] + K * S, Xe[1] + K * S, Xe[2] + K * S);
          }
        }
        i.addGroup(He, r.length / 3 - He, 0);
      }
      function Fe() {
        const He = r.length / 3;
        let Ue = 0;
        $e(pe, Ue), Ue += pe.length;
        for (let Xe = 0, Ce = W.length; Xe < Ce; Xe++) {
          const et = W[Xe];
          $e(et, Ue), Ue += et.length;
        }
        i.addGroup(He, r.length / 3 - He, 1);
      }
      function $e(He, Ue) {
        let Xe = He.length;
        for (; --Xe >= 0; ) {
          const Ce = Xe;
          let et = Xe - 1;
          et < 0 && (et = He.length - 1);
          for (let Ge = 0, Ze = S + C * 2; Ge < Ze; Ge++) {
            const At = K * Ge, Bt = K * (Ge + 1), Z = Ue + Ce + At, H = Ue + et + At, me = Ue + et + Bt, Te = Ue + Ce + Bt;
            gn(Z, H, me, Te);
          }
        }
      }
      function ut(He, Ue, Xe) {
        v.push(He), v.push(Ue), v.push(Xe);
      }
      function Tt(He, Ue, Xe) {
        Ct(He), Ct(Ue), Ct(Xe);
        const Ce = r.length / 3, et = U.generateTopUV(i, r, Ce - 3, Ce - 2, Ce - 1);
        ee(et[0]), ee(et[1]), ee(et[2]);
      }
      function gn(He, Ue, Xe, Ce) {
        Ct(He), Ct(Ue), Ct(Ce), Ct(Ue), Ct(Xe), Ct(Ce);
        const et = r.length / 3, Ge = U.generateSideWallUV(i, r, et - 6, et - 3, et - 2, et - 1);
        ee(Ge[0]), ee(Ge[1]), ee(Ge[3]), ee(Ge[1]), ee(Ge[2]), ee(Ge[3]);
      }
      function Ct(He) {
        r.push(v[He * 3 + 0]), r.push(v[He * 3 + 1]), r.push(v[He * 3 + 2]);
      }
      function ee(He) {
        c.push(He.x), c.push(He.y);
      }
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  toJSON() {
    const e = super.toJSON(), n = this.parameters.shapes, i = this.parameters.options;
    return D3(n, i, e);
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @param {Array<Shape>} shapes - An array of shapes.
   * @return {ExtrudeGeometry} A new instance.
   */
  static fromJSON(e, n) {
    const i = [];
    for (let c = 0, h = e.shapes.length; c < h; c++) {
      const d = n[e.shapes[c]];
      i.push(d);
    }
    const r = e.options.extrudePath;
    return r !== void 0 && (e.options.extrudePath = new N0[r.type]().fromJSON(r)), new ry(i, e.options);
  }
}
const w3 = {
  generateTopUV: function(s, e, n, i, r) {
    const c = e[n * 3], h = e[n * 3 + 1], d = e[i * 3], v = e[i * 3 + 1], g = e[r * 3], S = e[r * 3 + 1];
    return [
      new De(c, h),
      new De(d, v),
      new De(g, S)
    ];
  },
  generateSideWallUV: function(s, e, n, i, r, c) {
    const h = e[n * 3], d = e[n * 3 + 1], v = e[n * 3 + 2], g = e[i * 3], S = e[i * 3 + 1], x = e[i * 3 + 2], M = e[r * 3], b = e[r * 3 + 1], R = e[r * 3 + 2], w = e[c * 3], C = e[c * 3 + 1], E = e[c * 3 + 2];
    return Math.abs(d - S) < Math.abs(h - g) ? [
      new De(h, 1 - v),
      new De(g, 1 - x),
      new De(M, 1 - R),
      new De(w, 1 - E)
    ] : [
      new De(d, 1 - v),
      new De(S, 1 - x),
      new De(b, 1 - R),
      new De(C, 1 - E)
    ];
  }
};
function D3(s, e, n) {
  if (n.shapes = [], Array.isArray(s))
    for (let i = 0, r = s.length; i < r; i++) {
      const c = s[i];
      n.shapes.push(c.uuid);
    }
  else
    n.shapes.push(s.uuid);
  return n.options = Object.assign({}, e), e.extrudePath !== void 0 && (n.options.extrudePath = e.extrudePath.toJSON()), n;
}
class oy extends Nc {
  /**
   * Constructs a new icosahedron geometry.
   *
   * @param {number} [radius=1] - Radius of the icosahedron.
   * @param {number} [detail=0] - Setting this to a value greater than `0` adds vertices making it no longer a icosahedron.
   */
  constructor(e = 1, n = 0) {
    const i = (1 + Math.sqrt(5)) / 2, r = [
      -1,
      i,
      0,
      1,
      i,
      0,
      -1,
      -i,
      0,
      1,
      -i,
      0,
      0,
      -1,
      i,
      0,
      1,
      i,
      0,
      -1,
      -i,
      0,
      1,
      -i,
      i,
      0,
      -1,
      i,
      0,
      1,
      -i,
      0,
      -1,
      -i,
      0,
      1
    ], c = [
      0,
      11,
      5,
      0,
      5,
      1,
      0,
      1,
      7,
      0,
      7,
      10,
      0,
      10,
      11,
      1,
      5,
      9,
      5,
      11,
      4,
      11,
      10,
      2,
      10,
      7,
      6,
      7,
      1,
      8,
      3,
      9,
      4,
      3,
      4,
      2,
      3,
      2,
      6,
      3,
      6,
      8,
      3,
      8,
      9,
      4,
      9,
      5,
      2,
      4,
      11,
      6,
      2,
      10,
      8,
      6,
      7,
      9,
      8,
      1
    ];
    super(r, c, e, n), this.type = "IcosahedronGeometry", this.parameters = {
      radius: e,
      detail: n
    };
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {IcosahedronGeometry} A new instance.
   */
  static fromJSON(e) {
    return new oy(e.radius, e.detail);
  }
}
class ly extends Kt {
  /**
   * Constructs a new lathe geometry.
   *
   * @param {Array<Vector2|Vector3>} [points] - An array of points in 2D space. The x-coordinate of each point
   * must be greater than zero.
   * @param {number} [segments=12] - The number of circumference segments to generate.
   * @param {number} [phiStart=0] - The starting angle in radians.
   * @param {number} [phiLength=Math.PI*2] - The radian (0 to 2PI) range of the lathed section 2PI is a
   * closed lathe, less than 2PI is a portion.
   */
  constructor(e = [new De(0, -0.5), new De(0.5, 0), new De(0, 0.5)], n = 12, i = 0, r = Math.PI * 2) {
    super(), this.type = "LatheGeometry", this.parameters = {
      points: e,
      segments: n,
      phiStart: i,
      phiLength: r
    }, n = Math.floor(n), r = Vt(r, 0, Math.PI * 2);
    const c = [], h = [], d = [], v = [], g = [], S = 1 / n, x = new j(), M = new De(), b = new j(), R = new j(), w = new j();
    let C = 0, E = 0;
    for (let U = 0; U <= e.length - 1; U++)
      switch (U) {
        case 0:
          C = e[U + 1].x - e[U].x, E = e[U + 1].y - e[U].y, b.x = E * 1, b.y = -C, b.z = E * 0, w.copy(b), b.normalize(), v.push(b.x, b.y, b.z);
          break;
        case e.length - 1:
          v.push(w.x, w.y, w.z);
          break;
        default:
          C = e[U + 1].x - e[U].x, E = e[U + 1].y - e[U].y, b.x = E * 1, b.y = -C, b.z = E * 0, R.copy(b), b.x += w.x, b.y += w.y, b.z += w.z, b.normalize(), v.push(b.x, b.y, b.z), w.copy(R);
      }
    for (let U = 0; U <= n; U++) {
      const N = i + U * S * r, O = Math.sin(N), I = Math.cos(N);
      for (let V = 0; V <= e.length - 1; V++) {
        x.x = e[V].x * O, x.y = e[V].y, x.z = e[V].x * I, h.push(x.x, x.y, x.z), M.x = U / n, M.y = V / (e.length - 1), d.push(M.x, M.y);
        const Y = v[3 * V + 0] * O, k = v[3 * V + 1], B = v[3 * V + 0] * I;
        g.push(Y, k, B);
      }
    }
    for (let U = 0; U < n; U++)
      for (let N = 0; N < e.length - 1; N++) {
        const O = N + U * e.length, I = O, V = O + e.length, Y = O + e.length + 1, k = O + 1;
        c.push(I, V, k), c.push(Y, k, V);
      }
    this.setIndex(c), this.setAttribute("position", new yt(h, 3)), this.setAttribute("uv", new yt(d, 2)), this.setAttribute("normal", new yt(g, 3));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {LatheGeometry} A new instance.
   */
  static fromJSON(e) {
    return new ly(e.points, e.segments, e.phiStart, e.phiLength);
  }
}
class mm extends Nc {
  /**
   * Constructs a new octahedron geometry.
   *
   * @param {number} [radius=1] - Radius of the octahedron.
   * @param {number} [detail=0] - Setting this to a value greater than `0` adds vertices making it no longer a octahedron.
   */
  constructor(e = 1, n = 0) {
    const i = [
      1,
      0,
      0,
      -1,
      0,
      0,
      0,
      1,
      0,
      0,
      -1,
      0,
      0,
      0,
      1,
      0,
      0,
      -1
    ], r = [
      0,
      2,
      4,
      0,
      4,
      3,
      0,
      3,
      5,
      0,
      5,
      2,
      1,
      2,
      5,
      1,
      5,
      3,
      1,
      3,
      4,
      1,
      4,
      2
    ];
    super(i, r, e, n), this.type = "OctahedronGeometry", this.parameters = {
      radius: e,
      detail: n
    };
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {OctahedronGeometry} A new instance.
   */
  static fromJSON(e) {
    return new mm(e.radius, e.detail);
  }
}
class $h extends Kt {
  /**
   * Constructs a new plane geometry.
   *
   * @param {number} [width=1] - The width along the X axis.
   * @param {number} [height=1] - The height along the Y axis
   * @param {number} [widthSegments=1] - The number of segments along the X axis.
   * @param {number} [heightSegments=1] - The number of segments along the Y axis.
   */
  constructor(e = 1, n = 1, i = 1, r = 1) {
    super(), this.type = "PlaneGeometry", this.parameters = {
      width: e,
      height: n,
      widthSegments: i,
      heightSegments: r
    };
    const c = e / 2, h = n / 2, d = Math.floor(i), v = Math.floor(r), g = d + 1, S = v + 1, x = e / d, M = n / v, b = [], R = [], w = [], C = [];
    for (let E = 0; E < S; E++) {
      const U = E * M - h;
      for (let N = 0; N < g; N++) {
        const O = N * x - c;
        R.push(O, -U, 0), w.push(0, 0, 1), C.push(N / d), C.push(1 - E / v);
      }
    }
    for (let E = 0; E < v; E++)
      for (let U = 0; U < d; U++) {
        const N = U + g * E, O = U + g * (E + 1), I = U + 1 + g * (E + 1), V = U + 1 + g * E;
        b.push(N, O, V), b.push(O, I, V);
      }
    this.setIndex(b), this.setAttribute("position", new yt(R, 3)), this.setAttribute("normal", new yt(w, 3)), this.setAttribute("uv", new yt(C, 2));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {PlaneGeometry} A new instance.
   */
  static fromJSON(e) {
    return new $h(e.width, e.height, e.widthSegments, e.heightSegments);
  }
}
class cy extends Kt {
  /**
   * Constructs a new ring geometry.
   *
   * @param {number} [innerRadius=0.5] - The inner radius of the ring.
   * @param {number} [outerRadius=1] - The outer radius of the ring.
   * @param {number} [thetaSegments=32] - Number of segments. A higher number means the ring will be more round. Minimum is `3`.
   * @param {number} [phiSegments=1] - Number of segments per ring segment. Minimum is `1`.
   * @param {number} [thetaStart=0] - Starting angle in radians.
   * @param {number} [thetaLength=Math.PI*2] - Central angle in radians.
   */
  constructor(e = 0.5, n = 1, i = 32, r = 1, c = 0, h = Math.PI * 2) {
    super(), this.type = "RingGeometry", this.parameters = {
      innerRadius: e,
      outerRadius: n,
      thetaSegments: i,
      phiSegments: r,
      thetaStart: c,
      thetaLength: h
    }, i = Math.max(3, i), r = Math.max(1, r);
    const d = [], v = [], g = [], S = [];
    let x = e;
    const M = (n - e) / r, b = new j(), R = new De();
    for (let w = 0; w <= r; w++) {
      for (let C = 0; C <= i; C++) {
        const E = c + C / i * h;
        b.x = x * Math.cos(E), b.y = x * Math.sin(E), v.push(b.x, b.y, b.z), g.push(0, 0, 1), R.x = (b.x / n + 1) / 2, R.y = (b.y / n + 1) / 2, S.push(R.x, R.y);
      }
      x += M;
    }
    for (let w = 0; w < r; w++) {
      const C = w * (i + 1);
      for (let E = 0; E < i; E++) {
        const U = E + C, N = U, O = U + i + 1, I = U + i + 2, V = U + 1;
        d.push(N, O, V), d.push(O, I, V);
      }
    }
    this.setIndex(d), this.setAttribute("position", new yt(v, 3)), this.setAttribute("normal", new yt(g, 3)), this.setAttribute("uv", new yt(S, 2));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {RingGeometry} A new instance.
   */
  static fromJSON(e) {
    return new cy(e.innerRadius, e.outerRadius, e.thetaSegments, e.phiSegments, e.thetaStart, e.thetaLength);
  }
}
class uy extends Kt {
  /**
   * Constructs a new shape geometry.
   *
   * @param {Shape|Array<Shape>} [shapes] - A shape or an array of shapes.
   * @param {number} [curveSegments=12] - Number of segments per shape.
   */
  constructor(e = new Zu([new De(0, 0.5), new De(-0.5, -0.5), new De(0.5, -0.5)]), n = 12) {
    super(), this.type = "ShapeGeometry", this.parameters = {
      shapes: e,
      curveSegments: n
    };
    const i = [], r = [], c = [], h = [];
    let d = 0, v = 0;
    if (Array.isArray(e) === !1)
      g(e);
    else
      for (let S = 0; S < e.length; S++)
        g(e[S]), this.addGroup(d, v, S), d += v, v = 0;
    this.setIndex(i), this.setAttribute("position", new yt(r, 3)), this.setAttribute("normal", new yt(c, 3)), this.setAttribute("uv", new yt(h, 2));
    function g(S) {
      const x = r.length / 3, M = S.extractPoints(n);
      let b = M.shape;
      const R = M.holes;
      kr.isClockWise(b) === !1 && (b = b.reverse());
      for (let C = 0, E = R.length; C < E; C++) {
        const U = R[C];
        kr.isClockWise(U) === !0 && (R[C] = U.reverse());
      }
      const w = kr.triangulateShape(b, R);
      for (let C = 0, E = R.length; C < E; C++) {
        const U = R[C];
        b = b.concat(U);
      }
      for (let C = 0, E = b.length; C < E; C++) {
        const U = b[C];
        r.push(U.x, U.y, 0), c.push(0, 0, 1), h.push(U.x, U.y);
      }
      for (let C = 0, E = w.length; C < E; C++) {
        const U = w[C], N = U[0] + x, O = U[1] + x, I = U[2] + x;
        i.push(N, O, I), v += 3;
      }
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  toJSON() {
    const e = super.toJSON(), n = this.parameters.shapes;
    return U3(n, e);
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @param {Array<Shape>} shapes - An array of shapes.
   * @return {ShapeGeometry} A new instance.
   */
  static fromJSON(e, n) {
    const i = [];
    for (let r = 0, c = e.shapes.length; r < c; r++) {
      const h = n[e.shapes[r]];
      i.push(h);
    }
    return new uy(i, e.curveSegments);
  }
}
function U3(s, e) {
  if (e.shapes = [], Array.isArray(s))
    for (let n = 0, i = s.length; n < i; n++) {
      const r = s[n];
      e.shapes.push(r.uuid);
    }
  else
    e.shapes.push(s.uuid);
  return e;
}
class vm extends Kt {
  /**
   * Constructs a new sphere geometry.
   *
   * @param {number} [radius=1] - The sphere radius.
   * @param {number} [widthSegments=32] - The number of horizontal segments. Minimum value is `3`.
   * @param {number} [heightSegments=16] - The number of vertical segments. Minimum value is `2`.
   * @param {number} [phiStart=0] - The horizontal starting angle in radians.
   * @param {number} [phiLength=Math.PI*2] - The horizontal sweep angle size.
   * @param {number} [thetaStart=0] - The vertical starting angle in radians.
   * @param {number} [thetaLength=Math.PI] - The vertical sweep angle size.
   */
  constructor(e = 1, n = 32, i = 16, r = 0, c = Math.PI * 2, h = 0, d = Math.PI) {
    super(), this.type = "SphereGeometry", this.parameters = {
      radius: e,
      widthSegments: n,
      heightSegments: i,
      phiStart: r,
      phiLength: c,
      thetaStart: h,
      thetaLength: d
    }, n = Math.max(3, Math.floor(n)), i = Math.max(2, Math.floor(i));
    const v = Math.min(h + d, Math.PI);
    let g = 0;
    const S = [], x = new j(), M = new j(), b = [], R = [], w = [], C = [];
    for (let E = 0; E <= i; E++) {
      const U = [], N = E / i;
      let O = 0;
      E === 0 && h === 0 ? O = 0.5 / n : E === i && v === Math.PI && (O = -0.5 / n);
      for (let I = 0; I <= n; I++) {
        const V = I / n;
        x.x = -e * Math.cos(r + V * c) * Math.sin(h + N * d), x.y = e * Math.cos(h + N * d), x.z = e * Math.sin(r + V * c) * Math.sin(h + N * d), R.push(x.x, x.y, x.z), M.copy(x).normalize(), w.push(M.x, M.y, M.z), C.push(V + O, 1 - N), U.push(g++);
      }
      S.push(U);
    }
    for (let E = 0; E < i; E++)
      for (let U = 0; U < n; U++) {
        const N = S[E][U + 1], O = S[E][U], I = S[E + 1][U], V = S[E + 1][U + 1];
        (E !== 0 || h > 0) && b.push(N, O, V), (E !== i - 1 || v < Math.PI) && b.push(O, I, V);
      }
    this.setIndex(b), this.setAttribute("position", new yt(R, 3)), this.setAttribute("normal", new yt(w, 3)), this.setAttribute("uv", new yt(C, 2));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {SphereGeometry} A new instance.
   */
  static fromJSON(e) {
    return new vm(e.radius, e.widthSegments, e.heightSegments, e.phiStart, e.phiLength, e.thetaStart, e.thetaLength);
  }
}
class fy extends Nc {
  /**
   * Constructs a new tetrahedron geometry.
   *
   * @param {number} [radius=1] - Radius of the tetrahedron.
   * @param {number} [detail=0] - Setting this to a value greater than `0` adds vertices making it no longer a tetrahedron.
   */
  constructor(e = 1, n = 0) {
    const i = [
      1,
      1,
      1,
      -1,
      -1,
      1,
      -1,
      1,
      -1,
      1,
      -1,
      -1
    ], r = [
      2,
      1,
      0,
      0,
      3,
      2,
      1,
      3,
      0,
      2,
      3,
      1
    ];
    super(i, r, e, n), this.type = "TetrahedronGeometry", this.parameters = {
      radius: e,
      detail: n
    };
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {TetrahedronGeometry} A new instance.
   */
  static fromJSON(e) {
    return new fy(e.radius, e.detail);
  }
}
class hy extends Kt {
  /**
   * Constructs a new torus geometry.
   *
   * @param {number} [radius=1] - Radius of the torus, from the center of the torus to the center of the tube.
   * @param {number} [tube=0.4] - Radius of the tube. Must be smaller than `radius`.
   * @param {number} [radialSegments=12] - The number of radial segments.
   * @param {number} [tubularSegments=48] - The number of tubular segments.
   * @param {number} [arc=Math.PI*2] - Central angle in radians.
   */
  constructor(e = 1, n = 0.4, i = 12, r = 48, c = Math.PI * 2) {
    super(), this.type = "TorusGeometry", this.parameters = {
      radius: e,
      tube: n,
      radialSegments: i,
      tubularSegments: r,
      arc: c
    }, i = Math.floor(i), r = Math.floor(r);
    const h = [], d = [], v = [], g = [], S = new j(), x = new j(), M = new j();
    for (let b = 0; b <= i; b++)
      for (let R = 0; R <= r; R++) {
        const w = R / r * c, C = b / i * Math.PI * 2;
        x.x = (e + n * Math.cos(C)) * Math.cos(w), x.y = (e + n * Math.cos(C)) * Math.sin(w), x.z = n * Math.sin(C), d.push(x.x, x.y, x.z), S.x = e * Math.cos(w), S.y = e * Math.sin(w), M.subVectors(x, S).normalize(), v.push(M.x, M.y, M.z), g.push(R / r), g.push(b / i);
      }
    for (let b = 1; b <= i; b++)
      for (let R = 1; R <= r; R++) {
        const w = (r + 1) * b + R - 1, C = (r + 1) * (b - 1) + R - 1, E = (r + 1) * (b - 1) + R, U = (r + 1) * b + R;
        h.push(w, C, U), h.push(C, E, U);
      }
    this.setIndex(h), this.setAttribute("position", new yt(d, 3)), this.setAttribute("normal", new yt(v, 3)), this.setAttribute("uv", new yt(g, 2));
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {TorusGeometry} A new instance.
   */
  static fromJSON(e) {
    return new hy(e.radius, e.tube, e.radialSegments, e.tubularSegments, e.arc);
  }
}
class dy extends Kt {
  /**
   * Constructs a new torus knot geometry.
   *
   * @param {number} [radius=1] - Radius of the torus knot.
   * @param {number} [tube=0.4] - Radius of the tube.
   * @param {number} [tubularSegments=64] - The number of tubular segments.
   * @param {number} [radialSegments=8] - The number of radial segments.
   * @param {number} [p=2] - This value determines, how many times the geometry winds around its axis of rotational symmetry.
   * @param {number} [q=3] - This value determines, how many times the geometry winds around a circle in the interior of the torus.
   */
  constructor(e = 1, n = 0.4, i = 64, r = 8, c = 2, h = 3) {
    super(), this.type = "TorusKnotGeometry", this.parameters = {
      radius: e,
      tube: n,
      tubularSegments: i,
      radialSegments: r,
      p: c,
      q: h
    }, i = Math.floor(i), r = Math.floor(r);
    const d = [], v = [], g = [], S = [], x = new j(), M = new j(), b = new j(), R = new j(), w = new j(), C = new j(), E = new j();
    for (let N = 0; N <= i; ++N) {
      const O = N / i * c * Math.PI * 2;
      U(O, c, h, e, b), U(O + 0.01, c, h, e, R), C.subVectors(R, b), E.addVectors(R, b), w.crossVectors(C, E), E.crossVectors(w, C), w.normalize(), E.normalize();
      for (let I = 0; I <= r; ++I) {
        const V = I / r * Math.PI * 2, Y = -n * Math.cos(V), k = n * Math.sin(V);
        x.x = b.x + (Y * E.x + k * w.x), x.y = b.y + (Y * E.y + k * w.y), x.z = b.z + (Y * E.z + k * w.z), v.push(x.x, x.y, x.z), M.subVectors(x, b).normalize(), g.push(M.x, M.y, M.z), S.push(N / i), S.push(I / r);
      }
    }
    for (let N = 1; N <= i; N++)
      for (let O = 1; O <= r; O++) {
        const I = (r + 1) * (N - 1) + (O - 1), V = (r + 1) * N + (O - 1), Y = (r + 1) * N + O, k = (r + 1) * (N - 1) + O;
        d.push(I, V, k), d.push(V, Y, k);
      }
    this.setIndex(d), this.setAttribute("position", new yt(v, 3)), this.setAttribute("normal", new yt(g, 3)), this.setAttribute("uv", new yt(S, 2));
    function U(N, O, I, V, Y) {
      const k = Math.cos(N), B = Math.sin(N), z = I / O * N, W = Math.cos(z);
      Y.x = V * (2 + W) * 0.5 * k, Y.y = V * (2 + W) * B * 0.5, Y.z = V * Math.sin(z) * 0.5;
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {TorusKnotGeometry} A new instance.
   */
  static fromJSON(e) {
    return new dy(e.radius, e.tube, e.tubularSegments, e.radialSegments, e.p, e.q);
  }
}
class py extends Kt {
  /**
   * Constructs a new tube geometry.
   *
   * @param {Curve} [path=QuadraticBezierCurve3] - A 3D curve defining the path of the tube.
   * @param {number} [tubularSegments=64] - The number of segments that make up the tube.
   * @param {number} [radius=1] -The radius of the tube.
   * @param {number} [radialSegments=8] - The number of segments that make up the cross-section.
   * @param {boolean} [closed=false] - Whether the tube is closed or not.
   */
  constructor(e = new cx(new j(-1, -1, 0), new j(-1, 1, 0), new j(1, 1, 0)), n = 64, i = 1, r = 8, c = !1) {
    super(), this.type = "TubeGeometry", this.parameters = {
      path: e,
      tubularSegments: n,
      radius: i,
      radialSegments: r,
      closed: c
    };
    const h = e.computeFrenetFrames(n, c);
    this.tangents = h.tangents, this.normals = h.normals, this.binormals = h.binormals;
    const d = new j(), v = new j(), g = new De();
    let S = new j();
    const x = [], M = [], b = [], R = [];
    w(), this.setIndex(R), this.setAttribute("position", new yt(x, 3)), this.setAttribute("normal", new yt(M, 3)), this.setAttribute("uv", new yt(b, 2));
    function w() {
      for (let N = 0; N < n; N++)
        C(N);
      C(c === !1 ? n : 0), U(), E();
    }
    function C(N) {
      S = e.getPointAt(N / n, S);
      const O = h.normals[N], I = h.binormals[N];
      for (let V = 0; V <= r; V++) {
        const Y = V / r * Math.PI * 2, k = Math.sin(Y), B = -Math.cos(Y);
        v.x = B * O.x + k * I.x, v.y = B * O.y + k * I.y, v.z = B * O.z + k * I.z, v.normalize(), M.push(v.x, v.y, v.z), d.x = S.x + i * v.x, d.y = S.y + i * v.y, d.z = S.z + i * v.z, x.push(d.x, d.y, d.z);
      }
    }
    function E() {
      for (let N = 1; N <= n; N++)
        for (let O = 1; O <= r; O++) {
          const I = (r + 1) * (N - 1) + (O - 1), V = (r + 1) * N + (O - 1), Y = (r + 1) * N + O, k = (r + 1) * (N - 1) + O;
          R.push(I, V, k), R.push(V, Y, k);
        }
    }
    function U() {
      for (let N = 0; N <= n; N++)
        for (let O = 0; O <= r; O++)
          g.x = N / n, g.y = O / r, b.push(g.x, g.y);
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.path = this.parameters.path.toJSON(), e;
  }
  /**
   * Factory method for creating an instance of this class from the given
   * JSON object.
   *
   * @param {Object} data - A JSON object representing the serialized geometry.
   * @return {TubeGeometry} A new instance.
   */
  static fromJSON(e) {
    return new py(
      new N0[e.path.type]().fromJSON(e.path),
      e.tubularSegments,
      e.radius,
      e.radialSegments,
      e.closed
    );
  }
}
class ZE extends Kt {
  /**
   * Constructs a new wireframe geometry.
   *
   * @param {?BufferGeometry} [geometry=null] - The geometry.
   */
  constructor(e = null) {
    if (super(), this.type = "WireframeGeometry", this.parameters = {
      geometry: e
    }, e !== null) {
      const n = [], i = /* @__PURE__ */ new Set(), r = new j(), c = new j();
      if (e.index !== null) {
        const h = e.attributes.position, d = e.index;
        let v = e.groups;
        v.length === 0 && (v = [{ start: 0, count: d.count, materialIndex: 0 }]);
        for (let g = 0, S = v.length; g < S; ++g) {
          const x = v[g], M = x.start, b = x.count;
          for (let R = M, w = M + b; R < w; R += 3)
            for (let C = 0; C < 3; C++) {
              const E = d.getX(R + C), U = d.getX(R + (C + 1) % 3);
              r.fromBufferAttribute(h, E), c.fromBufferAttribute(h, U), hM(r, c, i) === !0 && (n.push(r.x, r.y, r.z), n.push(c.x, c.y, c.z));
            }
        }
      } else {
        const h = e.attributes.position;
        for (let d = 0, v = h.count / 3; d < v; d++)
          for (let g = 0; g < 3; g++) {
            const S = 3 * d + g, x = 3 * d + (g + 1) % 3;
            r.fromBufferAttribute(h, S), c.fromBufferAttribute(h, x), hM(r, c, i) === !0 && (n.push(r.x, r.y, r.z), n.push(c.x, c.y, c.z));
          }
      }
      this.setAttribute("position", new yt(n, 3));
    }
  }
  copy(e) {
    return super.copy(e), this.parameters = Object.assign({}, e.parameters), this;
  }
}
function hM(s, e, n) {
  const i = `${s.x},${s.y},${s.z}-${e.x},${e.y},${e.z}`, r = `${e.x},${e.y},${e.z}-${s.x},${s.y},${s.z}`;
  return n.has(i) === !0 || n.has(r) === !0 ? !1 : (n.add(i), n.add(r), !0);
}
var dM = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  BoxGeometry: af,
  CapsuleGeometry: ny,
  CircleGeometry: iy,
  ConeGeometry: pm,
  CylinderGeometry: dm,
  DodecahedronGeometry: ay,
  EdgesGeometry: IE,
  ExtrudeGeometry: ry,
  IcosahedronGeometry: oy,
  LatheGeometry: ly,
  OctahedronGeometry: mm,
  PlaneGeometry: $h,
  PolyhedronGeometry: Nc,
  RingGeometry: cy,
  ShapeGeometry: uy,
  SphereGeometry: vm,
  TetrahedronGeometry: fy,
  TorusGeometry: hy,
  TorusKnotGeometry: dy,
  TubeGeometry: py,
  WireframeGeometry: ZE
});
class jE extends sa {
  /**
   * Constructs a new shadow material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(e) {
    super(), this.isShadowMaterial = !0, this.type = "ShadowMaterial", this.color = new lt(0), this.transparent = !0, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.fog = e.fog, this;
  }
}
class QE extends ts {
  /**
   * Constructs a new raw shader material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(e) {
    super(e), this.isRawShaderMaterial = !0, this.type = "RawShaderMaterial";
  }
}
class fx extends sa {
  /**
   * Constructs a new mesh standard material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(e) {
    super(), this.isMeshStandardMaterial = !0, this.type = "MeshStandardMaterial", this.defines = { STANDARD: "" }, this.color = new lt(16777215), this.roughness = 1, this.metalness = 0, this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new lt(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Dc, this.normalScale = new De(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.roughnessMap = null, this.metalnessMap = null, this.alphaMap = null, this.envMap = null, this.envMapRotation = new Xs(), this.envMapIntensity = 1, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.flatShading = !1, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.defines = { STANDARD: "" }, this.color.copy(e.color), this.roughness = e.roughness, this.metalness = e.metalness, this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.roughnessMap = e.roughnessMap, this.metalnessMap = e.metalnessMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.envMapRotation.copy(e.envMapRotation), this.envMapIntensity = e.envMapIntensity, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.flatShading = e.flatShading, this.fog = e.fog, this;
  }
}
class KE extends fx {
  /**
   * Constructs a new mesh physical material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(e) {
    super(), this.isMeshPhysicalMaterial = !0, this.defines = {
      STANDARD: "",
      PHYSICAL: ""
    }, this.type = "MeshPhysicalMaterial", this.anisotropyRotation = 0, this.anisotropyMap = null, this.clearcoatMap = null, this.clearcoatRoughness = 0, this.clearcoatRoughnessMap = null, this.clearcoatNormalScale = new De(1, 1), this.clearcoatNormalMap = null, this.ior = 1.5, Object.defineProperty(this, "reflectivity", {
      get: function() {
        return Vt(2.5 * (this.ior - 1) / (this.ior + 1), 0, 1);
      },
      set: function(n) {
        this.ior = (1 + 0.4 * n) / (1 - 0.4 * n);
      }
    }), this.iridescenceMap = null, this.iridescenceIOR = 1.3, this.iridescenceThicknessRange = [100, 400], this.iridescenceThicknessMap = null, this.sheenColor = new lt(0), this.sheenColorMap = null, this.sheenRoughness = 1, this.sheenRoughnessMap = null, this.transmissionMap = null, this.thickness = 0, this.thicknessMap = null, this.attenuationDistance = 1 / 0, this.attenuationColor = new lt(1, 1, 1), this.specularIntensity = 1, this.specularIntensityMap = null, this.specularColor = new lt(1, 1, 1), this.specularColorMap = null, this._anisotropy = 0, this._clearcoat = 0, this._dispersion = 0, this._iridescence = 0, this._sheen = 0, this._transmission = 0, this.setValues(e);
  }
  /**
   * The anisotropy strength.
   *
   * @type {number}
   * @default 0
   */
  get anisotropy() {
    return this._anisotropy;
  }
  set anisotropy(e) {
    this._anisotropy > 0 != e > 0 && this.version++, this._anisotropy = e;
  }
  /**
   * Represents the intensity of the clear coat layer, from `0.0` to `1.0`. Use
   * clear coat related properties to enable multilayer materials that have a
   * thin translucent layer over the base layer.
   *
   * @type {number}
   * @default 0
   */
  get clearcoat() {
    return this._clearcoat;
  }
  set clearcoat(e) {
    this._clearcoat > 0 != e > 0 && this.version++, this._clearcoat = e;
  }
  /**
   * The intensity of the iridescence layer, simulating RGB color shift based on the angle between
   * the surface and the viewer, from `0.0` to `1.0`.
   *
   * @type {number}
   * @default 0
   */
  get iridescence() {
    return this._iridescence;
  }
  set iridescence(e) {
    this._iridescence > 0 != e > 0 && this.version++, this._iridescence = e;
  }
  /**
   * Defines the strength of the angular separation of colors (chromatic aberration) transmitting
   * through a relatively clear volume. Any value zero or larger is valid, the typical range of
   * realistic values is `[0, 1]`. This property can be only be used with transmissive objects.
   *
   * @type {number}
   * @default 0
   */
  get dispersion() {
    return this._dispersion;
  }
  set dispersion(e) {
    this._dispersion > 0 != e > 0 && this.version++, this._dispersion = e;
  }
  /**
   * The intensity of the sheen layer, from `0.0` to `1.0`.
   *
   * @type {number}
   * @default 0
   */
  get sheen() {
    return this._sheen;
  }
  set sheen(e) {
    this._sheen > 0 != e > 0 && this.version++, this._sheen = e;
  }
  /**
   * Degree of transmission (or optical transparency), from `0.0` to `1.0`.
   *
   * Thin, transparent or semitransparent, plastic or glass materials remain
   * largely reflective even if they are fully transmissive. The transmission
   * property can be used to model these materials.
   *
   * When transmission is non-zero, `opacity` should be  set to `1`.
   *
   * @type {number}
   * @default 0
   */
  get transmission() {
    return this._transmission;
  }
  set transmission(e) {
    this._transmission > 0 != e > 0 && this.version++, this._transmission = e;
  }
  copy(e) {
    return super.copy(e), this.defines = {
      STANDARD: "",
      PHYSICAL: ""
    }, this.anisotropy = e.anisotropy, this.anisotropyRotation = e.anisotropyRotation, this.anisotropyMap = e.anisotropyMap, this.clearcoat = e.clearcoat, this.clearcoatMap = e.clearcoatMap, this.clearcoatRoughness = e.clearcoatRoughness, this.clearcoatRoughnessMap = e.clearcoatRoughnessMap, this.clearcoatNormalMap = e.clearcoatNormalMap, this.clearcoatNormalScale.copy(e.clearcoatNormalScale), this.dispersion = e.dispersion, this.ior = e.ior, this.iridescence = e.iridescence, this.iridescenceMap = e.iridescenceMap, this.iridescenceIOR = e.iridescenceIOR, this.iridescenceThicknessRange = [...e.iridescenceThicknessRange], this.iridescenceThicknessMap = e.iridescenceThicknessMap, this.sheen = e.sheen, this.sheenColor.copy(e.sheenColor), this.sheenColorMap = e.sheenColorMap, this.sheenRoughness = e.sheenRoughness, this.sheenRoughnessMap = e.sheenRoughnessMap, this.transmission = e.transmission, this.transmissionMap = e.transmissionMap, this.thickness = e.thickness, this.thicknessMap = e.thicknessMap, this.attenuationDistance = e.attenuationDistance, this.attenuationColor.copy(e.attenuationColor), this.specularIntensity = e.specularIntensity, this.specularIntensityMap = e.specularIntensityMap, this.specularColor.copy(e.specularColor), this.specularColorMap = e.specularColorMap, this;
  }
}
class JE extends sa {
  /**
   * Constructs a new mesh phong material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(e) {
    super(), this.isMeshPhongMaterial = !0, this.type = "MeshPhongMaterial", this.color = new lt(16777215), this.specular = new lt(1118481), this.shininess = 30, this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new lt(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Dc, this.normalScale = new De(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.envMapRotation = new Xs(), this.combine = cm, this.reflectivity = 1, this.refractionRatio = 0.98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.flatShading = !1, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.specular.copy(e.specular), this.shininess = e.shininess, this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.specularMap = e.specularMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.envMapRotation.copy(e.envMapRotation), this.combine = e.combine, this.reflectivity = e.reflectivity, this.refractionRatio = e.refractionRatio, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.flatShading = e.flatShading, this.fog = e.fog, this;
  }
}
class $E extends sa {
  /**
   * Constructs a new mesh toon material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(e) {
    super(), this.isMeshToonMaterial = !0, this.defines = { TOON: "" }, this.type = "MeshToonMaterial", this.color = new lt(16777215), this.map = null, this.gradientMap = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new lt(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Dc, this.normalScale = new De(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.alphaMap = null, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.gradientMap = e.gradientMap, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.alphaMap = e.alphaMap, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.fog = e.fog, this;
  }
}
class hx extends sa {
  /**
   * Constructs a new mesh normal material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(e) {
    super(), this.isMeshNormalMaterial = !0, this.type = "MeshNormalMaterial", this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Dc, this.normalScale = new De(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.wireframe = !1, this.wireframeLinewidth = 1, this.flatShading = !1, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.flatShading = e.flatShading, this;
  }
}
class eT extends sa {
  /**
   * Constructs a new mesh lambert material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(e) {
    super(), this.isMeshLambertMaterial = !0, this.type = "MeshLambertMaterial", this.color = new lt(16777215), this.map = null, this.lightMap = null, this.lightMapIntensity = 1, this.aoMap = null, this.aoMapIntensity = 1, this.emissive = new lt(0), this.emissiveIntensity = 1, this.emissiveMap = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Dc, this.normalScale = new De(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.specularMap = null, this.alphaMap = null, this.envMap = null, this.envMapRotation = new Xs(), this.combine = cm, this.reflectivity = 1, this.refractionRatio = 0.98, this.wireframe = !1, this.wireframeLinewidth = 1, this.wireframeLinecap = "round", this.wireframeLinejoin = "round", this.flatShading = !1, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.color.copy(e.color), this.map = e.map, this.lightMap = e.lightMap, this.lightMapIntensity = e.lightMapIntensity, this.aoMap = e.aoMap, this.aoMapIntensity = e.aoMapIntensity, this.emissive.copy(e.emissive), this.emissiveMap = e.emissiveMap, this.emissiveIntensity = e.emissiveIntensity, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.specularMap = e.specularMap, this.alphaMap = e.alphaMap, this.envMap = e.envMap, this.envMapRotation.copy(e.envMapRotation), this.combine = e.combine, this.reflectivity = e.reflectivity, this.refractionRatio = e.refractionRatio, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this.wireframeLinecap = e.wireframeLinecap, this.wireframeLinejoin = e.wireframeLinejoin, this.flatShading = e.flatShading, this.fog = e.fog, this;
  }
}
class dx extends sa {
  /**
   * Constructs a new mesh depth material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(e) {
    super(), this.isMeshDepthMaterial = !0, this.type = "MeshDepthMaterial", this.depthPacking = wc, this.map = null, this.alphaMap = null, this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.wireframe = !1, this.wireframeLinewidth = 1, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.depthPacking = e.depthPacking, this.map = e.map, this.alphaMap = e.alphaMap, this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.wireframe = e.wireframe, this.wireframeLinewidth = e.wireframeLinewidth, this;
  }
}
class px extends sa {
  /**
   * Constructs a new mesh distance material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(e) {
    super(), this.isMeshDistanceMaterial = !0, this.type = "MeshDistanceMaterial", this.map = null, this.alphaMap = null, this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.map = e.map, this.alphaMap = e.alphaMap, this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this;
  }
}
class tT extends sa {
  /**
   * Constructs a new mesh matcap material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(e) {
    super(), this.isMeshMatcapMaterial = !0, this.defines = { MATCAP: "" }, this.type = "MeshMatcapMaterial", this.color = new lt(16777215), this.matcap = null, this.map = null, this.bumpMap = null, this.bumpScale = 1, this.normalMap = null, this.normalMapType = Dc, this.normalScale = new De(1, 1), this.displacementMap = null, this.displacementScale = 1, this.displacementBias = 0, this.alphaMap = null, this.flatShading = !1, this.fog = !0, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.defines = { MATCAP: "" }, this.color.copy(e.color), this.matcap = e.matcap, this.map = e.map, this.bumpMap = e.bumpMap, this.bumpScale = e.bumpScale, this.normalMap = e.normalMap, this.normalMapType = e.normalMapType, this.normalScale.copy(e.normalScale), this.displacementMap = e.displacementMap, this.displacementScale = e.displacementScale, this.displacementBias = e.displacementBias, this.alphaMap = e.alphaMap, this.flatShading = e.flatShading, this.fog = e.fog, this;
  }
}
class nT extends ns {
  /**
   * Constructs a new line dashed material.
   *
   * @param {Object} [parameters] - An object with one or more properties
   * defining the material's appearance. Any property of the material
   * (including any property from inherited materials) can be passed
   * in here. Color values can be passed any type of value accepted
   * by {@link Color#set}.
   */
  constructor(e) {
    super(), this.isLineDashedMaterial = !0, this.type = "LineDashedMaterial", this.scale = 1, this.dashSize = 3, this.gapSize = 1, this.setValues(e);
  }
  copy(e) {
    return super.copy(e), this.scale = e.scale, this.dashSize = e.dashSize, this.gapSize = e.gapSize, this;
  }
}
function Yu(s, e) {
  return !s || s.constructor === e ? s : typeof e.BYTES_PER_ELEMENT == "number" ? new e(s) : Array.prototype.slice.call(s);
}
function iT(s) {
  return ArrayBuffer.isView(s) && !(s instanceof DataView);
}
function aT(s) {
  function e(r, c) {
    return s[r] - s[c];
  }
  const n = s.length, i = new Array(n);
  for (let r = 0; r !== n; ++r) i[r] = r;
  return i.sort(e), i;
}
function AS(s, e, n) {
  const i = s.length, r = new s.constructor(i);
  for (let c = 0, h = 0; h !== i; ++c) {
    const d = n[c] * e;
    for (let v = 0; v !== e; ++v)
      r[h++] = s[d + v];
  }
  return r;
}
function mx(s, e, n, i) {
  let r = 1, c = s[0];
  for (; c !== void 0 && c[i] === void 0; )
    c = s[r++];
  if (c === void 0) return;
  let h = c[i];
  if (h !== void 0)
    if (Array.isArray(h))
      do
        h = c[i], h !== void 0 && (e.push(c.time), n.push(...h)), c = s[r++];
      while (c !== void 0);
    else if (h.toArray !== void 0)
      do
        h = c[i], h !== void 0 && (e.push(c.time), h.toArray(n, n.length)), c = s[r++];
      while (c !== void 0);
    else
      do
        h = c[i], h !== void 0 && (e.push(c.time), n.push(h)), c = s[r++];
      while (c !== void 0);
}
function N3(s, e, n, i, r = 30) {
  const c = s.clone();
  c.name = e;
  const h = [];
  for (let v = 0; v < c.tracks.length; ++v) {
    const g = c.tracks[v], S = g.getValueSize(), x = [], M = [];
    for (let b = 0; b < g.times.length; ++b) {
      const R = g.times[b] * r;
      if (!(R < n || R >= i)) {
        x.push(g.times[b]);
        for (let w = 0; w < S; ++w)
          M.push(g.values[b * S + w]);
      }
    }
    x.length !== 0 && (g.times = Yu(x, g.times.constructor), g.values = Yu(M, g.values.constructor), h.push(g));
  }
  c.tracks = h;
  let d = 1 / 0;
  for (let v = 0; v < c.tracks.length; ++v)
    d > c.tracks[v].times[0] && (d = c.tracks[v].times[0]);
  for (let v = 0; v < c.tracks.length; ++v)
    c.tracks[v].shift(-1 * d);
  return c.resetDuration(), c;
}
function O3(s, e = 0, n = s, i = 30) {
  i <= 0 && (i = 30);
  const r = n.tracks.length, c = e / i;
  for (let h = 0; h < r; ++h) {
    const d = n.tracks[h], v = d.ValueTypeName;
    if (v === "bool" || v === "string") continue;
    const g = s.tracks.find(function(E) {
      return E.name === d.name && E.ValueTypeName === v;
    });
    if (g === void 0) continue;
    let S = 0;
    const x = d.getValueSize();
    d.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline && (S = x / 3);
    let M = 0;
    const b = g.getValueSize();
    g.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline && (M = b / 3);
    const R = d.times.length - 1;
    let w;
    if (c <= d.times[0]) {
      const E = S, U = x - S;
      w = d.values.slice(E, U);
    } else if (c >= d.times[R]) {
      const E = R * x + S, U = E + x - S;
      w = d.values.slice(E, U);
    } else {
      const E = d.createInterpolant(), U = S, N = x - S;
      E.evaluate(c), w = E.resultBuffer.slice(U, N);
    }
    v === "quaternion" && new Es().fromArray(w).normalize().conjugate().toArray(w);
    const C = g.times.length;
    for (let E = 0; E < C; ++E) {
      const U = E * b + M;
      if (v === "quaternion")
        Es.multiplyQuaternionsFlat(
          g.values,
          U,
          w,
          0,
          g.values,
          U
        );
      else {
        const N = b - M * 2;
        for (let O = 0; O < N; ++O)
          g.values[U + O] -= w[O];
      }
    }
  }
  return s.blendMode = QS, s;
}
class L3 {
  /**
   * Converts an array to a specific type
   *
   * @static
   * @param {TypedArray|Array} array - The array to convert.
   * @param {TypedArray.constructor} type - The constructor of a type array.
   * @return {TypedArray} The converted array
   */
  static convertArray(e, n) {
    return Yu(e, n);
  }
  /**
   * Returns `true` if the given object is a typed array.
   *
   * @static
   * @param {any} object - The object to check.
   * @return {boolean} Whether the given object is a typed array.
   */
  static isTypedArray(e) {
    return iT(e);
  }
  /**
   * Returns an array by which times and values can be sorted.
   *
   * @static
   * @param {Array<number>} times - The keyframe time values.
   * @return {Array<number>} The array.
   */
  static getKeyframeOrder(e) {
    return aT(e);
  }
  /**
   * Sorts the given array by the previously computed order via `getKeyframeOrder()`.
   *
   * @static
   * @param {Array<number>} values - The values to sort.
   * @param {number} stride - The stride.
   * @param {Array<number>} order - The sort order.
   * @return {Array<number>} The sorted values.
   */
  static sortedArray(e, n, i) {
    return AS(e, n, i);
  }
  /**
   * Used for parsing AOS keyframe formats.
   *
   * @static
   * @param {Array<number>} jsonKeys - A list of JSON keyframes.
   * @param {Array<number>} times - This array will be filled with keyframe times by this method.
   * @param {Array<number>} values - This array will be filled with keyframe values by this method.
   * @param {string} valuePropertyName - The name of the property to use.
   */
  static flattenJSON(e, n, i, r) {
    mx(e, n, i, r);
  }
  /**
   * Creates a new clip, containing only the segment of the original clip between the given frames.
   *
   * @static
   * @param {AnimationClip} sourceClip - The values to sort.
   * @param {string} name - The name of the clip.
   * @param {number} startFrame - The start frame.
   * @param {number} endFrame - The end frame.
   * @param {number} [fps=30] - The FPS.
   * @return {AnimationClip} The new sub clip.
   */
  static subclip(e, n, i, r, c = 30) {
    return N3(e, n, i, r, c);
  }
  /**
   * Converts the keyframes of the given animation clip to an additive format.
   *
   * @static
   * @param {AnimationClip} targetClip - The clip to make additive.
   * @param {number} [referenceFrame=0] - The reference frame.
   * @param {AnimationClip} [referenceClip=targetClip] - The reference clip.
   * @param {number} [fps=30] - The FPS.
   * @return {AnimationClip} The updated clip which is now additive.
   */
  static makeClipAdditive(e, n = 0, i = e, r = 30) {
    return O3(e, n, i, r);
  }
}
class gm {
  /**
   * Constructs a new interpolant.
   *
   * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.
   * @param {TypedArray} sampleValues - The sample values.
   * @param {number} sampleSize - The sample size
   * @param {TypedArray} [resultBuffer] - The result buffer.
   */
  constructor(e, n, i, r) {
    this.parameterPositions = e, this._cachedIndex = 0, this.resultBuffer = r !== void 0 ? r : new n.constructor(i), this.sampleValues = n, this.valueSize = i, this.settings = null, this.DefaultSettings_ = {};
  }
  /**
   * Evaluate the interpolant at position `t`.
   *
   * @param {number} t - The interpolation factor.
   * @return {TypedArray} The result buffer.
   */
  evaluate(e) {
    const n = this.parameterPositions;
    let i = this._cachedIndex, r = n[i], c = n[i - 1];
    e: {
      t: {
        let h;
        n: {
          i: if (!(e < r)) {
            for (let d = i + 2; ; ) {
              if (r === void 0) {
                if (e < c) break i;
                return i = n.length, this._cachedIndex = i, this.copySampleValue_(i - 1);
              }
              if (i === d) break;
              if (c = r, r = n[++i], e < r)
                break t;
            }
            h = n.length;
            break n;
          }
          if (!(e >= c)) {
            const d = n[1];
            e < d && (i = 2, c = d);
            for (let v = i - 2; ; ) {
              if (c === void 0)
                return this._cachedIndex = 0, this.copySampleValue_(0);
              if (i === v) break;
              if (r = c, c = n[--i - 1], e >= c)
                break t;
            }
            h = i, i = 0;
            break n;
          }
          break e;
        }
        for (; i < h; ) {
          const d = i + h >>> 1;
          e < n[d] ? h = d : i = d + 1;
        }
        if (r = n[i], c = n[i - 1], c === void 0)
          return this._cachedIndex = 0, this.copySampleValue_(0);
        if (r === void 0)
          return i = n.length, this._cachedIndex = i, this.copySampleValue_(i - 1);
      }
      this._cachedIndex = i, this.intervalChanged_(i, c, r);
    }
    return this.interpolate_(i, c, e, r);
  }
  /**
   * Returns the interpolation settings.
   *
   * @return {Object} The interpolation settings.
   */
  getSettings_() {
    return this.settings || this.DefaultSettings_;
  }
  /**
   * Copies a sample value to the result buffer.
   *
   * @param {number} index - An index into the sample value buffer.
   * @return {TypedArray} The result buffer.
   */
  copySampleValue_(e) {
    const n = this.resultBuffer, i = this.sampleValues, r = this.valueSize, c = e * r;
    for (let h = 0; h !== r; ++h)
      n[h] = i[c + h];
    return n;
  }
  /**
   * Copies a sample value to the result buffer.
   *
   * @abstract
   * @param {number} i1 - An index into the sample value buffer.
   * @param {number} t0 - The previous interpolation factor.
   * @param {number} t - The current interpolation factor.
   * @param {number} t1 - The next interpolation factor.
   * @return {TypedArray} The result buffer.
   */
  interpolate_() {
    throw new Error("call to abstract method");
  }
  /**
   * Optional method that is executed when the interval has changed.
   *
   * @param {number} i1 - An index into the sample value buffer.
   * @param {number} t0 - The previous interpolation factor.
   * @param {number} t - The current interpolation factor.
   */
  intervalChanged_() {
  }
}
class sT extends gm {
  /**
   * Constructs a new cubic interpolant.
   *
   * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.
   * @param {TypedArray} sampleValues - The sample values.
   * @param {number} sampleSize - The sample size
   * @param {TypedArray} [resultBuffer] - The result buffer.
   */
  constructor(e, n, i, r) {
    super(e, n, i, r), this._weightPrev = -0, this._offsetPrev = -0, this._weightNext = -0, this._offsetNext = -0, this.DefaultSettings_ = {
      endingStart: Xu,
      endingEnd: Xu
    };
  }
  intervalChanged_(e, n, i) {
    const r = this.parameterPositions;
    let c = e - 2, h = e + 1, d = r[c], v = r[h];
    if (d === void 0)
      switch (this.getSettings_().endingStart) {
        case qu:
          c = e, d = 2 * n - i;
          break;
        case jp:
          c = r.length - 2, d = n + r[c] - r[c + 1];
          break;
        default:
          c = e, d = i;
      }
    if (v === void 0)
      switch (this.getSettings_().endingEnd) {
        case qu:
          h = e, v = 2 * i - n;
          break;
        case jp:
          h = 1, v = i + r[1] - r[0];
          break;
        default:
          h = e - 1, v = n;
      }
    const g = (i - n) * 0.5, S = this.valueSize;
    this._weightPrev = g / (n - d), this._weightNext = g / (v - i), this._offsetPrev = c * S, this._offsetNext = h * S;
  }
  interpolate_(e, n, i, r) {
    const c = this.resultBuffer, h = this.sampleValues, d = this.valueSize, v = e * d, g = v - d, S = this._offsetPrev, x = this._offsetNext, M = this._weightPrev, b = this._weightNext, R = (i - n) / (r - n), w = R * R, C = w * R, E = -M * C + 2 * M * w - M * R, U = (1 + M) * C + (-1.5 - 2 * M) * w + (-0.5 + M) * R + 1, N = (-1 - b) * C + (1.5 + b) * w + 0.5 * R, O = b * C - b * w;
    for (let I = 0; I !== d; ++I)
      c[I] = E * h[S + I] + U * h[g + I] + N * h[v + I] + O * h[x + I];
    return c;
  }
}
class vx extends gm {
  /**
   * Constructs a new linear interpolant.
   *
   * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.
   * @param {TypedArray} sampleValues - The sample values.
   * @param {number} sampleSize - The sample size
   * @param {TypedArray} [resultBuffer] - The result buffer.
   */
  constructor(e, n, i, r) {
    super(e, n, i, r);
  }
  interpolate_(e, n, i, r) {
    const c = this.resultBuffer, h = this.sampleValues, d = this.valueSize, v = e * d, g = v - d, S = (i - n) / (r - n), x = 1 - S;
    for (let M = 0; M !== d; ++M)
      c[M] = h[g + M] * x + h[v + M] * S;
    return c;
  }
}
class rT extends gm {
  /**
   * Constructs a new discrete interpolant.
   *
   * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.
   * @param {TypedArray} sampleValues - The sample values.
   * @param {number} sampleSize - The sample size
   * @param {TypedArray} [resultBuffer] - The result buffer.
   */
  constructor(e, n, i, r) {
    super(e, n, i, r);
  }
  interpolate_(e) {
    return this.copySampleValue_(e - 1);
  }
}
class pr {
  /**
   * Constructs a new keyframe track.
   *
   * @param {string} name - The keyframe track's name.
   * @param {Array<number>} times - A list of keyframe times.
   * @param {Array<number|string|boolean>} values - A list of keyframe values.
   * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.
   */
  constructor(e, n, i, r) {
    if (e === void 0) throw new Error("THREE.KeyframeTrack: track name is undefined");
    if (n === void 0 || n.length === 0) throw new Error("THREE.KeyframeTrack: no keyframes in track named " + e);
    this.name = e, this.times = Yu(n, this.TimeBufferType), this.values = Yu(i, this.ValueBufferType), this.setInterpolation(r || this.DefaultInterpolation);
  }
  /**
   * Converts the keyframe track to JSON.
   *
   * @static
   * @param {KeyframeTrack} track - The keyframe track to serialize.
   * @return {Object} The serialized keyframe track as JSON.
   */
  static toJSON(e) {
    const n = e.constructor;
    let i;
    if (n.toJSON !== this.toJSON)
      i = n.toJSON(e);
    else {
      i = {
        name: e.name,
        times: Yu(e.times, Array),
        values: Yu(e.values, Array)
      };
      const r = e.getInterpolation();
      r !== e.DefaultInterpolation && (i.interpolation = r);
    }
    return i.type = e.ValueTypeName, i;
  }
  /**
   * Factory method for creating a new discrete interpolant.
   *
   * @static
   * @param {TypedArray} [result] - The result buffer.
   * @return {DiscreteInterpolant} The new interpolant.
   */
  InterpolantFactoryMethodDiscrete(e) {
    return new rT(this.times, this.values, this.getValueSize(), e);
  }
  /**
   * Factory method for creating a new linear interpolant.
   *
   * @static
   * @param {TypedArray} [result] - The result buffer.
   * @return {LinearInterpolant} The new interpolant.
   */
  InterpolantFactoryMethodLinear(e) {
    return new vx(this.times, this.values, this.getValueSize(), e);
  }
  /**
   * Factory method for creating a new smooth interpolant.
   *
   * @static
   * @param {TypedArray} [result] - The result buffer.
   * @return {CubicInterpolant} The new interpolant.
   */
  InterpolantFactoryMethodSmooth(e) {
    return new sT(this.times, this.values, this.getValueSize(), e);
  }
  /**
   * Defines the interpolation factor method for this keyframe track.
   *
   * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} interpolation - The interpolation type.
   * @return {KeyframeTrack} A reference to this keyframe track.
   */
  setInterpolation(e) {
    let n;
    switch (e) {
      case Zp:
        n = this.InterpolantFactoryMethodDiscrete;
        break;
      case w0:
        n = this.InterpolantFactoryMethodLinear;
        break;
      case qg:
        n = this.InterpolantFactoryMethodSmooth;
        break;
    }
    if (n === void 0) {
      const i = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
      if (this.createInterpolant === void 0)
        if (e !== this.DefaultInterpolation)
          this.setInterpolation(this.DefaultInterpolation);
        else
          throw new Error(i);
      return console.warn("THREE.KeyframeTrack:", i), this;
    }
    return this.createInterpolant = n, this;
  }
  /**
   * Returns the current interpolation type.
   *
   * @return {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} The interpolation type.
   */
  getInterpolation() {
    switch (this.createInterpolant) {
      case this.InterpolantFactoryMethodDiscrete:
        return Zp;
      case this.InterpolantFactoryMethodLinear:
        return w0;
      case this.InterpolantFactoryMethodSmooth:
        return qg;
    }
  }
  /**
   * Returns the value size.
   *
   * @return {number} The value size.
   */
  getValueSize() {
    return this.values.length / this.times.length;
  }
  /**
   * Moves all keyframes either forward or backward in time.
   *
   * @param {number} timeOffset - The offset to move the time values.
   * @return {KeyframeTrack} A reference to this keyframe track.
   */
  shift(e) {
    if (e !== 0) {
      const n = this.times;
      for (let i = 0, r = n.length; i !== r; ++i)
        n[i] += e;
    }
    return this;
  }
  /**
   * Scale all keyframe times by a factor (useful for frame - seconds conversions).
   *
   * @param {number} timeScale - The time scale.
   * @return {KeyframeTrack} A reference to this keyframe track.
   */
  scale(e) {
    if (e !== 1) {
      const n = this.times;
      for (let i = 0, r = n.length; i !== r; ++i)
        n[i] *= e;
    }
    return this;
  }
  /**
   * Removes keyframes before and after animation without changing any values within the defined time range.
   *
   * Note: The method does not shift around keys to the start of the track time, because for interpolated
   * keys this will change their values
   *
   * @param {number} startTime - The start time.
   * @param {number} endTime - The end time.
   * @return {KeyframeTrack} A reference to this keyframe track.
   */
  trim(e, n) {
    const i = this.times, r = i.length;
    let c = 0, h = r - 1;
    for (; c !== r && i[c] < e; )
      ++c;
    for (; h !== -1 && i[h] > n; )
      --h;
    if (++h, c !== 0 || h !== r) {
      c >= h && (h = Math.max(h, 1), c = h - 1);
      const d = this.getValueSize();
      this.times = i.slice(c, h), this.values = this.values.slice(c * d, h * d);
    }
    return this;
  }
  /**
   * Performs minimal validation on the keyframe track. Returns `true` if the values
   * are valid.
   *
   * @return {boolean} Whether the keyframes are valid or not.
   */
  validate() {
    let e = !0;
    const n = this.getValueSize();
    n - Math.floor(n) !== 0 && (console.error("THREE.KeyframeTrack: Invalid value size in track.", this), e = !1);
    const i = this.times, r = this.values, c = i.length;
    c === 0 && (console.error("THREE.KeyframeTrack: Track is empty.", this), e = !1);
    let h = null;
    for (let d = 0; d !== c; d++) {
      const v = i[d];
      if (typeof v == "number" && isNaN(v)) {
        console.error("THREE.KeyframeTrack: Time is not a valid number.", this, d, v), e = !1;
        break;
      }
      if (h !== null && h > v) {
        console.error("THREE.KeyframeTrack: Out of order keys.", this, d, v, h), e = !1;
        break;
      }
      h = v;
    }
    if (r !== void 0 && iT(r))
      for (let d = 0, v = r.length; d !== v; ++d) {
        const g = r[d];
        if (isNaN(g)) {
          console.error("THREE.KeyframeTrack: Value is not a valid number.", this, d, g), e = !1;
          break;
        }
      }
    return e;
  }
  /**
   * Optimizes this keyframe track by removing equivalent sequential keys (which are
   * common in morph target sequences).
   *
   * @return {AnimationClip} A reference to this animation clip.
   */
  optimize() {
    const e = this.times.slice(), n = this.values.slice(), i = this.getValueSize(), r = this.getInterpolation() === qg, c = e.length - 1;
    let h = 1;
    for (let d = 1; d < c; ++d) {
      let v = !1;
      const g = e[d], S = e[d + 1];
      if (g !== S && (d !== 1 || g !== e[0]))
        if (r)
          v = !0;
        else {
          const x = d * i, M = x - i, b = x + i;
          for (let R = 0; R !== i; ++R) {
            const w = n[x + R];
            if (w !== n[M + R] || w !== n[b + R]) {
              v = !0;
              break;
            }
          }
        }
      if (v) {
        if (d !== h) {
          e[h] = e[d];
          const x = d * i, M = h * i;
          for (let b = 0; b !== i; ++b)
            n[M + b] = n[x + b];
        }
        ++h;
      }
    }
    if (c > 0) {
      e[h] = e[c];
      for (let d = c * i, v = h * i, g = 0; g !== i; ++g)
        n[v + g] = n[d + g];
      ++h;
    }
    return h !== e.length ? (this.times = e.slice(0, h), this.values = n.slice(0, h * i)) : (this.times = e, this.values = n), this;
  }
  /**
   * Returns a new keyframe track with copied values from this instance.
   *
   * @return {KeyframeTrack} A clone of this instance.
   */
  clone() {
    const e = this.times.slice(), n = this.values.slice(), i = this.constructor, r = new i(this.name, e, n);
    return r.createInterpolant = this.createInterpolant, r;
  }
}
pr.prototype.ValueTypeName = "";
pr.prototype.TimeBufferType = Float32Array;
pr.prototype.ValueBufferType = Float32Array;
pr.prototype.DefaultInterpolation = w0;
class sf extends pr {
  /**
   * Constructs a new boolean keyframe track.
   *
   * This keyframe track type has no `interpolation` parameter because the
   * interpolation is always discrete.
   *
   * @param {string} name - The keyframe track's name.
   * @param {Array<number>} times - A list of keyframe times.
   * @param {Array<boolean>} values - A list of keyframe values.
   */
  constructor(e, n, i) {
    super(e, n, i);
  }
}
sf.prototype.ValueTypeName = "bool";
sf.prototype.ValueBufferType = Array;
sf.prototype.DefaultInterpolation = Zp;
sf.prototype.InterpolantFactoryMethodLinear = void 0;
sf.prototype.InterpolantFactoryMethodSmooth = void 0;
class gx extends pr {
  /**
   * Constructs a new color keyframe track.
   *
   * @param {string} name - The keyframe track's name.
   * @param {Array<number>} times - A list of keyframe times.
   * @param {Array<number>} values - A list of keyframe values.
   * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.
   */
  constructor(e, n, i, r) {
    super(e, n, i, r);
  }
}
gx.prototype.ValueTypeName = "color";
class im extends pr {
  /**
   * Constructs a new number keyframe track.
   *
   * @param {string} name - The keyframe track's name.
   * @param {Array<number>} times - A list of keyframe times.
   * @param {Array<number>} values - A list of keyframe values.
   * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.
   */
  constructor(e, n, i, r) {
    super(e, n, i, r);
  }
}
im.prototype.ValueTypeName = "number";
class oT extends gm {
  /**
   * Constructs a new SLERP interpolant.
   *
   * @param {TypedArray} parameterPositions - The parameter positions hold the interpolation factors.
   * @param {TypedArray} sampleValues - The sample values.
   * @param {number} sampleSize - The sample size
   * @param {TypedArray} [resultBuffer] - The result buffer.
   */
  constructor(e, n, i, r) {
    super(e, n, i, r);
  }
  interpolate_(e, n, i, r) {
    const c = this.resultBuffer, h = this.sampleValues, d = this.valueSize, v = (i - n) / (r - n);
    let g = e * d;
    for (let S = g + d; g !== S; g += 4)
      Es.slerpFlat(c, 0, h, g - d, h, g, v);
    return c;
  }
}
class ym extends pr {
  /**
   * Constructs a new Quaternion keyframe track.
   *
   * @param {string} name - The keyframe track's name.
   * @param {Array<number>} times - A list of keyframe times.
   * @param {Array<number>} values - A list of keyframe values.
   * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.
   */
  constructor(e, n, i, r) {
    super(e, n, i, r);
  }
  /**
   * Overwritten so the method returns Quaternion based interpolant.
   *
   * @static
   * @param {TypedArray} [result] - The result buffer.
   * @return {QuaternionLinearInterpolant} The new interpolant.
   */
  InterpolantFactoryMethodLinear(e) {
    return new oT(this.times, this.values, this.getValueSize(), e);
  }
}
ym.prototype.ValueTypeName = "quaternion";
ym.prototype.InterpolantFactoryMethodSmooth = void 0;
class rf extends pr {
  /**
   * Constructs a new string keyframe track.
   *
   * This keyframe track type has no `interpolation` parameter because the
   * interpolation is always discrete.
   *
   * @param {string} name - The keyframe track's name.
   * @param {Array<number>} times - A list of keyframe times.
   * @param {Array<string>} values - A list of keyframe values.
   */
  constructor(e, n, i) {
    super(e, n, i);
  }
}
rf.prototype.ValueTypeName = "string";
rf.prototype.ValueBufferType = Array;
rf.prototype.DefaultInterpolation = Zp;
rf.prototype.InterpolantFactoryMethodLinear = void 0;
rf.prototype.InterpolantFactoryMethodSmooth = void 0;
class am extends pr {
  /**
   * Constructs a new vector keyframe track.
   *
   * @param {string} name - The keyframe track's name.
   * @param {Array<number>} times - A list of keyframe times.
   * @param {Array<number>} values - A list of keyframe values.
   * @param {(InterpolateLinear|InterpolateDiscrete|InterpolateSmooth)} [interpolation] - The interpolation type.
   */
  constructor(e, n, i, r) {
    super(e, n, i, r);
  }
}
am.prototype.ValueTypeName = "vector";
class sm {
  /**
   * Constructs a new animation clip.
   *
   * Note: Instead of instantiating an AnimationClip directly with the constructor, you can
   * use the static interface of this class for creating clips. In most cases though, animation clips
   * will automatically be created by loaders when importing animated 3D assets.
   *
   * @param {string} [name=''] - The clip's name.
   * @param {number} [duration=-1] - The clip's duration in seconds. If a negative value is passed,
   * the duration will be calculated from the passed keyframes.
   * @param {Array<KeyframeTrack>} tracks - An array of keyframe tracks.
   * @param {(NormalAnimationBlendMode|AdditiveAnimationBlendMode)} [blendMode=NormalAnimationBlendMode] - Defines how the animation
   * is blended/combined when two or more animations are simultaneously played.
   */
  constructor(e = "", n = -1, i = [], r = k0) {
    this.name = e, this.tracks = i, this.duration = n, this.blendMode = r, this.uuid = Fs(), this.duration < 0 && this.resetDuration();
  }
  /**
   * Factory method for creating an animation clip from the given JSON.
   *
   * @static
   * @param {Object} json - The serialized animation clip.
   * @return {AnimationClip} The new animation clip.
   */
  static parse(e) {
    const n = [], i = e.tracks, r = 1 / (e.fps || 1);
    for (let h = 0, d = i.length; h !== d; ++h)
      n.push(B3(i[h]).scale(r));
    const c = new this(e.name, e.duration, n, e.blendMode);
    return c.uuid = e.uuid, c;
  }
  /**
   * Serializes the given animation clip into JSON.
   *
   * @static
   * @param {AnimationClip} clip - The animation clip to serialize.
   * @return {Object} The JSON object.
   */
  static toJSON(e) {
    const n = [], i = e.tracks, r = {
      name: e.name,
      duration: e.duration,
      tracks: n,
      uuid: e.uuid,
      blendMode: e.blendMode
    };
    for (let c = 0, h = i.length; c !== h; ++c)
      n.push(pr.toJSON(i[c]));
    return r;
  }
  /**
   * Returns a new animation clip from the passed morph targets array of a
   * geometry, taking a name and the number of frames per second.
   *
   * Note: The fps parameter is required, but the animation speed can be
   * overridden via {@link AnimationAction#setDuration}.
   *
   * @static
   * @param {string} name - The name of the animation clip.
   * @param {Array<Object>} morphTargetSequence - A sequence of morph targets.
   * @param {number} fps - The Frames-Per-Second value.
   * @param {boolean} noLoop - Whether the clip should be no loop or not.
   * @return {AnimationClip} The new animation clip.
   */
  static CreateFromMorphTargetSequence(e, n, i, r) {
    const c = n.length, h = [];
    for (let d = 0; d < c; d++) {
      let v = [], g = [];
      v.push(
        (d + c - 1) % c,
        d,
        (d + 1) % c
      ), g.push(0, 1, 0);
      const S = aT(v);
      v = AS(v, 1, S), g = AS(g, 1, S), !r && v[0] === 0 && (v.push(c), g.push(g[0])), h.push(
        new im(
          ".morphTargetInfluences[" + n[d].name + "]",
          v,
          g
        ).scale(1 / i)
      );
    }
    return new this(e, -1, h);
  }
  /**
   * Searches for an animation clip by name, taking as its first parameter
   * either an array of clips, or a mesh or geometry that contains an
   * array named "animations" property.
   *
   * @static
   * @param {(Array<AnimationClip>|Object3D)} objectOrClipArray - The array or object to search through.
   * @param {string} name - The name to search for.
   * @return {?AnimationClip} The found animation clip. Returns `null` if no clip has been found.
   */
  static findByName(e, n) {
    let i = e;
    if (!Array.isArray(e)) {
      const r = e;
      i = r.geometry && r.geometry.animations || r.animations;
    }
    for (let r = 0; r < i.length; r++)
      if (i[r].name === n)
        return i[r];
    return null;
  }
  /**
   * Returns an array of new AnimationClips created from the morph target
   * sequences of a geometry, trying to sort morph target names into
   * animation-group-based patterns like "Walk_001, Walk_002, Run_001, Run_002...".
   *
   * See {@link MD2Loader#parse} as an example for how the method should be used.
   *
   * @static
   * @param {Array<Object>} morphTargets - A sequence of morph targets.
   * @param {number} fps - The Frames-Per-Second value.
   * @param {boolean} noLoop - Whether the clip should be no loop or not.
   * @return {Array<AnimationClip>} An array of new animation clips.
   */
  static CreateClipsFromMorphTargetSequences(e, n, i) {
    const r = {}, c = /^([\w-]*?)([\d]+)$/;
    for (let d = 0, v = e.length; d < v; d++) {
      const g = e[d], S = g.name.match(c);
      if (S && S.length > 1) {
        const x = S[1];
        let M = r[x];
        M || (r[x] = M = []), M.push(g);
      }
    }
    const h = [];
    for (const d in r)
      h.push(this.CreateFromMorphTargetSequence(d, r[d], n, i));
    return h;
  }
  /**
   * Parses the `animation.hierarchy` format and returns a new animation clip.
   *
   * @static
   * @deprecated since r175.
   * @param {Object} animation - A serialized animation clip as JSON.
   * @param {Array<Bones>} bones - An array of bones.
   * @return {?AnimationClip} The new animation clip.
   */
  static parseAnimation(e, n) {
    if (console.warn("THREE.AnimationClip: parseAnimation() is deprecated and will be removed with r185"), !e)
      return console.error("THREE.AnimationClip: No animation in JSONLoader data."), null;
    const i = function(x, M, b, R, w) {
      if (b.length !== 0) {
        const C = [], E = [];
        mx(b, C, E, R), C.length !== 0 && w.push(new x(M, C, E));
      }
    }, r = [], c = e.name || "default", h = e.fps || 30, d = e.blendMode;
    let v = e.length || -1;
    const g = e.hierarchy || [];
    for (let x = 0; x < g.length; x++) {
      const M = g[x].keys;
      if (!(!M || M.length === 0))
        if (M[0].morphTargets) {
          const b = {};
          let R;
          for (R = 0; R < M.length; R++)
            if (M[R].morphTargets)
              for (let w = 0; w < M[R].morphTargets.length; w++)
                b[M[R].morphTargets[w]] = -1;
          for (const w in b) {
            const C = [], E = [];
            for (let U = 0; U !== M[R].morphTargets.length; ++U) {
              const N = M[R];
              C.push(N.time), E.push(N.morphTarget === w ? 1 : 0);
            }
            r.push(new im(".morphTargetInfluence[" + w + "]", C, E));
          }
          v = b.length * h;
        } else {
          const b = ".bones[" + n[x].name + "]";
          i(
            am,
            b + ".position",
            M,
            "pos",
            r
          ), i(
            ym,
            b + ".quaternion",
            M,
            "rot",
            r
          ), i(
            am,
            b + ".scale",
            M,
            "scl",
            r
          );
        }
    }
    return r.length === 0 ? null : new this(c, v, r, d);
  }
  /**
   * Sets the duration of this clip to the duration of its longest keyframe track.
   *
   * @return {AnimationClip} A reference to this animation clip.
   */
  resetDuration() {
    const e = this.tracks;
    let n = 0;
    for (let i = 0, r = e.length; i !== r; ++i) {
      const c = this.tracks[i];
      n = Math.max(n, c.times[c.times.length - 1]);
    }
    return this.duration = n, this;
  }
  /**
   * Trims all tracks to the clip's duration.
   *
   * @return {AnimationClip} A reference to this animation clip.
   */
  trim() {
    for (let e = 0; e < this.tracks.length; e++)
      this.tracks[e].trim(0, this.duration);
    return this;
  }
  /**
   * Performs minimal validation on each track in the clip. Returns `true` if all
   * tracks are valid.
   *
   * @return {boolean} Whether the clip's keyframes are valid or not.
   */
  validate() {
    let e = !0;
    for (let n = 0; n < this.tracks.length; n++)
      e = e && this.tracks[n].validate();
    return e;
  }
  /**
   * Optimizes each track by removing equivalent sequential keys (which are
   * common in morph target sequences).
   *
   * @return {AnimationClip} A reference to this animation clip.
   */
  optimize() {
    for (let e = 0; e < this.tracks.length; e++)
      this.tracks[e].optimize();
    return this;
  }
  /**
   * Returns a new animation clip with copied values from this instance.
   *
   * @return {AnimationClip} A clone of this instance.
   */
  clone() {
    const e = [];
    for (let n = 0; n < this.tracks.length; n++)
      e.push(this.tracks[n].clone());
    return new this.constructor(this.name, this.duration, e, this.blendMode);
  }
  /**
   * Serializes this animation clip into JSON.
   *
   * @return {Object} The JSON object.
   */
  toJSON() {
    return this.constructor.toJSON(this);
  }
}
function z3(s) {
  switch (s.toLowerCase()) {
    case "scalar":
    case "double":
    case "float":
    case "number":
    case "integer":
      return im;
    case "vector":
    case "vector2":
    case "vector3":
    case "vector4":
      return am;
    case "color":
      return gx;
    case "quaternion":
      return ym;
    case "bool":
    case "boolean":
      return sf;
    case "string":
      return rf;
  }
  throw new Error("THREE.KeyframeTrack: Unsupported typeName: " + s);
}
function B3(s) {
  if (s.type === void 0)
    throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");
  const e = z3(s.type);
  if (s.times === void 0) {
    const n = [], i = [];
    mx(s.keys, n, i, "value"), s.times = n, s.values = i;
  }
  return e.parse !== void 0 ? e.parse(s) : new e(s.name, s.times, s.values, s.interpolation);
}
const zo = {
  /**
   * Whether caching is enabled or not.
   *
   * @static
   * @type {boolean}
   * @default false
   */
  enabled: !1,
  /**
   * A dictionary that holds cached files.
   *
   * @static
   * @type {Object<string,Object>}
   */
  files: {},
  /**
   * Adds a cache entry with a key to reference the file. If this key already
   * holds a file, it is overwritten.
   *
   * @static
   * @param {string} key - The key to reference the cached file.
   * @param {Object} file -  The file to be cached.
   */
  add: function(s, e) {
    this.enabled !== !1 && (this.files[s] = e);
  },
  /**
   * Gets the cached value for the given key.
   *
   * @static
   * @param {string} key - The key to reference the cached file.
   * @return {Object|undefined} The cached file. If the key does not exist `undefined` is returned.
   */
  get: function(s) {
    if (this.enabled !== !1)
      return this.files[s];
  },
  /**
   * Removes the cached file associated with the given key.
   *
   * @static
   * @param {string} key - The key to reference the cached file.
   */
  remove: function(s) {
    delete this.files[s];
  },
  /**
   * Remove all values from the cache.
   *
   * @static
   */
  clear: function() {
    this.files = {};
  }
};
class yx {
  /**
   * Constructs a new loading manager.
   *
   * @param {Function} [onLoad] - Executes when all items have been loaded.
   * @param {Function} [onProgress] - Executes when single items have been loaded.
   * @param {Function} [onError] - Executes when an error occurs.
   */
  constructor(e, n, i) {
    const r = this;
    let c = !1, h = 0, d = 0, v;
    const g = [];
    this.onStart = void 0, this.onLoad = e, this.onProgress = n, this.onError = i, this.abortController = new AbortController(), this.itemStart = function(S) {
      d++, c === !1 && r.onStart !== void 0 && r.onStart(S, h, d), c = !0;
    }, this.itemEnd = function(S) {
      h++, r.onProgress !== void 0 && r.onProgress(S, h, d), h === d && (c = !1, r.onLoad !== void 0 && r.onLoad());
    }, this.itemError = function(S) {
      r.onError !== void 0 && r.onError(S);
    }, this.resolveURL = function(S) {
      return v ? v(S) : S;
    }, this.setURLModifier = function(S) {
      return v = S, this;
    }, this.addHandler = function(S, x) {
      return g.push(S, x), this;
    }, this.removeHandler = function(S) {
      const x = g.indexOf(S);
      return x !== -1 && g.splice(x, 2), this;
    }, this.getHandler = function(S) {
      for (let x = 0, M = g.length; x < M; x += 2) {
        const b = g[x], R = g[x + 1];
        if (b.global && (b.lastIndex = 0), b.test(S))
          return R;
      }
      return null;
    }, this.abort = function() {
      return this.abortController.abort(), this.abortController = new AbortController(), this;
    };
  }
}
const lT = /* @__PURE__ */ new yx();
class Ts {
  /**
   * Constructs a new loader.
   *
   * @param {LoadingManager} [manager] - The loading manager.
   */
  constructor(e) {
    this.manager = e !== void 0 ? e : lT, this.crossOrigin = "anonymous", this.withCredentials = !1, this.path = "", this.resourcePath = "", this.requestHeader = {};
  }
  /**
   * This method needs to be implemented by all concrete loaders. It holds the
   * logic for loading assets from the backend.
   *
   * @abstract
   * @param {string} url - The path/URL of the file to be loaded.
   * @param {Function} onLoad - Executed when the loading process has been finished.
   * @param {onProgressCallback} [onProgress] - Executed while the loading is in progress.
   * @param {onErrorCallback} [onError] - Executed when errors occur.
   */
  load() {
  }
  /**
   * A async version of {@link Loader#load}.
   *
   * @param {string} url - The path/URL of the file to be loaded.
   * @param {onProgressCallback} [onProgress] - Executed while the loading is in progress.
   * @return {Promise} A Promise that resolves when the asset has been loaded.
   */
  loadAsync(e, n) {
    const i = this;
    return new Promise(function(r, c) {
      i.load(e, r, n, c);
    });
  }
  /**
   * This method needs to be implemented by all concrete loaders. It holds the
   * logic for parsing the asset into three.js entities.
   *
   * @abstract
   * @param {any} data - The data to parse.
   */
  parse() {
  }
  /**
   * Sets the `crossOrigin` String to implement CORS for loading the URL
   * from a different domain that allows CORS.
   *
   * @param {string} crossOrigin - The `crossOrigin` value.
   * @return {Loader} A reference to this instance.
   */
  setCrossOrigin(e) {
    return this.crossOrigin = e, this;
  }
  /**
   * Whether the XMLHttpRequest uses credentials such as cookies, authorization
   * headers or TLS client certificates, see [XMLHttpRequest.withCredentials]{@link https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/withCredentials}.
   *
   * Note: This setting has no effect if you are loading files locally or from the same domain.
   *
   * @param {boolean} value - The `withCredentials` value.
   * @return {Loader} A reference to this instance.
   */
  setWithCredentials(e) {
    return this.withCredentials = e, this;
  }
  /**
   * Sets the base path for the asset.
   *
   * @param {string} path - The base path.
   * @return {Loader} A reference to this instance.
   */
  setPath(e) {
    return this.path = e, this;
  }
  /**
   * Sets the base path for dependent resources like textures.
   *
   * @param {string} resourcePath - The resource path.
   * @return {Loader} A reference to this instance.
   */
  setResourcePath(e) {
    return this.resourcePath = e, this;
  }
  /**
   * Sets the given request header.
   *
   * @param {Object} requestHeader - A [request header]{@link https://developer.mozilla.org/en-US/docs/Glossary/Request_header}
   * for configuring the HTTP request.
   * @return {Loader} A reference to this instance.
   */
  setRequestHeader(e) {
    return this.requestHeader = e, this;
  }
  /**
   * This method can be implemented in loaders for aborting ongoing requests.
   *
   * @abstract
   * @return {Loader} A reference to this instance.
   */
  abort() {
    return this;
  }
}
Ts.DEFAULT_MATERIAL_NAME = "__DEFAULT";
const gl = {};
class P3 extends Error {
  constructor(e, n) {
    super(e), this.response = n;
  }
}
class xl extends Ts {
  /**
   * Constructs a new file loader.
   *
   * @param {LoadingManager} [manager] - The loading manager.
   */
  constructor(e) {
    super(e), this.mimeType = "", this.responseType = "", this._abortController = new AbortController();
  }
  /**
   * Starts loading from the given URL and pass the loaded response to the `onLoad()` callback.
   *
   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.
   * @param {function(any)} onLoad - Executed when the loading process has been finished.
   * @param {onProgressCallback} [onProgress] - Executed while the loading is in progress.
   * @param {onErrorCallback} [onError] - Executed when errors occur.
   * @return {any|undefined} The cached resource if available.
   */
  load(e, n, i, r) {
    e === void 0 && (e = ""), this.path !== void 0 && (e = this.path + e), e = this.manager.resolveURL(e);
    const c = zo.get(`file:${e}`);
    if (c !== void 0)
      return this.manager.itemStart(e), setTimeout(() => {
        n && n(c), this.manager.itemEnd(e);
      }, 0), c;
    if (gl[e] !== void 0) {
      gl[e].push({
        onLoad: n,
        onProgress: i,
        onError: r
      });
      return;
    }
    gl[e] = [], gl[e].push({
      onLoad: n,
      onProgress: i,
      onError: r
    });
    const h = new Request(e, {
      headers: new Headers(this.requestHeader),
      credentials: this.withCredentials ? "include" : "same-origin",
      signal: typeof AbortSignal.any == "function" ? AbortSignal.any([this._abortController.signal, this.manager.abortController.signal]) : this._abortController.signal
    }), d = this.mimeType, v = this.responseType;
    fetch(h).then((g) => {
      if (g.status === 200 || g.status === 0) {
        if (g.status === 0 && console.warn("THREE.FileLoader: HTTP Status 0 received."), typeof ReadableStream > "u" || g.body === void 0 || g.body.getReader === void 0)
          return g;
        const S = gl[e], x = g.body.getReader(), M = g.headers.get("X-File-Size") || g.headers.get("Content-Length"), b = M ? parseInt(M) : 0, R = b !== 0;
        let w = 0;
        const C = new ReadableStream({
          start(E) {
            U();
            function U() {
              x.read().then(({ done: N, value: O }) => {
                if (N)
                  E.close();
                else {
                  w += O.byteLength;
                  const I = new ProgressEvent("progress", { lengthComputable: R, loaded: w, total: b });
                  for (let V = 0, Y = S.length; V < Y; V++) {
                    const k = S[V];
                    k.onProgress && k.onProgress(I);
                  }
                  E.enqueue(O), U();
                }
              }, (N) => {
                E.error(N);
              });
            }
          }
        });
        return new Response(C);
      } else
        throw new P3(`fetch for "${g.url}" responded with ${g.status}: ${g.statusText}`, g);
    }).then((g) => {
      switch (v) {
        case "arraybuffer":
          return g.arrayBuffer();
        case "blob":
          return g.blob();
        case "document":
          return g.text().then((S) => new DOMParser().parseFromString(S, d));
        case "json":
          return g.json();
        default:
          if (d === "")
            return g.text();
          {
            const x = /charset="?([^;"\s]*)"?/i.exec(d), M = x && x[1] ? x[1].toLowerCase() : void 0, b = new TextDecoder(M);
            return g.arrayBuffer().then((R) => b.decode(R));
          }
      }
    }).then((g) => {
      zo.add(`file:${e}`, g);
      const S = gl[e];
      delete gl[e];
      for (let x = 0, M = S.length; x < M; x++) {
        const b = S[x];
        b.onLoad && b.onLoad(g);
      }
    }).catch((g) => {
      const S = gl[e];
      if (S === void 0)
        throw this.manager.itemError(e), g;
      delete gl[e];
      for (let x = 0, M = S.length; x < M; x++) {
        const b = S[x];
        b.onError && b.onError(g);
      }
      this.manager.itemError(e);
    }).finally(() => {
      this.manager.itemEnd(e);
    }), this.manager.itemStart(e);
  }
  /**
   * Sets the expected response type.
   *
   * @param {('arraybuffer'|'blob'|'document'|'json'|'')} value - The response type.
   * @return {FileLoader} A reference to this file loader.
   */
  setResponseType(e) {
    return this.responseType = e, this;
  }
  /**
   * Sets the expected mime type of the loaded file.
   *
   * @param {string} value - The mime type.
   * @return {FileLoader} A reference to this file loader.
   */
  setMimeType(e) {
    return this.mimeType = e, this;
  }
  /**
   * Aborts ongoing fetch requests.
   *
   * @return {FileLoader} A reference to this instance.
   */
  abort() {
    return this._abortController.abort(), this._abortController = new AbortController(), this;
  }
}
class I3 extends Ts {
  /**
   * Constructs a new animation loader.
   *
   * @param {LoadingManager} [manager] - The loading manager.
   */
  constructor(e) {
    super(e);
  }
  /**
   * Starts loading from the given URL and pass the loaded animations as an array
   * holding instances of {@link AnimationClip} to the `onLoad()` callback.
   *
   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.
   * @param {function(Array<AnimationClip>)} onLoad - Executed when the loading process has been finished.
   * @param {onProgressCallback} onProgress - Executed while the loading is in progress.
   * @param {onErrorCallback} onError - Executed when errors occur.
   */
  load(e, n, i, r) {
    const c = this, h = new xl(this.manager);
    h.setPath(this.path), h.setRequestHeader(this.requestHeader), h.setWithCredentials(this.withCredentials), h.load(e, function(d) {
      try {
        n(c.parse(JSON.parse(d)));
      } catch (v) {
        r ? r(v) : console.error(v), c.manager.itemError(e);
      }
    }, i, r);
  }
  /**
   * Parses the given JSON object and returns an array of animation clips.
   *
   * @param {Object} json - The serialized animation clips.
   * @return {Array<AnimationClip>} The parsed animation clips.
   */
  parse(e) {
    const n = [];
    for (let i = 0; i < e.length; i++) {
      const r = sm.parse(e[i]);
      n.push(r);
    }
    return n;
  }
}
class H3 extends Ts {
  /**
   * Constructs a new compressed texture loader.
   *
   * @param {LoadingManager} [manager] - The loading manager.
   */
  constructor(e) {
    super(e);
  }
  /**
   * Starts loading from the given URL and passes the loaded compressed texture
   * to the `onLoad()` callback. The method also returns a new texture object which can
   * directly be used for material creation. If you do it this way, the texture
   * may pop up in your scene once the respective loading process is finished.
   *
   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.
   * @param {function(CompressedTexture)} onLoad - Executed when the loading process has been finished.
   * @param {onProgressCallback} onProgress - Executed while the loading is in progress.
   * @param {onErrorCallback} onError - Executed when errors occur.
   * @return {CompressedTexture} The compressed texture.
   */
  load(e, n, i, r) {
    const c = this, h = [], d = new ey(), v = new xl(this.manager);
    v.setPath(this.path), v.setResponseType("arraybuffer"), v.setRequestHeader(this.requestHeader), v.setWithCredentials(c.withCredentials);
    let g = 0;
    function S(x) {
      v.load(e[x], function(M) {
        const b = c.parse(M, !0);
        h[x] = {
          width: b.width,
          height: b.height,
          format: b.format,
          mipmaps: b.mipmaps
        }, g += 1, g === 6 && (b.mipmapCount === 1 && (d.minFilter = di), d.image = h, d.format = b.format, d.needsUpdate = !0, n && n(d));
      }, i, r);
    }
    if (Array.isArray(e))
      for (let x = 0, M = e.length; x < M; ++x)
        S(x);
    else
      v.load(e, function(x) {
        const M = c.parse(x, !0);
        if (M.isCubemap) {
          const b = M.mipmaps.length / M.mipmapCount;
          for (let R = 0; R < b; R++) {
            h[R] = { mipmaps: [] };
            for (let w = 0; w < M.mipmapCount; w++)
              h[R].mipmaps.push(M.mipmaps[R * M.mipmapCount + w]), h[R].format = M.format, h[R].width = M.width, h[R].height = M.height;
          }
          d.image = h;
        } else
          d.image.width = M.width, d.image.height = M.height, d.mipmaps = M.mipmaps;
        M.mipmapCount === 1 && (d.minFilter = di), d.format = M.format, d.needsUpdate = !0, n && n(d);
      }, i, r);
    return d;
  }
}
const Ah = /* @__PURE__ */ new WeakMap();
class rm extends Ts {
  /**
   * Constructs a new image loader.
   *
   * @param {LoadingManager} [manager] - The loading manager.
   */
  constructor(e) {
    super(e);
  }
  /**
   * Starts loading from the given URL and passes the loaded image
   * to the `onLoad()` callback. The method also returns a new `Image` object which can
   * directly be used for texture creation. If you do it this way, the texture
   * may pop up in your scene once the respective loading process is finished.
   *
   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.
   * @param {function(Image)} onLoad - Executed when the loading process has been finished.
   * @param {onProgressCallback} onProgress - Unsupported in this loader.
   * @param {onErrorCallback} onError - Executed when errors occur.
   * @return {Image} The image.
   */
  load(e, n, i, r) {
    this.path !== void 0 && (e = this.path + e), e = this.manager.resolveURL(e);
    const c = this, h = zo.get(`image:${e}`);
    if (h !== void 0) {
      if (h.complete === !0)
        c.manager.itemStart(e), setTimeout(function() {
          n && n(h), c.manager.itemEnd(e);
        }, 0);
      else {
        let x = Ah.get(h);
        x === void 0 && (x = [], Ah.set(h, x)), x.push({ onLoad: n, onError: r });
      }
      return h;
    }
    const d = Jp("img");
    function v() {
      S(), n && n(this);
      const x = Ah.get(this) || [];
      for (let M = 0; M < x.length; M++) {
        const b = x[M];
        b.onLoad && b.onLoad(this);
      }
      Ah.delete(this), c.manager.itemEnd(e);
    }
    function g(x) {
      S(), r && r(x), zo.remove(`image:${e}`);
      const M = Ah.get(this) || [];
      for (let b = 0; b < M.length; b++) {
        const R = M[b];
        R.onError && R.onError(x);
      }
      Ah.delete(this), c.manager.itemError(e), c.manager.itemEnd(e);
    }
    function S() {
      d.removeEventListener("load", v, !1), d.removeEventListener("error", g, !1);
    }
    return d.addEventListener("load", v, !1), d.addEventListener("error", g, !1), e.slice(0, 5) !== "data:" && this.crossOrigin !== void 0 && (d.crossOrigin = this.crossOrigin), zo.add(`image:${e}`, d), c.manager.itemStart(e), d.src = e, d;
  }
}
class V3 extends Ts {
  /**
   * Constructs a new cube texture loader.
   *
   * @param {LoadingManager} [manager] - The loading manager.
   */
  constructor(e) {
    super(e);
  }
  /**
   * Starts loading from the given URL and pass the fully loaded cube texture
   * to the `onLoad()` callback. The method also returns a new cube texture object which can
   * directly be used for material creation. If you do it this way, the cube texture
   * may pop up in your scene once the respective loading process is finished.
   *
   * @param {Array<string>} urls - Array of 6 URLs to images, one for each side of the
   * cube texture. The urls should be specified in the following order: pos-x,
   * neg-x, pos-y, neg-y, pos-z, neg-z. An array of data URIs are allowed as well.
   * @param {function(CubeTexture)} onLoad - Executed when the loading process has been finished.
   * @param {onProgressCallback} onProgress - Unsupported in this loader.
   * @param {onErrorCallback} onError - Executed when errors occur.
   * @return {CubeTexture} The cube texture.
   */
  load(e, n, i, r) {
    const c = new hm();
    c.colorSpace = ei;
    const h = new rm(this.manager);
    h.setCrossOrigin(this.crossOrigin), h.setPath(this.path);
    let d = 0;
    function v(g) {
      h.load(e[g], function(S) {
        c.images[g] = S, d++, d === 6 && (c.needsUpdate = !0, n && n(c));
      }, void 0, r);
    }
    for (let g = 0; g < e.length; ++g)
      v(g);
    return c;
  }
}
class G3 extends Ts {
  /**
   * Constructs a new data texture loader.
   *
   * @param {LoadingManager} [manager] - The loading manager.
   */
  constructor(e) {
    super(e);
  }
  /**
   * Starts loading from the given URL and passes the loaded data texture
   * to the `onLoad()` callback. The method also returns a new texture object which can
   * directly be used for material creation. If you do it this way, the texture
   * may pop up in your scene once the respective loading process is finished.
   *
   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.
   * @param {function(DataTexture)} onLoad - Executed when the loading process has been finished.
   * @param {onProgressCallback} onProgress - Executed while the loading is in progress.
   * @param {onErrorCallback} onError - Executed when errors occur.
   * @return {DataTexture} The data texture.
   */
  load(e, n, i, r) {
    const c = this, h = new Bo(), d = new xl(this.manager);
    return d.setResponseType("arraybuffer"), d.setRequestHeader(this.requestHeader), d.setPath(this.path), d.setWithCredentials(c.withCredentials), d.load(e, function(v) {
      let g;
      try {
        g = c.parse(v);
      } catch (S) {
        if (r !== void 0)
          r(S);
        else {
          console.error(S);
          return;
        }
      }
      g.image !== void 0 ? h.image = g.image : g.data !== void 0 && (h.image.width = g.width, h.image.height = g.height, h.image.data = g.data), h.wrapS = g.wrapS !== void 0 ? g.wrapS : hr, h.wrapT = g.wrapT !== void 0 ? g.wrapT : hr, h.magFilter = g.magFilter !== void 0 ? g.magFilter : di, h.minFilter = g.minFilter !== void 0 ? g.minFilter : di, h.anisotropy = g.anisotropy !== void 0 ? g.anisotropy : 1, g.colorSpace !== void 0 && (h.colorSpace = g.colorSpace), g.flipY !== void 0 && (h.flipY = g.flipY), g.format !== void 0 && (h.format = g.format), g.type !== void 0 && (h.type = g.type), g.mipmaps !== void 0 && (h.mipmaps = g.mipmaps, h.minFilter = Lo), g.mipmapCount === 1 && (h.minFilter = di), g.generateMipmaps !== void 0 && (h.generateMipmaps = g.generateMipmaps), h.needsUpdate = !0, n && n(h, g);
    }, i, r), h;
  }
}
class F3 extends Ts {
  /**
   * Constructs a new texture loader.
   *
   * @param {LoadingManager} [manager] - The loading manager.
   */
  constructor(e) {
    super(e);
  }
  /**
   * Starts loading from the given URL and pass the fully loaded texture
   * to the `onLoad()` callback. The method also returns a new texture object which can
   * directly be used for material creation. If you do it this way, the texture
   * may pop up in your scene once the respective loading process is finished.
   *
   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.
   * @param {function(Texture)} onLoad - Executed when the loading process has been finished.
   * @param {onProgressCallback} onProgress - Unsupported in this loader.
   * @param {onErrorCallback} onError - Executed when errors occur.
   * @return {Texture} The texture.
   */
  load(e, n, i, r) {
    const c = new si(), h = new rm(this.manager);
    return h.setCrossOrigin(this.crossOrigin), h.setPath(this.path), h.load(e, function(d) {
      c.image = d, c.needsUpdate = !0, n !== void 0 && n(c);
    }, i, r), c;
  }
}
class Oc extends Mn {
  /**
   * Constructs a new light.
   *
   * @param {(number|Color|string)} [color=0xffffff] - The light's color.
   * @param {number} [intensity=1] - The light's strength/intensity.
   */
  constructor(e, n = 1) {
    super(), this.isLight = !0, this.type = "Light", this.color = new lt(e), this.intensity = n;
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
  }
  copy(e, n) {
    return super.copy(e, n), this.color.copy(e.color), this.intensity = e.intensity, this;
  }
  toJSON(e) {
    const n = super.toJSON(e);
    return n.object.color = this.color.getHex(), n.object.intensity = this.intensity, this.groundColor !== void 0 && (n.object.groundColor = this.groundColor.getHex()), this.distance !== void 0 && (n.object.distance = this.distance), this.angle !== void 0 && (n.object.angle = this.angle), this.decay !== void 0 && (n.object.decay = this.decay), this.penumbra !== void 0 && (n.object.penumbra = this.penumbra), this.shadow !== void 0 && (n.object.shadow = this.shadow.toJSON()), this.target !== void 0 && (n.object.target = this.target.uuid), n;
  }
}
class cT extends Oc {
  /**
   * Constructs a new hemisphere light.
   *
   * @param {(number|Color|string)} [skyColor=0xffffff] - The light's sky color.
   * @param {(number|Color|string)} [groundColor=0xffffff] - The light's ground color.
   * @param {number} [intensity=1] - The light's strength/intensity.
   */
  constructor(e, n, i) {
    super(e, i), this.isHemisphereLight = !0, this.type = "HemisphereLight", this.position.copy(Mn.DEFAULT_UP), this.updateMatrix(), this.groundColor = new lt(n);
  }
  copy(e, n) {
    return super.copy(e, n), this.groundColor.copy(e.groundColor), this;
  }
}
const I_ = /* @__PURE__ */ new Ft(), pM = /* @__PURE__ */ new j(), mM = /* @__PURE__ */ new j();
class _x {
  /**
   * Constructs a new light shadow.
   *
   * @param {Camera} camera - The light's view of the world.
   */
  constructor(e) {
    this.camera = e, this.intensity = 1, this.bias = 0, this.normalBias = 0, this.radius = 1, this.blurSamples = 8, this.mapSize = new De(512, 512), this.mapType = Da, this.map = null, this.mapPass = null, this.matrix = new Ft(), this.autoUpdate = !0, this.needsUpdate = !1, this._frustum = new Jh(), this._frameExtents = new De(1, 1), this._viewportCount = 1, this._viewports = [
      new xn(0, 0, 1, 1)
    ];
  }
  /**
   * Used internally by the renderer to get the number of viewports that need
   * to be rendered for this shadow.
   *
   * @return {number} The viewport count.
   */
  getViewportCount() {
    return this._viewportCount;
  }
  /**
   * Gets the shadow cameras frustum. Used internally by the renderer to cull objects.
   *
   * @return {Frustum} The shadow camera frustum.
   */
  getFrustum() {
    return this._frustum;
  }
  /**
   * Update the matrices for the camera and shadow, used internally by the renderer.
   *
   * @param {Light} light - The light for which the shadow is being rendered.
   */
  updateMatrices(e) {
    const n = this.camera, i = this.matrix;
    pM.setFromMatrixPosition(e.matrixWorld), n.position.copy(pM), mM.setFromMatrixPosition(e.target.matrixWorld), n.lookAt(mM), n.updateMatrixWorld(), I_.multiplyMatrices(n.projectionMatrix, n.matrixWorldInverse), this._frustum.setFromProjectionMatrix(I_, n.coordinateSystem, n.reversedDepth), n.reversedDepth ? i.set(
      0.5,
      0,
      0,
      0.5,
      0,
      0.5,
      0,
      0.5,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    ) : i.set(
      0.5,
      0,
      0,
      0.5,
      0,
      0.5,
      0,
      0.5,
      0,
      0,
      0.5,
      0.5,
      0,
      0,
      0,
      1
    ), i.multiply(I_);
  }
  /**
   * Returns a viewport definition for the given viewport index.
   *
   * @param {number} viewportIndex - The viewport index.
   * @return {Vector4} The viewport.
   */
  getViewport(e) {
    return this._viewports[e];
  }
  /**
   * Returns the frame extends.
   *
   * @return {Vector2} The frame extends.
   */
  getFrameExtents() {
    return this._frameExtents;
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
    this.map && this.map.dispose(), this.mapPass && this.mapPass.dispose();
  }
  /**
   * Copies the values of the given light shadow instance to this instance.
   *
   * @param {LightShadow} source - The light shadow to copy.
   * @return {LightShadow} A reference to this light shadow instance.
   */
  copy(e) {
    return this.camera = e.camera.clone(), this.intensity = e.intensity, this.bias = e.bias, this.radius = e.radius, this.autoUpdate = e.autoUpdate, this.needsUpdate = e.needsUpdate, this.normalBias = e.normalBias, this.blurSamples = e.blurSamples, this.mapSize.copy(e.mapSize), this;
  }
  /**
   * Returns a new light shadow instance with copied values from this instance.
   *
   * @return {LightShadow} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
  /**
   * Serializes the light shadow into JSON.
   *
   * @return {Object} A JSON object representing the serialized light shadow.
   * @see {@link ObjectLoader#parse}
   */
  toJSON() {
    const e = {};
    return this.intensity !== 1 && (e.intensity = this.intensity), this.bias !== 0 && (e.bias = this.bias), this.normalBias !== 0 && (e.normalBias = this.normalBias), this.radius !== 1 && (e.radius = this.radius), (this.mapSize.x !== 512 || this.mapSize.y !== 512) && (e.mapSize = this.mapSize.toArray()), e.camera = this.camera.toJSON(!1).object, delete e.camera.matrix, e;
  }
}
class X3 extends _x {
  /**
   * Constructs a new spot light shadow.
   */
  constructor() {
    super(new Zi(50, 1, 0.5, 500)), this.isSpotLightShadow = !0, this.focus = 1, this.aspect = 1;
  }
  updateMatrices(e) {
    const n = this.camera, i = Xh * 2 * e.angle * this.focus, r = this.mapSize.width / this.mapSize.height * this.aspect, c = e.distance || n.far;
    (i !== n.fov || r !== n.aspect || c !== n.far) && (n.fov = i, n.aspect = r, n.far = c, n.updateProjectionMatrix()), super.updateMatrices(e);
  }
  copy(e) {
    return super.copy(e), this.focus = e.focus, this;
  }
}
class uT extends Oc {
  /**
   * Constructs a new spot light.
   *
   * @param {(number|Color|string)} [color=0xffffff] - The light's color.
   * @param {number} [intensity=1] - The light's strength/intensity measured in candela (cd).
   * @param {number} [distance=0] - Maximum range of the light. `0` means no limit.
   * @param {number} [angle=Math.PI/3] - Maximum angle of light dispersion from its direction whose upper bound is `Math.PI/2`.
   * @param {number} [penumbra=0] - Percent of the spotlight cone that is attenuated due to penumbra. Value range is `[0,1]`.
   * @param {number} [decay=2] - The amount the light dims along the distance of the light.
   */
  constructor(e, n, i = 0, r = Math.PI / 3, c = 0, h = 2) {
    super(e, n), this.isSpotLight = !0, this.type = "SpotLight", this.position.copy(Mn.DEFAULT_UP), this.updateMatrix(), this.target = new Mn(), this.distance = i, this.angle = r, this.penumbra = c, this.decay = h, this.map = null, this.shadow = new X3();
  }
  /**
   * The light's power. Power is the luminous power of the light measured in lumens (lm).
   *  Changing the power will also change the light's intensity.
   *
   * @type {number}
   */
  get power() {
    return this.intensity * Math.PI;
  }
  set power(e) {
    this.intensity = e / Math.PI;
  }
  dispose() {
    this.shadow.dispose();
  }
  copy(e, n) {
    return super.copy(e, n), this.distance = e.distance, this.angle = e.angle, this.penumbra = e.penumbra, this.decay = e.decay, this.target = e.target.clone(), this.shadow = e.shadow.clone(), this;
  }
}
const vM = /* @__PURE__ */ new Ft(), Cp = /* @__PURE__ */ new j(), H_ = /* @__PURE__ */ new j();
class q3 extends _x {
  /**
   * Constructs a new point light shadow.
   */
  constructor() {
    super(new Zi(90, 1, 0.5, 500)), this.isPointLightShadow = !0, this._frameExtents = new De(4, 2), this._viewportCount = 6, this._viewports = [
      // These viewports map a cube-map onto a 2D texture with the
      // following orientation:
      //
      //  xzXZ
      //   y Y
      //
      // X - Positive x direction
      // x - Negative x direction
      // Y - Positive y direction
      // y - Negative y direction
      // Z - Positive z direction
      // z - Negative z direction
      // positive X
      new xn(2, 1, 1, 1),
      // negative X
      new xn(0, 1, 1, 1),
      // positive Z
      new xn(3, 1, 1, 1),
      // negative Z
      new xn(1, 1, 1, 1),
      // positive Y
      new xn(3, 0, 1, 1),
      // negative Y
      new xn(1, 0, 1, 1)
    ], this._cubeDirections = [
      new j(1, 0, 0),
      new j(-1, 0, 0),
      new j(0, 0, 1),
      new j(0, 0, -1),
      new j(0, 1, 0),
      new j(0, -1, 0)
    ], this._cubeUps = [
      new j(0, 1, 0),
      new j(0, 1, 0),
      new j(0, 1, 0),
      new j(0, 1, 0),
      new j(0, 0, 1),
      new j(0, 0, -1)
    ];
  }
  /**
   * Update the matrices for the camera and shadow, used internally by the renderer.
   *
   * @param {Light} light - The light for which the shadow is being rendered.
   * @param {number} [viewportIndex=0] - The viewport index.
   */
  updateMatrices(e, n = 0) {
    const i = this.camera, r = this.matrix, c = e.distance || i.far;
    c !== i.far && (i.far = c, i.updateProjectionMatrix()), Cp.setFromMatrixPosition(e.matrixWorld), i.position.copy(Cp), H_.copy(i.position), H_.add(this._cubeDirections[n]), i.up.copy(this._cubeUps[n]), i.lookAt(H_), i.updateMatrixWorld(), r.makeTranslation(-Cp.x, -Cp.y, -Cp.z), vM.multiplyMatrices(i.projectionMatrix, i.matrixWorldInverse), this._frustum.setFromProjectionMatrix(vM, i.coordinateSystem, i.reversedDepth);
  }
}
class fT extends Oc {
  /**
   * Constructs a new point light.
   *
   * @param {(number|Color|string)} [color=0xffffff] - The light's color.
   * @param {number} [intensity=1] - The light's strength/intensity measured in candela (cd).
   * @param {number} [distance=0] - Maximum range of the light. `0` means no limit.
   * @param {number} [decay=2] - The amount the light dims along the distance of the light.
   */
  constructor(e, n, i = 0, r = 2) {
    super(e, n), this.isPointLight = !0, this.type = "PointLight", this.distance = i, this.decay = r, this.shadow = new q3();
  }
  /**
   * The light's power. Power is the luminous power of the light measured in lumens (lm).
   * Changing the power will also change the light's intensity.
   *
   * @type {number}
   */
  get power() {
    return this.intensity * 4 * Math.PI;
  }
  set power(e) {
    this.intensity = e / (4 * Math.PI);
  }
  dispose() {
    this.shadow.dispose();
  }
  copy(e, n) {
    return super.copy(e, n), this.distance = e.distance, this.decay = e.decay, this.shadow = e.shadow.clone(), this;
  }
}
class _m extends fm {
  /**
   * Constructs a new orthographic camera.
   *
   * @param {number} [left=-1] - The left plane of the camera's frustum.
   * @param {number} [right=1] - The right plane of the camera's frustum.
   * @param {number} [top=1] - The top plane of the camera's frustum.
   * @param {number} [bottom=-1] - The bottom plane of the camera's frustum.
   * @param {number} [near=0.1] - The camera's near plane.
   * @param {number} [far=2000] - The camera's far plane.
   */
  constructor(e = -1, n = 1, i = 1, r = -1, c = 0.1, h = 2e3) {
    super(), this.isOrthographicCamera = !0, this.type = "OrthographicCamera", this.zoom = 1, this.view = null, this.left = e, this.right = n, this.top = i, this.bottom = r, this.near = c, this.far = h, this.updateProjectionMatrix();
  }
  copy(e, n) {
    return super.copy(e, n), this.left = e.left, this.right = e.right, this.top = e.top, this.bottom = e.bottom, this.near = e.near, this.far = e.far, this.zoom = e.zoom, this.view = e.view === null ? null : Object.assign({}, e.view), this;
  }
  /**
   * Sets an offset in a larger frustum. This is useful for multi-window or
   * multi-monitor/multi-machine setups.
   *
   * @param {number} fullWidth - The full width of multiview setup.
   * @param {number} fullHeight - The full height of multiview setup.
   * @param {number} x - The horizontal offset of the subcamera.
   * @param {number} y - The vertical offset of the subcamera.
   * @param {number} width - The width of subcamera.
   * @param {number} height - The height of subcamera.
   * @see {@link PerspectiveCamera#setViewOffset}
   */
  setViewOffset(e, n, i, r, c, h) {
    this.view === null && (this.view = {
      enabled: !0,
      fullWidth: 1,
      fullHeight: 1,
      offsetX: 0,
      offsetY: 0,
      width: 1,
      height: 1
    }), this.view.enabled = !0, this.view.fullWidth = e, this.view.fullHeight = n, this.view.offsetX = i, this.view.offsetY = r, this.view.width = c, this.view.height = h, this.updateProjectionMatrix();
  }
  /**
   * Removes the view offset from the projection matrix.
   */
  clearViewOffset() {
    this.view !== null && (this.view.enabled = !1), this.updateProjectionMatrix();
  }
  /**
   * Updates the camera's projection matrix. Must be called after any change of
   * camera properties.
   */
  updateProjectionMatrix() {
    const e = (this.right - this.left) / (2 * this.zoom), n = (this.top - this.bottom) / (2 * this.zoom), i = (this.right + this.left) / 2, r = (this.top + this.bottom) / 2;
    let c = i - e, h = i + e, d = r + n, v = r - n;
    if (this.view !== null && this.view.enabled) {
      const g = (this.right - this.left) / this.view.fullWidth / this.zoom, S = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
      c += g * this.view.offsetX, h = c + g * this.view.width, d -= S * this.view.offsetY, v = d - S * this.view.height;
    }
    this.projectionMatrix.makeOrthographic(c, h, d, v, this.near, this.far, this.coordinateSystem, this.reversedDepth), this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
  }
  toJSON(e) {
    const n = super.toJSON(e);
    return n.object.zoom = this.zoom, n.object.left = this.left, n.object.right = this.right, n.object.top = this.top, n.object.bottom = this.bottom, n.object.near = this.near, n.object.far = this.far, this.view !== null && (n.object.view = Object.assign({}, this.view)), n;
  }
}
class Y3 extends _x {
  /**
   * Constructs a new directional light shadow.
   */
  constructor() {
    super(new _m(-5, 5, 5, -5, 0.5, 500)), this.isDirectionalLightShadow = !0;
  }
}
class hT extends Oc {
  /**
   * Constructs a new directional light.
   *
   * @param {(number|Color|string)} [color=0xffffff] - The light's color.
   * @param {number} [intensity=1] - The light's strength/intensity.
   */
  constructor(e, n) {
    super(e, n), this.isDirectionalLight = !0, this.type = "DirectionalLight", this.position.copy(Mn.DEFAULT_UP), this.updateMatrix(), this.target = new Mn(), this.shadow = new Y3();
  }
  dispose() {
    this.shadow.dispose();
  }
  copy(e) {
    return super.copy(e), this.target = e.target.clone(), this.shadow = e.shadow.clone(), this;
  }
}
class dT extends Oc {
  /**
   * Constructs a new ambient light.
   *
   * @param {(number|Color|string)} [color=0xffffff] - The light's color.
   * @param {number} [intensity=1] - The light's strength/intensity.
   */
  constructor(e, n) {
    super(e, n), this.isAmbientLight = !0, this.type = "AmbientLight";
  }
}
class pT extends Oc {
  /**
   * Constructs a new area light.
   *
   * @param {(number|Color|string)} [color=0xffffff] - The light's color.
   * @param {number} [intensity=1] - The light's strength/intensity.
   * @param {number} [width=10] - The width of the light.
   * @param {number} [height=10] - The height of the light.
   */
  constructor(e, n, i = 10, r = 10) {
    super(e, n), this.isRectAreaLight = !0, this.type = "RectAreaLight", this.width = i, this.height = r;
  }
  /**
   * The light's power. Power is the luminous power of the light measured in lumens (lm).
   * Changing the power will also change the light's intensity.
   *
   * @type {number}
   */
  get power() {
    return this.intensity * this.width * this.height * Math.PI;
  }
  set power(e) {
    this.intensity = e / (this.width * this.height * Math.PI);
  }
  copy(e) {
    return super.copy(e), this.width = e.width, this.height = e.height, this;
  }
  toJSON(e) {
    const n = super.toJSON(e);
    return n.object.width = this.width, n.object.height = this.height, n;
  }
}
class mT {
  /**
   * Constructs a new spherical harmonics.
   */
  constructor() {
    this.isSphericalHarmonics3 = !0, this.coefficients = [];
    for (let e = 0; e < 9; e++)
      this.coefficients.push(new j());
  }
  /**
   * Sets the given SH coefficients to this instance by copying
   * the values.
   *
   * @param {Array<Vector3>} coefficients - The SH coefficients.
   * @return {SphericalHarmonics3} A reference to this spherical harmonics.
   */
  set(e) {
    for (let n = 0; n < 9; n++)
      this.coefficients[n].copy(e[n]);
    return this;
  }
  /**
   * Sets all SH coefficients to `0`.
   *
   * @return {SphericalHarmonics3} A reference to this spherical harmonics.
   */
  zero() {
    for (let e = 0; e < 9; e++)
      this.coefficients[e].set(0, 0, 0);
    return this;
  }
  /**
   * Returns the radiance in the direction of the given normal.
   *
   * @param {Vector3} normal - The normal vector (assumed to be unit length)
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The radiance.
   */
  getAt(e, n) {
    const i = e.x, r = e.y, c = e.z, h = this.coefficients;
    return n.copy(h[0]).multiplyScalar(0.282095), n.addScaledVector(h[1], 0.488603 * r), n.addScaledVector(h[2], 0.488603 * c), n.addScaledVector(h[3], 0.488603 * i), n.addScaledVector(h[4], 1.092548 * (i * r)), n.addScaledVector(h[5], 1.092548 * (r * c)), n.addScaledVector(h[6], 0.315392 * (3 * c * c - 1)), n.addScaledVector(h[7], 1.092548 * (i * c)), n.addScaledVector(h[8], 0.546274 * (i * i - r * r)), n;
  }
  /**
   * Returns the irradiance (radiance convolved with cosine lobe) in the
   * direction of the given normal.
   *
   * @param {Vector3} normal - The normal vector (assumed to be unit length)
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The irradiance.
   */
  getIrradianceAt(e, n) {
    const i = e.x, r = e.y, c = e.z, h = this.coefficients;
    return n.copy(h[0]).multiplyScalar(0.886227), n.addScaledVector(h[1], 2 * 0.511664 * r), n.addScaledVector(h[2], 2 * 0.511664 * c), n.addScaledVector(h[3], 2 * 0.511664 * i), n.addScaledVector(h[4], 2 * 0.429043 * i * r), n.addScaledVector(h[5], 2 * 0.429043 * r * c), n.addScaledVector(h[6], 0.743125 * c * c - 0.247708), n.addScaledVector(h[7], 2 * 0.429043 * i * c), n.addScaledVector(h[8], 0.429043 * (i * i - r * r)), n;
  }
  /**
   * Adds the given SH to this instance.
   *
   * @param {SphericalHarmonics3} sh - The SH to add.
   * @return {SphericalHarmonics3} A reference to this spherical harmonics.
   */
  add(e) {
    for (let n = 0; n < 9; n++)
      this.coefficients[n].add(e.coefficients[n]);
    return this;
  }
  /**
   * A convenience method for performing {@link SphericalHarmonics3#add} and
   * {@link SphericalHarmonics3#scale} at once.
   *
   * @param {SphericalHarmonics3} sh - The SH to add.
   * @param {number} s - The scale factor.
   * @return {SphericalHarmonics3} A reference to this spherical harmonics.
   */
  addScaledSH(e, n) {
    for (let i = 0; i < 9; i++)
      this.coefficients[i].addScaledVector(e.coefficients[i], n);
    return this;
  }
  /**
   * Scales this SH by the given scale factor.
   *
   * @param {number} s - The scale factor.
   * @return {SphericalHarmonics3} A reference to this spherical harmonics.
   */
  scale(e) {
    for (let n = 0; n < 9; n++)
      this.coefficients[n].multiplyScalar(e);
    return this;
  }
  /**
   * Linear interpolates between the given SH and this instance by the given
   * alpha factor.
   *
   * @param {SphericalHarmonics3} sh - The SH to interpolate with.
   * @param {number} alpha - The alpha factor.
   * @return {SphericalHarmonics3} A reference to this spherical harmonics.
   */
  lerp(e, n) {
    for (let i = 0; i < 9; i++)
      this.coefficients[i].lerp(e.coefficients[i], n);
    return this;
  }
  /**
   * Returns `true` if this spherical harmonics is equal with the given one.
   *
   * @param {SphericalHarmonics3} sh - The spherical harmonics to test for equality.
   * @return {boolean} Whether this spherical harmonics is equal with the given one.
   */
  equals(e) {
    for (let n = 0; n < 9; n++)
      if (!this.coefficients[n].equals(e.coefficients[n]))
        return !1;
    return !0;
  }
  /**
   * Copies the values of the given spherical harmonics to this instance.
   *
   * @param {SphericalHarmonics3} sh - The spherical harmonics to copy.
   * @return {SphericalHarmonics3} A reference to this spherical harmonics.
   */
  copy(e) {
    return this.set(e.coefficients);
  }
  /**
   * Returns a new spherical harmonics with copied values from this instance.
   *
   * @return {SphericalHarmonics3} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
  /**
   * Sets the SH coefficients of this instance from the given array.
   *
   * @param {Array<number>} array - An array holding the SH coefficients.
   * @param {number} [offset=0] - The array offset where to start copying.
   * @return {SphericalHarmonics3} A clone of this instance.
   */
  fromArray(e, n = 0) {
    const i = this.coefficients;
    for (let r = 0; r < 9; r++)
      i[r].fromArray(e, n + r * 3);
    return this;
  }
  /**
   * Returns an array with the SH coefficients, or copies them into the provided
   * array. The coefficients are represented as numbers.
   *
   * @param {Array<number>} [array=[]] - The target array.
   * @param {number} [offset=0] - The array offset where to start copying.
   * @return {Array<number>} An array with flat SH coefficients.
   */
  toArray(e = [], n = 0) {
    const i = this.coefficients;
    for (let r = 0; r < 9; r++)
      i[r].toArray(e, n + r * 3);
    return e;
  }
  /**
   * Computes the SH basis for the given normal vector.
   *
   * @param {Vector3} normal - The normal.
   * @param {Array<number>} shBasis - The target array holding the SH basis.
   */
  static getBasisAt(e, n) {
    const i = e.x, r = e.y, c = e.z;
    n[0] = 0.282095, n[1] = 0.488603 * r, n[2] = 0.488603 * c, n[3] = 0.488603 * i, n[4] = 1.092548 * i * r, n[5] = 1.092548 * r * c, n[6] = 0.315392 * (3 * c * c - 1), n[7] = 1.092548 * i * c, n[8] = 0.546274 * (i * i - r * r);
  }
}
class vT extends Oc {
  /**
   * Constructs a new light probe.
   *
   * @param {SphericalHarmonics3} sh - The spherical harmonics which represents encoded lighting information.
   * @param {number} [intensity=1] - The light's strength/intensity.
   */
  constructor(e = new mT(), n = 1) {
    super(void 0, n), this.isLightProbe = !0, this.sh = e;
  }
  copy(e) {
    return super.copy(e), this.sh.copy(e.sh), this;
  }
  /**
   * Deserializes the light prove from the given JSON.
   *
   * @param {Object} json - The JSON holding the serialized light probe.
   * @return {LightProbe} A reference to this light probe.
   */
  fromJSON(e) {
    return this.intensity = e.intensity, this.sh.fromArray(e.sh), this;
  }
  toJSON(e) {
    const n = super.toJSON(e);
    return n.object.sh = this.sh.toArray(), n;
  }
}
class my extends Ts {
  /**
   * Constructs a new material loader.
   *
   * @param {LoadingManager} [manager] - The loading manager.
   */
  constructor(e) {
    super(e), this.textures = {};
  }
  /**
   * Starts loading from the given URL and pass the loaded material to the `onLoad()` callback.
   *
   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.
   * @param {function(Material)} onLoad - Executed when the loading process has been finished.
   * @param {onProgressCallback} onProgress - Executed while the loading is in progress.
   * @param {onErrorCallback} onError - Executed when errors occur.
   */
  load(e, n, i, r) {
    const c = this, h = new xl(c.manager);
    h.setPath(c.path), h.setRequestHeader(c.requestHeader), h.setWithCredentials(c.withCredentials), h.load(e, function(d) {
      try {
        n(c.parse(JSON.parse(d)));
      } catch (v) {
        r ? r(v) : console.error(v), c.manager.itemError(e);
      }
    }, i, r);
  }
  /**
   * Parses the given JSON object and returns a material.
   *
   * @param {Object} json - The serialized material.
   * @return {Material} The parsed material.
   */
  parse(e) {
    const n = this.textures;
    function i(c) {
      return n[c] === void 0 && console.warn("THREE.MaterialLoader: Undefined texture", c), n[c];
    }
    const r = this.createMaterialFromType(e.type);
    if (e.uuid !== void 0 && (r.uuid = e.uuid), e.name !== void 0 && (r.name = e.name), e.color !== void 0 && r.color !== void 0 && r.color.setHex(e.color), e.roughness !== void 0 && (r.roughness = e.roughness), e.metalness !== void 0 && (r.metalness = e.metalness), e.sheen !== void 0 && (r.sheen = e.sheen), e.sheenColor !== void 0 && (r.sheenColor = new lt().setHex(e.sheenColor)), e.sheenRoughness !== void 0 && (r.sheenRoughness = e.sheenRoughness), e.emissive !== void 0 && r.emissive !== void 0 && r.emissive.setHex(e.emissive), e.specular !== void 0 && r.specular !== void 0 && r.specular.setHex(e.specular), e.specularIntensity !== void 0 && (r.specularIntensity = e.specularIntensity), e.specularColor !== void 0 && r.specularColor !== void 0 && r.specularColor.setHex(e.specularColor), e.shininess !== void 0 && (r.shininess = e.shininess), e.clearcoat !== void 0 && (r.clearcoat = e.clearcoat), e.clearcoatRoughness !== void 0 && (r.clearcoatRoughness = e.clearcoatRoughness), e.dispersion !== void 0 && (r.dispersion = e.dispersion), e.iridescence !== void 0 && (r.iridescence = e.iridescence), e.iridescenceIOR !== void 0 && (r.iridescenceIOR = e.iridescenceIOR), e.iridescenceThicknessRange !== void 0 && (r.iridescenceThicknessRange = e.iridescenceThicknessRange), e.transmission !== void 0 && (r.transmission = e.transmission), e.thickness !== void 0 && (r.thickness = e.thickness), e.attenuationDistance !== void 0 && (r.attenuationDistance = e.attenuationDistance), e.attenuationColor !== void 0 && r.attenuationColor !== void 0 && r.attenuationColor.setHex(e.attenuationColor), e.anisotropy !== void 0 && (r.anisotropy = e.anisotropy), e.anisotropyRotation !== void 0 && (r.anisotropyRotation = e.anisotropyRotation), e.fog !== void 0 && (r.fog = e.fog), e.flatShading !== void 0 && (r.flatShading = e.flatShading), e.blending !== void 0 && (r.blending = e.blending), e.combine !== void 0 && (r.combine = e.combine), e.side !== void 0 && (r.side = e.side), e.shadowSide !== void 0 && (r.shadowSide = e.shadowSide), e.opacity !== void 0 && (r.opacity = e.opacity), e.transparent !== void 0 && (r.transparent = e.transparent), e.alphaTest !== void 0 && (r.alphaTest = e.alphaTest), e.alphaHash !== void 0 && (r.alphaHash = e.alphaHash), e.depthFunc !== void 0 && (r.depthFunc = e.depthFunc), e.depthTest !== void 0 && (r.depthTest = e.depthTest), e.depthWrite !== void 0 && (r.depthWrite = e.depthWrite), e.colorWrite !== void 0 && (r.colorWrite = e.colorWrite), e.blendSrc !== void 0 && (r.blendSrc = e.blendSrc), e.blendDst !== void 0 && (r.blendDst = e.blendDst), e.blendEquation !== void 0 && (r.blendEquation = e.blendEquation), e.blendSrcAlpha !== void 0 && (r.blendSrcAlpha = e.blendSrcAlpha), e.blendDstAlpha !== void 0 && (r.blendDstAlpha = e.blendDstAlpha), e.blendEquationAlpha !== void 0 && (r.blendEquationAlpha = e.blendEquationAlpha), e.blendColor !== void 0 && r.blendColor !== void 0 && r.blendColor.setHex(e.blendColor), e.blendAlpha !== void 0 && (r.blendAlpha = e.blendAlpha), e.stencilWriteMask !== void 0 && (r.stencilWriteMask = e.stencilWriteMask), e.stencilFunc !== void 0 && (r.stencilFunc = e.stencilFunc), e.stencilRef !== void 0 && (r.stencilRef = e.stencilRef), e.stencilFuncMask !== void 0 && (r.stencilFuncMask = e.stencilFuncMask), e.stencilFail !== void 0 && (r.stencilFail = e.stencilFail), e.stencilZFail !== void 0 && (r.stencilZFail = e.stencilZFail), e.stencilZPass !== void 0 && (r.stencilZPass = e.stencilZPass), e.stencilWrite !== void 0 && (r.stencilWrite = e.stencilWrite), e.wireframe !== void 0 && (r.wireframe = e.wireframe), e.wireframeLinewidth !== void 0 && (r.wireframeLinewidth = e.wireframeLinewidth), e.wireframeLinecap !== void 0 && (r.wireframeLinecap = e.wireframeLinecap), e.wireframeLinejoin !== void 0 && (r.wireframeLinejoin = e.wireframeLinejoin), e.rotation !== void 0 && (r.rotation = e.rotation), e.linewidth !== void 0 && (r.linewidth = e.linewidth), e.dashSize !== void 0 && (r.dashSize = e.dashSize), e.gapSize !== void 0 && (r.gapSize = e.gapSize), e.scale !== void 0 && (r.scale = e.scale), e.polygonOffset !== void 0 && (r.polygonOffset = e.polygonOffset), e.polygonOffsetFactor !== void 0 && (r.polygonOffsetFactor = e.polygonOffsetFactor), e.polygonOffsetUnits !== void 0 && (r.polygonOffsetUnits = e.polygonOffsetUnits), e.dithering !== void 0 && (r.dithering = e.dithering), e.alphaToCoverage !== void 0 && (r.alphaToCoverage = e.alphaToCoverage), e.premultipliedAlpha !== void 0 && (r.premultipliedAlpha = e.premultipliedAlpha), e.forceSinglePass !== void 0 && (r.forceSinglePass = e.forceSinglePass), e.visible !== void 0 && (r.visible = e.visible), e.toneMapped !== void 0 && (r.toneMapped = e.toneMapped), e.userData !== void 0 && (r.userData = e.userData), e.vertexColors !== void 0 && (typeof e.vertexColors == "number" ? r.vertexColors = e.vertexColors > 0 : r.vertexColors = e.vertexColors), e.uniforms !== void 0)
      for (const c in e.uniforms) {
        const h = e.uniforms[c];
        switch (r.uniforms[c] = {}, h.type) {
          case "t":
            r.uniforms[c].value = i(h.value);
            break;
          case "c":
            r.uniforms[c].value = new lt().setHex(h.value);
            break;
          case "v2":
            r.uniforms[c].value = new De().fromArray(h.value);
            break;
          case "v3":
            r.uniforms[c].value = new j().fromArray(h.value);
            break;
          case "v4":
            r.uniforms[c].value = new xn().fromArray(h.value);
            break;
          case "m3":
            r.uniforms[c].value = new Qt().fromArray(h.value);
            break;
          case "m4":
            r.uniforms[c].value = new Ft().fromArray(h.value);
            break;
          default:
            r.uniforms[c].value = h.value;
        }
      }
    if (e.defines !== void 0 && (r.defines = e.defines), e.vertexShader !== void 0 && (r.vertexShader = e.vertexShader), e.fragmentShader !== void 0 && (r.fragmentShader = e.fragmentShader), e.glslVersion !== void 0 && (r.glslVersion = e.glslVersion), e.extensions !== void 0)
      for (const c in e.extensions)
        r.extensions[c] = e.extensions[c];
    if (e.lights !== void 0 && (r.lights = e.lights), e.clipping !== void 0 && (r.clipping = e.clipping), e.size !== void 0 && (r.size = e.size), e.sizeAttenuation !== void 0 && (r.sizeAttenuation = e.sizeAttenuation), e.map !== void 0 && (r.map = i(e.map)), e.matcap !== void 0 && (r.matcap = i(e.matcap)), e.alphaMap !== void 0 && (r.alphaMap = i(e.alphaMap)), e.bumpMap !== void 0 && (r.bumpMap = i(e.bumpMap)), e.bumpScale !== void 0 && (r.bumpScale = e.bumpScale), e.normalMap !== void 0 && (r.normalMap = i(e.normalMap)), e.normalMapType !== void 0 && (r.normalMapType = e.normalMapType), e.normalScale !== void 0) {
      let c = e.normalScale;
      Array.isArray(c) === !1 && (c = [c, c]), r.normalScale = new De().fromArray(c);
    }
    return e.displacementMap !== void 0 && (r.displacementMap = i(e.displacementMap)), e.displacementScale !== void 0 && (r.displacementScale = e.displacementScale), e.displacementBias !== void 0 && (r.displacementBias = e.displacementBias), e.roughnessMap !== void 0 && (r.roughnessMap = i(e.roughnessMap)), e.metalnessMap !== void 0 && (r.metalnessMap = i(e.metalnessMap)), e.emissiveMap !== void 0 && (r.emissiveMap = i(e.emissiveMap)), e.emissiveIntensity !== void 0 && (r.emissiveIntensity = e.emissiveIntensity), e.specularMap !== void 0 && (r.specularMap = i(e.specularMap)), e.specularIntensityMap !== void 0 && (r.specularIntensityMap = i(e.specularIntensityMap)), e.specularColorMap !== void 0 && (r.specularColorMap = i(e.specularColorMap)), e.envMap !== void 0 && (r.envMap = i(e.envMap)), e.envMapRotation !== void 0 && r.envMapRotation.fromArray(e.envMapRotation), e.envMapIntensity !== void 0 && (r.envMapIntensity = e.envMapIntensity), e.reflectivity !== void 0 && (r.reflectivity = e.reflectivity), e.refractionRatio !== void 0 && (r.refractionRatio = e.refractionRatio), e.lightMap !== void 0 && (r.lightMap = i(e.lightMap)), e.lightMapIntensity !== void 0 && (r.lightMapIntensity = e.lightMapIntensity), e.aoMap !== void 0 && (r.aoMap = i(e.aoMap)), e.aoMapIntensity !== void 0 && (r.aoMapIntensity = e.aoMapIntensity), e.gradientMap !== void 0 && (r.gradientMap = i(e.gradientMap)), e.clearcoatMap !== void 0 && (r.clearcoatMap = i(e.clearcoatMap)), e.clearcoatRoughnessMap !== void 0 && (r.clearcoatRoughnessMap = i(e.clearcoatRoughnessMap)), e.clearcoatNormalMap !== void 0 && (r.clearcoatNormalMap = i(e.clearcoatNormalMap)), e.clearcoatNormalScale !== void 0 && (r.clearcoatNormalScale = new De().fromArray(e.clearcoatNormalScale)), e.iridescenceMap !== void 0 && (r.iridescenceMap = i(e.iridescenceMap)), e.iridescenceThicknessMap !== void 0 && (r.iridescenceThicknessMap = i(e.iridescenceThicknessMap)), e.transmissionMap !== void 0 && (r.transmissionMap = i(e.transmissionMap)), e.thicknessMap !== void 0 && (r.thicknessMap = i(e.thicknessMap)), e.anisotropyMap !== void 0 && (r.anisotropyMap = i(e.anisotropyMap)), e.sheenColorMap !== void 0 && (r.sheenColorMap = i(e.sheenColorMap)), e.sheenRoughnessMap !== void 0 && (r.sheenRoughnessMap = i(e.sheenRoughnessMap)), r;
  }
  /**
   * Textures are not embedded in the material JSON so they have
   * to be injected before the loading process starts.
   *
   * @param {Object} value - A dictionary holding textures for material properties.
   * @return {MaterialLoader} A reference to this material loader.
   */
  setTextures(e) {
    return this.textures = e, this;
  }
  /**
   * Creates a material for the given type.
   *
   * @param {string} type - The material type.
   * @return {Material} The new material.
   */
  createMaterialFromType(e) {
    return my.createMaterialFromType(e);
  }
  /**
   * Creates a material for the given type.
   *
   * @static
   * @param {string} type - The material type.
   * @return {Material} The new material.
   */
  static createMaterialFromType(e) {
    const n = {
      ShadowMaterial: jE,
      SpriteMaterial: nx,
      RawShaderMaterial: QE,
      ShaderMaterial: ts,
      PointsMaterial: ax,
      MeshPhysicalMaterial: KE,
      MeshStandardMaterial: fx,
      MeshPhongMaterial: JE,
      MeshToonMaterial: $E,
      MeshNormalMaterial: hx,
      MeshLambertMaterial: eT,
      MeshDepthMaterial: dx,
      MeshDistanceMaterial: px,
      MeshBasicMaterial: Uc,
      MeshMatcapMaterial: tT,
      LineDashedMaterial: nT,
      LineBasicMaterial: ns,
      Material: sa
    };
    return new n[e]();
  }
}
class RS {
  /**
   * Extracts the base URL from the given URL.
   *
   * @param {string} url -The URL to extract the base URL from.
   * @return {string} The extracted base URL.
   */
  static extractUrlBase(e) {
    const n = e.lastIndexOf("/");
    return n === -1 ? "./" : e.slice(0, n + 1);
  }
  /**
   * Resolves relative URLs against the given path. Absolute paths, data urls,
   * and blob URLs will be returned as is. Invalid URLs will return an empty
   * string.
   *
   * @param {string} url -The URL to resolve.
   * @param {string} path - The base path for relative URLs to be resolved against.
   * @return {string} The resolved URL.
   */
  static resolveURL(e, n) {
    return typeof e != "string" || e === "" ? "" : (/^https?:\/\//i.test(n) && /^\//.test(e) && (n = n.replace(/(^https?:\/\/[^\/]+).*/i, "$1")), /^(https?:)?\/\//i.test(e) || /^data:.*,.*$/i.test(e) || /^blob:.*$/i.test(e) ? e : n + e);
  }
}
class gT extends Kt {
  /**
   * Constructs a new instanced buffer geometry.
   */
  constructor() {
    super(), this.isInstancedBufferGeometry = !0, this.type = "InstancedBufferGeometry", this.instanceCount = 1 / 0;
  }
  copy(e) {
    return super.copy(e), this.instanceCount = e.instanceCount, this;
  }
  toJSON() {
    const e = super.toJSON();
    return e.instanceCount = this.instanceCount, e.isInstancedBufferGeometry = !0, e;
  }
}
class yT extends Ts {
  /**
   * Constructs a new geometry loader.
   *
   * @param {LoadingManager} [manager] - The loading manager.
   */
  constructor(e) {
    super(e);
  }
  /**
   * Starts loading from the given URL and pass the loaded geometry to the `onLoad()` callback.
   *
   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.
   * @param {function(BufferGeometry)} onLoad - Executed when the loading process has been finished.
   * @param {onProgressCallback} onProgress - Executed while the loading is in progress.
   * @param {onErrorCallback} onError - Executed when errors occur.
   */
  load(e, n, i, r) {
    const c = this, h = new xl(c.manager);
    h.setPath(c.path), h.setRequestHeader(c.requestHeader), h.setWithCredentials(c.withCredentials), h.load(e, function(d) {
      try {
        n(c.parse(JSON.parse(d)));
      } catch (v) {
        r ? r(v) : console.error(v), c.manager.itemError(e);
      }
    }, i, r);
  }
  /**
   * Parses the given JSON object and returns a geometry.
   *
   * @param {Object} json - The serialized geometry.
   * @return {BufferGeometry} The parsed geometry.
   */
  parse(e) {
    const n = {}, i = {};
    function r(b, R) {
      if (n[R] !== void 0) return n[R];
      const C = b.interleavedBuffers[R], E = c(b, C.buffer), U = Lh(C.type, E), N = new K0(U, C.stride);
      return N.uuid = C.uuid, n[R] = N, N;
    }
    function c(b, R) {
      if (i[R] !== void 0) return i[R];
      const C = b.arrayBuffers[R], E = new Uint32Array(C).buffer;
      return i[R] = E, E;
    }
    const h = e.isInstancedBufferGeometry ? new gT() : new Kt(), d = e.data.index;
    if (d !== void 0) {
      const b = Lh(d.type, d.array);
      h.setIndex(new Nn(b, 1));
    }
    const v = e.data.attributes;
    for (const b in v) {
      const R = v[b];
      let w;
      if (R.isInterleavedBufferAttribute) {
        const C = r(e.data, R.data);
        w = new $u(C, R.itemSize, R.offset, R.normalized);
      } else {
        const C = Lh(R.type, R.array), E = R.isInstancedBufferAttribute ? kh : Nn;
        w = new E(C, R.itemSize, R.normalized);
      }
      R.name !== void 0 && (w.name = R.name), R.usage !== void 0 && w.setUsage(R.usage), h.setAttribute(b, w);
    }
    const g = e.data.morphAttributes;
    if (g)
      for (const b in g) {
        const R = g[b], w = [];
        for (let C = 0, E = R.length; C < E; C++) {
          const U = R[C];
          let N;
          if (U.isInterleavedBufferAttribute) {
            const O = r(e.data, U.data);
            N = new $u(O, U.itemSize, U.offset, U.normalized);
          } else {
            const O = Lh(U.type, U.array);
            N = new Nn(O, U.itemSize, U.normalized);
          }
          U.name !== void 0 && (N.name = U.name), w.push(N);
        }
        h.morphAttributes[b] = w;
      }
    e.data.morphTargetsRelative && (h.morphTargetsRelative = !0);
    const x = e.data.groups || e.data.drawcalls || e.data.offsets;
    if (x !== void 0)
      for (let b = 0, R = x.length; b !== R; ++b) {
        const w = x[b];
        h.addGroup(w.start, w.count, w.materialIndex);
      }
    const M = e.data.boundingSphere;
    return M !== void 0 && (h.boundingSphere = new ma().fromJSON(M)), e.name && (h.name = e.name), e.userData && (h.userData = e.userData), h;
  }
}
class k3 extends Ts {
  /**
   * Constructs a new object loader.
   *
   * @param {LoadingManager} [manager] - The loading manager.
   */
  constructor(e) {
    super(e);
  }
  /**
   * Starts loading from the given URL and pass the loaded 3D object to the `onLoad()` callback.
   *
   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.
   * @param {function(Object3D)} onLoad - Executed when the loading process has been finished.
   * @param {onProgressCallback} onProgress - Executed while the loading is in progress.
   * @param {onErrorCallback} onError - Executed when errors occur.
   */
  load(e, n, i, r) {
    const c = this, h = this.path === "" ? RS.extractUrlBase(e) : this.path;
    this.resourcePath = this.resourcePath || h;
    const d = new xl(this.manager);
    d.setPath(this.path), d.setRequestHeader(this.requestHeader), d.setWithCredentials(this.withCredentials), d.load(e, function(v) {
      let g = null;
      try {
        g = JSON.parse(v);
      } catch (x) {
        r !== void 0 && r(x), console.error("THREE:ObjectLoader: Can't parse " + e + ".", x.message);
        return;
      }
      const S = g.metadata;
      if (S === void 0 || S.type === void 0 || S.type.toLowerCase() === "geometry") {
        r !== void 0 && r(new Error("THREE.ObjectLoader: Can't load " + e)), console.error("THREE.ObjectLoader: Can't load " + e);
        return;
      }
      c.parse(g, n);
    }, i, r);
  }
  /**
   * Async version of {@link ObjectLoader#load}.
   *
   * @async
   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.
   * @param {onProgressCallback} onProgress - Executed while the loading is in progress.
   * @return {Promise<Object3D>} A Promise that resolves with the loaded 3D object.
   */
  async loadAsync(e, n) {
    const i = this, r = this.path === "" ? RS.extractUrlBase(e) : this.path;
    this.resourcePath = this.resourcePath || r;
    const c = new xl(this.manager);
    c.setPath(this.path), c.setRequestHeader(this.requestHeader), c.setWithCredentials(this.withCredentials);
    const h = await c.loadAsync(e, n), d = JSON.parse(h), v = d.metadata;
    if (v === void 0 || v.type === void 0 || v.type.toLowerCase() === "geometry")
      throw new Error("THREE.ObjectLoader: Can't load " + e);
    return await i.parseAsync(d);
  }
  /**
   * Parses the given JSON. This is used internally by {@link ObjectLoader#load}
   * but can also be used directly to parse a previously loaded JSON structure.
   *
   * @param {Object} json - The serialized 3D object.
   * @param {onLoad} onLoad - Executed when all resources (e.g. textures) have been fully loaded.
   * @return {Object3D} The parsed 3D object.
   */
  parse(e, n) {
    const i = this.parseAnimations(e.animations), r = this.parseShapes(e.shapes), c = this.parseGeometries(e.geometries, r), h = this.parseImages(e.images, function() {
      n !== void 0 && n(g);
    }), d = this.parseTextures(e.textures, h), v = this.parseMaterials(e.materials, d), g = this.parseObject(e.object, c, v, d, i), S = this.parseSkeletons(e.skeletons, g);
    if (this.bindSkeletons(g, S), this.bindLightTargets(g), n !== void 0) {
      let x = !1;
      for (const M in h)
        if (h[M].data instanceof HTMLImageElement) {
          x = !0;
          break;
        }
      x === !1 && n(g);
    }
    return g;
  }
  /**
   * Async version of {@link ObjectLoader#parse}.
   *
   * @param {Object} json - The serialized 3D object.
   * @return {Promise<Object3D>} A Promise that resolves with the parsed 3D object.
   */
  async parseAsync(e) {
    const n = this.parseAnimations(e.animations), i = this.parseShapes(e.shapes), r = this.parseGeometries(e.geometries, i), c = await this.parseImagesAsync(e.images), h = this.parseTextures(e.textures, c), d = this.parseMaterials(e.materials, h), v = this.parseObject(e.object, r, d, h, n), g = this.parseSkeletons(e.skeletons, v);
    return this.bindSkeletons(v, g), this.bindLightTargets(v), v;
  }
  // internals
  parseShapes(e) {
    const n = {};
    if (e !== void 0)
      for (let i = 0, r = e.length; i < r; i++) {
        const c = new Zu().fromJSON(e[i]);
        n[c.uuid] = c;
      }
    return n;
  }
  parseSkeletons(e, n) {
    const i = {}, r = {};
    if (n.traverse(function(c) {
      c.isBone && (r[c.uuid] = c);
    }), e !== void 0)
      for (let c = 0, h = e.length; c < h; c++) {
        const d = new J0().fromJSON(e[c], r);
        i[d.uuid] = d;
      }
    return i;
  }
  parseGeometries(e, n) {
    const i = {};
    if (e !== void 0) {
      const r = new yT();
      for (let c = 0, h = e.length; c < h; c++) {
        let d;
        const v = e[c];
        switch (v.type) {
          case "BufferGeometry":
          case "InstancedBufferGeometry":
            d = r.parse(v);
            break;
          default:
            v.type in dM ? d = dM[v.type].fromJSON(v, n) : console.warn(`THREE.ObjectLoader: Unsupported geometry type "${v.type}"`);
        }
        d.uuid = v.uuid, v.name !== void 0 && (d.name = v.name), v.userData !== void 0 && (d.userData = v.userData), i[v.uuid] = d;
      }
    }
    return i;
  }
  parseMaterials(e, n) {
    const i = {}, r = {};
    if (e !== void 0) {
      const c = new my();
      c.setTextures(n);
      for (let h = 0, d = e.length; h < d; h++) {
        const v = e[h];
        i[v.uuid] === void 0 && (i[v.uuid] = c.parse(v)), r[v.uuid] = i[v.uuid];
      }
    }
    return r;
  }
  parseAnimations(e) {
    const n = {};
    if (e !== void 0)
      for (let i = 0; i < e.length; i++) {
        const r = e[i], c = sm.parse(r);
        n[c.uuid] = c;
      }
    return n;
  }
  parseImages(e, n) {
    const i = this, r = {};
    let c;
    function h(v) {
      return i.manager.itemStart(v), c.load(v, function() {
        i.manager.itemEnd(v);
      }, void 0, function() {
        i.manager.itemError(v), i.manager.itemEnd(v);
      });
    }
    function d(v) {
      if (typeof v == "string") {
        const g = v, S = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(g) ? g : i.resourcePath + g;
        return h(S);
      } else
        return v.data ? {
          data: Lh(v.type, v.data),
          width: v.width,
          height: v.height
        } : null;
    }
    if (e !== void 0 && e.length > 0) {
      const v = new yx(n);
      c = new rm(v), c.setCrossOrigin(this.crossOrigin);
      for (let g = 0, S = e.length; g < S; g++) {
        const x = e[g], M = x.url;
        if (Array.isArray(M)) {
          const b = [];
          for (let R = 0, w = M.length; R < w; R++) {
            const C = M[R], E = d(C);
            E !== null && (E instanceof HTMLImageElement ? b.push(E) : b.push(new Bo(E.data, E.width, E.height)));
          }
          r[x.uuid] = new Ac(b);
        } else {
          const b = d(x.url);
          r[x.uuid] = new Ac(b);
        }
      }
    }
    return r;
  }
  async parseImagesAsync(e) {
    const n = this, i = {};
    let r;
    async function c(h) {
      if (typeof h == "string") {
        const d = h, v = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(d) ? d : n.resourcePath + d;
        return await r.loadAsync(v);
      } else
        return h.data ? {
          data: Lh(h.type, h.data),
          width: h.width,
          height: h.height
        } : null;
    }
    if (e !== void 0 && e.length > 0) {
      r = new rm(this.manager), r.setCrossOrigin(this.crossOrigin);
      for (let h = 0, d = e.length; h < d; h++) {
        const v = e[h], g = v.url;
        if (Array.isArray(g)) {
          const S = [];
          for (let x = 0, M = g.length; x < M; x++) {
            const b = g[x], R = await c(b);
            R !== null && (R instanceof HTMLImageElement ? S.push(R) : S.push(new Bo(R.data, R.width, R.height)));
          }
          i[v.uuid] = new Ac(S);
        } else {
          const S = await c(v.url);
          i[v.uuid] = new Ac(S);
        }
      }
    }
    return i;
  }
  parseTextures(e, n) {
    function i(c, h) {
      return typeof c == "number" ? c : (console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.", c), h[c]);
    }
    const r = {};
    if (e !== void 0)
      for (let c = 0, h = e.length; c < h; c++) {
        const d = e[c];
        d.image === void 0 && console.warn('THREE.ObjectLoader: No "image" specified for', d.uuid), n[d.image] === void 0 && console.warn("THREE.ObjectLoader: Undefined image", d.image);
        const v = n[d.image], g = v.data;
        let S;
        Array.isArray(g) ? (S = new hm(), g.length === 6 && (S.needsUpdate = !0)) : (g && g.data ? S = new Bo() : S = new si(), g && (S.needsUpdate = !0)), S.source = v, S.uuid = d.uuid, d.name !== void 0 && (S.name = d.name), d.mapping !== void 0 && (S.mapping = i(d.mapping, W3)), d.channel !== void 0 && (S.channel = d.channel), d.offset !== void 0 && S.offset.fromArray(d.offset), d.repeat !== void 0 && S.repeat.fromArray(d.repeat), d.center !== void 0 && S.center.fromArray(d.center), d.rotation !== void 0 && (S.rotation = d.rotation), d.wrap !== void 0 && (S.wrapS = i(d.wrap[0], gM), S.wrapT = i(d.wrap[1], gM)), d.format !== void 0 && (S.format = d.format), d.internalFormat !== void 0 && (S.internalFormat = d.internalFormat), d.type !== void 0 && (S.type = d.type), d.colorSpace !== void 0 && (S.colorSpace = d.colorSpace), d.minFilter !== void 0 && (S.minFilter = i(d.minFilter, yM)), d.magFilter !== void 0 && (S.magFilter = i(d.magFilter, yM)), d.anisotropy !== void 0 && (S.anisotropy = d.anisotropy), d.flipY !== void 0 && (S.flipY = d.flipY), d.generateMipmaps !== void 0 && (S.generateMipmaps = d.generateMipmaps), d.premultiplyAlpha !== void 0 && (S.premultiplyAlpha = d.premultiplyAlpha), d.unpackAlignment !== void 0 && (S.unpackAlignment = d.unpackAlignment), d.compareFunction !== void 0 && (S.compareFunction = d.compareFunction), d.userData !== void 0 && (S.userData = d.userData), r[d.uuid] = S;
      }
    return r;
  }
  parseObject(e, n, i, r, c) {
    let h;
    function d(M) {
      return n[M] === void 0 && console.warn("THREE.ObjectLoader: Undefined geometry", M), n[M];
    }
    function v(M) {
      if (M !== void 0) {
        if (Array.isArray(M)) {
          const b = [];
          for (let R = 0, w = M.length; R < w; R++) {
            const C = M[R];
            i[C] === void 0 && console.warn("THREE.ObjectLoader: Undefined material", C), b.push(i[C]);
          }
          return b;
        }
        return i[M] === void 0 && console.warn("THREE.ObjectLoader: Undefined material", M), i[M];
      }
    }
    function g(M) {
      return r[M] === void 0 && console.warn("THREE.ObjectLoader: Undefined texture", M), r[M];
    }
    let S, x;
    switch (e.type) {
      case "Scene":
        h = new $p(), e.background !== void 0 && (Number.isInteger(e.background) ? h.background = new lt(e.background) : h.background = g(e.background)), e.environment !== void 0 && (h.environment = g(e.environment)), e.fog !== void 0 && (e.fog.type === "Fog" ? h.fog = new Q0(e.fog.color, e.fog.near, e.fog.far) : e.fog.type === "FogExp2" && (h.fog = new j0(e.fog.color, e.fog.density)), e.fog.name !== "" && (h.fog.name = e.fog.name)), e.backgroundBlurriness !== void 0 && (h.backgroundBlurriness = e.backgroundBlurriness), e.backgroundIntensity !== void 0 && (h.backgroundIntensity = e.backgroundIntensity), e.backgroundRotation !== void 0 && h.backgroundRotation.fromArray(e.backgroundRotation), e.environmentIntensity !== void 0 && (h.environmentIntensity = e.environmentIntensity), e.environmentRotation !== void 0 && h.environmentRotation.fromArray(e.environmentRotation);
        break;
      case "PerspectiveCamera":
        h = new Zi(e.fov, e.aspect, e.near, e.far), e.focus !== void 0 && (h.focus = e.focus), e.zoom !== void 0 && (h.zoom = e.zoom), e.filmGauge !== void 0 && (h.filmGauge = e.filmGauge), e.filmOffset !== void 0 && (h.filmOffset = e.filmOffset), e.view !== void 0 && (h.view = Object.assign({}, e.view));
        break;
      case "OrthographicCamera":
        h = new _m(e.left, e.right, e.top, e.bottom, e.near, e.far), e.zoom !== void 0 && (h.zoom = e.zoom), e.view !== void 0 && (h.view = Object.assign({}, e.view));
        break;
      case "AmbientLight":
        h = new dT(e.color, e.intensity);
        break;
      case "DirectionalLight":
        h = new hT(e.color, e.intensity), h.target = e.target || "";
        break;
      case "PointLight":
        h = new fT(e.color, e.intensity, e.distance, e.decay);
        break;
      case "RectAreaLight":
        h = new pT(e.color, e.intensity, e.width, e.height);
        break;
      case "SpotLight":
        h = new uT(e.color, e.intensity, e.distance, e.angle, e.penumbra, e.decay), h.target = e.target || "";
        break;
      case "HemisphereLight":
        h = new cT(e.color, e.groundColor, e.intensity);
        break;
      case "LightProbe":
        h = new vT().fromJSON(e);
        break;
      case "SkinnedMesh":
        S = d(e.geometry), x = v(e.material), h = new NE(S, x), e.bindMode !== void 0 && (h.bindMode = e.bindMode), e.bindMatrix !== void 0 && h.bindMatrix.fromArray(e.bindMatrix), e.skeleton !== void 0 && (h.skeleton = e.skeleton);
        break;
      case "Mesh":
        S = d(e.geometry), x = v(e.material), h = new Ci(S, x);
        break;
      case "InstancedMesh":
        S = d(e.geometry), x = v(e.material);
        const M = e.count, b = e.instanceMatrix, R = e.instanceColor;
        h = new OE(S, x, M), h.instanceMatrix = new kh(new Float32Array(b.array), 16), R !== void 0 && (h.instanceColor = new kh(new Float32Array(R.array), R.itemSize));
        break;
      case "BatchedMesh":
        S = d(e.geometry), x = v(e.material), h = new LE(e.maxInstanceCount, e.maxVertexCount, e.maxIndexCount, x), h.geometry = S, h.perObjectFrustumCulled = e.perObjectFrustumCulled, h.sortObjects = e.sortObjects, h._drawRanges = e.drawRanges, h._reservedRanges = e.reservedRanges, h._geometryInfo = e.geometryInfo.map((w) => {
          let C = null, E = null;
          return w.boundingBox !== void 0 && (C = new wa().fromJSON(w.boundingBox)), w.boundingSphere !== void 0 && (E = new ma().fromJSON(w.boundingSphere)), {
            ...w,
            boundingBox: C,
            boundingSphere: E
          };
        }), h._instanceInfo = e.instanceInfo, h._availableInstanceIds = e._availableInstanceIds, h._availableGeometryIds = e._availableGeometryIds, h._nextIndexStart = e.nextIndexStart, h._nextVertexStart = e.nextVertexStart, h._geometryCount = e.geometryCount, h._maxInstanceCount = e.maxInstanceCount, h._maxVertexCount = e.maxVertexCount, h._maxIndexCount = e.maxIndexCount, h._geometryInitialized = e.geometryInitialized, h._matricesTexture = g(e.matricesTexture.uuid), h._indirectTexture = g(e.indirectTexture.uuid), e.colorsTexture !== void 0 && (h._colorsTexture = g(e.colorsTexture.uuid)), e.boundingSphere !== void 0 && (h.boundingSphere = new ma().fromJSON(e.boundingSphere)), e.boundingBox !== void 0 && (h.boundingBox = new wa().fromJSON(e.boundingBox));
        break;
      case "LOD":
        h = new UE();
        break;
      case "Line":
        h = new Cc(d(e.geometry), v(e.material));
        break;
      case "LineLoop":
        h = new zE(d(e.geometry), v(e.material));
        break;
      case "LineSegments":
        h = new Vo(d(e.geometry), v(e.material));
        break;
      case "PointCloud":
      case "Points":
        h = new BE(d(e.geometry), v(e.material));
        break;
      case "Sprite":
        h = new DE(v(e.material));
        break;
      case "Group":
        h = new zh();
        break;
      case "Bone":
        h = new ix();
        break;
      default:
        h = new Mn();
    }
    if (h.uuid = e.uuid, e.name !== void 0 && (h.name = e.name), e.matrix !== void 0 ? (h.matrix.fromArray(e.matrix), e.matrixAutoUpdate !== void 0 && (h.matrixAutoUpdate = e.matrixAutoUpdate), h.matrixAutoUpdate && h.matrix.decompose(h.position, h.quaternion, h.scale)) : (e.position !== void 0 && h.position.fromArray(e.position), e.rotation !== void 0 && h.rotation.fromArray(e.rotation), e.quaternion !== void 0 && h.quaternion.fromArray(e.quaternion), e.scale !== void 0 && h.scale.fromArray(e.scale)), e.up !== void 0 && h.up.fromArray(e.up), e.castShadow !== void 0 && (h.castShadow = e.castShadow), e.receiveShadow !== void 0 && (h.receiveShadow = e.receiveShadow), e.shadow && (e.shadow.intensity !== void 0 && (h.shadow.intensity = e.shadow.intensity), e.shadow.bias !== void 0 && (h.shadow.bias = e.shadow.bias), e.shadow.normalBias !== void 0 && (h.shadow.normalBias = e.shadow.normalBias), e.shadow.radius !== void 0 && (h.shadow.radius = e.shadow.radius), e.shadow.mapSize !== void 0 && h.shadow.mapSize.fromArray(e.shadow.mapSize), e.shadow.camera !== void 0 && (h.shadow.camera = this.parseObject(e.shadow.camera))), e.visible !== void 0 && (h.visible = e.visible), e.frustumCulled !== void 0 && (h.frustumCulled = e.frustumCulled), e.renderOrder !== void 0 && (h.renderOrder = e.renderOrder), e.userData !== void 0 && (h.userData = e.userData), e.layers !== void 0 && (h.layers.mask = e.layers), e.children !== void 0) {
      const M = e.children;
      for (let b = 0; b < M.length; b++)
        h.add(this.parseObject(M[b], n, i, r, c));
    }
    if (e.animations !== void 0) {
      const M = e.animations;
      for (let b = 0; b < M.length; b++) {
        const R = M[b];
        h.animations.push(c[R]);
      }
    }
    if (e.type === "LOD") {
      e.autoUpdate !== void 0 && (h.autoUpdate = e.autoUpdate);
      const M = e.levels;
      for (let b = 0; b < M.length; b++) {
        const R = M[b], w = h.getObjectByProperty("uuid", R.object);
        w !== void 0 && h.addLevel(w, R.distance, R.hysteresis);
      }
    }
    return h;
  }
  bindSkeletons(e, n) {
    Object.keys(n).length !== 0 && e.traverse(function(i) {
      if (i.isSkinnedMesh === !0 && i.skeleton !== void 0) {
        const r = n[i.skeleton];
        r === void 0 ? console.warn("THREE.ObjectLoader: No skeleton found with UUID:", i.skeleton) : i.bind(r, i.bindMatrix);
      }
    });
  }
  bindLightTargets(e) {
    e.traverse(function(n) {
      if (n.isDirectionalLight || n.isSpotLight) {
        const i = n.target, r = e.getObjectByProperty("uuid", i);
        r !== void 0 ? n.target = r : n.target = new Mn();
      }
    });
  }
}
const W3 = {
  UVMapping: H0,
  CubeReflectionMapping: Sl,
  CubeRefractionMapping: Rc,
  EquirectangularReflectionMapping: qp,
  EquirectangularRefractionMapping: Yp,
  CubeUVReflectionMapping: Qh
}, gM = {
  RepeatWrapping: kp,
  ClampToEdgeWrapping: hr,
  MirroredRepeatWrapping: Wp
}, yM = {
  NearestFilter: wi,
  NearestMipmapNearestFilter: FS,
  NearestMipmapLinearFilter: Oh,
  LinearFilter: di,
  LinearMipmapNearestFilter: Op,
  LinearMipmapLinearFilter: Lo
}, V_ = /* @__PURE__ */ new WeakMap();
class Z3 extends Ts {
  /**
   * Constructs a new image bitmap loader.
   *
   * @param {LoadingManager} [manager] - The loading manager.
   */
  constructor(e) {
    super(e), this.isImageBitmapLoader = !0, typeof createImageBitmap > "u" && console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."), typeof fetch > "u" && console.warn("THREE.ImageBitmapLoader: fetch() not supported."), this.options = { premultiplyAlpha: "none" }, this._abortController = new AbortController();
  }
  /**
   * Sets the given loader options. The structure of the object must match the `options` parameter of
   * [createImageBitmap]{@link https://developer.mozilla.org/en-US/docs/Web/API/Window/createImageBitmap}.
   *
   * @param {Object} options - The loader options to set.
   * @return {ImageBitmapLoader} A reference to this image bitmap loader.
   */
  setOptions(e) {
    return this.options = e, this;
  }
  /**
   * Starts loading from the given URL and pass the loaded image bitmap to the `onLoad()` callback.
   *
   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.
   * @param {function(ImageBitmap)} onLoad - Executed when the loading process has been finished.
   * @param {onProgressCallback} onProgress - Unsupported in this loader.
   * @param {onErrorCallback} onError - Executed when errors occur.
   * @return {ImageBitmap|undefined} The image bitmap.
   */
  load(e, n, i, r) {
    e === void 0 && (e = ""), this.path !== void 0 && (e = this.path + e), e = this.manager.resolveURL(e);
    const c = this, h = zo.get(`image-bitmap:${e}`);
    if (h !== void 0) {
      if (c.manager.itemStart(e), h.then) {
        h.then((g) => {
          if (V_.has(h) === !0)
            r && r(V_.get(h)), c.manager.itemError(e), c.manager.itemEnd(e);
          else
            return n && n(g), c.manager.itemEnd(e), g;
        });
        return;
      }
      return setTimeout(function() {
        n && n(h), c.manager.itemEnd(e);
      }, 0), h;
    }
    const d = {};
    d.credentials = this.crossOrigin === "anonymous" ? "same-origin" : "include", d.headers = this.requestHeader, d.signal = typeof AbortSignal.any == "function" ? AbortSignal.any([this._abortController.signal, this.manager.abortController.signal]) : this._abortController.signal;
    const v = fetch(e, d).then(function(g) {
      return g.blob();
    }).then(function(g) {
      return createImageBitmap(g, Object.assign(c.options, { colorSpaceConversion: "none" }));
    }).then(function(g) {
      return zo.add(`image-bitmap:${e}`, g), n && n(g), c.manager.itemEnd(e), g;
    }).catch(function(g) {
      r && r(g), V_.set(v, g), zo.remove(`image-bitmap:${e}`), c.manager.itemError(e), c.manager.itemEnd(e);
    });
    zo.add(`image-bitmap:${e}`, v), c.manager.itemStart(e);
  }
  /**
   * Aborts ongoing fetch requests.
   *
   * @return {ImageBitmapLoader} A reference to this instance.
   */
  abort() {
    return this._abortController.abort(), this._abortController = new AbortController(), this;
  }
}
let Ug;
class Sx {
  /**
   * Returns the global native audio context.
   *
   * @return {AudioContext} The native audio context.
   */
  static getContext() {
    return Ug === void 0 && (Ug = new (window.AudioContext || window.webkitAudioContext)()), Ug;
  }
  /**
   * Allows to set the global native audio context from outside.
   *
   * @param {AudioContext} value - The native context to set.
   */
  static setContext(e) {
    Ug = e;
  }
}
class j3 extends Ts {
  /**
   * Constructs a new audio loader.
   *
   * @param {LoadingManager} [manager] - The loading manager.
   */
  constructor(e) {
    super(e);
  }
  /**
   * Starts loading from the given URL and passes the loaded audio buffer
   * to the `onLoad()` callback.
   *
   * @param {string} url - The path/URL of the file to be loaded. This can also be a data URI.
   * @param {function(AudioBuffer)} onLoad - Executed when the loading process has been finished.
   * @param {onProgressCallback} onProgress - Executed while the loading is in progress.
   * @param {onErrorCallback} onError - Executed when errors occur.
   */
  load(e, n, i, r) {
    const c = this, h = new xl(this.manager);
    h.setResponseType("arraybuffer"), h.setPath(this.path), h.setRequestHeader(this.requestHeader), h.setWithCredentials(this.withCredentials), h.load(e, function(v) {
      try {
        const g = v.slice(0);
        Sx.getContext().decodeAudioData(g, function(x) {
          n(x);
        }).catch(d);
      } catch (g) {
        d(g);
      }
    }, i, r);
    function d(v) {
      r ? r(v) : console.error(v), c.manager.itemError(e);
    }
  }
}
const _M = /* @__PURE__ */ new Ft(), SM = /* @__PURE__ */ new Ft(), Nu = /* @__PURE__ */ new Ft();
class Q3 {
  /**
   * Constructs a new stereo camera.
   */
  constructor() {
    this.type = "StereoCamera", this.aspect = 1, this.eyeSep = 0.064, this.cameraL = new Zi(), this.cameraL.layers.enable(1), this.cameraL.matrixAutoUpdate = !1, this.cameraR = new Zi(), this.cameraR.layers.enable(2), this.cameraR.matrixAutoUpdate = !1, this._cache = {
      focus: null,
      fov: null,
      aspect: null,
      near: null,
      far: null,
      zoom: null,
      eyeSep: null
    };
  }
  /**
   * Updates the stereo camera based on the given perspective camera.
   *
   * @param {PerspectiveCamera} camera - The perspective camera.
   */
  update(e) {
    const n = this._cache;
    if (n.focus !== e.focus || n.fov !== e.fov || n.aspect !== e.aspect * this.aspect || n.near !== e.near || n.far !== e.far || n.zoom !== e.zoom || n.eyeSep !== this.eyeSep) {
      n.focus = e.focus, n.fov = e.fov, n.aspect = e.aspect * this.aspect, n.near = e.near, n.far = e.far, n.zoom = e.zoom, n.eyeSep = this.eyeSep, Nu.copy(e.projectionMatrix);
      const r = n.eyeSep / 2, c = r * n.near / n.focus, h = n.near * Math.tan(Wu * n.fov * 0.5) / n.zoom;
      let d, v;
      SM.elements[12] = -r, _M.elements[12] = r, d = -h * n.aspect + c, v = h * n.aspect + c, Nu.elements[0] = 2 * n.near / (v - d), Nu.elements[8] = (v + d) / (v - d), this.cameraL.projectionMatrix.copy(Nu), d = -h * n.aspect - c, v = h * n.aspect - c, Nu.elements[0] = 2 * n.near / (v - d), Nu.elements[8] = (v + d) / (v - d), this.cameraR.projectionMatrix.copy(Nu);
    }
    this.cameraL.matrixWorld.copy(e.matrixWorld).multiply(SM), this.cameraR.matrixWorld.copy(e.matrixWorld).multiply(_M);
  }
}
class _T extends Zi {
  /**
   * Constructs a new array camera.
   *
   * @param {Array<PerspectiveCamera>} [array=[]] - An array of perspective sub cameras.
   */
  constructor(e = []) {
    super(), this.isArrayCamera = !0, this.isMultiViewCamera = !1, this.cameras = e;
  }
}
class xx {
  /**
   * Constructs a new clock.
   *
   * @param {boolean} [autoStart=true] - Whether to automatically start the clock when
   * `getDelta()` is called for the first time.
   */
  constructor(e = !0) {
    this.autoStart = e, this.startTime = 0, this.oldTime = 0, this.elapsedTime = 0, this.running = !1;
  }
  /**
   * Starts the clock. When `autoStart` is set to `true`, the method is automatically
   * called by the class.
   */
  start() {
    this.startTime = performance.now(), this.oldTime = this.startTime, this.elapsedTime = 0, this.running = !0;
  }
  /**
   * Stops the clock.
   */
  stop() {
    this.getElapsedTime(), this.running = !1, this.autoStart = !1;
  }
  /**
   * Returns the elapsed time in seconds.
   *
   * @return {number} The elapsed time.
   */
  getElapsedTime() {
    return this.getDelta(), this.elapsedTime;
  }
  /**
   * Returns the delta time in seconds.
   *
   * @return {number} The delta time.
   */
  getDelta() {
    let e = 0;
    if (this.autoStart && !this.running)
      return this.start(), 0;
    if (this.running) {
      const n = performance.now();
      e = (n - this.oldTime) / 1e3, this.oldTime = n, this.elapsedTime += e;
    }
    return e;
  }
}
const Ou = /* @__PURE__ */ new j(), G_ = /* @__PURE__ */ new Es(), K3 = /* @__PURE__ */ new j(), Lu = /* @__PURE__ */ new j(), zu = /* @__PURE__ */ new j();
class J3 extends Mn {
  /**
   * Constructs a new audio listener.
   */
  constructor() {
    super(), this.type = "AudioListener", this.context = Sx.getContext(), this.gain = this.context.createGain(), this.gain.connect(this.context.destination), this.filter = null, this.timeDelta = 0, this._clock = new xx();
  }
  /**
   * Returns the listener's input node.
   *
   * This method is used by other audio nodes to connect to this listener.
   *
   * @return {GainNode} The input node.
   */
  getInput() {
    return this.gain;
  }
  /**
   * Removes the current filter from this listener.
   *
   * @return {AudioListener} A reference to this listener.
   */
  removeFilter() {
    return this.filter !== null && (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination), this.gain.connect(this.context.destination), this.filter = null), this;
  }
  /**
   * Returns the current set filter.
   *
   * @return {?AudioNode} The filter.
   */
  getFilter() {
    return this.filter;
  }
  /**
   * Sets the given filter to this listener.
   *
   * @param {AudioNode} value - The filter to set.
   * @return {AudioListener} A reference to this listener.
   */
  setFilter(e) {
    return this.filter !== null ? (this.gain.disconnect(this.filter), this.filter.disconnect(this.context.destination)) : this.gain.disconnect(this.context.destination), this.filter = e, this.gain.connect(this.filter), this.filter.connect(this.context.destination), this;
  }
  /**
   * Returns the applications master volume.
   *
   * @return {number} The master volume.
   */
  getMasterVolume() {
    return this.gain.gain.value;
  }
  /**
   * Sets the applications master volume. This volume setting affects
   * all audio nodes in the scene.
   *
   * @param {number} value - The master volume to set.
   * @return {AudioListener} A reference to this listener.
   */
  setMasterVolume(e) {
    return this.gain.gain.setTargetAtTime(e, this.context.currentTime, 0.01), this;
  }
  updateMatrixWorld(e) {
    super.updateMatrixWorld(e);
    const n = this.context.listener;
    if (this.timeDelta = this._clock.getDelta(), this.matrixWorld.decompose(Ou, G_, K3), Lu.set(0, 0, -1).applyQuaternion(G_), zu.set(0, 1, 0).applyQuaternion(G_), n.positionX) {
      const i = this.context.currentTime + this.timeDelta;
      n.positionX.linearRampToValueAtTime(Ou.x, i), n.positionY.linearRampToValueAtTime(Ou.y, i), n.positionZ.linearRampToValueAtTime(Ou.z, i), n.forwardX.linearRampToValueAtTime(Lu.x, i), n.forwardY.linearRampToValueAtTime(Lu.y, i), n.forwardZ.linearRampToValueAtTime(Lu.z, i), n.upX.linearRampToValueAtTime(zu.x, i), n.upY.linearRampToValueAtTime(zu.y, i), n.upZ.linearRampToValueAtTime(zu.z, i);
    } else
      n.setPosition(Ou.x, Ou.y, Ou.z), n.setOrientation(Lu.x, Lu.y, Lu.z, zu.x, zu.y, zu.z);
  }
}
class ST extends Mn {
  /**
   * Constructs a new audio.
   *
   * @param {AudioListener} listener - The global audio listener.
   */
  constructor(e) {
    super(), this.type = "Audio", this.listener = e, this.context = e.context, this.gain = this.context.createGain(), this.gain.connect(e.getInput()), this.autoplay = !1, this.buffer = null, this.detune = 0, this.loop = !1, this.loopStart = 0, this.loopEnd = 0, this.offset = 0, this.duration = void 0, this.playbackRate = 1, this.isPlaying = !1, this.hasPlaybackControl = !0, this.source = null, this.sourceType = "empty", this._startedAt = 0, this._progress = 0, this._connected = !1, this.filters = [];
  }
  /**
   * Returns the output audio node.
   *
   * @return {GainNode} The output node.
   */
  getOutput() {
    return this.gain;
  }
  /**
   * Sets the given audio node as the source of this instance.
   *
   * {@link Audio#sourceType} is set to `audioNode` and {@link Audio#hasPlaybackControl} to `false`.
   *
   * @param {AudioNode} audioNode - The audio node like an instance of `OscillatorNode`.
   * @return {Audio} A reference to this instance.
   */
  setNodeSource(e) {
    return this.hasPlaybackControl = !1, this.sourceType = "audioNode", this.source = e, this.connect(), this;
  }
  /**
   * Sets the given media element as the source of this instance.
   *
   * {@link Audio#sourceType} is set to `mediaNode` and {@link Audio#hasPlaybackControl} to `false`.
   *
   * @param {HTMLMediaElement} mediaElement - The media element.
   * @return {Audio} A reference to this instance.
   */
  setMediaElementSource(e) {
    return this.hasPlaybackControl = !1, this.sourceType = "mediaNode", this.source = this.context.createMediaElementSource(e), this.connect(), this;
  }
  /**
   * Sets the given media stream as the source of this instance.
   *
   * {@link Audio#sourceType} is set to `mediaStreamNode` and {@link Audio#hasPlaybackControl} to `false`.
   *
   * @param {MediaStream} mediaStream - The media stream.
   * @return {Audio} A reference to this instance.
   */
  setMediaStreamSource(e) {
    return this.hasPlaybackControl = !1, this.sourceType = "mediaStreamNode", this.source = this.context.createMediaStreamSource(e), this.connect(), this;
  }
  /**
   * Sets the given audio buffer as the source of this instance.
   *
   * {@link Audio#sourceType} is set to `buffer` and {@link Audio#hasPlaybackControl} to `true`.
   *
   * @param {AudioBuffer} audioBuffer - The audio buffer.
   * @return {Audio} A reference to this instance.
   */
  setBuffer(e) {
    return this.buffer = e, this.sourceType = "buffer", this.autoplay && this.play(), this;
  }
  /**
   * Starts the playback of the audio.
   *
   * Can only be used with compatible audio sources that allow playback control.
   *
   * @param {number} [delay=0] - The delay, in seconds, at which the audio should start playing.
   * @return {Audio|undefined} A reference to this instance.
   */
  play(e = 0) {
    if (this.isPlaying === !0) {
      console.warn("THREE.Audio: Audio is already playing.");
      return;
    }
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    this._startedAt = this.context.currentTime + e;
    const n = this.context.createBufferSource();
    return n.buffer = this.buffer, n.loop = this.loop, n.loopStart = this.loopStart, n.loopEnd = this.loopEnd, n.onended = this.onEnded.bind(this), n.start(this._startedAt, this._progress + this.offset, this.duration), this.isPlaying = !0, this.source = n, this.setDetune(this.detune), this.setPlaybackRate(this.playbackRate), this.connect();
  }
  /**
   * Pauses the playback of the audio.
   *
   * Can only be used with compatible audio sources that allow playback control.
   *
   * @return {Audio|undefined} A reference to this instance.
   */
  pause() {
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    return this.isPlaying === !0 && (this._progress += Math.max(this.context.currentTime - this._startedAt, 0) * this.playbackRate, this.loop === !0 && (this._progress = this._progress % (this.duration || this.buffer.duration)), this.source.stop(), this.source.onended = null, this.isPlaying = !1), this;
  }
  /**
   * Stops the playback of the audio.
   *
   * Can only be used with compatible audio sources that allow playback control.
   *
   * @param {number} [delay=0] - The delay, in seconds, at which the audio should stop playing.
   * @return {Audio|undefined} A reference to this instance.
   */
  stop(e = 0) {
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    return this._progress = 0, this.source !== null && (this.source.stop(this.context.currentTime + e), this.source.onended = null), this.isPlaying = !1, this;
  }
  /**
   * Connects to the audio source. This is used internally on
   * initialisation and when setting / removing filters.
   *
   * @return {Audio} A reference to this instance.
   */
  connect() {
    if (this.filters.length > 0) {
      this.source.connect(this.filters[0]);
      for (let e = 1, n = this.filters.length; e < n; e++)
        this.filters[e - 1].connect(this.filters[e]);
      this.filters[this.filters.length - 1].connect(this.getOutput());
    } else
      this.source.connect(this.getOutput());
    return this._connected = !0, this;
  }
  /**
   * Disconnects to the audio source. This is used internally on
   * initialisation and when setting / removing filters.
   *
   * @return {Audio|undefined} A reference to this instance.
   */
  disconnect() {
    if (this._connected !== !1) {
      if (this.filters.length > 0) {
        this.source.disconnect(this.filters[0]);
        for (let e = 1, n = this.filters.length; e < n; e++)
          this.filters[e - 1].disconnect(this.filters[e]);
        this.filters[this.filters.length - 1].disconnect(this.getOutput());
      } else
        this.source.disconnect(this.getOutput());
      return this._connected = !1, this;
    }
  }
  /**
   * Returns the current set filters.
   *
   * @return {Array<AudioNode>} The list of filters.
   */
  getFilters() {
    return this.filters;
  }
  /**
   * Sets an array of filters and connects them with the audio source.
   *
   * @param {Array<AudioNode>} [value] - A list of filters.
   * @return {Audio} A reference to this instance.
   */
  setFilters(e) {
    return e || (e = []), this._connected === !0 ? (this.disconnect(), this.filters = e.slice(), this.connect()) : this.filters = e.slice(), this;
  }
  /**
   * Defines the detuning of oscillation in cents.
   *
   * @param {number} value - The detuning of oscillation in cents.
   * @return {Audio} A reference to this instance.
   */
  setDetune(e) {
    return this.detune = e, this.isPlaying === !0 && this.source.detune !== void 0 && this.source.detune.setTargetAtTime(this.detune, this.context.currentTime, 0.01), this;
  }
  /**
   * Returns the detuning of oscillation in cents.
   *
   * @return {number} The detuning of oscillation in cents.
   */
  getDetune() {
    return this.detune;
  }
  /**
   * Returns the first filter in the list of filters.
   *
   * @return {AudioNode|undefined} The first filter in the list of filters.
   */
  getFilter() {
    return this.getFilters()[0];
  }
  /**
   * Applies a single filter node to the audio.
   *
   * @param {AudioNode} [filter] - The filter to set.
   * @return {Audio} A reference to this instance.
   */
  setFilter(e) {
    return this.setFilters(e ? [e] : []);
  }
  /**
   * Sets the playback rate.
   *
   * Can only be used with compatible audio sources that allow playback control.
   *
   * @param {number} [value] - The playback rate to set.
   * @return {Audio|undefined} A reference to this instance.
   */
  setPlaybackRate(e) {
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    return this.playbackRate = e, this.isPlaying === !0 && this.source.playbackRate.setTargetAtTime(this.playbackRate, this.context.currentTime, 0.01), this;
  }
  /**
  	 * Returns the current playback rate.
  
  	 * @return {number} The playback rate.
  	 */
  getPlaybackRate() {
    return this.playbackRate;
  }
  /**
   * Automatically called when playback finished.
   */
  onEnded() {
    this.isPlaying = !1, this._progress = 0;
  }
  /**
   * Returns the loop flag.
   *
   * Can only be used with compatible audio sources that allow playback control.
   *
   * @return {boolean} Whether the audio should loop or not.
   */
  getLoop() {
    return this.hasPlaybackControl === !1 ? (console.warn("THREE.Audio: this Audio has no playback control."), !1) : this.loop;
  }
  /**
   * Sets the loop flag.
   *
   * Can only be used with compatible audio sources that allow playback control.
   *
   * @param {boolean} value - Whether the audio should loop or not.
   * @return {Audio|undefined} A reference to this instance.
   */
  setLoop(e) {
    if (this.hasPlaybackControl === !1) {
      console.warn("THREE.Audio: this Audio has no playback control.");
      return;
    }
    return this.loop = e, this.isPlaying === !0 && (this.source.loop = this.loop), this;
  }
  /**
   * Sets the loop start value which defines where in the audio buffer the replay should
   * start, in seconds.
   *
   * @param {number} value - The loop start value.
   * @return {Audio} A reference to this instance.
   */
  setLoopStart(e) {
    return this.loopStart = e, this;
  }
  /**
   * Sets the loop end value which defines where in the audio buffer the replay should
   * stop, in seconds.
   *
   * @param {number} value - The loop end value.
   * @return {Audio} A reference to this instance.
   */
  setLoopEnd(e) {
    return this.loopEnd = e, this;
  }
  /**
   * Returns the volume.
   *
   * @return {number} The volume.
   */
  getVolume() {
    return this.gain.gain.value;
  }
  /**
   * Sets the volume.
   *
   * @param {number} value - The volume to set.
   * @return {Audio} A reference to this instance.
   */
  setVolume(e) {
    return this.gain.gain.setTargetAtTime(e, this.context.currentTime, 0.01), this;
  }
  copy(e, n) {
    return super.copy(e, n), e.sourceType !== "buffer" ? (console.warn("THREE.Audio: Audio source type cannot be copied."), this) : (this.autoplay = e.autoplay, this.buffer = e.buffer, this.detune = e.detune, this.loop = e.loop, this.loopStart = e.loopStart, this.loopEnd = e.loopEnd, this.offset = e.offset, this.duration = e.duration, this.playbackRate = e.playbackRate, this.hasPlaybackControl = e.hasPlaybackControl, this.sourceType = e.sourceType, this.filters = e.filters.slice(), this);
  }
  clone(e) {
    return new this.constructor(this.listener).copy(this, e);
  }
}
const Bu = /* @__PURE__ */ new j(), xM = /* @__PURE__ */ new Es(), $3 = /* @__PURE__ */ new j(), Pu = /* @__PURE__ */ new j();
class ew extends ST {
  /**
   * Constructs a positional audio.
   *
   * @param {AudioListener} listener - The global audio listener.
   */
  constructor(e) {
    super(e), this.panner = this.context.createPanner(), this.panner.panningModel = "HRTF", this.panner.connect(this.gain);
  }
  connect() {
    return super.connect(), this.panner.connect(this.gain), this;
  }
  disconnect() {
    return super.disconnect(), this.panner.disconnect(this.gain), this;
  }
  getOutput() {
    return this.panner;
  }
  /**
   * Returns the current reference distance.
   *
   * @return {number} The reference distance.
   */
  getRefDistance() {
    return this.panner.refDistance;
  }
  /**
   * Defines the reference distance for reducing volume as the audio source moves
   * further from the listener – i.e. the distance at which the volume reduction
   * starts taking effect.
   *
   * @param {number} value - The reference distance to set.
   * @return {PositionalAudio} A reference to this instance.
   */
  setRefDistance(e) {
    return this.panner.refDistance = e, this;
  }
  /**
   * Returns the current rolloff factor.
   *
   * @return {number} The rolloff factor.
   */
  getRolloffFactor() {
    return this.panner.rolloffFactor;
  }
  /**
   * Defines how quickly the volume is reduced as the source moves away from the listener.
   *
   * @param {number} value - The rolloff factor.
   * @return {PositionalAudio} A reference to this instance.
   */
  setRolloffFactor(e) {
    return this.panner.rolloffFactor = e, this;
  }
  /**
   * Returns the current distance model.
   *
   * @return {('linear'|'inverse'|'exponential')} The distance model.
   */
  getDistanceModel() {
    return this.panner.distanceModel;
  }
  /**
   * Defines which algorithm to use to reduce the volume of the audio source
   * as it moves away from the listener.
   *
   * Read [the spec]{@link https://www.w3.org/TR/webaudio-1.1/#enumdef-distancemodeltype}
   * for more details.
   *
   * @param {('linear'|'inverse'|'exponential')} value - The distance model to set.
   * @return {PositionalAudio} A reference to this instance.
   */
  setDistanceModel(e) {
    return this.panner.distanceModel = e, this;
  }
  /**
   * Returns the current max distance.
   *
   * @return {number} The max distance.
   */
  getMaxDistance() {
    return this.panner.maxDistance;
  }
  /**
   * Defines the maximum distance between the audio source and the listener,
   * after which the volume is not reduced any further.
   *
   * This value is used only by the `linear` distance model.
   *
   * @param {number} value - The max distance.
   * @return {PositionalAudio} A reference to this instance.
   */
  setMaxDistance(e) {
    return this.panner.maxDistance = e, this;
  }
  /**
   * Sets the directional cone in which the audio can be listened.
   *
   * @param {number} coneInnerAngle - An angle, in degrees, of a cone inside of which there will be no volume reduction.
   * @param {number} coneOuterAngle - An angle, in degrees, of a cone outside of which the volume will be reduced by a constant value, defined by the `coneOuterGain` parameter.
   * @param {number} coneOuterGain - The amount of volume reduction outside the cone defined by the `coneOuterAngle`. When set to `0`, no sound can be heard.
   * @return {PositionalAudio} A reference to this instance.
   */
  setDirectionalCone(e, n, i) {
    return this.panner.coneInnerAngle = e, this.panner.coneOuterAngle = n, this.panner.coneOuterGain = i, this;
  }
  updateMatrixWorld(e) {
    if (super.updateMatrixWorld(e), this.hasPlaybackControl === !0 && this.isPlaying === !1) return;
    this.matrixWorld.decompose(Bu, xM, $3), Pu.set(0, 0, 1).applyQuaternion(xM);
    const n = this.panner;
    if (n.positionX) {
      const i = this.context.currentTime + this.listener.timeDelta;
      n.positionX.linearRampToValueAtTime(Bu.x, i), n.positionY.linearRampToValueAtTime(Bu.y, i), n.positionZ.linearRampToValueAtTime(Bu.z, i), n.orientationX.linearRampToValueAtTime(Pu.x, i), n.orientationY.linearRampToValueAtTime(Pu.y, i), n.orientationZ.linearRampToValueAtTime(Pu.z, i);
    } else
      n.setPosition(Bu.x, Bu.y, Bu.z), n.setOrientation(Pu.x, Pu.y, Pu.z);
  }
}
class tw {
  /**
   * Constructs a new audio analyzer.
   *
   * @param {Audio} audio - The audio to analyze.
   * @param {number} [fftSize=2048] - The window size in samples that is used when performing a Fast Fourier Transform (FFT) to get frequency domain data.
   */
  constructor(e, n = 2048) {
    this.analyser = e.context.createAnalyser(), this.analyser.fftSize = n, this.data = new Uint8Array(this.analyser.frequencyBinCount), e.getOutput().connect(this.analyser);
  }
  /**
   * Returns an array with frequency data of the audio.
   *
   * Each item in the array represents the decibel value for a specific frequency.
   * The frequencies are spread linearly from 0 to 1/2 of the sample rate.
   * For example, for 48000 sample rate, the last item of the array will represent
   * the decibel value for 24000 Hz.
   *
   * @return {Uint8Array} The frequency data.
   */
  getFrequencyData() {
    return this.analyser.getByteFrequencyData(this.data), this.data;
  }
  /**
   * Returns the average of the frequencies returned by {@link AudioAnalyser#getFrequencyData}.
   *
   * @return {number} The average frequency.
   */
  getAverageFrequency() {
    let e = 0;
    const n = this.getFrequencyData();
    for (let i = 0; i < n.length; i++)
      e += n[i];
    return e / n.length;
  }
}
class xT {
  /**
   * Constructs a new property mixer.
   *
   * @param {PropertyBinding} binding - The property binding.
   * @param {string} typeName - The keyframe track type name.
   * @param {number} valueSize - The keyframe track value size.
   */
  constructor(e, n, i) {
    this.binding = e, this.valueSize = i;
    let r, c, h;
    switch (n) {
      case "quaternion":
        r = this._slerp, c = this._slerpAdditive, h = this._setAdditiveIdentityQuaternion, this.buffer = new Float64Array(i * 6), this._workIndex = 5;
        break;
      case "string":
      case "bool":
        r = this._select, c = this._select, h = this._setAdditiveIdentityOther, this.buffer = new Array(i * 5);
        break;
      default:
        r = this._lerp, c = this._lerpAdditive, h = this._setAdditiveIdentityNumeric, this.buffer = new Float64Array(i * 5);
    }
    this._mixBufferRegion = r, this._mixBufferRegionAdditive = c, this._setIdentity = h, this._origIndex = 3, this._addIndex = 4, this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0, this.useCount = 0, this.referenceCount = 0;
  }
  /**
   * Accumulates data in the `incoming` region into `accu<i>`.
   *
   * @param {number} accuIndex - The accumulation index.
   * @param {number} weight - The weight.
   */
  accumulate(e, n) {
    const i = this.buffer, r = this.valueSize, c = e * r + r;
    let h = this.cumulativeWeight;
    if (h === 0) {
      for (let d = 0; d !== r; ++d)
        i[c + d] = i[d];
      h = n;
    } else {
      h += n;
      const d = n / h;
      this._mixBufferRegion(i, c, 0, d, r);
    }
    this.cumulativeWeight = h;
  }
  /**
   * Accumulates data in the `incoming` region into `add`.
   *
   * @param {number} weight - The weight.
   */
  accumulateAdditive(e) {
    const n = this.buffer, i = this.valueSize, r = i * this._addIndex;
    this.cumulativeWeightAdditive === 0 && this._setIdentity(), this._mixBufferRegionAdditive(n, r, 0, e, i), this.cumulativeWeightAdditive += e;
  }
  /**
   * Applies the state of `accu<i>` to the binding when accus differ.
   *
   * @param {number} accuIndex - The accumulation index.
   */
  apply(e) {
    const n = this.valueSize, i = this.buffer, r = e * n + n, c = this.cumulativeWeight, h = this.cumulativeWeightAdditive, d = this.binding;
    if (this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0, c < 1) {
      const v = n * this._origIndex;
      this._mixBufferRegion(
        i,
        r,
        v,
        1 - c,
        n
      );
    }
    h > 0 && this._mixBufferRegionAdditive(i, r, this._addIndex * n, 1, n);
    for (let v = n, g = n + n; v !== g; ++v)
      if (i[v] !== i[v + n]) {
        d.setValue(i, r);
        break;
      }
  }
  /**
   * Remembers the state of the bound property and copy it to both accus.
   */
  saveOriginalState() {
    const e = this.binding, n = this.buffer, i = this.valueSize, r = i * this._origIndex;
    e.getValue(n, r);
    for (let c = i, h = r; c !== h; ++c)
      n[c] = n[r + c % i];
    this._setIdentity(), this.cumulativeWeight = 0, this.cumulativeWeightAdditive = 0;
  }
  /**
   * Applies the state previously taken via {@link PropertyMixer#saveOriginalState} to the binding.
   */
  restoreOriginalState() {
    const e = this.valueSize * 3;
    this.binding.setValue(this.buffer, e);
  }
  // internals
  _setAdditiveIdentityNumeric() {
    const e = this._addIndex * this.valueSize, n = e + this.valueSize;
    for (let i = e; i < n; i++)
      this.buffer[i] = 0;
  }
  _setAdditiveIdentityQuaternion() {
    this._setAdditiveIdentityNumeric(), this.buffer[this._addIndex * this.valueSize + 3] = 1;
  }
  _setAdditiveIdentityOther() {
    const e = this._origIndex * this.valueSize, n = this._addIndex * this.valueSize;
    for (let i = 0; i < this.valueSize; i++)
      this.buffer[n + i] = this.buffer[e + i];
  }
  // mix functions
  _select(e, n, i, r, c) {
    if (r >= 0.5)
      for (let h = 0; h !== c; ++h)
        e[n + h] = e[i + h];
  }
  _slerp(e, n, i, r) {
    Es.slerpFlat(e, n, e, n, e, i, r);
  }
  _slerpAdditive(e, n, i, r, c) {
    const h = this._workIndex * c;
    Es.multiplyQuaternionsFlat(e, h, e, n, e, i), Es.slerpFlat(e, n, e, n, e, h, r);
  }
  _lerp(e, n, i, r, c) {
    const h = 1 - r;
    for (let d = 0; d !== c; ++d) {
      const v = n + d;
      e[v] = e[v] * h + e[i + d] * r;
    }
  }
  _lerpAdditive(e, n, i, r, c) {
    for (let h = 0; h !== c; ++h) {
      const d = n + h;
      e[d] = e[d] + e[i + h] * r;
    }
  }
}
const Mx = "\\[\\]\\.:\\/", nw = new RegExp("[" + Mx + "]", "g"), bx = "[^" + Mx + "]", iw = "[^" + Mx.replace("\\.", "") + "]", aw = /* @__PURE__ */ /((?:WC+[\/:])*)/.source.replace("WC", bx), sw = /* @__PURE__ */ /(WCOD+)?/.source.replace("WCOD", iw), rw = /* @__PURE__ */ /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", bx), ow = /* @__PURE__ */ /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", bx), lw = new RegExp(
  "^" + aw + sw + rw + ow + "$"
), cw = ["material", "materials", "bones", "map"];
class uw {
  constructor(e, n, i) {
    const r = i || Sn.parseTrackName(n);
    this._targetGroup = e, this._bindings = e.subscribe_(n, r);
  }
  getValue(e, n) {
    this.bind();
    const i = this._targetGroup.nCachedObjects_, r = this._bindings[i];
    r !== void 0 && r.getValue(e, n);
  }
  setValue(e, n) {
    const i = this._bindings;
    for (let r = this._targetGroup.nCachedObjects_, c = i.length; r !== c; ++r)
      i[r].setValue(e, n);
  }
  bind() {
    const e = this._bindings;
    for (let n = this._targetGroup.nCachedObjects_, i = e.length; n !== i; ++n)
      e[n].bind();
  }
  unbind() {
    const e = this._bindings;
    for (let n = this._targetGroup.nCachedObjects_, i = e.length; n !== i; ++n)
      e[n].unbind();
  }
}
class Sn {
  /**
   * Constructs a new property binding.
   *
   * @param {Object} rootNode - The root node.
   * @param {string} path - The path.
   * @param {?Object} [parsedPath] - The parsed path.
   */
  constructor(e, n, i) {
    this.path = n, this.parsedPath = i || Sn.parseTrackName(n), this.node = Sn.findNode(e, this.parsedPath.nodeName), this.rootNode = e, this.getValue = this._getValue_unbound, this.setValue = this._setValue_unbound;
  }
  /**
   * Factory method for creating a property binding from the given parameters.
   *
   * @static
   * @param {Object} root - The root node.
   * @param {string} path - The path.
   * @param {?Object} [parsedPath] - The parsed path.
   * @return {PropertyBinding|Composite} The created property binding or composite.
   */
  static create(e, n, i) {
    return e && e.isAnimationObjectGroup ? new Sn.Composite(e, n, i) : new Sn(e, n, i);
  }
  /**
   * Replaces spaces with underscores and removes unsupported characters from
   * node names, to ensure compatibility with parseTrackName().
   *
   * @param {string} name - Node name to be sanitized.
   * @return {string} The sanitized node name.
   */
  static sanitizeNodeName(e) {
    return e.replace(/\s/g, "_").replace(nw, "");
  }
  /**
   * Parses the given track name (an object path to an animated property) and
   * returns an object with information about the path. Matches strings in the following forms:
   *
   * - nodeName.property
   * - nodeName.property[accessor]
   * - nodeName.material.property[accessor]
   * - uuid.property[accessor]
   * - uuid.objectName[objectIndex].propertyName[propertyIndex]
   * - parentName/nodeName.property
   * - parentName/parentName/nodeName.property[index]
   * - .bone[Armature.DEF_cog].position
   * - scene:helium_balloon_model:helium_balloon_model.position
   *
   * @static
   * @param {string} trackName - The track name to parse.
   * @return {Object} The parsed track name as an object.
   */
  static parseTrackName(e) {
    const n = lw.exec(e);
    if (n === null)
      throw new Error("PropertyBinding: Cannot parse trackName: " + e);
    const i = {
      // directoryName: matches[ 1 ], // (tschw) currently unused
      nodeName: n[2],
      objectName: n[3],
      objectIndex: n[4],
      propertyName: n[5],
      // required
      propertyIndex: n[6]
    }, r = i.nodeName && i.nodeName.lastIndexOf(".");
    if (r !== void 0 && r !== -1) {
      const c = i.nodeName.substring(r + 1);
      cw.indexOf(c) !== -1 && (i.nodeName = i.nodeName.substring(0, r), i.objectName = c);
    }
    if (i.propertyName === null || i.propertyName.length === 0)
      throw new Error("PropertyBinding: can not parse propertyName from trackName: " + e);
    return i;
  }
  /**
   * Searches for a node in the hierarchy of the given root object by the given
   * node name.
   *
   * @static
   * @param {Object} root - The root object.
   * @param {string|number} nodeName - The name of the node.
   * @return {?Object} The found node. Returns `null` if no object was found.
   */
  static findNode(e, n) {
    if (n === void 0 || n === "" || n === "." || n === -1 || n === e.name || n === e.uuid)
      return e;
    if (e.skeleton) {
      const i = e.skeleton.getBoneByName(n);
      if (i !== void 0)
        return i;
    }
    if (e.children) {
      const i = function(c) {
        for (let h = 0; h < c.length; h++) {
          const d = c[h];
          if (d.name === n || d.uuid === n)
            return d;
          const v = i(d.children);
          if (v) return v;
        }
        return null;
      }, r = i(e.children);
      if (r)
        return r;
    }
    return null;
  }
  // these are used to "bind" a nonexistent property
  _getValue_unavailable() {
  }
  _setValue_unavailable() {
  }
  // Getters
  _getValue_direct(e, n) {
    e[n] = this.targetObject[this.propertyName];
  }
  _getValue_array(e, n) {
    const i = this.resolvedProperty;
    for (let r = 0, c = i.length; r !== c; ++r)
      e[n++] = i[r];
  }
  _getValue_arrayElement(e, n) {
    e[n] = this.resolvedProperty[this.propertyIndex];
  }
  _getValue_toArray(e, n) {
    this.resolvedProperty.toArray(e, n);
  }
  // Direct
  _setValue_direct(e, n) {
    this.targetObject[this.propertyName] = e[n];
  }
  _setValue_direct_setNeedsUpdate(e, n) {
    this.targetObject[this.propertyName] = e[n], this.targetObject.needsUpdate = !0;
  }
  _setValue_direct_setMatrixWorldNeedsUpdate(e, n) {
    this.targetObject[this.propertyName] = e[n], this.targetObject.matrixWorldNeedsUpdate = !0;
  }
  // EntireArray
  _setValue_array(e, n) {
    const i = this.resolvedProperty;
    for (let r = 0, c = i.length; r !== c; ++r)
      i[r] = e[n++];
  }
  _setValue_array_setNeedsUpdate(e, n) {
    const i = this.resolvedProperty;
    for (let r = 0, c = i.length; r !== c; ++r)
      i[r] = e[n++];
    this.targetObject.needsUpdate = !0;
  }
  _setValue_array_setMatrixWorldNeedsUpdate(e, n) {
    const i = this.resolvedProperty;
    for (let r = 0, c = i.length; r !== c; ++r)
      i[r] = e[n++];
    this.targetObject.matrixWorldNeedsUpdate = !0;
  }
  // ArrayElement
  _setValue_arrayElement(e, n) {
    this.resolvedProperty[this.propertyIndex] = e[n];
  }
  _setValue_arrayElement_setNeedsUpdate(e, n) {
    this.resolvedProperty[this.propertyIndex] = e[n], this.targetObject.needsUpdate = !0;
  }
  _setValue_arrayElement_setMatrixWorldNeedsUpdate(e, n) {
    this.resolvedProperty[this.propertyIndex] = e[n], this.targetObject.matrixWorldNeedsUpdate = !0;
  }
  // HasToFromArray
  _setValue_fromArray(e, n) {
    this.resolvedProperty.fromArray(e, n);
  }
  _setValue_fromArray_setNeedsUpdate(e, n) {
    this.resolvedProperty.fromArray(e, n), this.targetObject.needsUpdate = !0;
  }
  _setValue_fromArray_setMatrixWorldNeedsUpdate(e, n) {
    this.resolvedProperty.fromArray(e, n), this.targetObject.matrixWorldNeedsUpdate = !0;
  }
  _getValue_unbound(e, n) {
    this.bind(), this.getValue(e, n);
  }
  _setValue_unbound(e, n) {
    this.bind(), this.setValue(e, n);
  }
  /**
   * Creates a getter / setter pair for the property tracked by this binding.
   */
  bind() {
    let e = this.node;
    const n = this.parsedPath, i = n.objectName, r = n.propertyName;
    let c = n.propertyIndex;
    if (e || (e = Sn.findNode(this.rootNode, n.nodeName), this.node = e), this.getValue = this._getValue_unavailable, this.setValue = this._setValue_unavailable, !e) {
      console.warn("THREE.PropertyBinding: No target node found for track: " + this.path + ".");
      return;
    }
    if (i) {
      let g = n.objectIndex;
      switch (i) {
        case "materials":
          if (!e.material) {
            console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
            return;
          }
          if (!e.material.materials) {
            console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);
            return;
          }
          e = e.material.materials;
          break;
        case "bones":
          if (!e.skeleton) {
            console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
            return;
          }
          e = e.skeleton.bones;
          for (let S = 0; S < e.length; S++)
            if (e[S].name === g) {
              g = S;
              break;
            }
          break;
        case "map":
          if ("map" in e) {
            e = e.map;
            break;
          }
          if (!e.material) {
            console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
            return;
          }
          if (!e.material.map) {
            console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.", this);
            return;
          }
          e = e.material.map;
          break;
        default:
          if (e[i] === void 0) {
            console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
            return;
          }
          e = e[i];
      }
      if (g !== void 0) {
        if (e[g] === void 0) {
          console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, e);
          return;
        }
        e = e[g];
      }
    }
    const h = e[r];
    if (h === void 0) {
      const g = n.nodeName;
      console.error("THREE.PropertyBinding: Trying to update property for track: " + g + "." + r + " but it wasn't found.", e);
      return;
    }
    let d = this.Versioning.None;
    this.targetObject = e, e.isMaterial === !0 ? d = this.Versioning.NeedsUpdate : e.isObject3D === !0 && (d = this.Versioning.MatrixWorldNeedsUpdate);
    let v = this.BindingType.Direct;
    if (c !== void 0) {
      if (r === "morphTargetInfluences") {
        if (!e.geometry) {
          console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);
          return;
        }
        if (!e.geometry.morphAttributes) {
          console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);
          return;
        }
        e.morphTargetDictionary[c] !== void 0 && (c = e.morphTargetDictionary[c]);
      }
      v = this.BindingType.ArrayElement, this.resolvedProperty = h, this.propertyIndex = c;
    } else h.fromArray !== void 0 && h.toArray !== void 0 ? (v = this.BindingType.HasFromToArray, this.resolvedProperty = h) : Array.isArray(h) ? (v = this.BindingType.EntireArray, this.resolvedProperty = h) : this.propertyName = r;
    this.getValue = this.GetterByBindingType[v], this.setValue = this.SetterByBindingTypeAndVersioning[v][d];
  }
  /**
   * Unbinds the property.
   */
  unbind() {
    this.node = null, this.getValue = this._getValue_unbound, this.setValue = this._setValue_unbound;
  }
}
Sn.Composite = uw;
Sn.prototype.BindingType = {
  Direct: 0,
  EntireArray: 1,
  ArrayElement: 2,
  HasFromToArray: 3
};
Sn.prototype.Versioning = {
  None: 0,
  NeedsUpdate: 1,
  MatrixWorldNeedsUpdate: 2
};
Sn.prototype.GetterByBindingType = [
  Sn.prototype._getValue_direct,
  Sn.prototype._getValue_array,
  Sn.prototype._getValue_arrayElement,
  Sn.prototype._getValue_toArray
];
Sn.prototype.SetterByBindingTypeAndVersioning = [
  [
    // Direct
    Sn.prototype._setValue_direct,
    Sn.prototype._setValue_direct_setNeedsUpdate,
    Sn.prototype._setValue_direct_setMatrixWorldNeedsUpdate
  ],
  [
    // EntireArray
    Sn.prototype._setValue_array,
    Sn.prototype._setValue_array_setNeedsUpdate,
    Sn.prototype._setValue_array_setMatrixWorldNeedsUpdate
  ],
  [
    // ArrayElement
    Sn.prototype._setValue_arrayElement,
    Sn.prototype._setValue_arrayElement_setNeedsUpdate,
    Sn.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate
  ],
  [
    // HasToFromArray
    Sn.prototype._setValue_fromArray,
    Sn.prototype._setValue_fromArray_setNeedsUpdate,
    Sn.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate
  ]
];
class fw {
  /**
   * Constructs a new animation group.
   *
   * @param {...Object3D} arguments - An arbitrary number of 3D objects that share the same animation state.
   */
  constructor() {
    this.isAnimationObjectGroup = !0, this.uuid = Fs(), this._objects = Array.prototype.slice.call(arguments), this.nCachedObjects_ = 0;
    const e = {};
    this._indicesByUUID = e;
    for (let i = 0, r = arguments.length; i !== r; ++i)
      e[arguments[i].uuid] = i;
    this._paths = [], this._parsedPaths = [], this._bindings = [], this._bindingsIndicesByPath = {};
    const n = this;
    this.stats = {
      objects: {
        get total() {
          return n._objects.length;
        },
        get inUse() {
          return this.total - n.nCachedObjects_;
        }
      },
      get bindingsPerObject() {
        return n._bindings.length;
      }
    };
  }
  /**
   * Adds an arbitrary number of objects to this animation group.
   *
   * @param {...Object3D} arguments - The 3D objects to add.
   */
  add() {
    const e = this._objects, n = this._indicesByUUID, i = this._paths, r = this._parsedPaths, c = this._bindings, h = c.length;
    let d, v = e.length, g = this.nCachedObjects_;
    for (let S = 0, x = arguments.length; S !== x; ++S) {
      const M = arguments[S], b = M.uuid;
      let R = n[b];
      if (R === void 0) {
        R = v++, n[b] = R, e.push(M);
        for (let w = 0, C = h; w !== C; ++w)
          c[w].push(new Sn(M, i[w], r[w]));
      } else if (R < g) {
        d = e[R];
        const w = --g, C = e[w];
        n[C.uuid] = R, e[R] = C, n[b] = w, e[w] = M;
        for (let E = 0, U = h; E !== U; ++E) {
          const N = c[E], O = N[w];
          let I = N[R];
          N[R] = O, I === void 0 && (I = new Sn(M, i[E], r[E])), N[w] = I;
        }
      } else e[R] !== d && console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.");
    }
    this.nCachedObjects_ = g;
  }
  /**
   * Removes an arbitrary number of objects to this animation group
   *
   * @param {...Object3D} arguments - The 3D objects to remove.
   */
  remove() {
    const e = this._objects, n = this._indicesByUUID, i = this._bindings, r = i.length;
    let c = this.nCachedObjects_;
    for (let h = 0, d = arguments.length; h !== d; ++h) {
      const v = arguments[h], g = v.uuid, S = n[g];
      if (S !== void 0 && S >= c) {
        const x = c++, M = e[x];
        n[M.uuid] = S, e[S] = M, n[g] = x, e[x] = v;
        for (let b = 0, R = r; b !== R; ++b) {
          const w = i[b], C = w[x], E = w[S];
          w[S] = C, w[x] = E;
        }
      }
    }
    this.nCachedObjects_ = c;
  }
  /**
   * Deallocates all memory resources for the passed 3D objects of this animation group.
   *
   * @param {...Object3D} arguments - The 3D objects to uncache.
   */
  uncache() {
    const e = this._objects, n = this._indicesByUUID, i = this._bindings, r = i.length;
    let c = this.nCachedObjects_, h = e.length;
    for (let d = 0, v = arguments.length; d !== v; ++d) {
      const g = arguments[d], S = g.uuid, x = n[S];
      if (x !== void 0)
        if (delete n[S], x < c) {
          const M = --c, b = e[M], R = --h, w = e[R];
          n[b.uuid] = x, e[x] = b, n[w.uuid] = M, e[M] = w, e.pop();
          for (let C = 0, E = r; C !== E; ++C) {
            const U = i[C], N = U[M], O = U[R];
            U[x] = N, U[M] = O, U.pop();
          }
        } else {
          const M = --h, b = e[M];
          M > 0 && (n[b.uuid] = x), e[x] = b, e.pop();
          for (let R = 0, w = r; R !== w; ++R) {
            const C = i[R];
            C[x] = C[M], C.pop();
          }
        }
    }
    this.nCachedObjects_ = c;
  }
  // Internal interface used by befriended PropertyBinding.Composite:
  subscribe_(e, n) {
    const i = this._bindingsIndicesByPath;
    let r = i[e];
    const c = this._bindings;
    if (r !== void 0) return c[r];
    const h = this._paths, d = this._parsedPaths, v = this._objects, g = v.length, S = this.nCachedObjects_, x = new Array(g);
    r = c.length, i[e] = r, h.push(e), d.push(n), c.push(x);
    for (let M = S, b = v.length; M !== b; ++M) {
      const R = v[M];
      x[M] = new Sn(R, e, n);
    }
    return x;
  }
  unsubscribe_(e) {
    const n = this._bindingsIndicesByPath, i = n[e];
    if (i !== void 0) {
      const r = this._paths, c = this._parsedPaths, h = this._bindings, d = h.length - 1, v = h[d], g = e[d];
      n[g] = i, h[i] = v, h.pop(), c[i] = c[d], c.pop(), r[i] = r[d], r.pop();
    }
  }
}
class MT {
  /**
   * Constructs a new animation action.
   *
   * @param {AnimationMixer} mixer - The mixer that is controlled by this action.
   * @param {AnimationClip} clip - The animation clip that holds the actual keyframes.
   * @param {?Object3D} [localRoot=null] - The root object on which this action is performed.
   * @param {(NormalAnimationBlendMode|AdditiveAnimationBlendMode)} [blendMode] - The blend mode.
   */
  constructor(e, n, i = null, r = n.blendMode) {
    this._mixer = e, this._clip = n, this._localRoot = i, this.blendMode = r;
    const c = n.tracks, h = c.length, d = new Array(h), v = {
      endingStart: Xu,
      endingEnd: Xu
    };
    for (let g = 0; g !== h; ++g) {
      const S = c[g].createInterpolant(null);
      d[g] = S, S.settings = v;
    }
    this._interpolantSettings = v, this._interpolants = d, this._propertyBindings = new Array(h), this._cacheIndex = null, this._byClipCacheIndex = null, this._timeScaleInterpolant = null, this._weightInterpolant = null, this.loop = uE, this._loopCount = -1, this._startTime = null, this.time = 0, this.timeScale = 1, this._effectiveTimeScale = 1, this.weight = 1, this._effectiveWeight = 1, this.repetitions = 1 / 0, this.paused = !1, this.enabled = !0, this.clampWhenFinished = !1, this.zeroSlopeAtStart = !0, this.zeroSlopeAtEnd = !0;
  }
  /**
   * Starts the playback of the animation.
   *
   * @return {AnimationAction} A reference to this animation action.
   */
  play() {
    return this._mixer._activateAction(this), this;
  }
  /**
   * Stops the playback of the animation.
   *
   * @return {AnimationAction} A reference to this animation action.
   */
  stop() {
    return this._mixer._deactivateAction(this), this.reset();
  }
  /**
   * Resets the playback of the animation.
   *
   * @return {AnimationAction} A reference to this animation action.
   */
  reset() {
    return this.paused = !1, this.enabled = !0, this.time = 0, this._loopCount = -1, this._startTime = null, this.stopFading().stopWarping();
  }
  /**
   * Returns `true` if the animation is running.
   *
   * @return {boolean} Whether the animation is running or not.
   */
  isRunning() {
    return this.enabled && !this.paused && this.timeScale !== 0 && this._startTime === null && this._mixer._isActiveAction(this);
  }
  /**
   * Returns `true` when {@link AnimationAction#play} has been called.
   *
   * @return {boolean} Whether the animation is scheduled or not.
   */
  isScheduled() {
    return this._mixer._isActiveAction(this);
  }
  /**
   * Defines the time when the animation should start.
   *
   * @param {number} time - The start time in seconds.
   * @return {AnimationAction} A reference to this animation action.
   */
  startAt(e) {
    return this._startTime = e, this;
  }
  /**
   * Configures the loop settings for this action.
   *
   * @param {(LoopRepeat|LoopOnce|LoopPingPong)} mode - The loop mode.
   * @param {number} repetitions - The number of repetitions.
   * @return {AnimationAction} A reference to this animation action.
   */
  setLoop(e, n) {
    return this.loop = e, this.repetitions = n, this;
  }
  /**
   * Sets the effective weight of this action.
   *
   * An action has no effect and thus an effective weight of zero when the
   * action is disabled.
   *
   * @param {number} weight - The weight to set.
   * @return {AnimationAction} A reference to this animation action.
   */
  setEffectiveWeight(e) {
    return this.weight = e, this._effectiveWeight = this.enabled ? e : 0, this.stopFading();
  }
  /**
   * Returns the effective weight of this action.
   *
   * @return {number} The effective weight.
   */
  getEffectiveWeight() {
    return this._effectiveWeight;
  }
  /**
   * Fades the animation in by increasing its weight gradually from `0` to `1`,
   * within the passed time interval.
   *
   * @param {number} duration - The duration of the fade.
   * @return {AnimationAction} A reference to this animation action.
   */
  fadeIn(e) {
    return this._scheduleFading(e, 0, 1);
  }
  /**
   * Fades the animation out by decreasing its weight gradually from `1` to `0`,
   * within the passed time interval.
   *
   * @param {number} duration - The duration of the fade.
   * @return {AnimationAction} A reference to this animation action.
   */
  fadeOut(e) {
    return this._scheduleFading(e, 1, 0);
  }
  /**
   * Causes this action to fade in and the given action to fade out,
   * within the passed time interval.
   *
   * @param {AnimationAction} fadeOutAction - The animation action to fade out.
   * @param {number} duration - The duration of the fade.
   * @param {boolean} [warp=false] - Whether warping should be used or not.
   * @return {AnimationAction} A reference to this animation action.
   */
  crossFadeFrom(e, n, i = !1) {
    if (e.fadeOut(n), this.fadeIn(n), i === !0) {
      const r = this._clip.duration, c = e._clip.duration, h = c / r, d = r / c;
      e.warp(1, h, n), this.warp(d, 1, n);
    }
    return this;
  }
  /**
   * Causes this action to fade out and the given action to fade in,
   * within the passed time interval.
   *
   * @param {AnimationAction} fadeInAction - The animation action to fade in.
   * @param {number} duration - The duration of the fade.
   * @param {boolean} [warp=false] - Whether warping should be used or not.
   * @return {AnimationAction} A reference to this animation action.
   */
  crossFadeTo(e, n, i = !1) {
    return e.crossFadeFrom(this, n, i);
  }
  /**
   * Stops any fading which is applied to this action.
   *
   * @return {AnimationAction} A reference to this animation action.
   */
  stopFading() {
    const e = this._weightInterpolant;
    return e !== null && (this._weightInterpolant = null, this._mixer._takeBackControlInterpolant(e)), this;
  }
  /**
   * Sets the effective time scale of this action.
   *
   * An action has no effect and thus an effective time scale of zero when the
   * action is paused.
   *
   * @param {number} timeScale - The time scale to set.
   * @return {AnimationAction} A reference to this animation action.
   */
  setEffectiveTimeScale(e) {
    return this.timeScale = e, this._effectiveTimeScale = this.paused ? 0 : e, this.stopWarping();
  }
  /**
   * Returns the effective time scale of this action.
   *
   * @return {number} The effective time scale.
   */
  getEffectiveTimeScale() {
    return this._effectiveTimeScale;
  }
  /**
   * Sets the duration for a single loop of this action.
   *
   * @param {number} duration - The duration to set.
   * @return {AnimationAction} A reference to this animation action.
   */
  setDuration(e) {
    return this.timeScale = this._clip.duration / e, this.stopWarping();
  }
  /**
   * Synchronizes this action with the passed other action.
   *
   * @param {AnimationAction} action - The action to sync with.
   * @return {AnimationAction} A reference to this animation action.
   */
  syncWith(e) {
    return this.time = e.time, this.timeScale = e.timeScale, this.stopWarping();
  }
  /**
   * Decelerates this animation's speed to `0` within the passed time interval.
   *
   * @param {number} duration - The duration.
   * @return {AnimationAction} A reference to this animation action.
   */
  halt(e) {
    return this.warp(this._effectiveTimeScale, 0, e);
  }
  /**
   * Changes the playback speed, within the passed time interval, by modifying
   * {@link AnimationAction#timeScale} gradually from `startTimeScale` to
   * `endTimeScale`.
   *
   * @param {number} startTimeScale - The start time scale.
   * @param {number} endTimeScale - The end time scale.
   * @param {number} duration - The duration.
   * @return {AnimationAction} A reference to this animation action.
   */
  warp(e, n, i) {
    const r = this._mixer, c = r.time, h = this.timeScale;
    let d = this._timeScaleInterpolant;
    d === null && (d = r._lendControlInterpolant(), this._timeScaleInterpolant = d);
    const v = d.parameterPositions, g = d.sampleValues;
    return v[0] = c, v[1] = c + i, g[0] = e / h, g[1] = n / h, this;
  }
  /**
   * Stops any scheduled warping which is applied to this action.
   *
   * @return {AnimationAction} A reference to this animation action.
   */
  stopWarping() {
    const e = this._timeScaleInterpolant;
    return e !== null && (this._timeScaleInterpolant = null, this._mixer._takeBackControlInterpolant(e)), this;
  }
  /**
   * Returns the animation mixer of this animation action.
   *
   * @return {AnimationMixer} The animation mixer.
   */
  getMixer() {
    return this._mixer;
  }
  /**
   * Returns the animation clip of this animation action.
   *
   * @return {AnimationClip} The animation clip.
   */
  getClip() {
    return this._clip;
  }
  /**
   * Returns the root object of this animation action.
   *
   * @return {Object3D} The root object.
   */
  getRoot() {
    return this._localRoot || this._mixer._root;
  }
  // Interna
  _update(e, n, i, r) {
    if (!this.enabled) {
      this._updateWeight(e);
      return;
    }
    const c = this._startTime;
    if (c !== null) {
      const v = (e - c) * i;
      v < 0 || i === 0 ? n = 0 : (this._startTime = null, n = i * v);
    }
    n *= this._updateTimeScale(e);
    const h = this._updateTime(n), d = this._updateWeight(e);
    if (d > 0) {
      const v = this._interpolants, g = this._propertyBindings;
      switch (this.blendMode) {
        case QS:
          for (let S = 0, x = v.length; S !== x; ++S)
            v[S].evaluate(h), g[S].accumulateAdditive(d);
          break;
        case k0:
        default:
          for (let S = 0, x = v.length; S !== x; ++S)
            v[S].evaluate(h), g[S].accumulate(r, d);
      }
    }
  }
  _updateWeight(e) {
    let n = 0;
    if (this.enabled) {
      n = this.weight;
      const i = this._weightInterpolant;
      if (i !== null) {
        const r = i.evaluate(e)[0];
        n *= r, e > i.parameterPositions[1] && (this.stopFading(), r === 0 && (this.enabled = !1));
      }
    }
    return this._effectiveWeight = n, n;
  }
  _updateTimeScale(e) {
    let n = 0;
    if (!this.paused) {
      n = this.timeScale;
      const i = this._timeScaleInterpolant;
      if (i !== null) {
        const r = i.evaluate(e)[0];
        n *= r, e > i.parameterPositions[1] && (this.stopWarping(), n === 0 ? this.paused = !0 : this.timeScale = n);
      }
    }
    return this._effectiveTimeScale = n, n;
  }
  _updateTime(e) {
    const n = this._clip.duration, i = this.loop;
    let r = this.time + e, c = this._loopCount;
    const h = i === fE;
    if (e === 0)
      return c === -1 ? r : h && (c & 1) === 1 ? n - r : r;
    if (i === cE) {
      c === -1 && (this._loopCount = 0, this._setEndings(!0, !0, !1));
      e: {
        if (r >= n)
          r = n;
        else if (r < 0)
          r = 0;
        else {
          this.time = r;
          break e;
        }
        this.clampWhenFinished ? this.paused = !0 : this.enabled = !1, this.time = r, this._mixer.dispatchEvent({
          type: "finished",
          action: this,
          direction: e < 0 ? -1 : 1
        });
      }
    } else {
      if (c === -1 && (e >= 0 ? (c = 0, this._setEndings(!0, this.repetitions === 0, h)) : this._setEndings(this.repetitions === 0, !0, h)), r >= n || r < 0) {
        const d = Math.floor(r / n);
        r -= n * d, c += Math.abs(d);
        const v = this.repetitions - c;
        if (v <= 0)
          this.clampWhenFinished ? this.paused = !0 : this.enabled = !1, r = e > 0 ? n : 0, this.time = r, this._mixer.dispatchEvent({
            type: "finished",
            action: this,
            direction: e > 0 ? 1 : -1
          });
        else {
          if (v === 1) {
            const g = e < 0;
            this._setEndings(g, !g, h);
          } else
            this._setEndings(!1, !1, h);
          this._loopCount = c, this.time = r, this._mixer.dispatchEvent({
            type: "loop",
            action: this,
            loopDelta: d
          });
        }
      } else
        this.time = r;
      if (h && (c & 1) === 1)
        return n - r;
    }
    return r;
  }
  _setEndings(e, n, i) {
    const r = this._interpolantSettings;
    i ? (r.endingStart = qu, r.endingEnd = qu) : (e ? r.endingStart = this.zeroSlopeAtStart ? qu : Xu : r.endingStart = jp, n ? r.endingEnd = this.zeroSlopeAtEnd ? qu : Xu : r.endingEnd = jp);
  }
  _scheduleFading(e, n, i) {
    const r = this._mixer, c = r.time;
    let h = this._weightInterpolant;
    h === null && (h = r._lendControlInterpolant(), this._weightInterpolant = h);
    const d = h.parameterPositions, v = h.sampleValues;
    return d[0] = c, v[0] = n, d[1] = c + e, v[1] = i, this;
  }
}
const hw = new Float32Array(1);
class dw extends qs {
  /**
   * Constructs a new animation mixer.
   *
   * @param {Object3D} root - The object whose animations shall be played by this mixer.
   */
  constructor(e) {
    super(), this._root = e, this._initMemoryManager(), this._accuIndex = 0, this.time = 0, this.timeScale = 1;
  }
  _bindAction(e, n) {
    const i = e._localRoot || this._root, r = e._clip.tracks, c = r.length, h = e._propertyBindings, d = e._interpolants, v = i.uuid, g = this._bindingsByRootAndName;
    let S = g[v];
    S === void 0 && (S = {}, g[v] = S);
    for (let x = 0; x !== c; ++x) {
      const M = r[x], b = M.name;
      let R = S[b];
      if (R !== void 0)
        ++R.referenceCount, h[x] = R;
      else {
        if (R = h[x], R !== void 0) {
          R._cacheIndex === null && (++R.referenceCount, this._addInactiveBinding(R, v, b));
          continue;
        }
        const w = n && n._propertyBindings[x].binding.parsedPath;
        R = new xT(
          Sn.create(i, b, w),
          M.ValueTypeName,
          M.getValueSize()
        ), ++R.referenceCount, this._addInactiveBinding(R, v, b), h[x] = R;
      }
      d[x].resultBuffer = R.buffer;
    }
  }
  _activateAction(e) {
    if (!this._isActiveAction(e)) {
      if (e._cacheIndex === null) {
        const i = (e._localRoot || this._root).uuid, r = e._clip.uuid, c = this._actionsByClip[r];
        this._bindAction(
          e,
          c && c.knownActions[0]
        ), this._addInactiveAction(e, r, i);
      }
      const n = e._propertyBindings;
      for (let i = 0, r = n.length; i !== r; ++i) {
        const c = n[i];
        c.useCount++ === 0 && (this._lendBinding(c), c.saveOriginalState());
      }
      this._lendAction(e);
    }
  }
  _deactivateAction(e) {
    if (this._isActiveAction(e)) {
      const n = e._propertyBindings;
      for (let i = 0, r = n.length; i !== r; ++i) {
        const c = n[i];
        --c.useCount === 0 && (c.restoreOriginalState(), this._takeBackBinding(c));
      }
      this._takeBackAction(e);
    }
  }
  // Memory manager
  _initMemoryManager() {
    this._actions = [], this._nActiveActions = 0, this._actionsByClip = {}, this._bindings = [], this._nActiveBindings = 0, this._bindingsByRootAndName = {}, this._controlInterpolants = [], this._nActiveControlInterpolants = 0;
    const e = this;
    this.stats = {
      actions: {
        get total() {
          return e._actions.length;
        },
        get inUse() {
          return e._nActiveActions;
        }
      },
      bindings: {
        get total() {
          return e._bindings.length;
        },
        get inUse() {
          return e._nActiveBindings;
        }
      },
      controlInterpolants: {
        get total() {
          return e._controlInterpolants.length;
        },
        get inUse() {
          return e._nActiveControlInterpolants;
        }
      }
    };
  }
  // Memory management for AnimationAction objects
  _isActiveAction(e) {
    const n = e._cacheIndex;
    return n !== null && n < this._nActiveActions;
  }
  _addInactiveAction(e, n, i) {
    const r = this._actions, c = this._actionsByClip;
    let h = c[n];
    if (h === void 0)
      h = {
        knownActions: [e],
        actionByRoot: {}
      }, e._byClipCacheIndex = 0, c[n] = h;
    else {
      const d = h.knownActions;
      e._byClipCacheIndex = d.length, d.push(e);
    }
    e._cacheIndex = r.length, r.push(e), h.actionByRoot[i] = e;
  }
  _removeInactiveAction(e) {
    const n = this._actions, i = n[n.length - 1], r = e._cacheIndex;
    i._cacheIndex = r, n[r] = i, n.pop(), e._cacheIndex = null;
    const c = e._clip.uuid, h = this._actionsByClip, d = h[c], v = d.knownActions, g = v[v.length - 1], S = e._byClipCacheIndex;
    g._byClipCacheIndex = S, v[S] = g, v.pop(), e._byClipCacheIndex = null;
    const x = d.actionByRoot, M = (e._localRoot || this._root).uuid;
    delete x[M], v.length === 0 && delete h[c], this._removeInactiveBindingsForAction(e);
  }
  _removeInactiveBindingsForAction(e) {
    const n = e._propertyBindings;
    for (let i = 0, r = n.length; i !== r; ++i) {
      const c = n[i];
      --c.referenceCount === 0 && this._removeInactiveBinding(c);
    }
  }
  _lendAction(e) {
    const n = this._actions, i = e._cacheIndex, r = this._nActiveActions++, c = n[r];
    e._cacheIndex = r, n[r] = e, c._cacheIndex = i, n[i] = c;
  }
  _takeBackAction(e) {
    const n = this._actions, i = e._cacheIndex, r = --this._nActiveActions, c = n[r];
    e._cacheIndex = r, n[r] = e, c._cacheIndex = i, n[i] = c;
  }
  // Memory management for PropertyMixer objects
  _addInactiveBinding(e, n, i) {
    const r = this._bindingsByRootAndName, c = this._bindings;
    let h = r[n];
    h === void 0 && (h = {}, r[n] = h), h[i] = e, e._cacheIndex = c.length, c.push(e);
  }
  _removeInactiveBinding(e) {
    const n = this._bindings, i = e.binding, r = i.rootNode.uuid, c = i.path, h = this._bindingsByRootAndName, d = h[r], v = n[n.length - 1], g = e._cacheIndex;
    v._cacheIndex = g, n[g] = v, n.pop(), delete d[c], Object.keys(d).length === 0 && delete h[r];
  }
  _lendBinding(e) {
    const n = this._bindings, i = e._cacheIndex, r = this._nActiveBindings++, c = n[r];
    e._cacheIndex = r, n[r] = e, c._cacheIndex = i, n[i] = c;
  }
  _takeBackBinding(e) {
    const n = this._bindings, i = e._cacheIndex, r = --this._nActiveBindings, c = n[r];
    e._cacheIndex = r, n[r] = e, c._cacheIndex = i, n[i] = c;
  }
  // Memory management of Interpolants for weight and time scale
  _lendControlInterpolant() {
    const e = this._controlInterpolants, n = this._nActiveControlInterpolants++;
    let i = e[n];
    return i === void 0 && (i = new vx(
      new Float32Array(2),
      new Float32Array(2),
      1,
      hw
    ), i.__cacheIndex = n, e[n] = i), i;
  }
  _takeBackControlInterpolant(e) {
    const n = this._controlInterpolants, i = e.__cacheIndex, r = --this._nActiveControlInterpolants, c = n[r];
    e.__cacheIndex = r, n[r] = e, c.__cacheIndex = i, n[i] = c;
  }
  /**
   * Returns an instance of {@link AnimationAction} for the passed clip.
   *
   * If an action fitting the clip and root parameters doesn't yet exist, it
   * will be created by this method. Calling this method several times with the
   * same clip and root parameters always returns the same action.
   *
   * @param {AnimationClip|string} clip - An animation clip or alternatively the name of the animation clip.
   * @param {Object3D} [optionalRoot] - An alternative root object.
   * @param {(NormalAnimationBlendMode|AdditiveAnimationBlendMode)} [blendMode] - The blend mode.
   * @return {?AnimationAction} The animation action.
   */
  clipAction(e, n, i) {
    const r = n || this._root, c = r.uuid;
    let h = typeof e == "string" ? sm.findByName(r, e) : e;
    const d = h !== null ? h.uuid : e, v = this._actionsByClip[d];
    let g = null;
    if (i === void 0 && (h !== null ? i = h.blendMode : i = k0), v !== void 0) {
      const x = v.actionByRoot[c];
      if (x !== void 0 && x.blendMode === i)
        return x;
      g = v.knownActions[0], h === null && (h = g._clip);
    }
    if (h === null) return null;
    const S = new MT(this, h, n, i);
    return this._bindAction(S, g), this._addInactiveAction(S, d, c), S;
  }
  /**
   * Returns an existing animation action for the passed clip.
   *
   * @param {AnimationClip|string} clip - An animation clip or alternatively the name of the animation clip.
   * @param {Object3D} [optionalRoot] - An alternative root object.
   * @return {?AnimationAction} The animation action. Returns `null` if no action was found.
   */
  existingAction(e, n) {
    const i = n || this._root, r = i.uuid, c = typeof e == "string" ? sm.findByName(i, e) : e, h = c ? c.uuid : e, d = this._actionsByClip[h];
    return d !== void 0 && d.actionByRoot[r] || null;
  }
  /**
   * Deactivates all previously scheduled actions on this mixer.
   *
   * @return {AnimationMixer} A reference to thi animation mixer.
   */
  stopAllAction() {
    const e = this._actions, n = this._nActiveActions;
    for (let i = n - 1; i >= 0; --i)
      e[i].stop();
    return this;
  }
  /**
   * Advances the global mixer time and updates the animation.
   *
   * This is usually done in the render loop by passing the delta
   * time from {@link Clock} or {@link Timer}.
   *
   * @param {number} deltaTime - The delta time in seconds.
   * @return {AnimationMixer} A reference to thi animation mixer.
   */
  update(e) {
    e *= this.timeScale;
    const n = this._actions, i = this._nActiveActions, r = this.time += e, c = Math.sign(e), h = this._accuIndex ^= 1;
    for (let g = 0; g !== i; ++g)
      n[g]._update(r, e, c, h);
    const d = this._bindings, v = this._nActiveBindings;
    for (let g = 0; g !== v; ++g)
      d[g].apply(h);
    return this;
  }
  /**
   * Sets the global mixer to a specific time and updates the animation accordingly.
   *
   * This is useful when you need to jump to an exact time in an animation. The
   * input parameter will be scaled by {@link AnimationMixer#timeScale}
   *
   * @param {number} time - The time to set in seconds.
   * @return {AnimationMixer} A reference to thi animation mixer.
   */
  setTime(e) {
    this.time = 0;
    for (let n = 0; n < this._actions.length; n++)
      this._actions[n].time = 0;
    return this.update(e);
  }
  /**
   * Returns this mixer's root object.
   *
   * @return {Object3D} The mixer's root object.
   */
  getRoot() {
    return this._root;
  }
  /**
   * Deallocates all memory resources for a clip. Before using this method make
   * sure to call {@link AnimationAction#stop} for all related actions.
   *
   * @param {AnimationClip} clip - The clip to uncache.
   */
  uncacheClip(e) {
    const n = this._actions, i = e.uuid, r = this._actionsByClip, c = r[i];
    if (c !== void 0) {
      const h = c.knownActions;
      for (let d = 0, v = h.length; d !== v; ++d) {
        const g = h[d];
        this._deactivateAction(g);
        const S = g._cacheIndex, x = n[n.length - 1];
        g._cacheIndex = null, g._byClipCacheIndex = null, x._cacheIndex = S, n[S] = x, n.pop(), this._removeInactiveBindingsForAction(g);
      }
      delete r[i];
    }
  }
  /**
   * Deallocates all memory resources for a root object. Before using this
   * method make sure to call {@link AnimationAction#stop} for all related
   * actions or alternatively {@link AnimationMixer#stopAllAction} when the
   * mixer operates on a single root.
   *
   * @param {Object3D} root - The root object to uncache.
   */
  uncacheRoot(e) {
    const n = e.uuid, i = this._actionsByClip;
    for (const h in i) {
      const d = i[h].actionByRoot, v = d[n];
      v !== void 0 && (this._deactivateAction(v), this._removeInactiveAction(v));
    }
    const r = this._bindingsByRootAndName, c = r[n];
    if (c !== void 0)
      for (const h in c) {
        const d = c[h];
        d.restoreOriginalState(), this._removeInactiveBinding(d);
      }
  }
  /**
   * Deallocates all memory resources for an action. The action is identified by the
   * given clip and an optional root object. Before using this method make
   * sure to call {@link AnimationAction#stop} to deactivate the action.
   *
   * @param {AnimationClip|string} clip - An animation clip or alternatively the name of the animation clip.
   * @param {Object3D} [optionalRoot] - An alternative root object.
   */
  uncacheAction(e, n) {
    const i = this.existingAction(e, n);
    i !== null && (this._deactivateAction(i), this._removeInactiveAction(i));
  }
}
class pw extends $S {
  /**
   * Constructs a new 3D render target.
   *
   * @param {number} [width=1] - The width of the render target.
   * @param {number} [height=1] - The height of the render target.
   * @param {number} [depth=1] - The height of the render target.
   * @param {RenderTarget~Options} [options] - The configuration object.
   */
  constructor(e = 1, n = 1, i = 1, r = {}) {
    super(e, n, r), this.isRenderTarget3D = !0, this.depth = i, this.texture = new Z0(null, e, n, i), this._setTextureOptions(r), this.texture.isRenderTargetTexture = !0;
  }
}
class qn {
  /**
   * Constructs a new uniform.
   *
   * @param {any} value - The uniform value.
   */
  constructor(e) {
    this.value = e;
  }
  /**
   * Returns a new uniform with copied values from this instance.
   * If the value has a `clone()` method, the value is cloned as well.
   *
   * @return {Uniform} A clone of this instance.
   */
  clone() {
    return new qn(this.value.clone === void 0 ? this.value : this.value.clone());
  }
}
let mw = 0;
class vw extends qs {
  /**
   * Constructs a new uniforms group.
   */
  constructor() {
    super(), this.isUniformsGroup = !0, Object.defineProperty(this, "id", { value: mw++ }), this.name = "", this.usage = Kp, this.uniforms = [];
  }
  /**
   * Adds the given uniform to this uniforms group.
   *
   * @param {Uniform} uniform - The uniform to add.
   * @return {UniformsGroup} A reference to this uniforms group.
   */
  add(e) {
    return this.uniforms.push(e), this;
  }
  /**
   * Removes the given uniform from this uniforms group.
   *
   * @param {Uniform} uniform - The uniform to remove.
   * @return {UniformsGroup} A reference to this uniforms group.
   */
  remove(e) {
    const n = this.uniforms.indexOf(e);
    return n !== -1 && this.uniforms.splice(n, 1), this;
  }
  /**
   * Sets the name of this uniforms group.
   *
   * @param {string} name - The name to set.
   * @return {UniformsGroup} A reference to this uniforms group.
   */
  setName(e) {
    return this.name = e, this;
  }
  /**
   * Sets the usage of this uniforms group.
   *
   * @param {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)} value - The usage to set.
   * @return {UniformsGroup} A reference to this uniforms group.
   */
  setUsage(e) {
    return this.usage = e, this;
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   *
   * @fires Texture#dispose
   */
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
  /**
   * Copies the values of the given uniforms group to this instance.
   *
   * @param {UniformsGroup} source - The uniforms group to copy.
   * @return {UniformsGroup} A reference to this uniforms group.
   */
  copy(e) {
    this.name = e.name, this.usage = e.usage;
    const n = e.uniforms;
    this.uniforms.length = 0;
    for (let i = 0, r = n.length; i < r; i++) {
      const c = Array.isArray(n[i]) ? n[i] : [n[i]];
      for (let h = 0; h < c.length; h++)
        this.uniforms.push(c[h].clone());
    }
    return this;
  }
  /**
   * Returns a new uniforms group with copied values from this instance.
   *
   * @return {UniformsGroup} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
}
class gw extends K0 {
  /**
   * Constructs a new instanced interleaved buffer.
   *
   * @param {TypedArray} array - A typed array with a shared buffer storing attribute data.
   * @param {number} stride - The number of typed-array elements per vertex.
   * @param {number} [meshPerAttribute=1] - Defines how often a value of this interleaved buffer should be repeated.
   */
  constructor(e, n, i = 1) {
    super(e, n), this.isInstancedInterleavedBuffer = !0, this.meshPerAttribute = i;
  }
  copy(e) {
    return super.copy(e), this.meshPerAttribute = e.meshPerAttribute, this;
  }
  clone(e) {
    const n = super.clone(e);
    return n.meshPerAttribute = this.meshPerAttribute, n;
  }
  toJSON(e) {
    const n = super.toJSON(e);
    return n.isInstancedInterleavedBuffer = !0, n.meshPerAttribute = this.meshPerAttribute, n;
  }
}
class yw {
  /**
   * Constructs a new GL buffer attribute.
   *
   * @param {WebGLBuffer} buffer - The native WebGL buffer.
   * @param {number} type - The native data type (e.g. `gl.FLOAT`).
   * @param {number} itemSize - The item size.
   * @param {number} elementSize - The corresponding size (in bytes) for the given `type` parameter.
   * @param {number} count - The expected number of vertices in VBO.
   * @param {boolean} [normalized=false] - Whether the data are normalized or not.
   */
  constructor(e, n, i, r, c, h = !1) {
    this.isGLBufferAttribute = !0, this.name = "", this.buffer = e, this.type = n, this.itemSize = i, this.elementSize = r, this.count = c, this.normalized = h, this.version = 0;
  }
  /**
   * Flag to indicate that this attribute has changed and should be re-sent to
   * the GPU. Set this to `true` when you modify the value of the array.
   *
   * @type {number}
   * @default false
   * @param {boolean} value
   */
  set needsUpdate(e) {
    e === !0 && this.version++;
  }
  /**
   * Sets the given native WebGL buffer.
   *
   * @param {WebGLBuffer} buffer - The buffer to set.
   * @return {BufferAttribute} A reference to this instance.
   */
  setBuffer(e) {
    return this.buffer = e, this;
  }
  /**
   * Sets the given native data type and element size.
   *
   * @param {number} type - The native data type (e.g. `gl.FLOAT`).
   * @param {number} elementSize - The corresponding size (in bytes) for the given `type` parameter.
   * @return {BufferAttribute} A reference to this instance.
   */
  setType(e, n) {
    return this.type = e, this.elementSize = n, this;
  }
  /**
   * Sets the item size.
   *
   * @param {number} itemSize - The item size.
   * @return {BufferAttribute} A reference to this instance.
   */
  setItemSize(e) {
    return this.itemSize = e, this;
  }
  /**
   * Sets the count (the expected number of vertices in VBO).
   *
   * @param {number} count - The count.
   * @return {BufferAttribute} A reference to this instance.
   */
  setCount(e) {
    return this.count = e, this;
  }
}
const MM = /* @__PURE__ */ new Ft();
class bT {
  /**
   * Constructs a new raycaster.
   *
   * @param {Vector3} origin - The origin vector where the ray casts from.
   * @param {Vector3} direction - The (normalized) direction vector that gives direction to the ray.
   * @param {number} [near=0] - All results returned are further away than near. Near can't be negative.
   * @param {number} [far=Infinity] - All results returned are closer than far. Far can't be lower than near.
   */
  constructor(e, n, i = 0, r = 1 / 0) {
    this.ray = new Kh(e, n), this.near = i, this.far = r, this.camera = null, this.layers = new qh(), this.params = {
      Mesh: {},
      Line: { threshold: 1 },
      LOD: {},
      Points: { threshold: 1 },
      Sprite: {}
    };
  }
  /**
   * Updates the ray with a new origin and direction by copying the values from the arguments.
   *
   * @param {Vector3} origin - The origin vector where the ray casts from.
   * @param {Vector3} direction - The (normalized) direction vector that gives direction to the ray.
   */
  set(e, n) {
    this.ray.set(e, n);
  }
  /**
   * Uses the given coordinates and camera to compute a new origin and direction for the internal ray.
   *
   * @param {Vector2} coords - 2D coordinates of the mouse, in normalized device coordinates (NDC).
   * X and Y components should be between `-1` and `1`.
   * @param {Camera} camera - The camera from which the ray should originate.
   */
  setFromCamera(e, n) {
    n.isPerspectiveCamera ? (this.ray.origin.setFromMatrixPosition(n.matrixWorld), this.ray.direction.set(e.x, e.y, 0.5).unproject(n).sub(this.ray.origin).normalize(), this.camera = n) : n.isOrthographicCamera ? (this.ray.origin.set(e.x, e.y, (n.near + n.far) / (n.near - n.far)).unproject(n), this.ray.direction.set(0, 0, -1).transformDirection(n.matrixWorld), this.camera = n) : console.error("THREE.Raycaster: Unsupported camera type: " + n.type);
  }
  /**
   * Uses the given WebXR controller to compute a new origin and direction for the internal ray.
   *
   * @param {WebXRController} controller - The controller to copy the position and direction from.
   * @return {Raycaster} A reference to this raycaster.
   */
  setFromXRController(e) {
    return MM.identity().extractRotation(e.matrixWorld), this.ray.origin.setFromMatrixPosition(e.matrixWorld), this.ray.direction.set(0, 0, -1).applyMatrix4(MM), this;
  }
  /**
   * The intersection point of a raycaster intersection test.
   * @typedef {Object} Raycaster~Intersection
   * @property {number} distance - The distance from the ray's origin to the intersection point.
   * @property {number} distanceToRay -  Some 3D objects e.g. {@link Points} provide the distance of the
   * intersection to the nearest point on the ray. For other objects it will be `undefined`.
   * @property {Vector3} point - The intersection point, in world coordinates.
   * @property {Object} face - The face that has been intersected.
   * @property {number} faceIndex - The face index.
   * @property {Object3D} object - The 3D object that has been intersected.
   * @property {Vector2} uv - U,V coordinates at point of intersection.
   * @property {Vector2} uv1 - Second set of U,V coordinates at point of intersection.
   * @property {Vector3} uv1 - Interpolated normal vector at point of intersection.
   * @property {number} instanceId - The index number of the instance where the ray
   * intersects the {@link InstancedMesh}.
   */
  /**
   * Checks all intersection between the ray and the object with or without the
   * descendants. Intersections are returned sorted by distance, closest first.
   *
   * `Raycaster` delegates to the `raycast()` method of the passed 3D object, when
   * evaluating whether the ray intersects the object or not. This allows meshes to respond
   * differently to ray casting than lines or points.
   *
   * Note that for meshes, faces must be pointed towards the origin of the ray in order
   * to be detected; intersections of the ray passing through the back of a face will not
   * be detected. To raycast against both faces of an object, you'll want to set  {@link Material#side}
   * to `THREE.DoubleSide`.
   *
   * @param {Object3D} object - The 3D object to check for intersection with the ray.
   * @param {boolean} [recursive=true] - If set to `true`, it also checks all descendants.
   * Otherwise it only checks intersection with the object.
   * @param {Array<Raycaster~Intersection>} [intersects=[]] The target array that holds the result of the method.
   * @return {Array<Raycaster~Intersection>} An array holding the intersection points.
   */
  intersectObject(e, n = !0, i = []) {
    return CS(e, this, i, n), i.sort(bM), i;
  }
  /**
   * Checks all intersection between the ray and the objects with or without
   * the descendants. Intersections are returned sorted by distance, closest first.
   *
   * @param {Array<Object3D>} objects - The 3D objects to check for intersection with the ray.
   * @param {boolean} [recursive=true] - If set to `true`, it also checks all descendants.
   * Otherwise it only checks intersection with the object.
   * @param {Array<Raycaster~Intersection>} [intersects=[]] The target array that holds the result of the method.
   * @return {Array<Raycaster~Intersection>} An array holding the intersection points.
   */
  intersectObjects(e, n = !0, i = []) {
    for (let r = 0, c = e.length; r < c; r++)
      CS(e[r], this, i, n);
    return i.sort(bM), i;
  }
}
function bM(s, e) {
  return s.distance - e.distance;
}
function CS(s, e, n, i) {
  let r = !0;
  if (s.layers.test(e.layers) && s.raycast(e, n) === !1 && (r = !1), r === !0 && i === !0) {
    const c = s.children;
    for (let h = 0, d = c.length; h < d; h++)
      CS(c[h], e, n, !0);
  }
}
let _w = class {
  /**
   * Constructs a new timer.
   */
  constructor() {
    this._previousTime = 0, this._currentTime = 0, this._startTime = performance.now(), this._delta = 0, this._elapsed = 0, this._timescale = 1, this._document = null, this._pageVisibilityHandler = null;
  }
  /**
   * Connect the timer to the given document.Calling this method is not mandatory to
   * use the timer but enables the usage of the Page Visibility API to avoid large time
   * delta values.
   *
   * @param {Document} document - The document.
   */
  connect(e) {
    this._document = e, e.hidden !== void 0 && (this._pageVisibilityHandler = Sw.bind(this), e.addEventListener("visibilitychange", this._pageVisibilityHandler, !1));
  }
  /**
   * Disconnects the timer from the DOM and also disables the usage of the Page Visibility API.
   */
  disconnect() {
    this._pageVisibilityHandler !== null && (this._document.removeEventListener("visibilitychange", this._pageVisibilityHandler), this._pageVisibilityHandler = null), this._document = null;
  }
  /**
   * Returns the time delta in seconds.
   *
   * @return {number} The time delta in second.
   */
  getDelta() {
    return this._delta / 1e3;
  }
  /**
   * Returns the elapsed time in seconds.
   *
   * @return {number} The elapsed time in second.
   */
  getElapsed() {
    return this._elapsed / 1e3;
  }
  /**
   * Returns the timescale.
   *
   * @return {number} The timescale.
   */
  getTimescale() {
    return this._timescale;
  }
  /**
   * Sets the given timescale which scale the time delta computation
   * in `update()`.
   *
   * @param {number} timescale - The timescale to set.
   * @return {Timer} A reference to this timer.
   */
  setTimescale(e) {
    return this._timescale = e, this;
  }
  /**
   * Resets the time computation for the current simulation step.
   *
   * @return {Timer} A reference to this timer.
   */
  reset() {
    return this._currentTime = performance.now() - this._startTime, this;
  }
  /**
   * Can be used to free all internal resources. Usually called when
   * the timer instance isn't required anymore.
   */
  dispose() {
    this.disconnect();
  }
  /**
   * Updates the internal state of the timer. This method should be called
   * once per simulation step and before you perform queries against the timer
   * (e.g. via `getDelta()`).
   *
   * @param {number} timestamp - The current time in milliseconds. Can be obtained
   * from the `requestAnimationFrame` callback argument. If not provided, the current
   * time will be determined with `performance.now`.
   * @return {Timer} A reference to this timer.
   */
  update(e) {
    return this._pageVisibilityHandler !== null && this._document.hidden === !0 ? this._delta = 0 : (this._previousTime = this._currentTime, this._currentTime = (e !== void 0 ? e : performance.now()) - this._startTime, this._delta = (this._currentTime - this._previousTime) * this._timescale, this._elapsed += this._delta), this;
  }
};
function Sw() {
  this._document.hidden === !1 && this.reset();
}
class xw {
  /**
   * Constructs a new spherical.
   *
   * @param {number} [radius=1] - The radius, or the Euclidean distance (straight-line distance) from the point to the origin.
   * @param {number} [phi=0] - The polar angle in radians from the y (up) axis.
   * @param {number} [theta=0] - The equator/azimuthal angle in radians around the y (up) axis.
   */
  constructor(e = 1, n = 0, i = 0) {
    this.radius = e, this.phi = n, this.theta = i;
  }
  /**
   * Sets the spherical components by copying the given values.
   *
   * @param {number} radius - The radius.
   * @param {number} phi - The polar angle.
   * @param {number} theta - The azimuthal angle.
   * @return {Spherical} A reference to this spherical.
   */
  set(e, n, i) {
    return this.radius = e, this.phi = n, this.theta = i, this;
  }
  /**
   * Copies the values of the given spherical to this instance.
   *
   * @param {Spherical} other - The spherical to copy.
   * @return {Spherical} A reference to this spherical.
   */
  copy(e) {
    return this.radius = e.radius, this.phi = e.phi, this.theta = e.theta, this;
  }
  /**
   * Restricts the polar angle [page:.phi phi] to be between `0.000001` and pi -
   * `0.000001`.
   *
   * @return {Spherical} A reference to this spherical.
   */
  makeSafe() {
    return this.phi = Vt(this.phi, 1e-6, Math.PI - 1e-6), this;
  }
  /**
   * Sets the spherical components from the given vector which is assumed to hold
   * Cartesian coordinates.
   *
   * @param {Vector3} v - The vector to set.
   * @return {Spherical} A reference to this spherical.
   */
  setFromVector3(e) {
    return this.setFromCartesianCoords(e.x, e.y, e.z);
  }
  /**
   * Sets the spherical components from the given Cartesian coordinates.
   *
   * @param {number} x - The x value.
   * @param {number} y - The y value.
   * @param {number} z - The z value.
   * @return {Spherical} A reference to this spherical.
   */
  setFromCartesianCoords(e, n, i) {
    return this.radius = Math.sqrt(e * e + n * n + i * i), this.radius === 0 ? (this.theta = 0, this.phi = 0) : (this.theta = Math.atan2(e, i), this.phi = Math.acos(Vt(n / this.radius, -1, 1))), this;
  }
  /**
   * Returns a new spherical with copied values from this instance.
   *
   * @return {Spherical} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
}
class Mw {
  /**
   * Constructs a new cylindrical.
   *
   * @param {number} [radius=1] - The distance from the origin to a point in the x-z plane.
   * @param {number} [theta=0] - A counterclockwise angle in the x-z plane measured in radians from the positive z-axis.
   * @param {number} [y=0] - The height above the x-z plane.
   */
  constructor(e = 1, n = 0, i = 0) {
    this.radius = e, this.theta = n, this.y = i;
  }
  /**
   * Sets the cylindrical components by copying the given values.
   *
   * @param {number} radius - The radius.
   * @param {number} theta - The theta angle.
   * @param {number} y - The height value.
   * @return {Cylindrical} A reference to this cylindrical.
   */
  set(e, n, i) {
    return this.radius = e, this.theta = n, this.y = i, this;
  }
  /**
   * Copies the values of the given cylindrical to this instance.
   *
   * @param {Cylindrical} other - The cylindrical to copy.
   * @return {Cylindrical} A reference to this cylindrical.
   */
  copy(e) {
    return this.radius = e.radius, this.theta = e.theta, this.y = e.y, this;
  }
  /**
   * Sets the cylindrical components from the given vector which is assumed to hold
   * Cartesian coordinates.
   *
   * @param {Vector3} v - The vector to set.
   * @return {Cylindrical} A reference to this cylindrical.
   */
  setFromVector3(e) {
    return this.setFromCartesianCoords(e.x, e.y, e.z);
  }
  /**
   * Sets the cylindrical components from the given Cartesian coordinates.
   *
   * @param {number} x - The x value.
   * @param {number} y - The x value.
   * @param {number} z - The x value.
   * @return {Cylindrical} A reference to this cylindrical.
   */
  setFromCartesianCoords(e, n, i) {
    return this.radius = Math.sqrt(e * e + i * i), this.theta = Math.atan2(e, i), this.y = n, this;
  }
  /**
   * Returns a new cylindrical with copied values from this instance.
   *
   * @return {Cylindrical} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
}
class Ex {
  /**
   * Constructs a new 2x2 matrix. The arguments are supposed to be
   * in row-major order. If no arguments are provided, the constructor
   * initializes the matrix as an identity matrix.
   *
   * @param {number} [n11] - 1-1 matrix element.
   * @param {number} [n12] - 1-2 matrix element.
   * @param {number} [n21] - 2-1 matrix element.
   * @param {number} [n22] - 2-2 matrix element.
   */
  constructor(e, n, i, r) {
    Ex.prototype.isMatrix2 = !0, this.elements = [
      1,
      0,
      0,
      1
    ], e !== void 0 && this.set(e, n, i, r);
  }
  /**
   * Sets this matrix to the 2x2 identity matrix.
   *
   * @return {Matrix2} A reference to this matrix.
   */
  identity() {
    return this.set(
      1,
      0,
      0,
      1
    ), this;
  }
  /**
   * Sets the elements of the matrix from the given array.
   *
   * @param {Array<number>} array - The matrix elements in column-major order.
   * @param {number} [offset=0] - Index of the first element in the array.
   * @return {Matrix2} A reference to this matrix.
   */
  fromArray(e, n = 0) {
    for (let i = 0; i < 4; i++)
      this.elements[i] = e[i + n];
    return this;
  }
  /**
   * Sets the elements of the matrix.The arguments are supposed to be
   * in row-major order.
   *
   * @param {number} n11 - 1-1 matrix element.
   * @param {number} n12 - 1-2 matrix element.
   * @param {number} n21 - 2-1 matrix element.
   * @param {number} n22 - 2-2 matrix element.
   * @return {Matrix2} A reference to this matrix.
   */
  set(e, n, i, r) {
    const c = this.elements;
    return c[0] = e, c[2] = n, c[1] = i, c[3] = r, this;
  }
}
const EM = /* @__PURE__ */ new De();
class bw {
  /**
   * Constructs a new bounding box.
   *
   * @param {Vector2} [min=(Infinity,Infinity)] - A vector representing the lower boundary of the box.
   * @param {Vector2} [max=(-Infinity,-Infinity)] - A vector representing the upper boundary of the box.
   */
  constructor(e = new De(1 / 0, 1 / 0), n = new De(-1 / 0, -1 / 0)) {
    this.isBox2 = !0, this.min = e, this.max = n;
  }
  /**
   * Sets the lower and upper boundaries of this box.
   * Please note that this method only copies the values from the given objects.
   *
   * @param {Vector2} min - The lower boundary of the box.
   * @param {Vector2} max - The upper boundary of the box.
   * @return {Box2} A reference to this bounding box.
   */
  set(e, n) {
    return this.min.copy(e), this.max.copy(n), this;
  }
  /**
   * Sets the upper and lower bounds of this box so it encloses the position data
   * in the given array.
   *
   * @param {Array<Vector2>} points - An array holding 2D position data as instances of {@link Vector2}.
   * @return {Box2} A reference to this bounding box.
   */
  setFromPoints(e) {
    this.makeEmpty();
    for (let n = 0, i = e.length; n < i; n++)
      this.expandByPoint(e[n]);
    return this;
  }
  /**
   * Centers this box on the given center vector and sets this box's width, height and
   * depth to the given size values.
   *
   * @param {Vector2} center - The center of the box.
   * @param {Vector2} size - The x and y dimensions of the box.
   * @return {Box2} A reference to this bounding box.
   */
  setFromCenterAndSize(e, n) {
    const i = EM.copy(n).multiplyScalar(0.5);
    return this.min.copy(e).sub(i), this.max.copy(e).add(i), this;
  }
  /**
   * Returns a new box with copied values from this instance.
   *
   * @return {Box2} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
  /**
   * Copies the values of the given box to this instance.
   *
   * @param {Box2} box - The box to copy.
   * @return {Box2} A reference to this bounding box.
   */
  copy(e) {
    return this.min.copy(e.min), this.max.copy(e.max), this;
  }
  /**
   * Makes this box empty which means in encloses a zero space in 2D.
   *
   * @return {Box2} A reference to this bounding box.
   */
  makeEmpty() {
    return this.min.x = this.min.y = 1 / 0, this.max.x = this.max.y = -1 / 0, this;
  }
  /**
   * Returns true if this box includes zero points within its bounds.
   * Note that a box with equal lower and upper bounds still includes one
   * point, the one both bounds share.
   *
   * @return {boolean} Whether this box is empty or not.
   */
  isEmpty() {
    return this.max.x < this.min.x || this.max.y < this.min.y;
  }
  /**
   * Returns the center point of this box.
   *
   * @param {Vector2} target - The target vector that is used to store the method's result.
   * @return {Vector2} The center point.
   */
  getCenter(e) {
    return this.isEmpty() ? e.set(0, 0) : e.addVectors(this.min, this.max).multiplyScalar(0.5);
  }
  /**
   * Returns the dimensions of this box.
   *
   * @param {Vector2} target - The target vector that is used to store the method's result.
   * @return {Vector2} The size.
   */
  getSize(e) {
    return this.isEmpty() ? e.set(0, 0) : e.subVectors(this.max, this.min);
  }
  /**
   * Expands the boundaries of this box to include the given point.
   *
   * @param {Vector2} point - The point that should be included by the bounding box.
   * @return {Box2} A reference to this bounding box.
   */
  expandByPoint(e) {
    return this.min.min(e), this.max.max(e), this;
  }
  /**
   * Expands this box equilaterally by the given vector. The width of this
   * box will be expanded by the x component of the vector in both
   * directions. The height of this box will be expanded by the y component of
   * the vector in both directions.
   *
   * @param {Vector2} vector - The vector that should expand the bounding box.
   * @return {Box2} A reference to this bounding box.
   */
  expandByVector(e) {
    return this.min.sub(e), this.max.add(e), this;
  }
  /**
   * Expands each dimension of the box by the given scalar. If negative, the
   * dimensions of the box will be contracted.
   *
   * @param {number} scalar - The scalar value that should expand the bounding box.
   * @return {Box2} A reference to this bounding box.
   */
  expandByScalar(e) {
    return this.min.addScalar(-e), this.max.addScalar(e), this;
  }
  /**
   * Returns `true` if the given point lies within or on the boundaries of this box.
   *
   * @param {Vector2} point - The point to test.
   * @return {boolean} Whether the bounding box contains the given point or not.
   */
  containsPoint(e) {
    return e.x >= this.min.x && e.x <= this.max.x && e.y >= this.min.y && e.y <= this.max.y;
  }
  /**
   * Returns `true` if this bounding box includes the entirety of the given bounding box.
   * If this box and the given one are identical, this function also returns `true`.
   *
   * @param {Box2} box - The bounding box to test.
   * @return {boolean} Whether the bounding box contains the given bounding box or not.
   */
  containsBox(e) {
    return this.min.x <= e.min.x && e.max.x <= this.max.x && this.min.y <= e.min.y && e.max.y <= this.max.y;
  }
  /**
   * Returns a point as a proportion of this box's width and height.
   *
   * @param {Vector2} point - A point in 2D space.
   * @param {Vector2} target - The target vector that is used to store the method's result.
   * @return {Vector2} A point as a proportion of this box's width and height.
   */
  getParameter(e, n) {
    return n.set(
      (e.x - this.min.x) / (this.max.x - this.min.x),
      (e.y - this.min.y) / (this.max.y - this.min.y)
    );
  }
  /**
   * Returns `true` if the given bounding box intersects with this bounding box.
   *
   * @param {Box2} box - The bounding box to test.
   * @return {boolean} Whether the given bounding box intersects with this bounding box.
   */
  intersectsBox(e) {
    return e.max.x >= this.min.x && e.min.x <= this.max.x && e.max.y >= this.min.y && e.min.y <= this.max.y;
  }
  /**
   * Clamps the given point within the bounds of this box.
   *
   * @param {Vector2} point - The point to clamp.
   * @param {Vector2} target - The target vector that is used to store the method's result.
   * @return {Vector2} The clamped point.
   */
  clampPoint(e, n) {
    return n.copy(e).clamp(this.min, this.max);
  }
  /**
   * Returns the euclidean distance from any edge of this box to the specified point. If
   * the given point lies inside of this box, the distance will be `0`.
   *
   * @param {Vector2} point - The point to compute the distance to.
   * @return {number} The euclidean distance.
   */
  distanceToPoint(e) {
    return this.clampPoint(e, EM).distanceTo(e);
  }
  /**
   * Computes the intersection of this bounding box and the given one, setting the upper
   * bound of this box to the lesser of the two boxes' upper bounds and the
   * lower bound of this box to the greater of the two boxes' lower bounds. If
   * there's no overlap, makes this box empty.
   *
   * @param {Box2} box - The bounding box to intersect with.
   * @return {Box2} A reference to this bounding box.
   */
  intersect(e) {
    return this.min.max(e.min), this.max.min(e.max), this.isEmpty() && this.makeEmpty(), this;
  }
  /**
   * Computes the union of this box and another and the given one, setting the upper
   * bound of this box to the greater of the two boxes' upper bounds and the
   * lower bound of this box to the lesser of the two boxes' lower bounds.
   *
   * @param {Box2} box - The bounding box that will be unioned with this instance.
   * @return {Box2} A reference to this bounding box.
   */
  union(e) {
    return this.min.min(e.min), this.max.max(e.max), this;
  }
  /**
   * Adds the given offset to both the upper and lower bounds of this bounding box,
   * effectively moving it in 2D space.
   *
   * @param {Vector2} offset - The offset that should be used to translate the bounding box.
   * @return {Box2} A reference to this bounding box.
   */
  translate(e) {
    return this.min.add(e), this.max.add(e), this;
  }
  /**
   * Returns `true` if this bounding box is equal with the given one.
   *
   * @param {Box2} box - The box to test for equality.
   * @return {boolean} Whether this bounding box is equal with the given one.
   */
  equals(e) {
    return e.min.equals(this.min) && e.max.equals(this.max);
  }
}
const TM = /* @__PURE__ */ new j(), Ng = /* @__PURE__ */ new j(), Rh = /* @__PURE__ */ new j(), Ch = /* @__PURE__ */ new j(), F_ = /* @__PURE__ */ new j(), Ew = /* @__PURE__ */ new j(), Tw = /* @__PURE__ */ new j();
class Aw {
  /**
   * Constructs a new line segment.
   *
   * @param {Vector3} [start=(0,0,0)] - Start of the line segment.
   * @param {Vector3} [end=(0,0,0)] - End of the line segment.
   */
  constructor(e = new j(), n = new j()) {
    this.start = e, this.end = n;
  }
  /**
   * Sets the start and end values by copying the given vectors.
   *
   * @param {Vector3} start - The start point.
   * @param {Vector3} end - The end point.
   * @return {Line3} A reference to this line segment.
   */
  set(e, n) {
    return this.start.copy(e), this.end.copy(n), this;
  }
  /**
   * Copies the values of the given line segment to this instance.
   *
   * @param {Line3} line - The line segment to copy.
   * @return {Line3} A reference to this line segment.
   */
  copy(e) {
    return this.start.copy(e.start), this.end.copy(e.end), this;
  }
  /**
   * Returns the center of the line segment.
   *
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The center point.
   */
  getCenter(e) {
    return e.addVectors(this.start, this.end).multiplyScalar(0.5);
  }
  /**
   * Returns the delta vector of the line segment's start and end point.
   *
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The delta vector.
   */
  delta(e) {
    return e.subVectors(this.end, this.start);
  }
  /**
   * Returns the squared Euclidean distance between the line' start and end point.
   *
   * @return {number} The squared Euclidean distance.
   */
  distanceSq() {
    return this.start.distanceToSquared(this.end);
  }
  /**
   * Returns the Euclidean distance between the line' start and end point.
   *
   * @return {number} The Euclidean distance.
   */
  distance() {
    return this.start.distanceTo(this.end);
  }
  /**
   * Returns a vector at a certain position along the line segment.
   *
   * @param {number} t - A value between `[0,1]` to represent a position along the line segment.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The delta vector.
   */
  at(e, n) {
    return this.delta(n).multiplyScalar(e).add(this.start);
  }
  /**
   * Returns a point parameter based on the closest point as projected on the line segment.
   *
   * @param {Vector3} point - The point for which to return a point parameter.
   * @param {boolean} clampToLine - Whether to clamp the result to the range `[0,1]` or not.
   * @return {number} The point parameter.
   */
  closestPointToPointParameter(e, n) {
    TM.subVectors(e, this.start), Ng.subVectors(this.end, this.start);
    const i = Ng.dot(Ng);
    let c = Ng.dot(TM) / i;
    return n && (c = Vt(c, 0, 1)), c;
  }
  /**
   * Returns the closest point on the line for a given point.
   *
   * @param {Vector3} point - The point to compute the closest point on the line for.
   * @param {boolean} clampToLine - Whether to clamp the result to the range `[0,1]` or not.
   * @param {Vector3} target - The target vector that is used to store the method's result.
   * @return {Vector3} The closest point on the line.
   */
  closestPointToPoint(e, n, i) {
    const r = this.closestPointToPointParameter(e, n);
    return this.delta(i).multiplyScalar(r).add(this.start);
  }
  /**
   * Returns the closest squared distance between this line segment and the given one.
   *
   * @param {Line3} line - The line segment to compute the closest squared distance to.
   * @param {Vector3} [c1] - The closest point on this line segment.
   * @param {Vector3} [c2] - The closest point on the given line segment.
   * @return {number} The squared distance between this line segment and the given one.
   */
  distanceSqToLine3(e, n = Ew, i = Tw) {
    const r = 10000000000000001e-32;
    let c, h;
    const d = this.start, v = e.start, g = this.end, S = e.end;
    Rh.subVectors(g, d), Ch.subVectors(S, v), F_.subVectors(d, v);
    const x = Rh.dot(Rh), M = Ch.dot(Ch), b = Ch.dot(F_);
    if (x <= r && M <= r)
      return n.copy(d), i.copy(v), n.sub(i), n.dot(n);
    if (x <= r)
      c = 0, h = b / M, h = Vt(h, 0, 1);
    else {
      const R = Rh.dot(F_);
      if (M <= r)
        h = 0, c = Vt(-R / x, 0, 1);
      else {
        const w = Rh.dot(Ch), C = x * M - w * w;
        C !== 0 ? c = Vt((w * b - R * M) / C, 0, 1) : c = 0, h = (w * c + b) / M, h < 0 ? (h = 0, c = Vt(-R / x, 0, 1)) : h > 1 && (h = 1, c = Vt((w - R) / x, 0, 1));
      }
    }
    return n.copy(d).add(Rh.multiplyScalar(c)), i.copy(v).add(Ch.multiplyScalar(h)), n.sub(i), n.dot(n);
  }
  /**
   * Applies a 4x4 transformation matrix to this line segment.
   *
   * @param {Matrix4} matrix - The transformation matrix.
   * @return {Line3} A reference to this line segment.
   */
  applyMatrix4(e) {
    return this.start.applyMatrix4(e), this.end.applyMatrix4(e), this;
  }
  /**
   * Returns `true` if this line segment is equal with the given one.
   *
   * @param {Line3} line - The line segment to test for equality.
   * @return {boolean} Whether this line segment is equal with the given one.
   */
  equals(e) {
    return e.start.equals(this.start) && e.end.equals(this.end);
  }
  /**
   * Returns a new line segment with copied values from this instance.
   *
   * @return {Line3} A clone of this instance.
   */
  clone() {
    return new this.constructor().copy(this);
  }
}
const AM = /* @__PURE__ */ new j();
class Rw extends Mn {
  /**
   * Constructs a new spot light helper.
   *
   * @param {HemisphereLight} light - The light to be visualized.
   * @param {number|Color|string} [color] - The helper's color. If not set, the helper will take
   * the color of the light.
   */
  constructor(e, n) {
    super(), this.light = e, this.matrixAutoUpdate = !1, this.color = n, this.type = "SpotLightHelper";
    const i = new Kt(), r = [
      0,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1,
      0,
      1,
      0,
      0,
      0,
      -1,
      0,
      1,
      0,
      0,
      0,
      0,
      1,
      1,
      0,
      0,
      0,
      0,
      -1,
      1
    ];
    for (let h = 0, d = 1, v = 32; h < v; h++, d++) {
      const g = h / v * Math.PI * 2, S = d / v * Math.PI * 2;
      r.push(
        Math.cos(g),
        Math.sin(g),
        1,
        Math.cos(S),
        Math.sin(S),
        1
      );
    }
    i.setAttribute("position", new yt(r, 3));
    const c = new ns({ fog: !1, toneMapped: !1 });
    this.cone = new Vo(i, c), this.add(this.cone), this.update();
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
    this.cone.geometry.dispose(), this.cone.material.dispose();
  }
  /**
   * Updates the helper to match the position and direction of the
   * light being visualized.
   */
  update() {
    this.light.updateWorldMatrix(!0, !1), this.light.target.updateWorldMatrix(!0, !1), this.parent ? (this.parent.updateWorldMatrix(!0), this.matrix.copy(this.parent.matrixWorld).invert().multiply(this.light.matrixWorld)) : this.matrix.copy(this.light.matrixWorld), this.matrixWorld.copy(this.light.matrixWorld);
    const e = this.light.distance ? this.light.distance : 1e3, n = e * Math.tan(this.light.angle);
    this.cone.scale.set(n, n, e), AM.setFromMatrixPosition(this.light.target.matrixWorld), this.cone.lookAt(AM), this.color !== void 0 ? this.cone.material.color.set(this.color) : this.cone.material.color.copy(this.light.color);
  }
}
const xc = /* @__PURE__ */ new j(), Og = /* @__PURE__ */ new Ft(), X_ = /* @__PURE__ */ new Ft();
class Cw extends Vo {
  /**
   * Constructs a new skeleton helper.
   *
   * @param {Object3D} object -  Usually an instance of {@link SkinnedMesh}. However, any 3D object
   * can be used if it represents a hierarchy of bones (see {@link Bone}).
   */
  constructor(e) {
    const n = ET(e), i = new Kt(), r = [], c = [];
    for (let g = 0; g < n.length; g++) {
      const S = n[g];
      S.parent && S.parent.isBone && (r.push(0, 0, 0), r.push(0, 0, 0), c.push(0, 0, 0), c.push(0, 0, 0));
    }
    i.setAttribute("position", new yt(r, 3)), i.setAttribute("color", new yt(c, 3));
    const h = new ns({ vertexColors: !0, depthTest: !1, depthWrite: !1, toneMapped: !1, transparent: !0 });
    super(i, h), this.isSkeletonHelper = !0, this.type = "SkeletonHelper", this.root = e, this.bones = n, this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1;
    const d = new lt(255), v = new lt(65280);
    this.setColors(d, v);
  }
  updateMatrixWorld(e) {
    const n = this.bones, i = this.geometry, r = i.getAttribute("position");
    X_.copy(this.root.matrixWorld).invert();
    for (let c = 0, h = 0; c < n.length; c++) {
      const d = n[c];
      d.parent && d.parent.isBone && (Og.multiplyMatrices(X_, d.matrixWorld), xc.setFromMatrixPosition(Og), r.setXYZ(h, xc.x, xc.y, xc.z), Og.multiplyMatrices(X_, d.parent.matrixWorld), xc.setFromMatrixPosition(Og), r.setXYZ(h + 1, xc.x, xc.y, xc.z), h += 2);
    }
    i.getAttribute("position").needsUpdate = !0, super.updateMatrixWorld(e);
  }
  /**
   * Defines the colors of the helper.
   *
   * @param {Color} color1 - The first line color for each bone.
   * @param {Color} color2 - The second line color for each bone.
   * @return {SkeletonHelper} A reference to this helper.
   */
  setColors(e, n) {
    const r = this.geometry.getAttribute("color");
    for (let c = 0; c < r.count; c += 2)
      r.setXYZ(c, e.r, e.g, e.b), r.setXYZ(c + 1, n.r, n.g, n.b);
    return r.needsUpdate = !0, this;
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
function ET(s) {
  const e = [];
  s.isBone === !0 && e.push(s);
  for (let n = 0; n < s.children.length; n++)
    e.push(...ET(s.children[n]));
  return e;
}
class ww extends Ci {
  /**
   * Constructs a new point light helper.
   *
   * @param {PointLight} light - The light to be visualized.
   * @param {number} [sphereSize=1] - The size of the sphere helper.
   * @param {number|Color|string} [color] - The helper's color. If not set, the helper will take
   * the color of the light.
   */
  constructor(e, n, i) {
    const r = new vm(n, 4, 2), c = new Uc({ wireframe: !0, fog: !1, toneMapped: !1 });
    super(r, c), this.light = e, this.color = i, this.type = "PointLightHelper", this.matrix = this.light.matrixWorld, this.matrixAutoUpdate = !1, this.update();
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
  /**
   * Updates the helper to match the position of the
   * light being visualized.
   */
  update() {
    this.light.updateWorldMatrix(!0, !1), this.color !== void 0 ? this.material.color.set(this.color) : this.material.color.copy(this.light.color);
  }
}
const Dw = /* @__PURE__ */ new j(), RM = /* @__PURE__ */ new lt(), CM = /* @__PURE__ */ new lt();
class Uw extends Mn {
  /**
   * Constructs a new hemisphere light helper.
   *
   * @param {HemisphereLight} light - The light to be visualized.
   * @param {number} [size=1] - The size of the mesh used to visualize the light.
   * @param {number|Color|string} [color] - The helper's color. If not set, the helper will take
   * the color of the light.
   */
  constructor(e, n, i) {
    super(), this.light = e, this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1, this.color = i, this.type = "HemisphereLightHelper";
    const r = new mm(n);
    r.rotateY(Math.PI * 0.5), this.material = new Uc({ wireframe: !0, fog: !1, toneMapped: !1 }), this.color === void 0 && (this.material.vertexColors = !0);
    const c = r.getAttribute("position"), h = new Float32Array(c.count * 3);
    r.setAttribute("color", new Nn(h, 3)), this.add(new Ci(r, this.material)), this.update();
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
    this.children[0].geometry.dispose(), this.children[0].material.dispose();
  }
  /**
   * Updates the helper to match the position and direction of the
   * light being visualized.
   */
  update() {
    const e = this.children[0];
    if (this.color !== void 0)
      this.material.color.set(this.color);
    else {
      const n = e.geometry.getAttribute("color");
      RM.copy(this.light.color), CM.copy(this.light.groundColor);
      for (let i = 0, r = n.count; i < r; i++) {
        const c = i < r / 2 ? RM : CM;
        n.setXYZ(i, c.r, c.g, c.b);
      }
      n.needsUpdate = !0;
    }
    this.light.updateWorldMatrix(!0, !1), e.lookAt(Dw.setFromMatrixPosition(this.light.matrixWorld).negate());
  }
}
class Nw extends Vo {
  /**
   * Constructs a new grid helper.
   *
   * @param {number} [size=10] - The size of the grid.
   * @param {number} [divisions=10] - The number of divisions across the grid.
   * @param {number|Color|string} [color1=0x444444] - The color of the center line.
   * @param {number|Color|string} [color2=0x888888] - The color of the lines of the grid.
   */
  constructor(e = 10, n = 10, i = 4473924, r = 8947848) {
    i = new lt(i), r = new lt(r);
    const c = n / 2, h = e / n, d = e / 2, v = [], g = [];
    for (let M = 0, b = 0, R = -d; M <= n; M++, R += h) {
      v.push(-d, 0, R, d, 0, R), v.push(R, 0, -d, R, 0, d);
      const w = M === c ? i : r;
      w.toArray(g, b), b += 3, w.toArray(g, b), b += 3, w.toArray(g, b), b += 3, w.toArray(g, b), b += 3;
    }
    const S = new Kt();
    S.setAttribute("position", new yt(v, 3)), S.setAttribute("color", new yt(g, 3));
    const x = new ns({ vertexColors: !0, toneMapped: !1 });
    super(S, x), this.type = "GridHelper";
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
class Ow extends Vo {
  /**
   * Constructs a new polar grid helper.
   *
   * @param {number} [radius=10] - The radius of the polar grid. This can be any positive number.
   * @param {number} [sectors=16] - The number of sectors the grid will be divided into. This can be any positive integer.
   * @param {number} [rings=16] - The number of rings. This can be any positive integer.
   * @param {number} [divisions=64] - The number of line segments used for each circle. This can be any positive integer.
   * @param {number|Color|string} [color1=0x444444] - The first color used for grid elements.
   * @param {number|Color|string} [color2=0x888888] -  The second color used for grid elements.
   */
  constructor(e = 10, n = 16, i = 8, r = 64, c = 4473924, h = 8947848) {
    c = new lt(c), h = new lt(h);
    const d = [], v = [];
    if (n > 1)
      for (let x = 0; x < n; x++) {
        const M = x / n * (Math.PI * 2), b = Math.sin(M) * e, R = Math.cos(M) * e;
        d.push(0, 0, 0), d.push(b, 0, R);
        const w = x & 1 ? c : h;
        v.push(w.r, w.g, w.b), v.push(w.r, w.g, w.b);
      }
    for (let x = 0; x < i; x++) {
      const M = x & 1 ? c : h, b = e - e / i * x;
      for (let R = 0; R < r; R++) {
        let w = R / r * (Math.PI * 2), C = Math.sin(w) * b, E = Math.cos(w) * b;
        d.push(C, 0, E), v.push(M.r, M.g, M.b), w = (R + 1) / r * (Math.PI * 2), C = Math.sin(w) * b, E = Math.cos(w) * b, d.push(C, 0, E), v.push(M.r, M.g, M.b);
      }
    }
    const g = new Kt();
    g.setAttribute("position", new yt(d, 3)), g.setAttribute("color", new yt(v, 3));
    const S = new ns({ vertexColors: !0, toneMapped: !1 });
    super(g, S), this.type = "PolarGridHelper";
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
const wM = /* @__PURE__ */ new j(), Lg = /* @__PURE__ */ new j(), DM = /* @__PURE__ */ new j();
class Lw extends Mn {
  /**
   * Constructs a new directional light helper.
   *
   * @param {DirectionalLight} light - The light to be visualized.
   * @param {number} [size=1] - The dimensions of the plane.
   * @param {number|Color|string} [color] - The helper's color. If not set, the helper will take
   * the color of the light.
   */
  constructor(e, n, i) {
    super(), this.light = e, this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1, this.color = i, this.type = "DirectionalLightHelper", n === void 0 && (n = 1);
    let r = new Kt();
    r.setAttribute("position", new yt([
      -n,
      n,
      0,
      n,
      n,
      0,
      n,
      -n,
      0,
      -n,
      -n,
      0,
      -n,
      n,
      0
    ], 3));
    const c = new ns({ fog: !1, toneMapped: !1 });
    this.lightPlane = new Cc(r, c), this.add(this.lightPlane), r = new Kt(), r.setAttribute("position", new yt([0, 0, 0, 0, 0, 1], 3)), this.targetLine = new Cc(r, c), this.add(this.targetLine), this.update();
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
    this.lightPlane.geometry.dispose(), this.lightPlane.material.dispose(), this.targetLine.geometry.dispose(), this.targetLine.material.dispose();
  }
  /**
   * Updates the helper to match the position and direction of the
   * light being visualized.
   */
  update() {
    this.light.updateWorldMatrix(!0, !1), this.light.target.updateWorldMatrix(!0, !1), wM.setFromMatrixPosition(this.light.matrixWorld), Lg.setFromMatrixPosition(this.light.target.matrixWorld), DM.subVectors(Lg, wM), this.lightPlane.lookAt(Lg), this.color !== void 0 ? (this.lightPlane.material.color.set(this.color), this.targetLine.material.color.set(this.color)) : (this.lightPlane.material.color.copy(this.light.color), this.targetLine.material.color.copy(this.light.color)), this.targetLine.lookAt(Lg), this.targetLine.scale.z = DM.length();
  }
}
const zg = /* @__PURE__ */ new j(), Si = /* @__PURE__ */ new fm();
class zw extends Vo {
  /**
   * Constructs a new arrow helper.
   *
   * @param {Camera} camera - The camera to visualize.
   */
  constructor(e) {
    const n = new Kt(), i = new ns({ color: 16777215, vertexColors: !0, toneMapped: !1 }), r = [], c = [], h = {};
    d("n1", "n2"), d("n2", "n4"), d("n4", "n3"), d("n3", "n1"), d("f1", "f2"), d("f2", "f4"), d("f4", "f3"), d("f3", "f1"), d("n1", "f1"), d("n2", "f2"), d("n3", "f3"), d("n4", "f4"), d("p", "n1"), d("p", "n2"), d("p", "n3"), d("p", "n4"), d("u1", "u2"), d("u2", "u3"), d("u3", "u1"), d("c", "t"), d("p", "c"), d("cn1", "cn2"), d("cn3", "cn4"), d("cf1", "cf2"), d("cf3", "cf4");
    function d(R, w) {
      v(R), v(w);
    }
    function v(R) {
      r.push(0, 0, 0), c.push(0, 0, 0), h[R] === void 0 && (h[R] = []), h[R].push(r.length / 3 - 1);
    }
    n.setAttribute("position", new yt(r, 3)), n.setAttribute("color", new yt(c, 3)), super(n, i), this.type = "CameraHelper", this.camera = e, this.camera.updateProjectionMatrix && this.camera.updateProjectionMatrix(), this.matrix = e.matrixWorld, this.matrixAutoUpdate = !1, this.pointMap = h, this.update();
    const g = new lt(16755200), S = new lt(16711680), x = new lt(43775), M = new lt(16777215), b = new lt(3355443);
    this.setColors(g, S, x, M, b);
  }
  /**
   * Defines the colors of the helper.
   *
   * @param {Color} frustum - The frustum line color.
   * @param {Color} cone - The cone line color.
   * @param {Color} up - The up line color.
   * @param {Color} target - The target line color.
   * @param {Color} cross - The cross line color.
   * @return {CameraHelper} A reference to this helper.
   */
  setColors(e, n, i, r, c) {
    const d = this.geometry.getAttribute("color");
    return d.setXYZ(0, e.r, e.g, e.b), d.setXYZ(1, e.r, e.g, e.b), d.setXYZ(2, e.r, e.g, e.b), d.setXYZ(3, e.r, e.g, e.b), d.setXYZ(4, e.r, e.g, e.b), d.setXYZ(5, e.r, e.g, e.b), d.setXYZ(6, e.r, e.g, e.b), d.setXYZ(7, e.r, e.g, e.b), d.setXYZ(8, e.r, e.g, e.b), d.setXYZ(9, e.r, e.g, e.b), d.setXYZ(10, e.r, e.g, e.b), d.setXYZ(11, e.r, e.g, e.b), d.setXYZ(12, e.r, e.g, e.b), d.setXYZ(13, e.r, e.g, e.b), d.setXYZ(14, e.r, e.g, e.b), d.setXYZ(15, e.r, e.g, e.b), d.setXYZ(16, e.r, e.g, e.b), d.setXYZ(17, e.r, e.g, e.b), d.setXYZ(18, e.r, e.g, e.b), d.setXYZ(19, e.r, e.g, e.b), d.setXYZ(20, e.r, e.g, e.b), d.setXYZ(21, e.r, e.g, e.b), d.setXYZ(22, e.r, e.g, e.b), d.setXYZ(23, e.r, e.g, e.b), d.setXYZ(24, n.r, n.g, n.b), d.setXYZ(25, n.r, n.g, n.b), d.setXYZ(26, n.r, n.g, n.b), d.setXYZ(27, n.r, n.g, n.b), d.setXYZ(28, n.r, n.g, n.b), d.setXYZ(29, n.r, n.g, n.b), d.setXYZ(30, n.r, n.g, n.b), d.setXYZ(31, n.r, n.g, n.b), d.setXYZ(32, i.r, i.g, i.b), d.setXYZ(33, i.r, i.g, i.b), d.setXYZ(34, i.r, i.g, i.b), d.setXYZ(35, i.r, i.g, i.b), d.setXYZ(36, i.r, i.g, i.b), d.setXYZ(37, i.r, i.g, i.b), d.setXYZ(38, r.r, r.g, r.b), d.setXYZ(39, r.r, r.g, r.b), d.setXYZ(40, c.r, c.g, c.b), d.setXYZ(41, c.r, c.g, c.b), d.setXYZ(42, c.r, c.g, c.b), d.setXYZ(43, c.r, c.g, c.b), d.setXYZ(44, c.r, c.g, c.b), d.setXYZ(45, c.r, c.g, c.b), d.setXYZ(46, c.r, c.g, c.b), d.setXYZ(47, c.r, c.g, c.b), d.setXYZ(48, c.r, c.g, c.b), d.setXYZ(49, c.r, c.g, c.b), d.needsUpdate = !0, this;
  }
  /**
   * Updates the helper based on the projection matrix of the camera.
   */
  update() {
    const e = this.geometry, n = this.pointMap, i = 1, r = 1;
    let c, h;
    if (Si.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse), this.camera.reversedDepth === !0)
      c = 1, h = 0;
    else if (this.camera.coordinateSystem === Gs)
      c = -1, h = 1;
    else if (this.camera.coordinateSystem === Fh)
      c = 0, h = 1;
    else
      throw new Error("THREE.CameraHelper.update(): Invalid coordinate system: " + this.camera.coordinateSystem);
    Ri("c", n, e, Si, 0, 0, c), Ri("t", n, e, Si, 0, 0, h), Ri("n1", n, e, Si, -i, -r, c), Ri("n2", n, e, Si, i, -r, c), Ri("n3", n, e, Si, -i, r, c), Ri("n4", n, e, Si, i, r, c), Ri("f1", n, e, Si, -i, -r, h), Ri("f2", n, e, Si, i, -r, h), Ri("f3", n, e, Si, -i, r, h), Ri("f4", n, e, Si, i, r, h), Ri("u1", n, e, Si, i * 0.7, r * 1.1, c), Ri("u2", n, e, Si, -i * 0.7, r * 1.1, c), Ri("u3", n, e, Si, 0, r * 2, c), Ri("cf1", n, e, Si, -i, 0, h), Ri("cf2", n, e, Si, i, 0, h), Ri("cf3", n, e, Si, 0, -r, h), Ri("cf4", n, e, Si, 0, r, h), Ri("cn1", n, e, Si, -i, 0, c), Ri("cn2", n, e, Si, i, 0, c), Ri("cn3", n, e, Si, 0, -r, c), Ri("cn4", n, e, Si, 0, r, c), e.getAttribute("position").needsUpdate = !0;
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
function Ri(s, e, n, i, r, c, h) {
  zg.set(r, c, h).unproject(i);
  const d = e[s];
  if (d !== void 0) {
    const v = n.getAttribute("position");
    for (let g = 0, S = d.length; g < S; g++)
      v.setXYZ(d[g], zg.x, zg.y, zg.z);
  }
}
const Bg = /* @__PURE__ */ new wa();
class Bw extends Vo {
  /**
   * Constructs a new box helper.
   *
   * @param {Object3D} [object] - The 3D object to show the world-axis-aligned bounding box.
   * @param {number|Color|string} [color=0xffff00] - The box's color.
   */
  constructor(e, n = 16776960) {
    const i = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]), r = new Float32Array(24), c = new Kt();
    c.setIndex(new Nn(i, 1)), c.setAttribute("position", new Nn(r, 3)), super(c, new ns({ color: n, toneMapped: !1 })), this.object = e, this.type = "BoxHelper", this.matrixAutoUpdate = !1, this.update();
  }
  /**
   * Updates the helper's geometry to match the dimensions of the object,
   * including any children.
   */
  update() {
    if (this.object !== void 0 && Bg.setFromObject(this.object), Bg.isEmpty()) return;
    const e = Bg.min, n = Bg.max, i = this.geometry.attributes.position, r = i.array;
    r[0] = n.x, r[1] = n.y, r[2] = n.z, r[3] = e.x, r[4] = n.y, r[5] = n.z, r[6] = e.x, r[7] = e.y, r[8] = n.z, r[9] = n.x, r[10] = e.y, r[11] = n.z, r[12] = n.x, r[13] = n.y, r[14] = e.z, r[15] = e.x, r[16] = n.y, r[17] = e.z, r[18] = e.x, r[19] = e.y, r[20] = e.z, r[21] = n.x, r[22] = e.y, r[23] = e.z, i.needsUpdate = !0, this.geometry.computeBoundingSphere();
  }
  /**
   * Updates the wireframe box for the passed object.
   *
   * @param {Object3D} object - The 3D object to create the helper for.
   * @return {BoxHelper} A reference to this instance.
   */
  setFromObject(e) {
    return this.object = e, this.update(), this;
  }
  copy(e, n) {
    return super.copy(e, n), this.object = e.object, this;
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
class Pw extends Vo {
  /**
   * Constructs a new box3 helper.
   *
   * @param {Box3} box - The box to visualize.
   * @param {number|Color|string} [color=0xffff00] - The box's color.
   */
  constructor(e, n = 16776960) {
    const i = new Uint16Array([0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]), r = [1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1], c = new Kt();
    c.setIndex(new Nn(i, 1)), c.setAttribute("position", new yt(r, 3)), super(c, new ns({ color: n, toneMapped: !1 })), this.box = e, this.type = "Box3Helper", this.geometry.computeBoundingSphere();
  }
  updateMatrixWorld(e) {
    const n = this.box;
    n.isEmpty() || (n.getCenter(this.position), n.getSize(this.scale), this.scale.multiplyScalar(0.5), super.updateMatrixWorld(e));
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
class Iw extends Cc {
  /**
   * Constructs a new plane helper.
   *
   * @param {Plane} plane - The plane to be visualized.
   * @param {number} [size=1] - The side length of plane helper.
   * @param {number|Color|string} [hex=0xffff00] - The helper's color.
   */
  constructor(e, n = 1, i = 16776960) {
    const r = i, c = [1, -1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, 1, 0, -1, -1, 0, 1, -1, 0, 1, 1, 0], h = new Kt();
    h.setAttribute("position", new yt(c, 3)), h.computeBoundingSphere(), super(h, new ns({ color: r, toneMapped: !1 })), this.type = "PlaneHelper", this.plane = e, this.size = n;
    const d = [1, 1, 0, -1, 1, 0, -1, -1, 0, 1, 1, 0, -1, -1, 0, 1, -1, 0], v = new Kt();
    v.setAttribute("position", new yt(d, 3)), v.computeBoundingSphere(), this.add(new Ci(v, new Uc({ color: r, opacity: 0.2, transparent: !0, depthWrite: !1, toneMapped: !1 })));
  }
  updateMatrixWorld(e) {
    this.position.set(0, 0, 0), this.scale.set(0.5 * this.size, 0.5 * this.size, 1), this.lookAt(this.plane.normal), this.translateZ(-this.plane.constant), super.updateMatrixWorld(e);
  }
  /**
   * Updates the helper to match the position and direction of the
   * light being visualized.
   */
  dispose() {
    this.geometry.dispose(), this.material.dispose(), this.children[0].geometry.dispose(), this.children[0].material.dispose();
  }
}
const UM = /* @__PURE__ */ new j();
let Pg, q_;
class Hw extends Mn {
  /**
   * Constructs a new arrow helper.
   *
   * @param {Vector3} [dir=(0, 0, 1)] - The (normalized) direction vector.
   * @param {Vector3} [origin=(0, 0, 0)] - Point at which the arrow starts.
   * @param {number} [length=1] - Length of the arrow in world units.
   * @param {(number|Color|string)} [color=0xffff00] - Color of the arrow.
   * @param {number} [headLength=length*0.2] - The length of the head of the arrow.
   * @param {number} [headWidth=headLength*0.2] - The width of the head of the arrow.
   */
  constructor(e = new j(0, 0, 1), n = new j(0, 0, 0), i = 1, r = 16776960, c = i * 0.2, h = c * 0.2) {
    super(), this.type = "ArrowHelper", Pg === void 0 && (Pg = new Kt(), Pg.setAttribute("position", new yt([0, 0, 0, 0, 1, 0], 3)), q_ = new pm(0.5, 1, 5, 1), q_.translate(0, -0.5, 0)), this.position.copy(n), this.line = new Cc(Pg, new ns({ color: r, toneMapped: !1 })), this.line.matrixAutoUpdate = !1, this.add(this.line), this.cone = new Ci(q_, new Uc({ color: r, toneMapped: !1 })), this.cone.matrixAutoUpdate = !1, this.add(this.cone), this.setDirection(e), this.setLength(i, c, h);
  }
  /**
   * Sets the direction of the helper.
   *
   * @param {Vector3} dir - The normalized direction vector.
   */
  setDirection(e) {
    if (e.y > 0.99999)
      this.quaternion.set(0, 0, 0, 1);
    else if (e.y < -0.99999)
      this.quaternion.set(1, 0, 0, 0);
    else {
      UM.set(e.z, 0, -e.x).normalize();
      const n = Math.acos(e.y);
      this.quaternion.setFromAxisAngle(UM, n);
    }
  }
  /**
   * Sets the length of the helper.
   *
   * @param {number} length - Length of the arrow in world units.
   * @param {number} [headLength=length*0.2] - The length of the head of the arrow.
   * @param {number} [headWidth=headLength*0.2] - The width of the head of the arrow.
   */
  setLength(e, n = e * 0.2, i = n * 0.2) {
    this.line.scale.set(1, Math.max(1e-4, e - n), 1), this.line.updateMatrix(), this.cone.scale.set(i, n, i), this.cone.position.y = e, this.cone.updateMatrix();
  }
  /**
   * Sets the color of the helper.
   *
   * @param {number|Color|string} color - The color to set.
   */
  setColor(e) {
    this.line.material.color.set(e), this.cone.material.color.set(e);
  }
  copy(e) {
    return super.copy(e, !1), this.line.copy(e.line), this.cone.copy(e.cone), this;
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
    this.line.geometry.dispose(), this.line.material.dispose(), this.cone.geometry.dispose(), this.cone.material.dispose();
  }
}
class Vw extends Vo {
  /**
   * Constructs a new axes helper.
   *
   * @param {number} [size=1] - Size of the lines representing the axes.
   */
  constructor(e = 1) {
    const n = [
      0,
      0,
      0,
      e,
      0,
      0,
      0,
      0,
      0,
      0,
      e,
      0,
      0,
      0,
      0,
      0,
      0,
      e
    ], i = [
      1,
      0,
      0,
      1,
      0.6,
      0,
      0,
      1,
      0,
      0.6,
      1,
      0,
      0,
      0,
      1,
      0,
      0.6,
      1
    ], r = new Kt();
    r.setAttribute("position", new yt(n, 3)), r.setAttribute("color", new yt(i, 3));
    const c = new ns({ vertexColors: !0, toneMapped: !1 });
    super(r, c), this.type = "AxesHelper";
  }
  /**
   * Defines the colors of the axes helper.
   *
   * @param {number|Color|string} xAxisColor - The color for the x axis.
   * @param {number|Color|string} yAxisColor - The color for the y axis.
   * @param {number|Color|string} zAxisColor - The color for the z axis.
   * @return {AxesHelper} A reference to this axes helper.
   */
  setColors(e, n, i) {
    const r = new lt(), c = this.geometry.attributes.color.array;
    return r.set(e), r.toArray(c, 0), r.toArray(c, 3), r.set(n), r.toArray(c, 6), r.toArray(c, 9), r.set(i), r.toArray(c, 12), r.toArray(c, 15), this.geometry.attributes.color.needsUpdate = !0, this;
  }
  /**
   * Frees the GPU-related resources allocated by this instance. Call this
   * method whenever this instance is no longer used in your app.
   */
  dispose() {
    this.geometry.dispose(), this.material.dispose();
  }
}
class Gw {
  /**
   * Constructs a new shape path.
   */
  constructor() {
    this.type = "ShapePath", this.color = new lt(), this.subPaths = [], this.currentPath = null;
  }
  /**
   * Creates a new path and moves it current point to the given one.
   *
   * @param {number} x - The x coordinate.
   * @param {number} y - The y coordinate.
   * @return {ShapePath} A reference to this shape path.
   */
  moveTo(e, n) {
    return this.currentPath = new O0(), this.subPaths.push(this.currentPath), this.currentPath.moveTo(e, n), this;
  }
  /**
   * Adds an instance of {@link LineCurve} to the path by connecting
   * the current point with the given one.
   *
   * @param {number} x - The x coordinate of the end point.
   * @param {number} y - The y coordinate of the end point.
   * @return {ShapePath} A reference to this shape path.
   */
  lineTo(e, n) {
    return this.currentPath.lineTo(e, n), this;
  }
  /**
   * Adds an instance of {@link QuadraticBezierCurve} to the path by connecting
   * the current point with the given one.
   *
   * @param {number} aCPx - The x coordinate of the control point.
   * @param {number} aCPy - The y coordinate of the control point.
   * @param {number} aX - The x coordinate of the end point.
   * @param {number} aY - The y coordinate of the end point.
   * @return {ShapePath} A reference to this shape path.
   */
  quadraticCurveTo(e, n, i, r) {
    return this.currentPath.quadraticCurveTo(e, n, i, r), this;
  }
  /**
   * Adds an instance of {@link CubicBezierCurve} to the path by connecting
   * the current point with the given one.
   *
   * @param {number} aCP1x - The x coordinate of the first control point.
   * @param {number} aCP1y - The y coordinate of the first control point.
   * @param {number} aCP2x - The x coordinate of the second control point.
   * @param {number} aCP2y - The y coordinate of the second control point.
   * @param {number} aX - The x coordinate of the end point.
   * @param {number} aY - The y coordinate of the end point.
   * @return {ShapePath} A reference to this shape path.
   */
  bezierCurveTo(e, n, i, r, c, h) {
    return this.currentPath.bezierCurveTo(e, n, i, r, c, h), this;
  }
  /**
   * Adds an instance of {@link SplineCurve} to the path by connecting
   * the current point with the given list of points.
   *
   * @param {Array<Vector2>} pts - An array of points in 2D space.
   * @return {ShapePath} A reference to this shape path.
   */
  splineThru(e) {
    return this.currentPath.splineThru(e), this;
  }
  /**
   * Converts the paths into an array of shapes.
   *
   * @param {boolean} isCCW - By default solid shapes are  defined clockwise (CW) and holes are defined counterclockwise (CCW).
   * If this flag is set to `true`, then those are flipped.
   * @return {Array<Shape>} An array of shapes.
   */
  toShapes(e) {
    function n(E) {
      const U = [];
      for (let N = 0, O = E.length; N < O; N++) {
        const I = E[N], V = new Zu();
        V.curves = I.curves, U.push(V);
      }
      return U;
    }
    function i(E, U) {
      const N = U.length;
      let O = !1;
      for (let I = N - 1, V = 0; V < N; I = V++) {
        let Y = U[I], k = U[V], B = k.x - Y.x, z = k.y - Y.y;
        if (Math.abs(z) > Number.EPSILON) {
          if (z < 0 && (Y = U[V], B = -B, k = U[I], z = -z), E.y < Y.y || E.y > k.y) continue;
          if (E.y === Y.y) {
            if (E.x === Y.x) return !0;
          } else {
            const W = z * (E.x - Y.x) - B * (E.y - Y.y);
            if (W === 0) return !0;
            if (W < 0) continue;
            O = !O;
          }
        } else {
          if (E.y !== Y.y) continue;
          if (k.x <= E.x && E.x <= Y.x || Y.x <= E.x && E.x <= k.x) return !0;
        }
      }
      return O;
    }
    const r = kr.isClockWise, c = this.subPaths;
    if (c.length === 0) return [];
    let h, d, v;
    const g = [];
    if (c.length === 1)
      return d = c[0], v = new Zu(), v.curves = d.curves, g.push(v), g;
    let S = !r(c[0].getPoints());
    S = e ? !S : S;
    const x = [], M = [];
    let b = [], R = 0, w;
    M[R] = void 0, b[R] = [];
    for (let E = 0, U = c.length; E < U; E++)
      d = c[E], w = d.getPoints(), h = r(w), h = e ? !h : h, h ? (!S && M[R] && R++, M[R] = { s: new Zu(), p: w }, M[R].s.curves = d.curves, S && R++, b[R] = []) : b[R].push({ h: d, p: w[0] });
    if (!M[0]) return n(c);
    if (M.length > 1) {
      let E = !1, U = 0;
      for (let N = 0, O = M.length; N < O; N++)
        x[N] = [];
      for (let N = 0, O = M.length; N < O; N++) {
        const I = b[N];
        for (let V = 0; V < I.length; V++) {
          const Y = I[V];
          let k = !0;
          for (let B = 0; B < M.length; B++)
            i(Y.p, M[B].p) && (N !== B && U++, k ? (k = !1, x[B].push(Y)) : E = !0);
          k && x[N].push(Y);
        }
      }
      U > 0 && E === !1 && (b = x);
    }
    let C;
    for (let E = 0, U = M.length; E < U; E++) {
      v = M[E].s, g.push(v), C = b[E];
      for (let N = 0, O = C.length; N < O; N++)
        v.holes.push(C[N].h);
    }
    return g;
  }
}
class Fw extends qs {
  /**
   * Constructs a new controls instance.
   *
   * @param {Object3D} object - The object that is managed by the controls.
   * @param {?HTMLDOMElement} domElement - The HTML element used for event listeners.
   */
  constructor(e, n = null) {
    super(), this.object = e, this.domElement = n, this.enabled = !0, this.state = -1, this.keys = {}, this.mouseButtons = { LEFT: null, MIDDLE: null, RIGHT: null }, this.touches = { ONE: null, TWO: null };
  }
  /**
   * Connects the controls to the DOM. This method has so called "side effects" since
   * it adds the module's event listeners to the DOM.
   *
   * @param {HTMLDOMElement} element - The DOM element to connect to.
   */
  connect(e) {
    if (e === void 0) {
      console.warn("THREE.Controls: connect() now requires an element.");
      return;
    }
    this.domElement !== null && this.disconnect(), this.domElement = e;
  }
  /**
   * Disconnects the controls from the DOM.
   */
  disconnect() {
  }
  /**
   * Call this method if you no longer want use to the controls. It frees all internal
   * resources and removes all event listeners.
   */
  dispose() {
  }
  /**
   * Controls should implement this method if they have to update their internal state
   * per simulation step.
   *
   * @param {number} [delta] - The time delta in seconds.
   */
  update() {
  }
}
function Xw(s, e) {
  const n = s.image && s.image.width ? s.image.width / s.image.height : 1;
  return n > e ? (s.repeat.x = 1, s.repeat.y = n / e, s.offset.x = 0, s.offset.y = (1 - s.repeat.y) / 2) : (s.repeat.x = e / n, s.repeat.y = 1, s.offset.x = (1 - s.repeat.x) / 2, s.offset.y = 0), s;
}
function qw(s, e) {
  const n = s.image && s.image.width ? s.image.width / s.image.height : 1;
  return n > e ? (s.repeat.x = e / n, s.repeat.y = 1, s.offset.x = (1 - s.repeat.x) / 2, s.offset.y = 0) : (s.repeat.x = 1, s.repeat.y = n / e, s.offset.x = 0, s.offset.y = (1 - s.repeat.y) / 2), s;
}
function Yw(s) {
  return s.repeat.x = 1, s.repeat.y = 1, s.offset.x = 0, s.offset.y = 0, s;
}
function wS(s, e, n, i) {
  const r = kw(i);
  switch (n) {
    // https://registry.khronos.org/OpenGL-Refpages/es3.0/html/glTexImage2D.xhtml
    case kS:
      return s * e;
    case X0:
      return s * e / r.components * r.byteLength;
    case um:
      return s * e / r.components * r.byteLength;
    case ZS:
      return s * e * 2 / r.components * r.byteLength;
    case q0:
      return s * e * 2 / r.components * r.byteLength;
    case WS:
      return s * e * 3 / r.components * r.byteLength;
    case Ca:
      return s * e * 4 / r.components * r.byteLength;
    case Y0:
      return s * e * 4 / r.components * r.byteLength;
    // https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_s3tc_srgb/
    case Lp:
    case zp:
      return Math.floor((s + 3) / 4) * Math.floor((e + 3) / 4) * 8;
    case Bp:
    case Pp:
      return Math.floor((s + 3) / 4) * Math.floor((e + 3) / 4) * 16;
    // https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_pvrtc/
    case a0:
    case r0:
      return Math.max(s, 16) * Math.max(e, 8) / 4;
    case i0:
    case s0:
      return Math.max(s, 8) * Math.max(e, 8) / 2;
    // https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_etc/
    case o0:
    case l0:
      return Math.floor((s + 3) / 4) * Math.floor((e + 3) / 4) * 8;
    case c0:
      return Math.floor((s + 3) / 4) * Math.floor((e + 3) / 4) * 16;
    // https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_astc/
    case u0:
      return Math.floor((s + 3) / 4) * Math.floor((e + 3) / 4) * 16;
    case f0:
      return Math.floor((s + 4) / 5) * Math.floor((e + 3) / 4) * 16;
    case h0:
      return Math.floor((s + 4) / 5) * Math.floor((e + 4) / 5) * 16;
    case d0:
      return Math.floor((s + 5) / 6) * Math.floor((e + 4) / 5) * 16;
    case p0:
      return Math.floor((s + 5) / 6) * Math.floor((e + 5) / 6) * 16;
    case m0:
      return Math.floor((s + 7) / 8) * Math.floor((e + 4) / 5) * 16;
    case v0:
      return Math.floor((s + 7) / 8) * Math.floor((e + 5) / 6) * 16;
    case g0:
      return Math.floor((s + 7) / 8) * Math.floor((e + 7) / 8) * 16;
    case y0:
      return Math.floor((s + 9) / 10) * Math.floor((e + 4) / 5) * 16;
    case _0:
      return Math.floor((s + 9) / 10) * Math.floor((e + 5) / 6) * 16;
    case S0:
      return Math.floor((s + 9) / 10) * Math.floor((e + 7) / 8) * 16;
    case x0:
      return Math.floor((s + 9) / 10) * Math.floor((e + 9) / 10) * 16;
    case M0:
      return Math.floor((s + 11) / 12) * Math.floor((e + 9) / 10) * 16;
    case b0:
      return Math.floor((s + 11) / 12) * Math.floor((e + 11) / 12) * 16;
    // https://registry.khronos.org/webgl/extensions/EXT_texture_compression_bptc/
    case Ip:
    case E0:
    case T0:
      return Math.ceil(s / 4) * Math.ceil(e / 4) * 16;
    // https://registry.khronos.org/webgl/extensions/EXT_texture_compression_rgtc/
    case jS:
    case A0:
      return Math.ceil(s / 4) * Math.ceil(e / 4) * 8;
    case R0:
    case C0:
      return Math.ceil(s / 4) * Math.ceil(e / 4) * 16;
  }
  throw new Error(
    `Unable to determine texture byte length for ${n} format.`
  );
}
function kw(s) {
  switch (s) {
    case Da:
    case XS:
      return { byteLength: 1, components: 1 };
    case Vh:
    case qS:
    case nf:
      return { byteLength: 2, components: 1 };
    case G0:
    case F0:
      return { byteLength: 2, components: 4 };
    case Io:
    case V0:
    case es:
      return { byteLength: 4, components: 1 };
    case YS:
      return { byteLength: 4, components: 3 };
  }
  throw new Error(`Unknown texture type ${s}.`);
}
class Ww {
  /**
   * Scales the texture as large as possible within its surface without cropping
   * or stretching the texture. The method preserves the original aspect ratio of
   * the texture. Akin to CSS `object-fit: contain`
   *
   * @param {Texture} texture - The texture.
   * @param {number} aspect - The texture's aspect ratio.
   * @return {Texture} The updated texture.
   */
  static contain(e, n) {
    return Xw(e, n);
  }
  /**
   * Scales the texture to the smallest possible size to fill the surface, leaving
   * no empty space. The method preserves the original aspect ratio of the texture.
   * Akin to CSS `object-fit: cover`.
   *
   * @param {Texture} texture - The texture.
   * @param {number} aspect - The texture's aspect ratio.
   * @return {Texture} The updated texture.
   */
  static cover(e, n) {
    return qw(e, n);
  }
  /**
   * Configures the texture to the default transformation. Akin to CSS `object-fit: fill`.
   *
   * @param {Texture} texture - The texture.
   * @return {Texture} The updated texture.
   */
  static fill(e) {
    return Yw(e);
  }
  /**
   * Determines how many bytes must be used to represent the texture.
   *
   * @param {number} width - The width of the texture.
   * @param {number} height - The height of the texture.
   * @param {number} format - The texture's format.
   * @param {number} type - The texture's type.
   * @return {number} The byte length.
   */
  static getByteLength(e, n, i, r) {
    return wS(e, n, i, r);
  }
}
typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", { detail: {
  revision: lm
} }));
typeof window < "u" && (window.__THREE__ ? console.warn("WARNING: Multiple instances of Three.js being imported.") : window.__THREE__ = lm);
/**
 * @license
 * Copyright 2010-2025 Three.js Authors
 * SPDX-License-Identifier: MIT
 */
function TT() {
  let s = null, e = !1, n = null, i = null;
  function r(c, h) {
    n(c, h), i = s.requestAnimationFrame(r);
  }
  return {
    start: function() {
      e !== !0 && n !== null && (i = s.requestAnimationFrame(r), e = !0);
    },
    stop: function() {
      s.cancelAnimationFrame(i), e = !1;
    },
    setAnimationLoop: function(c) {
      n = c;
    },
    setContext: function(c) {
      s = c;
    }
  };
}
function Zw(s) {
  const e = /* @__PURE__ */ new WeakMap();
  function n(d, v) {
    const g = d.array, S = d.usage, x = g.byteLength, M = s.createBuffer();
    s.bindBuffer(v, M), s.bufferData(v, g, S), d.onUploadCallback();
    let b;
    if (g instanceof Float32Array)
      b = s.FLOAT;
    else if (typeof Float16Array < "u" && g instanceof Float16Array)
      b = s.HALF_FLOAT;
    else if (g instanceof Uint16Array)
      d.isFloat16BufferAttribute ? b = s.HALF_FLOAT : b = s.UNSIGNED_SHORT;
    else if (g instanceof Int16Array)
      b = s.SHORT;
    else if (g instanceof Uint32Array)
      b = s.UNSIGNED_INT;
    else if (g instanceof Int32Array)
      b = s.INT;
    else if (g instanceof Int8Array)
      b = s.BYTE;
    else if (g instanceof Uint8Array)
      b = s.UNSIGNED_BYTE;
    else if (g instanceof Uint8ClampedArray)
      b = s.UNSIGNED_BYTE;
    else
      throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: " + g);
    return {
      buffer: M,
      type: b,
      bytesPerElement: g.BYTES_PER_ELEMENT,
      version: d.version,
      size: x
    };
  }
  function i(d, v, g) {
    const S = v.array, x = v.updateRanges;
    if (s.bindBuffer(g, d), x.length === 0)
      s.bufferSubData(g, 0, S);
    else {
      x.sort((b, R) => b.start - R.start);
      let M = 0;
      for (let b = 1; b < x.length; b++) {
        const R = x[M], w = x[b];
        w.start <= R.start + R.count + 1 ? R.count = Math.max(
          R.count,
          w.start + w.count - R.start
        ) : (++M, x[M] = w);
      }
      x.length = M + 1;
      for (let b = 0, R = x.length; b < R; b++) {
        const w = x[b];
        s.bufferSubData(
          g,
          w.start * S.BYTES_PER_ELEMENT,
          S,
          w.start,
          w.count
        );
      }
      v.clearUpdateRanges();
    }
    v.onUploadCallback();
  }
  function r(d) {
    return d.isInterleavedBufferAttribute && (d = d.data), e.get(d);
  }
  function c(d) {
    d.isInterleavedBufferAttribute && (d = d.data);
    const v = e.get(d);
    v && (s.deleteBuffer(v.buffer), e.delete(d));
  }
  function h(d, v) {
    if (d.isInterleavedBufferAttribute && (d = d.data), d.isGLBufferAttribute) {
      const S = e.get(d);
      (!S || S.version < d.version) && e.set(d, {
        buffer: d.buffer,
        type: d.type,
        bytesPerElement: d.elementSize,
        version: d.version
      });
      return;
    }
    const g = e.get(d);
    if (g === void 0)
      e.set(d, n(d, v));
    else if (g.version < d.version) {
      if (g.size !== d.array.byteLength)
        throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.");
      i(g.buffer, d, v), g.version = d.version;
    }
  }
  return {
    get: r,
    remove: c,
    update: h
  };
}
var jw = `#ifdef USE_ALPHAHASH
	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;
#endif`, Qw = `#ifdef USE_ALPHAHASH
	const float ALPHA_HASH_SCALE = 0.05;
	float hash2D( vec2 value ) {
		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );
	}
	float hash3D( vec3 value ) {
		return hash2D( vec2( hash2D( value.xy ), value.z ) );
	}
	float getAlphaHashThreshold( vec3 position ) {
		float maxDeriv = max(
			length( dFdx( position.xyz ) ),
			length( dFdy( position.xyz ) )
		);
		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );
		vec2 pixScales = vec2(
			exp2( floor( log2( pixScale ) ) ),
			exp2( ceil( log2( pixScale ) ) )
		);
		vec2 alpha = vec2(
			hash3D( floor( pixScales.x * position.xyz ) ),
			hash3D( floor( pixScales.y * position.xyz ) )
		);
		float lerpFactor = fract( log2( pixScale ) );
		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;
		float a = min( lerpFactor, 1.0 - lerpFactor );
		vec3 cases = vec3(
			x * x / ( 2.0 * a * ( 1.0 - a ) ),
			( x - 0.5 * a ) / ( 1.0 - a ),
			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )
		);
		float threshold = ( x < ( 1.0 - a ) )
			? ( ( x < a ) ? cases.x : cases.y )
			: cases.z;
		return clamp( threshold , 1.0e-6, 1.0 );
	}
#endif`, Kw = `#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;
#endif`, Jw = `#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`, $w = `#ifdef USE_ALPHATEST
	#ifdef ALPHA_TO_COVERAGE
	diffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );
	if ( diffuseColor.a == 0.0 ) discard;
	#else
	if ( diffuseColor.a < alphaTest ) discard;
	#endif
#endif`, eD = `#ifdef USE_ALPHATEST
	uniform float alphaTest;
#endif`, tD = `#ifdef USE_AOMAP
	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;
	reflectedLight.indirectDiffuse *= ambientOcclusion;
	#if defined( USE_CLEARCOAT ) 
		clearcoatSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_SHEEN ) 
		sheenSpecularIndirect *= ambientOcclusion;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD )
		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );
		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );
	#endif
#endif`, nD = `#ifdef USE_AOMAP
	uniform sampler2D aoMap;
	uniform float aoMapIntensity;
#endif`, iD = `#ifdef USE_BATCHING
	#if ! defined( GL_ANGLE_multi_draw )
	#define gl_DrawID _gl_DrawID
	uniform int _gl_DrawID;
	#endif
	uniform highp sampler2D batchingTexture;
	uniform highp usampler2D batchingIdTexture;
	mat4 getBatchingMatrix( const in float i ) {
		int size = textureSize( batchingTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
	float getIndirectIndex( const in int i ) {
		int size = textureSize( batchingIdTexture, 0 ).x;
		int x = i % size;
		int y = i / size;
		return float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );
	}
#endif
#ifdef USE_BATCHING_COLOR
	uniform sampler2D batchingColorTexture;
	vec3 getBatchingColor( const in float i ) {
		int size = textureSize( batchingColorTexture, 0 ).x;
		int j = int( i );
		int x = j % size;
		int y = j / size;
		return texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;
	}
#endif`, aD = `#ifdef USE_BATCHING
	mat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );
#endif`, sD = `vec3 transformed = vec3( position );
#ifdef USE_ALPHAHASH
	vPosition = vec3( position );
#endif`, rD = `vec3 objectNormal = vec3( normal );
#ifdef USE_TANGENT
	vec3 objectTangent = vec3( tangent.xyz );
#endif`, oD = `float G_BlinnPhong_Implicit( ) {
	return 0.25;
}
float D_BlinnPhong( const in float shininess, const in float dotNH ) {
	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );
}
vec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( specularColor, 1.0, dotVH );
	float G = G_BlinnPhong_Implicit( );
	float D = D_BlinnPhong( shininess, dotNH );
	return F * ( G * D );
} // validated`, lD = `#ifdef USE_IRIDESCENCE
	const mat3 XYZ_TO_REC709 = mat3(
		 3.2404542, -0.9692660,  0.0556434,
		-1.5371385,  1.8760108, -0.2040259,
		-0.4985314,  0.0415560,  1.0572252
	);
	vec3 Fresnel0ToIor( vec3 fresnel0 ) {
		vec3 sqrtF0 = sqrt( fresnel0 );
		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );
	}
	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );
	}
	float IorToFresnel0( float transmittedIor, float incidentIor ) {
		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));
	}
	vec3 evalSensitivity( float OPD, vec3 shift ) {
		float phase = 2.0 * PI * OPD * 1.0e-9;
		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );
		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );
		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );
		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );
		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );
		xyz /= 1.0685e-7;
		vec3 rgb = XYZ_TO_REC709 * xyz;
		return rgb;
	}
	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {
		vec3 I;
		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );
		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );
		float cosTheta2Sq = 1.0 - sinTheta2Sq;
		if ( cosTheta2Sq < 0.0 ) {
			return vec3( 1.0 );
		}
		float cosTheta2 = sqrt( cosTheta2Sq );
		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );
		float R12 = F_Schlick( R0, 1.0, cosTheta1 );
		float T121 = 1.0 - R12;
		float phi12 = 0.0;
		if ( iridescenceIOR < outsideIOR ) phi12 = PI;
		float phi21 = PI - phi12;
		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );
		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );
		vec3 phi23 = vec3( 0.0 );
		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;
		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;
		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;
		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;
		vec3 phi = vec3( phi21 ) + phi23;
		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );
		vec3 r123 = sqrt( R123 );
		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );
		vec3 C0 = R12 + Rs;
		I = C0;
		vec3 Cm = Rs - T121;
		for ( int m = 1; m <= 2; ++ m ) {
			Cm *= r123;
			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );
			I += Cm * Sm;
		}
		return max( I, vec3( 0.0 ) );
	}
#endif`, cD = `#ifdef USE_BUMPMAP
	uniform sampler2D bumpMap;
	uniform float bumpScale;
	vec2 dHdxy_fwd() {
		vec2 dSTdx = dFdx( vBumpMapUv );
		vec2 dSTdy = dFdy( vBumpMapUv );
		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;
		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;
		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;
		return vec2( dBx, dBy );
	}
	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {
		vec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );
		vec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );
		vec3 vN = surf_norm;
		vec3 R1 = cross( vSigmaY, vN );
		vec3 R2 = cross( vN, vSigmaX );
		float fDet = dot( vSigmaX, R1 ) * faceDirection;
		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );
		return normalize( abs( fDet ) * surf_norm - vGrad );
	}
#endif`, uD = `#if NUM_CLIPPING_PLANES > 0
	vec4 plane;
	#ifdef ALPHA_TO_COVERAGE
		float distanceToPlane, distanceGradient;
		float clipOpacity = 1.0;
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
			distanceGradient = fwidth( distanceToPlane ) / 2.0;
			clipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			if ( clipOpacity == 0.0 ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			float unionClipOpacity = 1.0;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;
				distanceGradient = fwidth( distanceToPlane ) / 2.0;
				unionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );
			}
			#pragma unroll_loop_end
			clipOpacity *= 1.0 - unionClipOpacity;
		#endif
		diffuseColor.a *= clipOpacity;
		if ( diffuseColor.a == 0.0 ) discard;
	#else
		#pragma unroll_loop_start
		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {
			plane = clippingPlanes[ i ];
			if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;
		}
		#pragma unroll_loop_end
		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES
			bool clipped = true;
			#pragma unroll_loop_start
			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {
				plane = clippingPlanes[ i ];
				clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;
			}
			#pragma unroll_loop_end
			if ( clipped ) discard;
		#endif
	#endif
#endif`, fD = `#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];
#endif`, hD = `#if NUM_CLIPPING_PLANES > 0
	varying vec3 vClipPosition;
#endif`, dD = `#if NUM_CLIPPING_PLANES > 0
	vClipPosition = - mvPosition.xyz;
#endif`, pD = `#if defined( USE_COLOR_ALPHA )
	diffuseColor *= vColor;
#elif defined( USE_COLOR )
	diffuseColor.rgb *= vColor;
#endif`, mD = `#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR )
	varying vec3 vColor;
#endif`, vD = `#if defined( USE_COLOR_ALPHA )
	varying vec4 vColor;
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	varying vec3 vColor;
#endif`, gD = `#if defined( USE_COLOR_ALPHA )
	vColor = vec4( 1.0 );
#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )
	vColor = vec3( 1.0 );
#endif
#ifdef USE_COLOR
	vColor *= color;
#endif
#ifdef USE_INSTANCING_COLOR
	vColor.xyz *= instanceColor.xyz;
#endif
#ifdef USE_BATCHING_COLOR
	vec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );
	vColor.xyz *= batchingColor.xyz;
#endif`, yD = `#define PI 3.141592653589793
#define PI2 6.283185307179586
#define PI_HALF 1.5707963267948966
#define RECIPROCAL_PI 0.3183098861837907
#define RECIPROCAL_PI2 0.15915494309189535
#define EPSILON 1e-6
#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
#define whiteComplement( a ) ( 1.0 - saturate( a ) )
float pow2( const in float x ) { return x*x; }
vec3 pow2( const in vec3 x ) { return x*x; }
float pow3( const in float x ) { return x*x*x; }
float pow4( const in float x ) { float x2 = x*x; return x2*x2; }
float max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }
float average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }
highp float rand( const in vec2 uv ) {
	const highp float a = 12.9898, b = 78.233, c = 43758.5453;
	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );
	return fract( sin( sn ) * c );
}
#ifdef HIGH_PRECISION
	float precisionSafeLength( vec3 v ) { return length( v ); }
#else
	float precisionSafeLength( vec3 v ) {
		float maxComponent = max3( abs( v ) );
		return length( v / maxComponent ) * maxComponent;
	}
#endif
struct IncidentLight {
	vec3 color;
	vec3 direction;
	bool visible;
};
struct ReflectedLight {
	vec3 directDiffuse;
	vec3 directSpecular;
	vec3 indirectDiffuse;
	vec3 indirectSpecular;
};
#ifdef USE_ALPHAHASH
	varying vec3 vPosition;
#endif
vec3 transformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );
}
vec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {
	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );
}
mat3 transposeMat3( const in mat3 m ) {
	mat3 tmp;
	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );
	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );
	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );
	return tmp;
}
bool isPerspectiveMatrix( mat4 m ) {
	return m[ 2 ][ 3 ] == - 1.0;
}
vec2 equirectUv( in vec3 dir ) {
	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;
	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;
	return vec2( u, v );
}
vec3 BRDF_Lambert( const in vec3 diffuseColor ) {
	return RECIPROCAL_PI * diffuseColor;
}
vec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
float F_Schlick( const in float f0, const in float f90, const in float dotVH ) {
	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );
	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
} // validated`, _D = `#ifdef ENVMAP_TYPE_CUBE_UV
	#define cubeUV_minMipLevel 4.0
	#define cubeUV_minTileSize 16.0
	float getFace( vec3 direction ) {
		vec3 absDirection = abs( direction );
		float face = - 1.0;
		if ( absDirection.x > absDirection.z ) {
			if ( absDirection.x > absDirection.y )
				face = direction.x > 0.0 ? 0.0 : 3.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		} else {
			if ( absDirection.z > absDirection.y )
				face = direction.z > 0.0 ? 2.0 : 5.0;
			else
				face = direction.y > 0.0 ? 1.0 : 4.0;
		}
		return face;
	}
	vec2 getUV( vec3 direction, float face ) {
		vec2 uv;
		if ( face == 0.0 ) {
			uv = vec2( direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 1.0 ) {
			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );
		} else if ( face == 2.0 ) {
			uv = vec2( - direction.x, direction.y ) / abs( direction.z );
		} else if ( face == 3.0 ) {
			uv = vec2( - direction.z, direction.y ) / abs( direction.x );
		} else if ( face == 4.0 ) {
			uv = vec2( - direction.x, direction.z ) / abs( direction.y );
		} else {
			uv = vec2( direction.x, direction.y ) / abs( direction.z );
		}
		return 0.5 * ( uv + 1.0 );
	}
	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {
		float face = getFace( direction );
		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );
		mipInt = max( mipInt, cubeUV_minMipLevel );
		float faceSize = exp2( mipInt );
		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;
		if ( face > 2.0 ) {
			uv.y += faceSize;
			face -= 3.0;
		}
		uv.x += face * faceSize;
		uv.x += filterInt * 3.0 * cubeUV_minTileSize;
		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );
		uv.x *= CUBEUV_TEXEL_WIDTH;
		uv.y *= CUBEUV_TEXEL_HEIGHT;
		#ifdef texture2DGradEXT
			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;
		#else
			return texture2D( envMap, uv ).rgb;
		#endif
	}
	#define cubeUV_r0 1.0
	#define cubeUV_m0 - 2.0
	#define cubeUV_r1 0.8
	#define cubeUV_m1 - 1.0
	#define cubeUV_r4 0.4
	#define cubeUV_m4 2.0
	#define cubeUV_r5 0.305
	#define cubeUV_m5 3.0
	#define cubeUV_r6 0.21
	#define cubeUV_m6 4.0
	float roughnessToMip( float roughness ) {
		float mip = 0.0;
		if ( roughness >= cubeUV_r1 ) {
			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;
		} else if ( roughness >= cubeUV_r4 ) {
			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;
		} else if ( roughness >= cubeUV_r5 ) {
			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;
		} else if ( roughness >= cubeUV_r6 ) {
			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;
		} else {
			mip = - 2.0 * log2( 1.16 * roughness );		}
		return mip;
	}
	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {
		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );
		float mipF = fract( mip );
		float mipInt = floor( mip );
		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );
		if ( mipF == 0.0 ) {
			return vec4( color0, 1.0 );
		} else {
			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );
			return vec4( mix( color0, color1, mipF ), 1.0 );
		}
	}
#endif`, SD = `vec3 transformedNormal = objectNormal;
#ifdef USE_TANGENT
	vec3 transformedTangent = objectTangent;
#endif
#ifdef USE_BATCHING
	mat3 bm = mat3( batchingMatrix );
	transformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );
	transformedNormal = bm * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = bm * transformedTangent;
	#endif
#endif
#ifdef USE_INSTANCING
	mat3 im = mat3( instanceMatrix );
	transformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );
	transformedNormal = im * transformedNormal;
	#ifdef USE_TANGENT
		transformedTangent = im * transformedTangent;
	#endif
#endif
transformedNormal = normalMatrix * transformedNormal;
#ifdef FLIP_SIDED
	transformedNormal = - transformedNormal;
#endif
#ifdef USE_TANGENT
	transformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;
	#ifdef FLIP_SIDED
		transformedTangent = - transformedTangent;
	#endif
#endif`, xD = `#ifdef USE_DISPLACEMENTMAP
	uniform sampler2D displacementMap;
	uniform float displacementScale;
	uniform float displacementBias;
#endif`, MD = `#ifdef USE_DISPLACEMENTMAP
	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );
#endif`, bD = `#ifdef USE_EMISSIVEMAP
	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );
	#ifdef DECODE_VIDEO_TEXTURE_EMISSIVE
		emissiveColor = sRGBTransferEOTF( emissiveColor );
	#endif
	totalEmissiveRadiance *= emissiveColor.rgb;
#endif`, ED = `#ifdef USE_EMISSIVEMAP
	uniform sampler2D emissiveMap;
#endif`, TD = "gl_FragColor = linearToOutputTexel( gl_FragColor );", AD = `vec4 LinearTransferOETF( in vec4 value ) {
	return value;
}
vec4 sRGBTransferEOTF( in vec4 value ) {
	return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );
}
vec4 sRGBTransferOETF( in vec4 value ) {
	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );
}`, RD = `#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vec3 cameraToFrag;
		if ( isOrthographic ) {
			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToFrag = normalize( vWorldPosition - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vec3 reflectVec = reflect( cameraToFrag, worldNormal );
		#else
			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );
		#endif
	#else
		vec3 reflectVec = vReflect;
	#endif
	#ifdef ENVMAP_TYPE_CUBE
		vec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );
	#else
		vec4 envColor = vec4( 0.0 );
	#endif
	#ifdef ENVMAP_BLENDING_MULTIPLY
		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_MIX )
		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );
	#elif defined( ENVMAP_BLENDING_ADD )
		outgoingLight += envColor.xyz * specularStrength * reflectivity;
	#endif
#endif`, CD = `#ifdef USE_ENVMAP
	uniform float envMapIntensity;
	uniform float flipEnvMap;
	uniform mat3 envMapRotation;
	#ifdef ENVMAP_TYPE_CUBE
		uniform samplerCube envMap;
	#else
		uniform sampler2D envMap;
	#endif
	
#endif`, wD = `#ifdef USE_ENVMAP
	uniform float reflectivity;
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		varying vec3 vWorldPosition;
		uniform float refractionRatio;
	#else
		varying vec3 vReflect;
	#endif
#endif`, DD = `#ifdef USE_ENVMAP
	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )
		#define ENV_WORLDPOS
	#endif
	#ifdef ENV_WORLDPOS
		
		varying vec3 vWorldPosition;
	#else
		varying vec3 vReflect;
		uniform float refractionRatio;
	#endif
#endif`, UD = `#ifdef USE_ENVMAP
	#ifdef ENV_WORLDPOS
		vWorldPosition = worldPosition.xyz;
	#else
		vec3 cameraToVertex;
		if ( isOrthographic ) {
			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );
		} else {
			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );
		}
		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
		#ifdef ENVMAP_MODE_REFLECTION
			vReflect = reflect( cameraToVertex, worldNormal );
		#else
			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );
		#endif
	#endif
#endif`, ND = `#ifdef USE_FOG
	vFogDepth = - mvPosition.z;
#endif`, OD = `#ifdef USE_FOG
	varying float vFogDepth;
#endif`, LD = `#ifdef USE_FOG
	#ifdef FOG_EXP2
		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );
	#else
		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );
	#endif
	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );
#endif`, zD = `#ifdef USE_FOG
	uniform vec3 fogColor;
	varying float vFogDepth;
	#ifdef FOG_EXP2
		uniform float fogDensity;
	#else
		uniform float fogNear;
		uniform float fogFar;
	#endif
#endif`, BD = `#ifdef USE_GRADIENTMAP
	uniform sampler2D gradientMap;
#endif
vec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {
	float dotNL = dot( normal, lightDirection );
	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );
	#ifdef USE_GRADIENTMAP
		return vec3( texture2D( gradientMap, coord ).r );
	#else
		vec2 fw = fwidth( coord ) * 0.5;
		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );
	#endif
}`, PD = `#ifdef USE_LIGHTMAP
	uniform sampler2D lightMap;
	uniform float lightMapIntensity;
#endif`, ID = `LambertMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularStrength = specularStrength;`, HD = `varying vec3 vViewPosition;
struct LambertMaterial {
	vec3 diffuseColor;
	float specularStrength;
};
void RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Lambert
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert`, VD = `uniform bool receiveShadow;
uniform vec3 ambientLightColor;
#if defined( USE_LIGHT_PROBES )
	uniform vec3 lightProbe[ 9 ];
#endif
vec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {
	float x = normal.x, y = normal.y, z = normal.z;
	vec3 result = shCoefficients[ 0 ] * 0.886227;
	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;
	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;
	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;
	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;
	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;
	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );
	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;
	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );
	return result;
}
vec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {
	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );
	return irradiance;
}
vec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {
	vec3 irradiance = ambientLightColor;
	return irradiance;
}
float getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {
	float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );
	if ( cutoffDistance > 0.0 ) {
		distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );
	}
	return distanceFalloff;
}
float getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {
	return smoothstep( coneCosine, penumbraCosine, angleCosine );
}
#if NUM_DIR_LIGHTS > 0
	struct DirectionalLight {
		vec3 direction;
		vec3 color;
	};
	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];
	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {
		light.color = directionalLight.color;
		light.direction = directionalLight.direction;
		light.visible = true;
	}
#endif
#if NUM_POINT_LIGHTS > 0
	struct PointLight {
		vec3 position;
		vec3 color;
		float distance;
		float decay;
	};
	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];
	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = pointLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float lightDistance = length( lVector );
		light.color = pointLight.color;
		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );
		light.visible = ( light.color != vec3( 0.0 ) );
	}
#endif
#if NUM_SPOT_LIGHTS > 0
	struct SpotLight {
		vec3 position;
		vec3 direction;
		vec3 color;
		float distance;
		float decay;
		float coneCos;
		float penumbraCos;
	};
	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];
	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {
		vec3 lVector = spotLight.position - geometryPosition;
		light.direction = normalize( lVector );
		float angleCos = dot( light.direction, spotLight.direction );
		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );
		if ( spotAttenuation > 0.0 ) {
			float lightDistance = length( lVector );
			light.color = spotLight.color * spotAttenuation;
			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );
			light.visible = ( light.color != vec3( 0.0 ) );
		} else {
			light.color = vec3( 0.0 );
			light.visible = false;
		}
	}
#endif
#if NUM_RECT_AREA_LIGHTS > 0
	struct RectAreaLight {
		vec3 color;
		vec3 position;
		vec3 halfWidth;
		vec3 halfHeight;
	};
	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;
	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];
#endif
#if NUM_HEMI_LIGHTS > 0
	struct HemisphereLight {
		vec3 direction;
		vec3 skyColor;
		vec3 groundColor;
	};
	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];
	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {
		float dotNL = dot( normal, hemiLight.direction );
		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;
		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );
		return irradiance;
	}
#endif`, GD = `#ifdef USE_ENVMAP
	vec3 getIBLIrradiance( const in vec3 normal ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );
			return PI * envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {
		#ifdef ENVMAP_TYPE_CUBE_UV
			vec3 reflectVec = reflect( - viewDir, normal );
			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );
			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );
			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );
			return envMapColor.rgb * envMapIntensity;
		#else
			return vec3( 0.0 );
		#endif
	}
	#ifdef USE_ANISOTROPY
		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {
			#ifdef ENVMAP_TYPE_CUBE_UV
				vec3 bentNormal = cross( bitangent, viewDir );
				bentNormal = normalize( cross( bentNormal, bitangent ) );
				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );
				return getIBLRadiance( viewDir, bentNormal, roughness );
			#else
				return vec3( 0.0 );
			#endif
		}
	#endif
#endif`, FD = `ToonMaterial material;
material.diffuseColor = diffuseColor.rgb;`, XD = `varying vec3 vViewPosition;
struct ToonMaterial {
	vec3 diffuseColor;
};
void RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_Toon
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon`, qD = `BlinnPhongMaterial material;
material.diffuseColor = diffuseColor.rgb;
material.specularColor = specular;
material.specularShininess = shininess;
material.specularStrength = specularStrength;`, YD = `varying vec3 vViewPosition;
struct BlinnPhongMaterial {
	vec3 diffuseColor;
	vec3 specularColor;
	float specularShininess;
	float specularStrength;
};
void RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;
}
void RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
#define RE_Direct				RE_Direct_BlinnPhong
#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong`, kD = `PhysicalMaterial material;
material.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );
vec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );
float geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );
material.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;
material.roughness = min( material.roughness, 1.0 );
#ifdef IOR
	material.ior = ior;
	#ifdef USE_SPECULAR
		float specularIntensityFactor = specularIntensity;
		vec3 specularColorFactor = specularColor;
		#ifdef USE_SPECULAR_COLORMAP
			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;
		#endif
		#ifdef USE_SPECULAR_INTENSITYMAP
			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;
		#endif
		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );
	#else
		float specularIntensityFactor = 1.0;
		vec3 specularColorFactor = vec3( 1.0 );
		material.specularF90 = 1.0;
	#endif
	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );
#else
	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );
	material.specularF90 = 1.0;
#endif
#ifdef USE_CLEARCOAT
	material.clearcoat = clearcoat;
	material.clearcoatRoughness = clearcoatRoughness;
	material.clearcoatF0 = vec3( 0.04 );
	material.clearcoatF90 = 1.0;
	#ifdef USE_CLEARCOATMAP
		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;
	#endif
	#ifdef USE_CLEARCOAT_ROUGHNESSMAP
		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;
	#endif
	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );
	material.clearcoatRoughness += geometryRoughness;
	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );
#endif
#ifdef USE_DISPERSION
	material.dispersion = dispersion;
#endif
#ifdef USE_IRIDESCENCE
	material.iridescence = iridescence;
	material.iridescenceIOR = iridescenceIOR;
	#ifdef USE_IRIDESCENCEMAP
		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;
	#endif
	#ifdef USE_IRIDESCENCE_THICKNESSMAP
		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;
	#else
		material.iridescenceThickness = iridescenceThicknessMaximum;
	#endif
#endif
#ifdef USE_SHEEN
	material.sheenColor = sheenColor;
	#ifdef USE_SHEEN_COLORMAP
		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;
	#endif
	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );
	#ifdef USE_SHEEN_ROUGHNESSMAP
		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;
	#endif
#endif
#ifdef USE_ANISOTROPY
	#ifdef USE_ANISOTROPYMAP
		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );
		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;
		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;
	#else
		vec2 anisotropyV = anisotropyVector;
	#endif
	material.anisotropy = length( anisotropyV );
	if( material.anisotropy == 0.0 ) {
		anisotropyV = vec2( 1.0, 0.0 );
	} else {
		anisotropyV /= material.anisotropy;
		material.anisotropy = saturate( material.anisotropy );
	}
	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );
	material.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;
	material.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;
#endif`, WD = `struct PhysicalMaterial {
	vec3 diffuseColor;
	float roughness;
	vec3 specularColor;
	float specularF90;
	float dispersion;
	#ifdef USE_CLEARCOAT
		float clearcoat;
		float clearcoatRoughness;
		vec3 clearcoatF0;
		float clearcoatF90;
	#endif
	#ifdef USE_IRIDESCENCE
		float iridescence;
		float iridescenceIOR;
		float iridescenceThickness;
		vec3 iridescenceFresnel;
		vec3 iridescenceF0;
	#endif
	#ifdef USE_SHEEN
		vec3 sheenColor;
		float sheenRoughness;
	#endif
	#ifdef IOR
		float ior;
	#endif
	#ifdef USE_TRANSMISSION
		float transmission;
		float transmissionAlpha;
		float thickness;
		float attenuationDistance;
		vec3 attenuationColor;
	#endif
	#ifdef USE_ANISOTROPY
		float anisotropy;
		float alphaT;
		vec3 anisotropyT;
		vec3 anisotropyB;
	#endif
};
vec3 clearcoatSpecularDirect = vec3( 0.0 );
vec3 clearcoatSpecularIndirect = vec3( 0.0 );
vec3 sheenSpecularDirect = vec3( 0.0 );
vec3 sheenSpecularIndirect = vec3(0.0 );
vec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {
    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );
    float x2 = x * x;
    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );
    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );
}
float V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {
	float a2 = pow2( alpha );
	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );
	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );
	return 0.5 / max( gv + gl, EPSILON );
}
float D_GGX( const in float alpha, const in float dotNH ) {
	float a2 = pow2( alpha );
	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;
	return RECIPROCAL_PI * a2 / pow2( denom );
}
#ifdef USE_ANISOTROPY
	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {
		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );
		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );
		float v = 0.5 / ( gv + gl );
		return saturate(v);
	}
	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {
		float a2 = alphaT * alphaB;
		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );
		highp float v2 = dot( v, v );
		float w2 = a2 / v2;
		return RECIPROCAL_PI * a2 * pow2 ( w2 );
	}
#endif
#ifdef USE_CLEARCOAT
	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {
		vec3 f0 = material.clearcoatF0;
		float f90 = material.clearcoatF90;
		float roughness = material.clearcoatRoughness;
		float alpha = pow2( roughness );
		vec3 halfDir = normalize( lightDir + viewDir );
		float dotNL = saturate( dot( normal, lightDir ) );
		float dotNV = saturate( dot( normal, viewDir ) );
		float dotNH = saturate( dot( normal, halfDir ) );
		float dotVH = saturate( dot( viewDir, halfDir ) );
		vec3 F = F_Schlick( f0, f90, dotVH );
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
		return F * ( V * D );
	}
#endif
vec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {
	vec3 f0 = material.specularColor;
	float f90 = material.specularF90;
	float roughness = material.roughness;
	float alpha = pow2( roughness );
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float dotVH = saturate( dot( viewDir, halfDir ) );
	vec3 F = F_Schlick( f0, f90, dotVH );
	#ifdef USE_IRIDESCENCE
		F = mix( F, material.iridescenceFresnel, material.iridescence );
	#endif
	#ifdef USE_ANISOTROPY
		float dotTL = dot( material.anisotropyT, lightDir );
		float dotTV = dot( material.anisotropyT, viewDir );
		float dotTH = dot( material.anisotropyT, halfDir );
		float dotBL = dot( material.anisotropyB, lightDir );
		float dotBV = dot( material.anisotropyB, viewDir );
		float dotBH = dot( material.anisotropyB, halfDir );
		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );
		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );
	#else
		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );
		float D = D_GGX( alpha, dotNH );
	#endif
	return F * ( V * D );
}
vec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {
	const float LUT_SIZE = 64.0;
	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;
	const float LUT_BIAS = 0.5 / LUT_SIZE;
	float dotNV = saturate( dot( N, V ) );
	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );
	uv = uv * LUT_SCALE + LUT_BIAS;
	return uv;
}
float LTC_ClippedSphereFormFactor( const in vec3 f ) {
	float l = length( f );
	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );
}
vec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {
	float x = dot( v1, v2 );
	float y = abs( x );
	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;
	float b = 3.4175940 + ( 4.1616724 + y ) * y;
	float v = a / b;
	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;
	return cross( v1, v2 ) * theta_sintheta;
}
vec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {
	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];
	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];
	vec3 lightNormal = cross( v1, v2 );
	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );
	vec3 T1, T2;
	T1 = normalize( V - N * dot( V, N ) );
	T2 = - cross( N, T1 );
	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );
	vec3 coords[ 4 ];
	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );
	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );
	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );
	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );
	coords[ 0 ] = normalize( coords[ 0 ] );
	coords[ 1 ] = normalize( coords[ 1 ] );
	coords[ 2 ] = normalize( coords[ 2 ] );
	coords[ 3 ] = normalize( coords[ 3 ] );
	vec3 vectorFormFactor = vec3( 0.0 );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );
	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );
	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );
	return vec3( result );
}
#if defined( USE_SHEEN )
float D_Charlie( float roughness, float dotNH ) {
	float alpha = pow2( roughness );
	float invAlpha = 1.0 / alpha;
	float cos2h = dotNH * dotNH;
	float sin2h = max( 1.0 - cos2h, 0.0078125 );
	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );
}
float V_Neubelt( float dotNV, float dotNL ) {
	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );
}
vec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {
	vec3 halfDir = normalize( lightDir + viewDir );
	float dotNL = saturate( dot( normal, lightDir ) );
	float dotNV = saturate( dot( normal, viewDir ) );
	float dotNH = saturate( dot( normal, halfDir ) );
	float D = D_Charlie( sheenRoughness, dotNH );
	float V = V_Neubelt( dotNV, dotNL );
	return sheenColor * ( D * V );
}
#endif
float IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	float r2 = roughness * roughness;
	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;
	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;
	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );
	return saturate( DG * RECIPROCAL_PI );
}
vec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {
	float dotNV = saturate( dot( normal, viewDir ) );
	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );
	vec4 r = roughness * c0 + c1;
	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;
	return fab;
}
vec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	return specularColor * fab.x + specularF90 * fab.y;
}
#ifdef USE_IRIDESCENCE
void computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#else
void computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {
#endif
	vec2 fab = DFGApprox( normal, viewDir, roughness );
	#ifdef USE_IRIDESCENCE
		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );
	#else
		vec3 Fr = specularColor;
	#endif
	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;
	float Ess = fab.x + fab.y;
	float Ems = 1.0 - Ess;
	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );
	singleScatter += FssEss;
	multiScatter += Fms * Ems;
}
#if NUM_RECT_AREA_LIGHTS > 0
	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
		vec3 normal = geometryNormal;
		vec3 viewDir = geometryViewDir;
		vec3 position = geometryPosition;
		vec3 lightPos = rectAreaLight.position;
		vec3 halfWidth = rectAreaLight.halfWidth;
		vec3 halfHeight = rectAreaLight.halfHeight;
		vec3 lightColor = rectAreaLight.color;
		float roughness = material.roughness;
		vec3 rectCoords[ 4 ];
		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;
		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;
		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;
		vec2 uv = LTC_Uv( normal, viewDir, roughness );
		vec4 t1 = texture2D( ltc_1, uv );
		vec4 t2 = texture2D( ltc_2, uv );
		mat3 mInv = mat3(
			vec3( t1.x, 0, t1.y ),
			vec3(    0, 1,    0 ),
			vec3( t1.z, 0, t1.w )
		);
		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );
		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );
		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );
	}
#endif
void RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );
	vec3 irradiance = dotNL * directLight.color;
	#ifdef USE_CLEARCOAT
		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );
		vec3 ccIrradiance = dotNLcc * directLight.color;
		clearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );
	#endif
	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );
	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {
	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );
}
void RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {
	#ifdef USE_CLEARCOAT
		clearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );
	#endif
	#ifdef USE_SHEEN
		sheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );
	#endif
	vec3 singleScattering = vec3( 0.0 );
	vec3 multiScattering = vec3( 0.0 );
	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;
	#ifdef USE_IRIDESCENCE
		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );
	#else
		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );
	#endif
	vec3 totalScattering = singleScattering + multiScattering;
	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );
	reflectedLight.indirectSpecular += radiance * singleScattering;
	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;
	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
#define RE_Direct				RE_Direct_Physical
#define RE_Direct_RectArea		RE_Direct_RectArea_Physical
#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical
#define RE_IndirectSpecular		RE_IndirectSpecular_Physical
float computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {
	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );
}`, ZD = `
vec3 geometryPosition = - vViewPosition;
vec3 geometryNormal = normal;
vec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );
vec3 geometryClearcoatNormal = vec3( 0.0 );
#ifdef USE_CLEARCOAT
	geometryClearcoatNormal = clearcoatNormal;
#endif
#ifdef USE_IRIDESCENCE
	float dotNVi = saturate( dot( normal, geometryViewDir ) );
	if ( material.iridescenceThickness == 0.0 ) {
		material.iridescence = 0.0;
	} else {
		material.iridescence = saturate( material.iridescence );
	}
	if ( material.iridescence > 0.0 ) {
		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );
		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );
	}
#endif
IncidentLight directLight;
#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )
	PointLight pointLight;
	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {
		pointLight = pointLights[ i ];
		getPointLightInfo( pointLight, geometryPosition, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )
		pointLightShadow = pointLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )
	SpotLight spotLight;
	vec4 spotColor;
	vec3 spotLightCoord;
	bool inSpotLightMap;
	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {
		spotLight = spotLights[ i ];
		getSpotLightInfo( spotLight, geometryPosition, directLight );
		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX
		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS
		#else
		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )
		#endif
		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )
			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;
			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );
			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );
			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;
		#endif
		#undef SPOT_LIGHT_MAP_INDEX
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
		spotLightShadow = spotLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )
	DirectionalLight directionalLight;
	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLightShadow;
	#endif
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {
		directionalLight = directionalLights[ i ];
		getDirectionalLightInfo( directionalLight, directLight );
		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )
		directionalLightShadow = directionalLightShadows[ i ];
		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
		#endif
		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )
	RectAreaLight rectAreaLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {
		rectAreaLight = rectAreaLights[ i ];
		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
	}
	#pragma unroll_loop_end
#endif
#if defined( RE_IndirectDiffuse )
	vec3 iblIrradiance = vec3( 0.0 );
	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );
	#if defined( USE_LIGHT_PROBES )
		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );
	#endif
	#if ( NUM_HEMI_LIGHTS > 0 )
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {
			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );
		}
		#pragma unroll_loop_end
	#endif
#endif
#if defined( RE_IndirectSpecular )
	vec3 radiance = vec3( 0.0 );
	vec3 clearcoatRadiance = vec3( 0.0 );
#endif`, jD = `#if defined( RE_IndirectDiffuse )
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;
		irradiance += lightMapIrradiance;
	#endif
	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )
		iblIrradiance += getIBLIrradiance( geometryNormal );
	#endif
#endif
#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )
	#ifdef USE_ANISOTROPY
		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );
	#else
		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );
	#endif
	#ifdef USE_CLEARCOAT
		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );
	#endif
#endif`, QD = `#if defined( RE_IndirectDiffuse )
	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif
#if defined( RE_IndirectSpecular )
	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );
#endif`, KD = `#if defined( USE_LOGDEPTHBUF )
	gl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;
#endif`, JD = `#if defined( USE_LOGDEPTHBUF )
	uniform float logDepthBufFC;
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`, $D = `#ifdef USE_LOGDEPTHBUF
	varying float vFragDepth;
	varying float vIsPerspective;
#endif`, eU = `#ifdef USE_LOGDEPTHBUF
	vFragDepth = 1.0 + gl_Position.w;
	vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );
#endif`, tU = `#ifdef USE_MAP
	vec4 sampledDiffuseColor = texture2D( map, vMapUv );
	#ifdef DECODE_VIDEO_TEXTURE
		sampledDiffuseColor = sRGBTransferEOTF( sampledDiffuseColor );
	#endif
	diffuseColor *= sampledDiffuseColor;
#endif`, nU = `#ifdef USE_MAP
	uniform sampler2D map;
#endif`, iU = `#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
	#if defined( USE_POINTS_UV )
		vec2 uv = vUv;
	#else
		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;
	#endif
#endif
#ifdef USE_MAP
	diffuseColor *= texture2D( map, uv );
#endif
#ifdef USE_ALPHAMAP
	diffuseColor.a *= texture2D( alphaMap, uv ).g;
#endif`, aU = `#if defined( USE_POINTS_UV )
	varying vec2 vUv;
#else
	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )
		uniform mat3 uvTransform;
	#endif
#endif
#ifdef USE_MAP
	uniform sampler2D map;
#endif
#ifdef USE_ALPHAMAP
	uniform sampler2D alphaMap;
#endif`, sU = `float metalnessFactor = metalness;
#ifdef USE_METALNESSMAP
	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );
	metalnessFactor *= texelMetalness.b;
#endif`, rU = `#ifdef USE_METALNESSMAP
	uniform sampler2D metalnessMap;
#endif`, oU = `#ifdef USE_INSTANCING_MORPH
	float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	float morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		morphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;
	}
#endif`, lU = `#if defined( USE_MORPHCOLORS )
	vColor *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		#if defined( USE_COLOR_ALPHA )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];
		#elif defined( USE_COLOR )
			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];
		#endif
	}
#endif`, cU = `#ifdef USE_MORPHNORMALS
	objectNormal *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];
	}
#endif`, uU = `#ifdef USE_MORPHTARGETS
	#ifndef USE_INSTANCING_MORPH
		uniform float morphTargetBaseInfluence;
		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];
	#endif
	uniform sampler2DArray morphTargetsTexture;
	uniform ivec2 morphTargetsTextureSize;
	vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {
		int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;
		int y = texelIndex / morphTargetsTextureSize.x;
		int x = texelIndex - y * morphTargetsTextureSize.x;
		ivec3 morphUV = ivec3( x, y, morphTargetIndex );
		return texelFetch( morphTargetsTexture, morphUV, 0 );
	}
#endif`, fU = `#ifdef USE_MORPHTARGETS
	transformed *= morphTargetBaseInfluence;
	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {
		if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];
	}
#endif`, hU = `float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;
#ifdef FLAT_SHADED
	vec3 fdx = dFdx( vViewPosition );
	vec3 fdy = dFdy( vViewPosition );
	vec3 normal = normalize( cross( fdx, fdy ) );
#else
	vec3 normal = normalize( vNormal );
	#ifdef DOUBLE_SIDED
		normal *= faceDirection;
	#endif
#endif
#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )
	#ifdef USE_TANGENT
		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn = getTangentFrame( - vViewPosition, normal,
		#if defined( USE_NORMALMAP )
			vNormalMapUv
		#elif defined( USE_CLEARCOAT_NORMALMAP )
			vClearcoatNormalMapUv
		#else
			vUv
		#endif
		);
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn[0] *= faceDirection;
		tbn[1] *= faceDirection;
	#endif
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	#ifdef USE_TANGENT
		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );
	#else
		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );
	#endif
	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )
		tbn2[0] *= faceDirection;
		tbn2[1] *= faceDirection;
	#endif
#endif
vec3 nonPerturbedNormal = normal;`, dU = `#ifdef USE_NORMALMAP_OBJECTSPACE
	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	#ifdef FLIP_SIDED
		normal = - normal;
	#endif
	#ifdef DOUBLE_SIDED
		normal = normal * faceDirection;
	#endif
	normal = normalize( normalMatrix * normal );
#elif defined( USE_NORMALMAP_TANGENTSPACE )
	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;
	mapN.xy *= normalScale;
	normal = normalize( tbn * mapN );
#elif defined( USE_BUMPMAP )
	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );
#endif`, pU = `#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`, mU = `#ifndef FLAT_SHADED
	varying vec3 vNormal;
	#ifdef USE_TANGENT
		varying vec3 vTangent;
		varying vec3 vBitangent;
	#endif
#endif`, vU = `#ifndef FLAT_SHADED
	vNormal = normalize( transformedNormal );
	#ifdef USE_TANGENT
		vTangent = normalize( transformedTangent );
		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );
	#endif
#endif`, gU = `#ifdef USE_NORMALMAP
	uniform sampler2D normalMap;
	uniform vec2 normalScale;
#endif
#ifdef USE_NORMALMAP_OBJECTSPACE
	uniform mat3 normalMatrix;
#endif
#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )
	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {
		vec3 q0 = dFdx( eye_pos.xyz );
		vec3 q1 = dFdy( eye_pos.xyz );
		vec2 st0 = dFdx( uv.st );
		vec2 st1 = dFdy( uv.st );
		vec3 N = surf_norm;
		vec3 q1perp = cross( q1, N );
		vec3 q0perp = cross( N, q0 );
		vec3 T = q1perp * st0.x + q0perp * st1.x;
		vec3 B = q1perp * st0.y + q0perp * st1.y;
		float det = max( dot( T, T ), dot( B, B ) );
		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );
		return mat3( T * scale, B * scale, N );
	}
#endif`, yU = `#ifdef USE_CLEARCOAT
	vec3 clearcoatNormal = nonPerturbedNormal;
#endif`, _U = `#ifdef USE_CLEARCOAT_NORMALMAP
	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;
	clearcoatMapN.xy *= clearcoatNormalScale;
	clearcoatNormal = normalize( tbn2 * clearcoatMapN );
#endif`, SU = `#ifdef USE_CLEARCOATMAP
	uniform sampler2D clearcoatMap;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform sampler2D clearcoatNormalMap;
	uniform vec2 clearcoatNormalScale;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform sampler2D clearcoatRoughnessMap;
#endif`, xU = `#ifdef USE_IRIDESCENCEMAP
	uniform sampler2D iridescenceMap;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform sampler2D iridescenceThicknessMap;
#endif`, MU = `#ifdef OPAQUE
diffuseColor.a = 1.0;
#endif
#ifdef USE_TRANSMISSION
diffuseColor.a *= material.transmissionAlpha;
#endif
gl_FragColor = vec4( outgoingLight, diffuseColor.a );`, bU = `vec3 packNormalToRGB( const in vec3 normal ) {
	return normalize( normal ) * 0.5 + 0.5;
}
vec3 unpackRGBToNormal( const in vec3 rgb ) {
	return 2.0 * rgb.xyz - 1.0;
}
const float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;const float ShiftRight8 = 1. / 256.;
const float Inv255 = 1. / 255.;
const vec4 PackFactors = vec4( 1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0 );
const vec2 UnpackFactors2 = vec2( UnpackDownscale, 1.0 / PackFactors.g );
const vec3 UnpackFactors3 = vec3( UnpackDownscale / PackFactors.rg, 1.0 / PackFactors.b );
const vec4 UnpackFactors4 = vec4( UnpackDownscale / PackFactors.rgb, 1.0 / PackFactors.a );
vec4 packDepthToRGBA( const in float v ) {
	if( v <= 0.0 )
		return vec4( 0., 0., 0., 0. );
	if( v >= 1.0 )
		return vec4( 1., 1., 1., 1. );
	float vuf;
	float af = modf( v * PackFactors.a, vuf );
	float bf = modf( vuf * ShiftRight8, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec4( vuf * Inv255, gf * PackUpscale, bf * PackUpscale, af );
}
vec3 packDepthToRGB( const in float v ) {
	if( v <= 0.0 )
		return vec3( 0., 0., 0. );
	if( v >= 1.0 )
		return vec3( 1., 1., 1. );
	float vuf;
	float bf = modf( v * PackFactors.b, vuf );
	float gf = modf( vuf * ShiftRight8, vuf );
	return vec3( vuf * Inv255, gf * PackUpscale, bf );
}
vec2 packDepthToRG( const in float v ) {
	if( v <= 0.0 )
		return vec2( 0., 0. );
	if( v >= 1.0 )
		return vec2( 1., 1. );
	float vuf;
	float gf = modf( v * 256., vuf );
	return vec2( vuf * Inv255, gf );
}
float unpackRGBAToDepth( const in vec4 v ) {
	return dot( v, UnpackFactors4 );
}
float unpackRGBToDepth( const in vec3 v ) {
	return dot( v, UnpackFactors3 );
}
float unpackRGToDepth( const in vec2 v ) {
	return v.r * UnpackFactors2.r + v.g * UnpackFactors2.g;
}
vec4 pack2HalfToRGBA( const in vec2 v ) {
	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );
	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );
}
vec2 unpackRGBATo2Half( const in vec4 v ) {
	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );
}
float viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {
	return ( viewZ + near ) / ( near - far );
}
float orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return depth * ( near - far ) - near;
}
float viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {
	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );
}
float perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {
	return ( near * far ) / ( ( far - near ) * depth - far );
}`, EU = `#ifdef PREMULTIPLIED_ALPHA
	gl_FragColor.rgb *= gl_FragColor.a;
#endif`, TU = `vec4 mvPosition = vec4( transformed, 1.0 );
#ifdef USE_BATCHING
	mvPosition = batchingMatrix * mvPosition;
#endif
#ifdef USE_INSTANCING
	mvPosition = instanceMatrix * mvPosition;
#endif
mvPosition = modelViewMatrix * mvPosition;
gl_Position = projectionMatrix * mvPosition;`, AU = `#ifdef DITHERING
	gl_FragColor.rgb = dithering( gl_FragColor.rgb );
#endif`, RU = `#ifdef DITHERING
	vec3 dithering( vec3 color ) {
		float grid_position = rand( gl_FragCoord.xy );
		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );
		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );
		return color + dither_shift_RGB;
	}
#endif`, CU = `float roughnessFactor = roughness;
#ifdef USE_ROUGHNESSMAP
	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );
	roughnessFactor *= texelRoughness.g;
#endif`, wU = `#ifdef USE_ROUGHNESSMAP
	uniform sampler2D roughnessMap;
#endif`, DU = `#if NUM_SPOT_LIGHT_COORDS > 0
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#if NUM_SPOT_LIGHT_MAPS > 0
	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {
		float depth = unpackRGBAToDepth( texture2D( depths, uv ) );
		#ifdef USE_REVERSEDEPTHBUF
			return step( depth, compare );
		#else
			return step( compare, depth );
		#endif
	}
	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {
		return unpackRGBATo2Half( texture2D( shadow, uv ) );
	}
	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){
		float occlusion = 1.0;
		vec2 distribution = texture2DDistribution( shadow, uv );
		#ifdef USE_REVERSEDEPTHBUF
			float hard_shadow = step( distribution.x, compare );
		#else
			float hard_shadow = step( compare , distribution.x );
		#endif
		if (hard_shadow != 1.0 ) {
			float distance = compare - distribution.x ;
			float variance = max( 0.00000, distribution.y * distribution.y );
			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );
		}
		return occlusion;
	}
	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {
		float shadow = 1.0;
		shadowCoord.xyz /= shadowCoord.w;
		shadowCoord.z += shadowBias;
		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;
		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;
		if ( frustumTest ) {
		#if defined( SHADOWMAP_TYPE_PCF )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx0 = - texelSize.x * shadowRadius;
			float dy0 = - texelSize.y * shadowRadius;
			float dx1 = + texelSize.x * shadowRadius;
			float dy1 = + texelSize.y * shadowRadius;
			float dx2 = dx0 / 2.0;
			float dy2 = dy0 / 2.0;
			float dx3 = dx1 / 2.0;
			float dy3 = dy1 / 2.0;
			shadow = (
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )
			) * ( 1.0 / 17.0 );
		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )
			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;
			float dx = texelSize.x;
			float dy = texelSize.y;
			vec2 uv = shadowCoord.xy;
			vec2 f = fract( uv * shadowMapSize + 0.5 );
			uv -= f * texelSize;
			shadow = (
				texture2DCompare( shadowMap, uv, shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +
				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),
					 f.x ) +
				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),
					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),
					 f.y ) +
				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),
						  f.x ),
					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),
						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),
						  f.x ),
					 f.y )
			) * ( 1.0 / 9.0 );
		#elif defined( SHADOWMAP_TYPE_VSM )
			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );
		#else
			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );
		#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
	vec2 cubeToUV( vec3 v, float texelSizeY ) {
		vec3 absV = abs( v );
		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );
		absV *= scaleToCube;
		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );
		vec2 planar = v.xy;
		float almostATexel = 1.5 * texelSizeY;
		float almostOne = 1.0 - almostATexel;
		if ( absV.z >= almostOne ) {
			if ( v.z > 0.0 )
				planar.x = 4.0 - v.x;
		} else if ( absV.x >= almostOne ) {
			float signX = sign( v.x );
			planar.x = v.z * signX + 2.0 * signX;
		} else if ( absV.y >= almostOne ) {
			float signY = sign( v.y );
			planar.x = v.x + 2.0 * signY + 2.0;
			planar.y = v.z * signY - 2.0;
		}
		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );
	}
	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {
		float shadow = 1.0;
		vec3 lightToPosition = shadowCoord.xyz;
		
		float lightToPositionLength = length( lightToPosition );
		if ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {
			float dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );			dp += shadowBias;
			vec3 bd3D = normalize( lightToPosition );
			vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );
			#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )
				vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;
				shadow = (
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +
					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )
				) * ( 1.0 / 9.0 );
			#else
				shadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );
			#endif
		}
		return mix( 1.0, shadow, shadowIntensity );
	}
#endif`, UU = `#if NUM_SPOT_LIGHT_COORDS > 0
	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];
	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];
#endif
#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];
		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];
		struct DirectionalLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
		struct SpotLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
		};
		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];
		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];
		struct PointLightShadow {
			float shadowIntensity;
			float shadowBias;
			float shadowNormalBias;
			float shadowRadius;
			vec2 shadowMapSize;
			float shadowCameraNear;
			float shadowCameraFar;
		};
		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];
	#endif
#endif`, NU = `#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )
	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );
	vec4 shadowWorldPosition;
#endif
#if defined( USE_SHADOWMAP )
	#if NUM_DIR_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );
			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
		#pragma unroll_loop_start
		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );
			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;
		}
		#pragma unroll_loop_end
	#endif
#endif
#if NUM_SPOT_LIGHT_COORDS > 0
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {
		shadowWorldPosition = worldPosition;
		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )
			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;
		#endif
		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;
	}
	#pragma unroll_loop_end
#endif`, OU = `float getShadowMask() {
	float shadow = 1.0;
	#ifdef USE_SHADOWMAP
	#if NUM_DIR_LIGHT_SHADOWS > 0
	DirectionalLightShadow directionalLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {
		directionalLight = directionalLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_SPOT_LIGHT_SHADOWS > 0
	SpotLightShadow spotLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {
		spotLight = spotLightShadows[ i ];
		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#if NUM_POINT_LIGHT_SHADOWS > 0
	PointLightShadow pointLight;
	#pragma unroll_loop_start
	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {
		pointLight = pointLightShadows[ i ];
		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;
	}
	#pragma unroll_loop_end
	#endif
	#endif
	return shadow;
}`, LU = `#ifdef USE_SKINNING
	mat4 boneMatX = getBoneMatrix( skinIndex.x );
	mat4 boneMatY = getBoneMatrix( skinIndex.y );
	mat4 boneMatZ = getBoneMatrix( skinIndex.z );
	mat4 boneMatW = getBoneMatrix( skinIndex.w );
#endif`, zU = `#ifdef USE_SKINNING
	uniform mat4 bindMatrix;
	uniform mat4 bindMatrixInverse;
	uniform highp sampler2D boneTexture;
	mat4 getBoneMatrix( const in float i ) {
		int size = textureSize( boneTexture, 0 ).x;
		int j = int( i ) * 4;
		int x = j % size;
		int y = j / size;
		vec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );
		vec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );
		vec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );
		vec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );
		return mat4( v1, v2, v3, v4 );
	}
#endif`, BU = `#ifdef USE_SKINNING
	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );
	vec4 skinned = vec4( 0.0 );
	skinned += boneMatX * skinVertex * skinWeight.x;
	skinned += boneMatY * skinVertex * skinWeight.y;
	skinned += boneMatZ * skinVertex * skinWeight.z;
	skinned += boneMatW * skinVertex * skinWeight.w;
	transformed = ( bindMatrixInverse * skinned ).xyz;
#endif`, PU = `#ifdef USE_SKINNING
	mat4 skinMatrix = mat4( 0.0 );
	skinMatrix += skinWeight.x * boneMatX;
	skinMatrix += skinWeight.y * boneMatY;
	skinMatrix += skinWeight.z * boneMatZ;
	skinMatrix += skinWeight.w * boneMatW;
	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;
	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;
	#ifdef USE_TANGENT
		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;
	#endif
#endif`, IU = `float specularStrength;
#ifdef USE_SPECULARMAP
	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );
	specularStrength = texelSpecular.r;
#else
	specularStrength = 1.0;
#endif`, HU = `#ifdef USE_SPECULARMAP
	uniform sampler2D specularMap;
#endif`, VU = `#if defined( TONE_MAPPING )
	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );
#endif`, GU = `#ifndef saturate
#define saturate( a ) clamp( a, 0.0, 1.0 )
#endif
uniform float toneMappingExposure;
vec3 LinearToneMapping( vec3 color ) {
	return saturate( toneMappingExposure * color );
}
vec3 ReinhardToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	return saturate( color / ( vec3( 1.0 ) + color ) );
}
vec3 CineonToneMapping( vec3 color ) {
	color *= toneMappingExposure;
	color = max( vec3( 0.0 ), color - 0.004 );
	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );
}
vec3 RRTAndODTFit( vec3 v ) {
	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;
	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;
	return a / b;
}
vec3 ACESFilmicToneMapping( vec3 color ) {
	const mat3 ACESInputMat = mat3(
		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),
		vec3( 0.04823, 0.01566, 0.83777 )
	);
	const mat3 ACESOutputMat = mat3(
		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),
		vec3( -0.07367, -0.00605,  1.07602 )
	);
	color *= toneMappingExposure / 0.6;
	color = ACESInputMat * color;
	color = RRTAndODTFit( color );
	color = ACESOutputMat * color;
	return saturate( color );
}
const mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(
	vec3( 1.6605, - 0.1246, - 0.0182 ),
	vec3( - 0.5876, 1.1329, - 0.1006 ),
	vec3( - 0.0728, - 0.0083, 1.1187 )
);
const mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(
	vec3( 0.6274, 0.0691, 0.0164 ),
	vec3( 0.3293, 0.9195, 0.0880 ),
	vec3( 0.0433, 0.0113, 0.8956 )
);
vec3 agxDefaultContrastApprox( vec3 x ) {
	vec3 x2 = x * x;
	vec3 x4 = x2 * x2;
	return + 15.5 * x4 * x2
		- 40.14 * x4 * x
		+ 31.96 * x4
		- 6.868 * x2 * x
		+ 0.4298 * x2
		+ 0.1191 * x
		- 0.00232;
}
vec3 AgXToneMapping( vec3 color ) {
	const mat3 AgXInsetMatrix = mat3(
		vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),
		vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),
		vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )
	);
	const mat3 AgXOutsetMatrix = mat3(
		vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),
		vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),
		vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )
	);
	const float AgxMinEv = - 12.47393;	const float AgxMaxEv = 4.026069;
	color *= toneMappingExposure;
	color = LINEAR_SRGB_TO_LINEAR_REC2020 * color;
	color = AgXInsetMatrix * color;
	color = max( color, 1e-10 );	color = log2( color );
	color = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );
	color = clamp( color, 0.0, 1.0 );
	color = agxDefaultContrastApprox( color );
	color = AgXOutsetMatrix * color;
	color = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );
	color = LINEAR_REC2020_TO_LINEAR_SRGB * color;
	color = clamp( color, 0.0, 1.0 );
	return color;
}
vec3 NeutralToneMapping( vec3 color ) {
	const float StartCompression = 0.8 - 0.04;
	const float Desaturation = 0.15;
	color *= toneMappingExposure;
	float x = min( color.r, min( color.g, color.b ) );
	float offset = x < 0.08 ? x - 6.25 * x * x : 0.04;
	color -= offset;
	float peak = max( color.r, max( color.g, color.b ) );
	if ( peak < StartCompression ) return color;
	float d = 1. - StartCompression;
	float newPeak = 1. - d * d / ( peak + d - StartCompression );
	color *= newPeak / peak;
	float g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );
	return mix( color, vec3( newPeak ), g );
}
vec3 CustomToneMapping( vec3 color ) { return color; }`, FU = `#ifdef USE_TRANSMISSION
	material.transmission = transmission;
	material.transmissionAlpha = 1.0;
	material.thickness = thickness;
	material.attenuationDistance = attenuationDistance;
	material.attenuationColor = attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;
	#endif
	#ifdef USE_THICKNESSMAP
		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;
	#endif
	vec3 pos = vWorldPosition;
	vec3 v = normalize( cameraPosition - pos );
	vec3 n = inverseTransformDirection( normal, viewMatrix );
	vec4 transmitted = getIBLVolumeRefraction(
		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,
		pos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,
		material.attenuationColor, material.attenuationDistance );
	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );
	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );
#endif`, XU = `#ifdef USE_TRANSMISSION
	uniform float transmission;
	uniform float thickness;
	uniform float attenuationDistance;
	uniform vec3 attenuationColor;
	#ifdef USE_TRANSMISSIONMAP
		uniform sampler2D transmissionMap;
	#endif
	#ifdef USE_THICKNESSMAP
		uniform sampler2D thicknessMap;
	#endif
	uniform vec2 transmissionSamplerSize;
	uniform sampler2D transmissionSamplerMap;
	uniform mat4 modelMatrix;
	uniform mat4 projectionMatrix;
	varying vec3 vWorldPosition;
	float w0( float a ) {
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );
	}
	float w1( float a ) {
		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );
	}
	float w2( float a ){
		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );
	}
	float w3( float a ) {
		return ( 1.0 / 6.0 ) * ( a * a * a );
	}
	float g0( float a ) {
		return w0( a ) + w1( a );
	}
	float g1( float a ) {
		return w2( a ) + w3( a );
	}
	float h0( float a ) {
		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );
	}
	float h1( float a ) {
		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );
	}
	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {
		uv = uv * texelSize.zw + 0.5;
		vec2 iuv = floor( uv );
		vec2 fuv = fract( uv );
		float g0x = g0( fuv.x );
		float g1x = g1( fuv.x );
		float h0x = h0( fuv.x );
		float h1x = h1( fuv.x );
		float h0y = h0( fuv.y );
		float h1y = h1( fuv.y );
		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;
		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;
		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +
			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );
	}
	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {
		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );
		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );
		vec2 fLodSizeInv = 1.0 / fLodSize;
		vec2 cLodSizeInv = 1.0 / cLodSize;
		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );
		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );
		return mix( fSample, cSample, fract( lod ) );
	}
	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {
		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );
		vec3 modelScale;
		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );
		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );
		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );
		return normalize( refractionVector ) * thickness * modelScale;
	}
	float applyIorToRoughness( const in float roughness, const in float ior ) {
		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );
	}
	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {
		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );
	}
	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {
		if ( isinf( attenuationDistance ) ) {
			return vec3( 1.0 );
		} else {
			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;
			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;
		}
	}
	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,
		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,
		const in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,
		const in vec3 attenuationColor, const in float attenuationDistance ) {
		vec4 transmittedLight;
		vec3 transmittance;
		#ifdef USE_DISPERSION
			float halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;
			vec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );
			for ( int i = 0; i < 3; i ++ ) {
				vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );
				vec3 refractedRayExit = position + transmissionRay;
				vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
				vec2 refractionCoords = ndcPos.xy / ndcPos.w;
				refractionCoords += 1.0;
				refractionCoords /= 2.0;
				vec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );
				transmittedLight[ i ] = transmissionSample[ i ];
				transmittedLight.a += transmissionSample.a;
				transmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];
			}
			transmittedLight.a /= 3.0;
		#else
			vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );
			vec3 refractedRayExit = position + transmissionRay;
			vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );
			vec2 refractionCoords = ndcPos.xy / ndcPos.w;
			refractionCoords += 1.0;
			refractionCoords /= 2.0;
			transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );
			transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );
		#endif
		vec3 attenuatedColor = transmittance * transmittedLight.rgb;
		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );
		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;
		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );
	}
#endif`, qU = `#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_SPECULARMAP
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`, YU = `#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	varying vec2 vUv;
#endif
#ifdef USE_MAP
	uniform mat3 mapTransform;
	varying vec2 vMapUv;
#endif
#ifdef USE_ALPHAMAP
	uniform mat3 alphaMapTransform;
	varying vec2 vAlphaMapUv;
#endif
#ifdef USE_LIGHTMAP
	uniform mat3 lightMapTransform;
	varying vec2 vLightMapUv;
#endif
#ifdef USE_AOMAP
	uniform mat3 aoMapTransform;
	varying vec2 vAoMapUv;
#endif
#ifdef USE_BUMPMAP
	uniform mat3 bumpMapTransform;
	varying vec2 vBumpMapUv;
#endif
#ifdef USE_NORMALMAP
	uniform mat3 normalMapTransform;
	varying vec2 vNormalMapUv;
#endif
#ifdef USE_DISPLACEMENTMAP
	uniform mat3 displacementMapTransform;
	varying vec2 vDisplacementMapUv;
#endif
#ifdef USE_EMISSIVEMAP
	uniform mat3 emissiveMapTransform;
	varying vec2 vEmissiveMapUv;
#endif
#ifdef USE_METALNESSMAP
	uniform mat3 metalnessMapTransform;
	varying vec2 vMetalnessMapUv;
#endif
#ifdef USE_ROUGHNESSMAP
	uniform mat3 roughnessMapTransform;
	varying vec2 vRoughnessMapUv;
#endif
#ifdef USE_ANISOTROPYMAP
	uniform mat3 anisotropyMapTransform;
	varying vec2 vAnisotropyMapUv;
#endif
#ifdef USE_CLEARCOATMAP
	uniform mat3 clearcoatMapTransform;
	varying vec2 vClearcoatMapUv;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	uniform mat3 clearcoatNormalMapTransform;
	varying vec2 vClearcoatNormalMapUv;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	uniform mat3 clearcoatRoughnessMapTransform;
	varying vec2 vClearcoatRoughnessMapUv;
#endif
#ifdef USE_SHEEN_COLORMAP
	uniform mat3 sheenColorMapTransform;
	varying vec2 vSheenColorMapUv;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	uniform mat3 sheenRoughnessMapTransform;
	varying vec2 vSheenRoughnessMapUv;
#endif
#ifdef USE_IRIDESCENCEMAP
	uniform mat3 iridescenceMapTransform;
	varying vec2 vIridescenceMapUv;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	uniform mat3 iridescenceThicknessMapTransform;
	varying vec2 vIridescenceThicknessMapUv;
#endif
#ifdef USE_SPECULARMAP
	uniform mat3 specularMapTransform;
	varying vec2 vSpecularMapUv;
#endif
#ifdef USE_SPECULAR_COLORMAP
	uniform mat3 specularColorMapTransform;
	varying vec2 vSpecularColorMapUv;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	uniform mat3 specularIntensityMapTransform;
	varying vec2 vSpecularIntensityMapUv;
#endif
#ifdef USE_TRANSMISSIONMAP
	uniform mat3 transmissionMapTransform;
	varying vec2 vTransmissionMapUv;
#endif
#ifdef USE_THICKNESSMAP
	uniform mat3 thicknessMapTransform;
	varying vec2 vThicknessMapUv;
#endif`, kU = `#if defined( USE_UV ) || defined( USE_ANISOTROPY )
	vUv = vec3( uv, 1 ).xy;
#endif
#ifdef USE_MAP
	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ALPHAMAP
	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_LIGHTMAP
	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_AOMAP
	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_BUMPMAP
	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_NORMALMAP
	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_DISPLACEMENTMAP
	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_EMISSIVEMAP
	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_METALNESSMAP
	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ROUGHNESSMAP
	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_ANISOTROPYMAP
	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOATMAP
	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_NORMALMAP
	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_CLEARCOAT_ROUGHNESSMAP
	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCEMAP
	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_IRIDESCENCE_THICKNESSMAP
	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_COLORMAP
	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SHEEN_ROUGHNESSMAP
	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULARMAP
	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_COLORMAP
	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_SPECULAR_INTENSITYMAP
	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_TRANSMISSIONMAP
	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;
#endif
#ifdef USE_THICKNESSMAP
	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;
#endif`, WU = `#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0
	vec4 worldPosition = vec4( transformed, 1.0 );
	#ifdef USE_BATCHING
		worldPosition = batchingMatrix * worldPosition;
	#endif
	#ifdef USE_INSTANCING
		worldPosition = instanceMatrix * worldPosition;
	#endif
	worldPosition = modelMatrix * worldPosition;
#endif`;
const ZU = `varying vec2 vUv;
uniform mat3 uvTransform;
void main() {
	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	gl_Position = vec4( position.xy, 1.0, 1.0 );
}`, jU = `uniform sampler2D t2D;
uniform float backgroundIntensity;
varying vec2 vUv;
void main() {
	vec4 texColor = texture2D( t2D, vUv );
	#ifdef DECODE_VIDEO_TEXTURE
		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`, QU = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`, KU = `#ifdef ENVMAP_TYPE_CUBE
	uniform samplerCube envMap;
#elif defined( ENVMAP_TYPE_CUBE_UV )
	uniform sampler2D envMap;
#endif
uniform float flipEnvMap;
uniform float backgroundBlurriness;
uniform float backgroundIntensity;
uniform mat3 backgroundRotation;
varying vec3 vWorldDirection;
#include <cube_uv_reflection_fragment>
void main() {
	#ifdef ENVMAP_TYPE_CUBE
		vec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );
	#elif defined( ENVMAP_TYPE_CUBE_UV )
		vec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );
	#else
		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );
	#endif
	texColor.rgb *= backgroundIntensity;
	gl_FragColor = texColor;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`, JU = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
	gl_Position.z = gl_Position.w;
}`, $U = `uniform samplerCube tCube;
uniform float tFlip;
uniform float opacity;
varying vec3 vWorldDirection;
void main() {
	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );
	gl_FragColor = texColor;
	gl_FragColor.a *= opacity;
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`, eN = `#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
varying vec2 vHighPrecisionZW;
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vHighPrecisionZW = gl_Position.zw;
}`, tN = `#if DEPTH_PACKING == 3200
	uniform float opacity;
#endif
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
varying vec2 vHighPrecisionZW;
void main() {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#if DEPTH_PACKING == 3200
		diffuseColor.a = opacity;
	#endif
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <logdepthbuf_fragment>
	#ifdef USE_REVERSEDEPTHBUF
		float fragCoordZ = vHighPrecisionZW[ 0 ] / vHighPrecisionZW[ 1 ];
	#else
		float fragCoordZ = 0.5 * vHighPrecisionZW[ 0 ] / vHighPrecisionZW[ 1 ] + 0.5;
	#endif
	#if DEPTH_PACKING == 3200
		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );
	#elif DEPTH_PACKING == 3201
		gl_FragColor = packDepthToRGBA( fragCoordZ );
	#elif DEPTH_PACKING == 3202
		gl_FragColor = vec4( packDepthToRGB( fragCoordZ ), 1.0 );
	#elif DEPTH_PACKING == 3203
		gl_FragColor = vec4( packDepthToRG( fragCoordZ ), 0.0, 1.0 );
	#endif
}`, nN = `#define DISTANCE
varying vec3 vWorldPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <skinbase_vertex>
	#include <morphinstance_vertex>
	#ifdef USE_DISPLACEMENTMAP
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <worldpos_vertex>
	#include <clipping_planes_vertex>
	vWorldPosition = worldPosition.xyz;
}`, iN = `#define DISTANCE
uniform vec3 referencePosition;
uniform float nearDistance;
uniform float farDistance;
varying vec3 vWorldPosition;
#include <common>
#include <packing>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <clipping_planes_pars_fragment>
void main () {
	vec4 diffuseColor = vec4( 1.0 );
	#include <clipping_planes_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	float dist = length( vWorldPosition - referencePosition );
	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );
	dist = saturate( dist );
	gl_FragColor = packDepthToRGBA( dist );
}`, aN = `varying vec3 vWorldDirection;
#include <common>
void main() {
	vWorldDirection = transformDirection( position, modelMatrix );
	#include <begin_vertex>
	#include <project_vertex>
}`, sN = `uniform sampler2D tEquirect;
varying vec3 vWorldDirection;
#include <common>
void main() {
	vec3 direction = normalize( vWorldDirection );
	vec2 sampleUV = equirectUv( direction );
	gl_FragColor = texture2D( tEquirect, sampleUV );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
}`, rN = `uniform float scale;
attribute float lineDistance;
varying float vLineDistance;
#include <common>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	vLineDistance = scale * lineDistance;
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`, oN = `uniform vec3 diffuse;
uniform float opacity;
uniform float dashSize;
uniform float totalSize;
varying float vLineDistance;
#include <common>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	if ( mod( vLineDistance, totalSize ) > dashSize ) {
		discard;
	}
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`, lN = `#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )
		#include <beginnormal_vertex>
		#include <morphnormal_vertex>
		#include <skinbase_vertex>
		#include <skinnormal_vertex>
		#include <defaultnormal_vertex>
	#endif
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <fog_vertex>
}`, cN = `uniform vec3 diffuse;
uniform float opacity;
#ifndef FLAT_SHADED
	varying vec3 vNormal;
#endif
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	#ifdef USE_LIGHTMAP
		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );
		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;
	#else
		reflectedLight.indirectDiffuse += vec3( 1.0 );
	#endif
	#include <aomap_fragment>
	reflectedLight.indirectDiffuse *= diffuseColor.rgb;
	vec3 outgoingLight = reflectedLight.indirectDiffuse;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, uN = `#define LAMBERT
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, fN = `#define LAMBERT
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_lambert_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_lambert_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, hN = `#define MATCAP
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <color_pars_vertex>
#include <displacementmap_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
	vViewPosition = - mvPosition.xyz;
}`, dN = `#define MATCAP
uniform vec3 diffuse;
uniform float opacity;
uniform sampler2D matcap;
varying vec3 vViewPosition;
#include <common>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	vec3 viewDir = normalize( vViewPosition );
	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );
	vec3 y = cross( viewDir, x );
	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;
	#ifdef USE_MATCAP
		vec4 matcapColor = texture2D( matcap, uv );
	#else
		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );
	#endif
	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, pN = `#define NORMAL
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	vViewPosition = - mvPosition.xyz;
#endif
}`, mN = `#define NORMAL
uniform float opacity;
#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )
	varying vec3 vViewPosition;
#endif
#include <packing>
#include <uv_pars_fragment>
#include <normal_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );
	#include <clipping_planes_fragment>
	#include <logdepthbuf_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	gl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );
	#ifdef OPAQUE
		gl_FragColor.a = 1.0;
	#endif
}`, vN = `#define PHONG
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <envmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <envmap_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, gN = `#define PHONG
uniform vec3 diffuse;
uniform vec3 emissive;
uniform vec3 specular;
uniform float shininess;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_phong_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <specularmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <specularmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_phong_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;
	#include <envmap_fragment>
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, yN = `#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`, _N = `#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define USE_SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef USE_SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULAR_COLORMAP
		uniform sampler2D specularColorMap;
	#endif
	#ifdef USE_SPECULAR_INTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_DISPERSION
	uniform float dispersion;
#endif
#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEEN_COLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEEN_ROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
#ifdef USE_ANISOTROPY
	uniform vec2 anisotropyVector;
	#ifdef USE_ANISOTROPYMAP
		uniform sampler2D anisotropyMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;
	#endif
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, SN = `#define TOON
varying vec3 vViewPosition;
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, xN = `#define TOON
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float opacity;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <gradientmap_pars_fragment>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_toon_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_toon_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`, MN = `uniform float size;
uniform float scale;
#include <common>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
#ifdef USE_POINTS_UV
	varying vec2 vUv;
	uniform mat3 uvTransform;
#endif
void main() {
	#ifdef USE_POINTS_UV
		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;
	#endif
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <project_vertex>
	gl_PointSize = size;
	#ifdef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );
	#endif
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <worldpos_vertex>
	#include <fog_vertex>
}`, bN = `uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <color_pars_fragment>
#include <map_particle_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_particle_fragment>
	#include <color_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
}`, EN = `#include <common>
#include <batching_pars_vertex>
#include <fog_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <shadowmap_pars_vertex>
void main() {
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphinstance_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
}`, TN = `uniform vec3 color;
uniform float opacity;
#include <common>
#include <packing>
#include <fog_pars_fragment>
#include <bsdfs>
#include <lights_pars_begin>
#include <logdepthbuf_pars_fragment>
#include <shadowmap_pars_fragment>
#include <shadowmask_pars_fragment>
void main() {
	#include <logdepthbuf_fragment>
	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`, AN = `uniform float rotation;
uniform vec2 center;
#include <common>
#include <uv_pars_vertex>
#include <fog_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	vec4 mvPosition = modelViewMatrix[ 3 ];
	vec2 scale = vec2( length( modelMatrix[ 0 ].xyz ), length( modelMatrix[ 1 ].xyz ) );
	#ifndef USE_SIZEATTENUATION
		bool isPerspective = isPerspectiveMatrix( projectionMatrix );
		if ( isPerspective ) scale *= - mvPosition.z;
	#endif
	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;
	vec2 rotatedPosition;
	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;
	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;
	mvPosition.xy += rotatedPosition;
	gl_Position = projectionMatrix * mvPosition;
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	#include <fog_vertex>
}`, RN = `uniform vec3 diffuse;
uniform float opacity;
#include <common>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <fog_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	vec3 outgoingLight = vec3( 0.0 );
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	outgoingLight = diffuseColor.rgb;
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
}`, tn = {
  alphahash_fragment: jw,
  alphahash_pars_fragment: Qw,
  alphamap_fragment: Kw,
  alphamap_pars_fragment: Jw,
  alphatest_fragment: $w,
  alphatest_pars_fragment: eD,
  aomap_fragment: tD,
  aomap_pars_fragment: nD,
  batching_pars_vertex: iD,
  batching_vertex: aD,
  begin_vertex: sD,
  beginnormal_vertex: rD,
  bsdfs: oD,
  iridescence_fragment: lD,
  bumpmap_pars_fragment: cD,
  clipping_planes_fragment: uD,
  clipping_planes_pars_fragment: fD,
  clipping_planes_pars_vertex: hD,
  clipping_planes_vertex: dD,
  color_fragment: pD,
  color_pars_fragment: mD,
  color_pars_vertex: vD,
  color_vertex: gD,
  common: yD,
  cube_uv_reflection_fragment: _D,
  defaultnormal_vertex: SD,
  displacementmap_pars_vertex: xD,
  displacementmap_vertex: MD,
  emissivemap_fragment: bD,
  emissivemap_pars_fragment: ED,
  colorspace_fragment: TD,
  colorspace_pars_fragment: AD,
  envmap_fragment: RD,
  envmap_common_pars_fragment: CD,
  envmap_pars_fragment: wD,
  envmap_pars_vertex: DD,
  envmap_physical_pars_fragment: GD,
  envmap_vertex: UD,
  fog_vertex: ND,
  fog_pars_vertex: OD,
  fog_fragment: LD,
  fog_pars_fragment: zD,
  gradientmap_pars_fragment: BD,
  lightmap_pars_fragment: PD,
  lights_lambert_fragment: ID,
  lights_lambert_pars_fragment: HD,
  lights_pars_begin: VD,
  lights_toon_fragment: FD,
  lights_toon_pars_fragment: XD,
  lights_phong_fragment: qD,
  lights_phong_pars_fragment: YD,
  lights_physical_fragment: kD,
  lights_physical_pars_fragment: WD,
  lights_fragment_begin: ZD,
  lights_fragment_maps: jD,
  lights_fragment_end: QD,
  logdepthbuf_fragment: KD,
  logdepthbuf_pars_fragment: JD,
  logdepthbuf_pars_vertex: $D,
  logdepthbuf_vertex: eU,
  map_fragment: tU,
  map_pars_fragment: nU,
  map_particle_fragment: iU,
  map_particle_pars_fragment: aU,
  metalnessmap_fragment: sU,
  metalnessmap_pars_fragment: rU,
  morphinstance_vertex: oU,
  morphcolor_vertex: lU,
  morphnormal_vertex: cU,
  morphtarget_pars_vertex: uU,
  morphtarget_vertex: fU,
  normal_fragment_begin: hU,
  normal_fragment_maps: dU,
  normal_pars_fragment: pU,
  normal_pars_vertex: mU,
  normal_vertex: vU,
  normalmap_pars_fragment: gU,
  clearcoat_normal_fragment_begin: yU,
  clearcoat_normal_fragment_maps: _U,
  clearcoat_pars_fragment: SU,
  iridescence_pars_fragment: xU,
  opaque_fragment: MU,
  packing: bU,
  premultiplied_alpha_fragment: EU,
  project_vertex: TU,
  dithering_fragment: AU,
  dithering_pars_fragment: RU,
  roughnessmap_fragment: CU,
  roughnessmap_pars_fragment: wU,
  shadowmap_pars_fragment: DU,
  shadowmap_pars_vertex: UU,
  shadowmap_vertex: NU,
  shadowmask_pars_fragment: OU,
  skinbase_vertex: LU,
  skinning_pars_vertex: zU,
  skinning_vertex: BU,
  skinnormal_vertex: PU,
  specularmap_fragment: IU,
  specularmap_pars_fragment: HU,
  tonemapping_fragment: VU,
  tonemapping_pars_fragment: GU,
  transmission_fragment: FU,
  transmission_pars_fragment: XU,
  uv_pars_fragment: qU,
  uv_pars_vertex: YU,
  uv_vertex: kU,
  worldpos_vertex: WU,
  background_vert: ZU,
  background_frag: jU,
  backgroundCube_vert: QU,
  backgroundCube_frag: KU,
  cube_vert: JU,
  cube_frag: $U,
  depth_vert: eN,
  depth_frag: tN,
  distanceRGBA_vert: nN,
  distanceRGBA_frag: iN,
  equirect_vert: aN,
  equirect_frag: sN,
  linedashed_vert: rN,
  linedashed_frag: oN,
  meshbasic_vert: lN,
  meshbasic_frag: cN,
  meshlambert_vert: uN,
  meshlambert_frag: fN,
  meshmatcap_vert: hN,
  meshmatcap_frag: dN,
  meshnormal_vert: pN,
  meshnormal_frag: mN,
  meshphong_vert: vN,
  meshphong_frag: gN,
  meshphysical_vert: yN,
  meshphysical_frag: _N,
  meshtoon_vert: SN,
  meshtoon_frag: xN,
  points_vert: MN,
  points_frag: bN,
  shadow_vert: EN,
  shadow_frag: TN,
  sprite_vert: AN,
  sprite_frag: RN
}, rt = {
  common: {
    diffuse: { value: /* @__PURE__ */ new lt(16777215) },
    opacity: { value: 1 },
    map: { value: null },
    mapTransform: { value: /* @__PURE__ */ new Qt() },
    alphaMap: { value: null },
    alphaMapTransform: { value: /* @__PURE__ */ new Qt() },
    alphaTest: { value: 0 }
  },
  specularmap: {
    specularMap: { value: null },
    specularMapTransform: { value: /* @__PURE__ */ new Qt() }
  },
  envmap: {
    envMap: { value: null },
    envMapRotation: { value: /* @__PURE__ */ new Qt() },
    flipEnvMap: { value: -1 },
    reflectivity: { value: 1 },
    // basic, lambert, phong
    ior: { value: 1.5 },
    // physical
    refractionRatio: { value: 0.98 }
    // basic, lambert, phong
  },
  aomap: {
    aoMap: { value: null },
    aoMapIntensity: { value: 1 },
    aoMapTransform: { value: /* @__PURE__ */ new Qt() }
  },
  lightmap: {
    lightMap: { value: null },
    lightMapIntensity: { value: 1 },
    lightMapTransform: { value: /* @__PURE__ */ new Qt() }
  },
  bumpmap: {
    bumpMap: { value: null },
    bumpMapTransform: { value: /* @__PURE__ */ new Qt() },
    bumpScale: { value: 1 }
  },
  normalmap: {
    normalMap: { value: null },
    normalMapTransform: { value: /* @__PURE__ */ new Qt() },
    normalScale: { value: /* @__PURE__ */ new De(1, 1) }
  },
  displacementmap: {
    displacementMap: { value: null },
    displacementMapTransform: { value: /* @__PURE__ */ new Qt() },
    displacementScale: { value: 1 },
    displacementBias: { value: 0 }
  },
  emissivemap: {
    emissiveMap: { value: null },
    emissiveMapTransform: { value: /* @__PURE__ */ new Qt() }
  },
  metalnessmap: {
    metalnessMap: { value: null },
    metalnessMapTransform: { value: /* @__PURE__ */ new Qt() }
  },
  roughnessmap: {
    roughnessMap: { value: null },
    roughnessMapTransform: { value: /* @__PURE__ */ new Qt() }
  },
  gradientmap: {
    gradientMap: { value: null }
  },
  fog: {
    fogDensity: { value: 25e-5 },
    fogNear: { value: 1 },
    fogFar: { value: 2e3 },
    fogColor: { value: /* @__PURE__ */ new lt(16777215) }
  },
  lights: {
    ambientLightColor: { value: [] },
    lightProbe: { value: [] },
    directionalLights: { value: [], properties: {
      direction: {},
      color: {}
    } },
    directionalLightShadows: { value: [], properties: {
      shadowIntensity: 1,
      shadowBias: {},
      shadowNormalBias: {},
      shadowRadius: {},
      shadowMapSize: {}
    } },
    directionalShadowMap: { value: [] },
    directionalShadowMatrix: { value: [] },
    spotLights: { value: [], properties: {
      color: {},
      position: {},
      direction: {},
      distance: {},
      coneCos: {},
      penumbraCos: {},
      decay: {}
    } },
    spotLightShadows: { value: [], properties: {
      shadowIntensity: 1,
      shadowBias: {},
      shadowNormalBias: {},
      shadowRadius: {},
      shadowMapSize: {}
    } },
    spotLightMap: { value: [] },
    spotShadowMap: { value: [] },
    spotLightMatrix: { value: [] },
    pointLights: { value: [], properties: {
      color: {},
      position: {},
      decay: {},
      distance: {}
    } },
    pointLightShadows: { value: [], properties: {
      shadowIntensity: 1,
      shadowBias: {},
      shadowNormalBias: {},
      shadowRadius: {},
      shadowMapSize: {},
      shadowCameraNear: {},
      shadowCameraFar: {}
    } },
    pointShadowMap: { value: [] },
    pointShadowMatrix: { value: [] },
    hemisphereLights: { value: [], properties: {
      direction: {},
      skyColor: {},
      groundColor: {}
    } },
    // TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
    rectAreaLights: { value: [], properties: {
      color: {},
      position: {},
      width: {},
      height: {}
    } },
    ltc_1: { value: null },
    ltc_2: { value: null }
  },
  points: {
    diffuse: { value: /* @__PURE__ */ new lt(16777215) },
    opacity: { value: 1 },
    size: { value: 1 },
    scale: { value: 1 },
    map: { value: null },
    alphaMap: { value: null },
    alphaMapTransform: { value: /* @__PURE__ */ new Qt() },
    alphaTest: { value: 0 },
    uvTransform: { value: /* @__PURE__ */ new Qt() }
  },
  sprite: {
    diffuse: { value: /* @__PURE__ */ new lt(16777215) },
    opacity: { value: 1 },
    center: { value: /* @__PURE__ */ new De(0.5, 0.5) },
    rotation: { value: 0 },
    map: { value: null },
    mapTransform: { value: /* @__PURE__ */ new Qt() },
    alphaMap: { value: null },
    alphaMapTransform: { value: /* @__PURE__ */ new Qt() },
    alphaTest: { value: 0 }
  }
}, qr = {
  basic: {
    uniforms: /* @__PURE__ */ Ja([
      rt.common,
      rt.specularmap,
      rt.envmap,
      rt.aomap,
      rt.lightmap,
      rt.fog
    ]),
    vertexShader: tn.meshbasic_vert,
    fragmentShader: tn.meshbasic_frag
  },
  lambert: {
    uniforms: /* @__PURE__ */ Ja([
      rt.common,
      rt.specularmap,
      rt.envmap,
      rt.aomap,
      rt.lightmap,
      rt.emissivemap,
      rt.bumpmap,
      rt.normalmap,
      rt.displacementmap,
      rt.fog,
      rt.lights,
      {
        emissive: { value: /* @__PURE__ */ new lt(0) }
      }
    ]),
    vertexShader: tn.meshlambert_vert,
    fragmentShader: tn.meshlambert_frag
  },
  phong: {
    uniforms: /* @__PURE__ */ Ja([
      rt.common,
      rt.specularmap,
      rt.envmap,
      rt.aomap,
      rt.lightmap,
      rt.emissivemap,
      rt.bumpmap,
      rt.normalmap,
      rt.displacementmap,
      rt.fog,
      rt.lights,
      {
        emissive: { value: /* @__PURE__ */ new lt(0) },
        specular: { value: /* @__PURE__ */ new lt(1118481) },
        shininess: { value: 30 }
      }
    ]),
    vertexShader: tn.meshphong_vert,
    fragmentShader: tn.meshphong_frag
  },
  standard: {
    uniforms: /* @__PURE__ */ Ja([
      rt.common,
      rt.envmap,
      rt.aomap,
      rt.lightmap,
      rt.emissivemap,
      rt.bumpmap,
      rt.normalmap,
      rt.displacementmap,
      rt.roughnessmap,
      rt.metalnessmap,
      rt.fog,
      rt.lights,
      {
        emissive: { value: /* @__PURE__ */ new lt(0) },
        roughness: { value: 1 },
        metalness: { value: 0 },
        envMapIntensity: { value: 1 }
      }
    ]),
    vertexShader: tn.meshphysical_vert,
    fragmentShader: tn.meshphysical_frag
  },
  toon: {
    uniforms: /* @__PURE__ */ Ja([
      rt.common,
      rt.aomap,
      rt.lightmap,
      rt.emissivemap,
      rt.bumpmap,
      rt.normalmap,
      rt.displacementmap,
      rt.gradientmap,
      rt.fog,
      rt.lights,
      {
        emissive: { value: /* @__PURE__ */ new lt(0) }
      }
    ]),
    vertexShader: tn.meshtoon_vert,
    fragmentShader: tn.meshtoon_frag
  },
  matcap: {
    uniforms: /* @__PURE__ */ Ja([
      rt.common,
      rt.bumpmap,
      rt.normalmap,
      rt.displacementmap,
      rt.fog,
      {
        matcap: { value: null }
      }
    ]),
    vertexShader: tn.meshmatcap_vert,
    fragmentShader: tn.meshmatcap_frag
  },
  points: {
    uniforms: /* @__PURE__ */ Ja([
      rt.points,
      rt.fog
    ]),
    vertexShader: tn.points_vert,
    fragmentShader: tn.points_frag
  },
  dashed: {
    uniforms: /* @__PURE__ */ Ja([
      rt.common,
      rt.fog,
      {
        scale: { value: 1 },
        dashSize: { value: 1 },
        totalSize: { value: 2 }
      }
    ]),
    vertexShader: tn.linedashed_vert,
    fragmentShader: tn.linedashed_frag
  },
  depth: {
    uniforms: /* @__PURE__ */ Ja([
      rt.common,
      rt.displacementmap
    ]),
    vertexShader: tn.depth_vert,
    fragmentShader: tn.depth_frag
  },
  normal: {
    uniforms: /* @__PURE__ */ Ja([
      rt.common,
      rt.bumpmap,
      rt.normalmap,
      rt.displacementmap,
      {
        opacity: { value: 1 }
      }
    ]),
    vertexShader: tn.meshnormal_vert,
    fragmentShader: tn.meshnormal_frag
  },
  sprite: {
    uniforms: /* @__PURE__ */ Ja([
      rt.sprite,
      rt.fog
    ]),
    vertexShader: tn.sprite_vert,
    fragmentShader: tn.sprite_frag
  },
  background: {
    uniforms: {
      uvTransform: { value: /* @__PURE__ */ new Qt() },
      t2D: { value: null },
      backgroundIntensity: { value: 1 }
    },
    vertexShader: tn.background_vert,
    fragmentShader: tn.background_frag
  },
  backgroundCube: {
    uniforms: {
      envMap: { value: null },
      flipEnvMap: { value: -1 },
      backgroundBlurriness: { value: 0 },
      backgroundIntensity: { value: 1 },
      backgroundRotation: { value: /* @__PURE__ */ new Qt() }
    },
    vertexShader: tn.backgroundCube_vert,
    fragmentShader: tn.backgroundCube_frag
  },
  cube: {
    uniforms: {
      tCube: { value: null },
      tFlip: { value: -1 },
      opacity: { value: 1 }
    },
    vertexShader: tn.cube_vert,
    fragmentShader: tn.cube_frag
  },
  equirect: {
    uniforms: {
      tEquirect: { value: null }
    },
    vertexShader: tn.equirect_vert,
    fragmentShader: tn.equirect_frag
  },
  distanceRGBA: {
    uniforms: /* @__PURE__ */ Ja([
      rt.common,
      rt.displacementmap,
      {
        referencePosition: { value: /* @__PURE__ */ new j() },
        nearDistance: { value: 1 },
        farDistance: { value: 1e3 }
      }
    ]),
    vertexShader: tn.distanceRGBA_vert,
    fragmentShader: tn.distanceRGBA_frag
  },
  shadow: {
    uniforms: /* @__PURE__ */ Ja([
      rt.lights,
      rt.fog,
      {
        color: { value: /* @__PURE__ */ new lt(0) },
        opacity: { value: 1 }
      }
    ]),
    vertexShader: tn.shadow_vert,
    fragmentShader: tn.shadow_frag
  }
};
qr.physical = {
  uniforms: /* @__PURE__ */ Ja([
    qr.standard.uniforms,
    {
      clearcoat: { value: 0 },
      clearcoatMap: { value: null },
      clearcoatMapTransform: { value: /* @__PURE__ */ new Qt() },
      clearcoatNormalMap: { value: null },
      clearcoatNormalMapTransform: { value: /* @__PURE__ */ new Qt() },
      clearcoatNormalScale: { value: /* @__PURE__ */ new De(1, 1) },
      clearcoatRoughness: { value: 0 },
      clearcoatRoughnessMap: { value: null },
      clearcoatRoughnessMapTransform: { value: /* @__PURE__ */ new Qt() },
      dispersion: { value: 0 },
      iridescence: { value: 0 },
      iridescenceMap: { value: null },
      iridescenceMapTransform: { value: /* @__PURE__ */ new Qt() },
      iridescenceIOR: { value: 1.3 },
      iridescenceThicknessMinimum: { value: 100 },
      iridescenceThicknessMaximum: { value: 400 },
      iridescenceThicknessMap: { value: null },
      iridescenceThicknessMapTransform: { value: /* @__PURE__ */ new Qt() },
      sheen: { value: 0 },
      sheenColor: { value: /* @__PURE__ */ new lt(0) },
      sheenColorMap: { value: null },
      sheenColorMapTransform: { value: /* @__PURE__ */ new Qt() },
      sheenRoughness: { value: 1 },
      sheenRoughnessMap: { value: null },
      sheenRoughnessMapTransform: { value: /* @__PURE__ */ new Qt() },
      transmission: { value: 0 },
      transmissionMap: { value: null },
      transmissionMapTransform: { value: /* @__PURE__ */ new Qt() },
      transmissionSamplerSize: { value: /* @__PURE__ */ new De() },
      transmissionSamplerMap: { value: null },
      thickness: { value: 0 },
      thicknessMap: { value: null },
      thicknessMapTransform: { value: /* @__PURE__ */ new Qt() },
      attenuationDistance: { value: 0 },
      attenuationColor: { value: /* @__PURE__ */ new lt(0) },
      specularColor: { value: /* @__PURE__ */ new lt(1, 1, 1) },
      specularColorMap: { value: null },
      specularColorMapTransform: { value: /* @__PURE__ */ new Qt() },
      specularIntensity: { value: 1 },
      specularIntensityMap: { value: null },
      specularIntensityMapTransform: { value: /* @__PURE__ */ new Qt() },
      anisotropyVector: { value: /* @__PURE__ */ new De() },
      anisotropyMap: { value: null },
      anisotropyMapTransform: { value: /* @__PURE__ */ new Qt() }
    }
  ]),
  vertexShader: tn.meshphysical_vert,
  fragmentShader: tn.meshphysical_frag
};
const Ig = { r: 0, b: 0, g: 0 }, Iu = /* @__PURE__ */ new Xs(), CN = /* @__PURE__ */ new Ft();
function wN(s, e, n, i, r, c, h) {
  const d = new lt(0);
  let v = c === !0 ? 0 : 1, g, S, x = null, M = 0, b = null;
  function R(N) {
    let O = N.isScene === !0 ? N.background : null;
    return O && O.isTexture && (O = (N.backgroundBlurriness > 0 ? n : e).get(O)), O;
  }
  function w(N) {
    let O = !1;
    const I = R(N);
    I === null ? E(d, v) : I && I.isColor && (E(I, 1), O = !0);
    const V = s.xr.getEnvironmentBlendMode();
    V === "additive" ? i.buffers.color.setClear(0, 0, 0, 1, h) : V === "alpha-blend" && i.buffers.color.setClear(0, 0, 0, 0, h), (s.autoClear || O) && (i.buffers.depth.setTest(!0), i.buffers.depth.setMask(!0), i.buffers.color.setMask(!0), s.clear(s.autoClearColor, s.autoClearDepth, s.autoClearStencil));
  }
  function C(N, O) {
    const I = R(O);
    I && (I.isCubeTexture || I.mapping === Qh) ? (S === void 0 && (S = new Ci(
      new af(1, 1, 1),
      new ts({
        name: "BackgroundCubeMaterial",
        uniforms: Yh(qr.backgroundCube.uniforms),
        vertexShader: qr.backgroundCube.vertexShader,
        fragmentShader: qr.backgroundCube.fragmentShader,
        side: ji,
        depthTest: !1,
        depthWrite: !1,
        fog: !1,
        allowOverride: !1
      })
    ), S.geometry.deleteAttribute("normal"), S.geometry.deleteAttribute("uv"), S.onBeforeRender = function(V, Y, k) {
      this.matrixWorld.copyPosition(k.matrixWorld);
    }, Object.defineProperty(S.material, "envMap", {
      get: function() {
        return this.uniforms.envMap.value;
      }
    }), r.update(S)), Iu.copy(O.backgroundRotation), Iu.x *= -1, Iu.y *= -1, Iu.z *= -1, I.isCubeTexture && I.isRenderTargetTexture === !1 && (Iu.y *= -1, Iu.z *= -1), S.material.uniforms.envMap.value = I, S.material.uniforms.flipEnvMap.value = I.isCubeTexture && I.isRenderTargetTexture === !1 ? -1 : 1, S.material.uniforms.backgroundBlurriness.value = O.backgroundBlurriness, S.material.uniforms.backgroundIntensity.value = O.backgroundIntensity, S.material.uniforms.backgroundRotation.value.setFromMatrix4(CN.makeRotationFromEuler(Iu)), S.material.toneMapped = vn.getTransfer(I.colorSpace) !== Pn, (x !== I || M !== I.version || b !== s.toneMapping) && (S.material.needsUpdate = !0, x = I, M = I.version, b = s.toneMapping), S.layers.enableAll(), N.unshift(S, S.geometry, S.material, 0, 0, null)) : I && I.isTexture && (g === void 0 && (g = new Ci(
      new $h(2, 2),
      new ts({
        name: "BackgroundMaterial",
        uniforms: Yh(qr.background.uniforms),
        vertexShader: qr.background.vertexShader,
        fragmentShader: qr.background.fragmentShader,
        side: Po,
        depthTest: !1,
        depthWrite: !1,
        fog: !1,
        allowOverride: !1
      })
    ), g.geometry.deleteAttribute("normal"), Object.defineProperty(g.material, "map", {
      get: function() {
        return this.uniforms.t2D.value;
      }
    }), r.update(g)), g.material.uniforms.t2D.value = I, g.material.uniforms.backgroundIntensity.value = O.backgroundIntensity, g.material.toneMapped = vn.getTransfer(I.colorSpace) !== Pn, I.matrixAutoUpdate === !0 && I.updateMatrix(), g.material.uniforms.uvTransform.value.copy(I.matrix), (x !== I || M !== I.version || b !== s.toneMapping) && (g.material.needsUpdate = !0, x = I, M = I.version, b = s.toneMapping), g.layers.enableAll(), N.unshift(g, g.geometry, g.material, 0, 0, null));
  }
  function E(N, O) {
    N.getRGB(Ig, TE(s)), i.buffers.color.setClear(Ig.r, Ig.g, Ig.b, O, h);
  }
  function U() {
    S !== void 0 && (S.geometry.dispose(), S.material.dispose(), S = void 0), g !== void 0 && (g.geometry.dispose(), g.material.dispose(), g = void 0);
  }
  return {
    getClearColor: function() {
      return d;
    },
    setClearColor: function(N, O = 1) {
      d.set(N), v = O, E(d, v);
    },
    getClearAlpha: function() {
      return v;
    },
    setClearAlpha: function(N) {
      v = N, E(d, v);
    },
    render: w,
    addToRenderList: C,
    dispose: U
  };
}
function DN(s, e) {
  const n = s.getParameter(s.MAX_VERTEX_ATTRIBS), i = {}, r = M(null);
  let c = r, h = !1;
  function d(z, W, le, ae, oe) {
    let pe = !1;
    const P = x(ae, le, W);
    c !== P && (c = P, g(c.object)), pe = b(z, ae, le, oe), pe && R(z, ae, le, oe), oe !== null && e.update(oe, s.ELEMENT_ARRAY_BUFFER), (pe || h) && (h = !1, O(z, W, le, ae), oe !== null && s.bindBuffer(s.ELEMENT_ARRAY_BUFFER, e.get(oe).buffer));
  }
  function v() {
    return s.createVertexArray();
  }
  function g(z) {
    return s.bindVertexArray(z);
  }
  function S(z) {
    return s.deleteVertexArray(z);
  }
  function x(z, W, le) {
    const ae = le.wireframe === !0;
    let oe = i[z.id];
    oe === void 0 && (oe = {}, i[z.id] = oe);
    let pe = oe[W.id];
    pe === void 0 && (pe = {}, oe[W.id] = pe);
    let P = pe[ae];
    return P === void 0 && (P = M(v()), pe[ae] = P), P;
  }
  function M(z) {
    const W = [], le = [], ae = [];
    for (let oe = 0; oe < n; oe++)
      W[oe] = 0, le[oe] = 0, ae[oe] = 0;
    return {
      // for backward compatibility on non-VAO support browser
      geometry: null,
      program: null,
      wireframe: !1,
      newAttributes: W,
      enabledAttributes: le,
      attributeDivisors: ae,
      object: z,
      attributes: {},
      index: null
    };
  }
  function b(z, W, le, ae) {
    const oe = c.attributes, pe = W.attributes;
    let P = 0;
    const K = le.getAttributes();
    for (const Q in K)
      if (K[Q].location >= 0) {
        const q = oe[Q];
        let te = pe[Q];
        if (te === void 0 && (Q === "instanceMatrix" && z.instanceMatrix && (te = z.instanceMatrix), Q === "instanceColor" && z.instanceColor && (te = z.instanceColor)), q === void 0 || q.attribute !== te || te && q.data !== te.data) return !0;
        P++;
      }
    return c.attributesNum !== P || c.index !== ae;
  }
  function R(z, W, le, ae) {
    const oe = {}, pe = W.attributes;
    let P = 0;
    const K = le.getAttributes();
    for (const Q in K)
      if (K[Q].location >= 0) {
        let q = pe[Q];
        q === void 0 && (Q === "instanceMatrix" && z.instanceMatrix && (q = z.instanceMatrix), Q === "instanceColor" && z.instanceColor && (q = z.instanceColor));
        const te = {};
        te.attribute = q, q && q.data && (te.data = q.data), oe[Q] = te, P++;
      }
    c.attributes = oe, c.attributesNum = P, c.index = ae;
  }
  function w() {
    const z = c.newAttributes;
    for (let W = 0, le = z.length; W < le; W++)
      z[W] = 0;
  }
  function C(z) {
    E(z, 0);
  }
  function E(z, W) {
    const le = c.newAttributes, ae = c.enabledAttributes, oe = c.attributeDivisors;
    le[z] = 1, ae[z] === 0 && (s.enableVertexAttribArray(z), ae[z] = 1), oe[z] !== W && (s.vertexAttribDivisor(z, W), oe[z] = W);
  }
  function U() {
    const z = c.newAttributes, W = c.enabledAttributes;
    for (let le = 0, ae = W.length; le < ae; le++)
      W[le] !== z[le] && (s.disableVertexAttribArray(le), W[le] = 0);
  }
  function N(z, W, le, ae, oe, pe, P) {
    P === !0 ? s.vertexAttribIPointer(z, W, le, oe, pe) : s.vertexAttribPointer(z, W, le, ae, oe, pe);
  }
  function O(z, W, le, ae) {
    w();
    const oe = ae.attributes, pe = le.getAttributes(), P = W.defaultAttributeValues;
    for (const K in pe) {
      const Q = pe[K];
      if (Q.location >= 0) {
        let fe = oe[K];
        if (fe === void 0 && (K === "instanceMatrix" && z.instanceMatrix && (fe = z.instanceMatrix), K === "instanceColor" && z.instanceColor && (fe = z.instanceColor)), fe !== void 0) {
          const q = fe.normalized, te = fe.itemSize, Me = e.get(fe);
          if (Me === void 0) continue;
          const Re = Me.buffer, Ne = Me.type, he = Me.bytesPerElement, we = Ne === s.INT || Ne === s.UNSIGNED_INT || fe.gpuType === V0;
          if (fe.isInterleavedBufferAttribute) {
            const Fe = fe.data, $e = Fe.stride, ut = fe.offset;
            if (Fe.isInstancedInterleavedBuffer) {
              for (let Tt = 0; Tt < Q.locationSize; Tt++)
                E(Q.location + Tt, Fe.meshPerAttribute);
              z.isInstancedMesh !== !0 && ae._maxInstanceCount === void 0 && (ae._maxInstanceCount = Fe.meshPerAttribute * Fe.count);
            } else
              for (let Tt = 0; Tt < Q.locationSize; Tt++)
                C(Q.location + Tt);
            s.bindBuffer(s.ARRAY_BUFFER, Re);
            for (let Tt = 0; Tt < Q.locationSize; Tt++)
              N(
                Q.location + Tt,
                te / Q.locationSize,
                Ne,
                q,
                $e * he,
                (ut + te / Q.locationSize * Tt) * he,
                we
              );
          } else {
            if (fe.isInstancedBufferAttribute) {
              for (let Fe = 0; Fe < Q.locationSize; Fe++)
                E(Q.location + Fe, fe.meshPerAttribute);
              z.isInstancedMesh !== !0 && ae._maxInstanceCount === void 0 && (ae._maxInstanceCount = fe.meshPerAttribute * fe.count);
            } else
              for (let Fe = 0; Fe < Q.locationSize; Fe++)
                C(Q.location + Fe);
            s.bindBuffer(s.ARRAY_BUFFER, Re);
            for (let Fe = 0; Fe < Q.locationSize; Fe++)
              N(
                Q.location + Fe,
                te / Q.locationSize,
                Ne,
                q,
                te * he,
                te / Q.locationSize * Fe * he,
                we
              );
          }
        } else if (P !== void 0) {
          const q = P[K];
          if (q !== void 0)
            switch (q.length) {
              case 2:
                s.vertexAttrib2fv(Q.location, q);
                break;
              case 3:
                s.vertexAttrib3fv(Q.location, q);
                break;
              case 4:
                s.vertexAttrib4fv(Q.location, q);
                break;
              default:
                s.vertexAttrib1fv(Q.location, q);
            }
        }
      }
    }
    U();
  }
  function I() {
    k();
    for (const z in i) {
      const W = i[z];
      for (const le in W) {
        const ae = W[le];
        for (const oe in ae)
          S(ae[oe].object), delete ae[oe];
        delete W[le];
      }
      delete i[z];
    }
  }
  function V(z) {
    if (i[z.id] === void 0) return;
    const W = i[z.id];
    for (const le in W) {
      const ae = W[le];
      for (const oe in ae)
        S(ae[oe].object), delete ae[oe];
      delete W[le];
    }
    delete i[z.id];
  }
  function Y(z) {
    for (const W in i) {
      const le = i[W];
      if (le[z.id] === void 0) continue;
      const ae = le[z.id];
      for (const oe in ae)
        S(ae[oe].object), delete ae[oe];
      delete le[z.id];
    }
  }
  function k() {
    B(), h = !0, c !== r && (c = r, g(c.object));
  }
  function B() {
    r.geometry = null, r.program = null, r.wireframe = !1;
  }
  return {
    setup: d,
    reset: k,
    resetDefaultState: B,
    dispose: I,
    releaseStatesOfGeometry: V,
    releaseStatesOfProgram: Y,
    initAttributes: w,
    enableAttribute: C,
    disableUnusedAttributes: U
  };
}
function UN(s, e, n) {
  let i;
  function r(g) {
    i = g;
  }
  function c(g, S) {
    s.drawArrays(i, g, S), n.update(S, i, 1);
  }
  function h(g, S, x) {
    x !== 0 && (s.drawArraysInstanced(i, g, S, x), n.update(S, i, x));
  }
  function d(g, S, x) {
    if (x === 0) return;
    e.get("WEBGL_multi_draw").multiDrawArraysWEBGL(i, g, 0, S, 0, x);
    let b = 0;
    for (let R = 0; R < x; R++)
      b += S[R];
    n.update(b, i, 1);
  }
  function v(g, S, x, M) {
    if (x === 0) return;
    const b = e.get("WEBGL_multi_draw");
    if (b === null)
      for (let R = 0; R < g.length; R++)
        h(g[R], S[R], M[R]);
    else {
      b.multiDrawArraysInstancedWEBGL(i, g, 0, S, 0, M, 0, x);
      let R = 0;
      for (let w = 0; w < x; w++)
        R += S[w] * M[w];
      n.update(R, i, 1);
    }
  }
  this.setMode = r, this.render = c, this.renderInstances = h, this.renderMultiDraw = d, this.renderMultiDrawInstances = v;
}
function NN(s, e, n, i) {
  let r;
  function c() {
    if (r !== void 0) return r;
    if (e.has("EXT_texture_filter_anisotropic") === !0) {
      const Y = e.get("EXT_texture_filter_anisotropic");
      r = s.getParameter(Y.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
    } else
      r = 0;
    return r;
  }
  function h(Y) {
    return !(Y !== Ca && i.convert(Y) !== s.getParameter(s.IMPLEMENTATION_COLOR_READ_FORMAT));
  }
  function d(Y) {
    const k = Y === nf && (e.has("EXT_color_buffer_half_float") || e.has("EXT_color_buffer_float"));
    return !(Y !== Da && i.convert(Y) !== s.getParameter(s.IMPLEMENTATION_COLOR_READ_TYPE) && // Edge and Chrome Mac < 52 (#9513)
    Y !== es && !k);
  }
  function v(Y) {
    if (Y === "highp") {
      if (s.getShaderPrecisionFormat(s.VERTEX_SHADER, s.HIGH_FLOAT).precision > 0 && s.getShaderPrecisionFormat(s.FRAGMENT_SHADER, s.HIGH_FLOAT).precision > 0)
        return "highp";
      Y = "mediump";
    }
    return Y === "mediump" && s.getShaderPrecisionFormat(s.VERTEX_SHADER, s.MEDIUM_FLOAT).precision > 0 && s.getShaderPrecisionFormat(s.FRAGMENT_SHADER, s.MEDIUM_FLOAT).precision > 0 ? "mediump" : "lowp";
  }
  let g = n.precision !== void 0 ? n.precision : "highp";
  const S = v(g);
  S !== g && (console.warn("THREE.WebGLRenderer:", g, "not supported, using", S, "instead."), g = S);
  const x = n.logarithmicDepthBuffer === !0, M = n.reversedDepthBuffer === !0 && e.has("EXT_clip_control"), b = s.getParameter(s.MAX_TEXTURE_IMAGE_UNITS), R = s.getParameter(s.MAX_VERTEX_TEXTURE_IMAGE_UNITS), w = s.getParameter(s.MAX_TEXTURE_SIZE), C = s.getParameter(s.MAX_CUBE_MAP_TEXTURE_SIZE), E = s.getParameter(s.MAX_VERTEX_ATTRIBS), U = s.getParameter(s.MAX_VERTEX_UNIFORM_VECTORS), N = s.getParameter(s.MAX_VARYING_VECTORS), O = s.getParameter(s.MAX_FRAGMENT_UNIFORM_VECTORS), I = R > 0, V = s.getParameter(s.MAX_SAMPLES);
  return {
    isWebGL2: !0,
    // keeping this for backwards compatibility
    getMaxAnisotropy: c,
    getMaxPrecision: v,
    textureFormatReadable: h,
    textureTypeReadable: d,
    precision: g,
    logarithmicDepthBuffer: x,
    reversedDepthBuffer: M,
    maxTextures: b,
    maxVertexTextures: R,
    maxTextureSize: w,
    maxCubemapSize: C,
    maxAttributes: E,
    maxVertexUniforms: U,
    maxVaryings: N,
    maxFragmentUniforms: O,
    vertexTextures: I,
    maxSamples: V
  };
}
function ON(s) {
  const e = this;
  let n = null, i = 0, r = !1, c = !1;
  const h = new bc(), d = new Qt(), v = { value: null, needsUpdate: !1 };
  this.uniform = v, this.numPlanes = 0, this.numIntersection = 0, this.init = function(x, M) {
    const b = x.length !== 0 || M || // enable state of previous frame - the clipping code has to
    // run another frame in order to reset the state:
    i !== 0 || r;
    return r = M, i = x.length, b;
  }, this.beginShadows = function() {
    c = !0, S(null);
  }, this.endShadows = function() {
    c = !1;
  }, this.setGlobalState = function(x, M) {
    n = S(x, M, 0);
  }, this.setState = function(x, M, b) {
    const R = x.clippingPlanes, w = x.clipIntersection, C = x.clipShadows, E = s.get(x);
    if (!r || R === null || R.length === 0 || c && !C)
      c ? S(null) : g();
    else {
      const U = c ? 0 : i, N = U * 4;
      let O = E.clippingState || null;
      v.value = O, O = S(R, M, N, b);
      for (let I = 0; I !== N; ++I)
        O[I] = n[I];
      E.clippingState = O, this.numIntersection = w ? this.numPlanes : 0, this.numPlanes += U;
    }
  };
  function g() {
    v.value !== n && (v.value = n, v.needsUpdate = i > 0), e.numPlanes = i, e.numIntersection = 0;
  }
  function S(x, M, b, R) {
    const w = x !== null ? x.length : 0;
    let C = null;
    if (w !== 0) {
      if (C = v.value, R !== !0 || C === null) {
        const E = b + w * 4, U = M.matrixWorldInverse;
        d.getNormalMatrix(U), (C === null || C.length < E) && (C = new Float32Array(E));
        for (let N = 0, O = b; N !== w; ++N, O += 4)
          h.copy(x[N]).applyMatrix4(U, d), h.normal.toArray(C, O), C[O + 3] = h.constant;
      }
      v.value = C, v.needsUpdate = !0;
    }
    return e.numPlanes = w, e.numIntersection = 0, C;
  }
}
function LN(s) {
  let e = /* @__PURE__ */ new WeakMap();
  function n(h, d) {
    return d === qp ? h.mapping = Sl : d === Yp && (h.mapping = Rc), h;
  }
  function i(h) {
    if (h && h.isTexture) {
      const d = h.mapping;
      if (d === qp || d === Yp)
        if (e.has(h)) {
          const v = e.get(h).texture;
          return n(v, h.mapping);
        } else {
          const v = h.image;
          if (v && v.height > 0) {
            const g = new CE(v.height);
            return g.fromEquirectangularTexture(s, h), e.set(h, g), h.addEventListener("dispose", r), n(g.texture, h.mapping);
          } else
            return null;
        }
    }
    return h;
  }
  function r(h) {
    const d = h.target;
    d.removeEventListener("dispose", r);
    const v = e.get(d);
    v !== void 0 && (e.delete(d), v.dispose());
  }
  function c() {
    e = /* @__PURE__ */ new WeakMap();
  }
  return {
    get: i,
    dispose: c
  };
}
const Bh = 4, NM = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582], Fu = 20, Y_ = /* @__PURE__ */ new _m(), OM = /* @__PURE__ */ new lt();
let k_ = null, W_ = 0, Z_ = 0, j_ = !1;
const Gu = (1 + Math.sqrt(5)) / 2, wh = 1 / Gu, LM = [
  /* @__PURE__ */ new j(-Gu, wh, 0),
  /* @__PURE__ */ new j(Gu, wh, 0),
  /* @__PURE__ */ new j(-wh, 0, Gu),
  /* @__PURE__ */ new j(wh, 0, Gu),
  /* @__PURE__ */ new j(0, Gu, -wh),
  /* @__PURE__ */ new j(0, Gu, wh),
  /* @__PURE__ */ new j(-1, 1, -1),
  /* @__PURE__ */ new j(1, 1, -1),
  /* @__PURE__ */ new j(-1, 1, 1),
  /* @__PURE__ */ new j(1, 1, 1)
], zN = /* @__PURE__ */ new j();
class DS {
  /**
   * Constructs a new PMREM generator.
   *
   * @param {WebGLRenderer} renderer - The renderer.
   */
  constructor(e) {
    this._renderer = e, this._pingPongRenderTarget = null, this._lodMax = 0, this._cubeSize = 0, this._lodPlanes = [], this._sizeLods = [], this._sigmas = [], this._blurMaterial = null, this._cubemapMaterial = null, this._equirectMaterial = null, this._compileMaterial(this._blurMaterial);
  }
  /**
   * Generates a PMREM from a supplied Scene, which can be faster than using an
   * image if networking bandwidth is low. Optional sigma specifies a blur radius
   * in radians to be applied to the scene before PMREM generation. Optional near
   * and far planes ensure the scene is rendered in its entirety.
   *
   * @param {Scene} scene - The scene to be captured.
   * @param {number} [sigma=0] - The blur radius in radians.
   * @param {number} [near=0.1] - The near plane distance.
   * @param {number} [far=100] - The far plane distance.
   * @param {Object} [options={}] - The configuration options.
   * @param {number} [options.size=256] - The texture size of the PMREM.
   * @param {Vector3} [options.renderTarget=origin] - The position of the internal cube camera that renders the scene.
   * @return {WebGLRenderTarget} The resulting PMREM.
   */
  fromScene(e, n = 0, i = 0.1, r = 100, c = {}) {
    const {
      size: h = 256,
      position: d = zN
    } = c;
    k_ = this._renderer.getRenderTarget(), W_ = this._renderer.getActiveCubeFace(), Z_ = this._renderer.getActiveMipmapLevel(), j_ = this._renderer.xr.enabled, this._renderer.xr.enabled = !1, this._setSize(h);
    const v = this._allocateTargets();
    return v.depthBuffer = !0, this._sceneToCubeUV(e, i, r, v, d), n > 0 && this._blur(v, 0, 0, n), this._applyPMREM(v), this._cleanup(v), v;
  }
  /**
   * Generates a PMREM from an equirectangular texture, which can be either LDR
   * or HDR. The ideal input image size is 1k (1024 x 512),
   * as this matches best with the 256 x 256 cubemap output.
   *
   * @param {Texture} equirectangular - The equirectangular texture to be converted.
   * @param {?WebGLRenderTarget} [renderTarget=null] - The render target to use.
   * @return {WebGLRenderTarget} The resulting PMREM.
   */
  fromEquirectangular(e, n = null) {
    return this._fromTexture(e, n);
  }
  /**
   * Generates a PMREM from an cubemap texture, which can be either LDR
   * or HDR. The ideal input cube size is 256 x 256,
   * as this matches best with the 256 x 256 cubemap output.
   *
   * @param {Texture} cubemap - The cubemap texture to be converted.
   * @param {?WebGLRenderTarget} [renderTarget=null] - The render target to use.
   * @return {WebGLRenderTarget} The resulting PMREM.
   */
  fromCubemap(e, n = null) {
    return this._fromTexture(e, n);
  }
  /**
   * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during
   * your texture's network fetch for increased concurrency.
   */
  compileCubemapShader() {
    this._cubemapMaterial === null && (this._cubemapMaterial = PM(), this._compileMaterial(this._cubemapMaterial));
  }
  /**
   * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during
   * your texture's network fetch for increased concurrency.
   */
  compileEquirectangularShader() {
    this._equirectMaterial === null && (this._equirectMaterial = BM(), this._compileMaterial(this._equirectMaterial));
  }
  /**
   * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,
   * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on
   * one of them will cause any others to also become unusable.
   */
  dispose() {
    this._dispose(), this._cubemapMaterial !== null && this._cubemapMaterial.dispose(), this._equirectMaterial !== null && this._equirectMaterial.dispose();
  }
  // private interface
  _setSize(e) {
    this._lodMax = Math.floor(Math.log2(e)), this._cubeSize = Math.pow(2, this._lodMax);
  }
  _dispose() {
    this._blurMaterial !== null && this._blurMaterial.dispose(), this._pingPongRenderTarget !== null && this._pingPongRenderTarget.dispose();
    for (let e = 0; e < this._lodPlanes.length; e++)
      this._lodPlanes[e].dispose();
  }
  _cleanup(e) {
    this._renderer.setRenderTarget(k_, W_, Z_), this._renderer.xr.enabled = j_, e.scissorTest = !1, Hg(e, 0, 0, e.width, e.height);
  }
  _fromTexture(e, n) {
    e.mapping === Sl || e.mapping === Rc ? this._setSize(e.image.length === 0 ? 16 : e.image[0].width || e.image[0].image.width) : this._setSize(e.image.width / 4), k_ = this._renderer.getRenderTarget(), W_ = this._renderer.getActiveCubeFace(), Z_ = this._renderer.getActiveMipmapLevel(), j_ = this._renderer.xr.enabled, this._renderer.xr.enabled = !1;
    const i = n || this._allocateTargets();
    return this._textureToCubeUV(e, i), this._applyPMREM(i), this._cleanup(i), i;
  }
  _allocateTargets() {
    const e = 3 * Math.max(this._cubeSize, 112), n = 4 * this._cubeSize, i = {
      magFilter: di,
      minFilter: di,
      generateMipmaps: !1,
      type: nf,
      format: Ca,
      colorSpace: Ho,
      depthBuffer: !1
    }, r = zM(e, n, i);
    if (this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== e || this._pingPongRenderTarget.height !== n) {
      this._pingPongRenderTarget !== null && this._dispose(), this._pingPongRenderTarget = zM(e, n, i);
      const { _lodMax: c } = this;
      ({ sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas } = BN(c)), this._blurMaterial = PN(c, e, n);
    }
    return r;
  }
  _compileMaterial(e) {
    const n = new Ci(this._lodPlanes[0], e);
    this._renderer.compile(n, Y_);
  }
  _sceneToCubeUV(e, n, i, r, c) {
    const v = new Zi(90, 1, n, i), g = [1, -1, 1, 1, 1, 1], S = [1, 1, 1, -1, -1, -1], x = this._renderer, M = x.autoClear, b = x.toneMapping;
    x.getClearColor(OM), x.toneMapping = Wr, x.autoClear = !1, x.state.buffers.depth.getReversed() && (x.setRenderTarget(r), x.clearDepth(), x.setRenderTarget(null));
    const w = new Uc({
      name: "PMREM.Background",
      side: ji,
      depthWrite: !1,
      depthTest: !1
    }), C = new Ci(new af(), w);
    let E = !1;
    const U = e.background;
    U ? U.isColor && (w.color.copy(U), e.background = null, E = !0) : (w.color.copy(OM), E = !0);
    for (let N = 0; N < 6; N++) {
      const O = N % 3;
      O === 0 ? (v.up.set(0, g[N], 0), v.position.set(c.x, c.y, c.z), v.lookAt(c.x + S[N], c.y, c.z)) : O === 1 ? (v.up.set(0, 0, g[N]), v.position.set(c.x, c.y, c.z), v.lookAt(c.x, c.y + S[N], c.z)) : (v.up.set(0, g[N], 0), v.position.set(c.x, c.y, c.z), v.lookAt(c.x, c.y, c.z + S[N]));
      const I = this._cubeSize;
      Hg(r, O * I, N > 2 ? I : 0, I, I), x.setRenderTarget(r), E && x.render(C, v), x.render(e, v);
    }
    C.geometry.dispose(), C.material.dispose(), x.toneMapping = b, x.autoClear = M, e.background = U;
  }
  _textureToCubeUV(e, n) {
    const i = this._renderer, r = e.mapping === Sl || e.mapping === Rc;
    r ? (this._cubemapMaterial === null && (this._cubemapMaterial = PM()), this._cubemapMaterial.uniforms.flipEnvMap.value = e.isRenderTargetTexture === !1 ? -1 : 1) : this._equirectMaterial === null && (this._equirectMaterial = BM());
    const c = r ? this._cubemapMaterial : this._equirectMaterial, h = new Ci(this._lodPlanes[0], c), d = c.uniforms;
    d.envMap.value = e;
    const v = this._cubeSize;
    Hg(n, 0, 0, 3 * v, 2 * v), i.setRenderTarget(n), i.render(h, Y_);
  }
  _applyPMREM(e) {
    const n = this._renderer, i = n.autoClear;
    n.autoClear = !1;
    const r = this._lodPlanes.length;
    for (let c = 1; c < r; c++) {
      const h = Math.sqrt(this._sigmas[c] * this._sigmas[c] - this._sigmas[c - 1] * this._sigmas[c - 1]), d = LM[(r - c - 1) % LM.length];
      this._blur(e, c - 1, c, h, d);
    }
    n.autoClear = i;
  }
  /**
   * This is a two-pass Gaussian blur for a cubemap. Normally this is done
   * vertically and horizontally, but this breaks down on a cube. Here we apply
   * the blur latitudinally (around the poles), and then longitudinally (towards
   * the poles) to approximate the orthogonally-separable blur. It is least
   * accurate at the poles, but still does a decent job.
   *
   * @private
   * @param {WebGLRenderTarget} cubeUVRenderTarget
   * @param {number} lodIn
   * @param {number} lodOut
   * @param {number} sigma
   * @param {Vector3} [poleAxis]
   */
  _blur(e, n, i, r, c) {
    const h = this._pingPongRenderTarget;
    this._halfBlur(
      e,
      h,
      n,
      i,
      r,
      "latitudinal",
      c
    ), this._halfBlur(
      h,
      e,
      i,
      i,
      r,
      "longitudinal",
      c
    );
  }
  _halfBlur(e, n, i, r, c, h, d) {
    const v = this._renderer, g = this._blurMaterial;
    h !== "latitudinal" && h !== "longitudinal" && console.error(
      "blur direction must be either latitudinal or longitudinal!"
    );
    const S = 3, x = new Ci(this._lodPlanes[r], g), M = g.uniforms, b = this._sizeLods[i] - 1, R = isFinite(c) ? Math.PI / (2 * b) : 2 * Math.PI / (2 * Fu - 1), w = c / R, C = isFinite(c) ? 1 + Math.floor(S * w) : Fu;
    C > Fu && console.warn(`sigmaRadians, ${c}, is too large and will clip, as it requested ${C} samples when the maximum is set to ${Fu}`);
    const E = [];
    let U = 0;
    for (let Y = 0; Y < Fu; ++Y) {
      const k = Y / w, B = Math.exp(-k * k / 2);
      E.push(B), Y === 0 ? U += B : Y < C && (U += 2 * B);
    }
    for (let Y = 0; Y < E.length; Y++)
      E[Y] = E[Y] / U;
    M.envMap.value = e.texture, M.samples.value = C, M.weights.value = E, M.latitudinal.value = h === "latitudinal", d && (M.poleAxis.value = d);
    const { _lodMax: N } = this;
    M.dTheta.value = R, M.mipInt.value = N - i;
    const O = this._sizeLods[r], I = 3 * O * (r > N - Bh ? r - N + Bh : 0), V = 4 * (this._cubeSize - O);
    Hg(n, I, V, 3 * O, 2 * O), v.setRenderTarget(n), v.render(x, Y_);
  }
}
function BN(s) {
  const e = [], n = [], i = [];
  let r = s;
  const c = s - Bh + 1 + NM.length;
  for (let h = 0; h < c; h++) {
    const d = Math.pow(2, r);
    n.push(d);
    let v = 1 / d;
    h > s - Bh ? v = NM[h - s + Bh - 1] : h === 0 && (v = 0), i.push(v);
    const g = 1 / (d - 2), S = -g, x = 1 + g, M = [S, S, x, S, x, x, S, S, x, x, S, x], b = 6, R = 6, w = 3, C = 2, E = 1, U = new Float32Array(w * R * b), N = new Float32Array(C * R * b), O = new Float32Array(E * R * b);
    for (let V = 0; V < b; V++) {
      const Y = V % 3 * 2 / 3 - 1, k = V > 2 ? 0 : -1, B = [
        Y,
        k,
        0,
        Y + 2 / 3,
        k,
        0,
        Y + 2 / 3,
        k + 1,
        0,
        Y,
        k,
        0,
        Y + 2 / 3,
        k + 1,
        0,
        Y,
        k + 1,
        0
      ];
      U.set(B, w * R * V), N.set(M, C * R * V);
      const z = [V, V, V, V, V, V];
      O.set(z, E * R * V);
    }
    const I = new Kt();
    I.setAttribute("position", new Nn(U, w)), I.setAttribute("uv", new Nn(N, C)), I.setAttribute("faceIndex", new Nn(O, E)), e.push(I), r > Bh && r--;
  }
  return { lodPlanes: e, sizeLods: n, sigmas: i };
}
function zM(s, e, n) {
  const i = new Ua(s, e, n);
  return i.texture.mapping = Qh, i.texture.name = "PMREM.cubeUv", i.scissorTest = !0, i;
}
function Hg(s, e, n, i, r) {
  s.viewport.set(e, n, i, r), s.scissor.set(e, n, i, r);
}
function PN(s, e, n) {
  const i = new Float32Array(Fu), r = new j(0, 1, 0);
  return new ts({
    name: "SphericalGaussianBlur",
    defines: {
      n: Fu,
      CUBEUV_TEXEL_WIDTH: 1 / e,
      CUBEUV_TEXEL_HEIGHT: 1 / n,
      CUBEUV_MAX_MIP: `${s}.0`
    },
    uniforms: {
      envMap: { value: null },
      samples: { value: 1 },
      weights: { value: i },
      latitudinal: { value: !1 },
      dTheta: { value: 0 },
      mipInt: { value: 0 },
      poleAxis: { value: r }
    },
    vertexShader: Tx(),
    fragmentShader: (
      /* glsl */
      `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`
    ),
    blending: dr,
    depthTest: !1,
    depthWrite: !1
  });
}
function BM() {
  return new ts({
    name: "EquirectangularToCubeUV",
    uniforms: {
      envMap: { value: null }
    },
    vertexShader: Tx(),
    fragmentShader: (
      /* glsl */
      `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`
    ),
    blending: dr,
    depthTest: !1,
    depthWrite: !1
  });
}
function PM() {
  return new ts({
    name: "CubemapToCubeUV",
    uniforms: {
      envMap: { value: null },
      flipEnvMap: { value: -1 }
    },
    vertexShader: Tx(),
    fragmentShader: (
      /* glsl */
      `

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`
    ),
    blending: dr,
    depthTest: !1,
    depthWrite: !1
  });
}
function Tx() {
  return (
    /* glsl */
    `

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`
  );
}
function IN(s) {
  let e = /* @__PURE__ */ new WeakMap(), n = null;
  function i(d) {
    if (d && d.isTexture) {
      const v = d.mapping, g = v === qp || v === Yp, S = v === Sl || v === Rc;
      if (g || S) {
        let x = e.get(d);
        const M = x !== void 0 ? x.texture.pmremVersion : 0;
        if (d.isRenderTargetTexture && d.pmremVersion !== M)
          return n === null && (n = new DS(s)), x = g ? n.fromEquirectangular(d, x) : n.fromCubemap(d, x), x.texture.pmremVersion = d.pmremVersion, e.set(d, x), x.texture;
        if (x !== void 0)
          return x.texture;
        {
          const b = d.image;
          return g && b && b.height > 0 || S && b && r(b) ? (n === null && (n = new DS(s)), x = g ? n.fromEquirectangular(d) : n.fromCubemap(d), x.texture.pmremVersion = d.pmremVersion, e.set(d, x), d.addEventListener("dispose", c), x.texture) : null;
        }
      }
    }
    return d;
  }
  function r(d) {
    let v = 0;
    const g = 6;
    for (let S = 0; S < g; S++)
      d[S] !== void 0 && v++;
    return v === g;
  }
  function c(d) {
    const v = d.target;
    v.removeEventListener("dispose", c);
    const g = e.get(v);
    g !== void 0 && (e.delete(v), g.dispose());
  }
  function h() {
    e = /* @__PURE__ */ new WeakMap(), n !== null && (n.dispose(), n = null);
  }
  return {
    get: i,
    dispose: h
  };
}
function HN(s) {
  const e = {};
  function n(i) {
    if (e[i] !== void 0)
      return e[i];
    let r;
    switch (i) {
      case "WEBGL_depth_texture":
        r = s.getExtension("WEBGL_depth_texture") || s.getExtension("MOZ_WEBGL_depth_texture") || s.getExtension("WEBKIT_WEBGL_depth_texture");
        break;
      case "EXT_texture_filter_anisotropic":
        r = s.getExtension("EXT_texture_filter_anisotropic") || s.getExtension("MOZ_EXT_texture_filter_anisotropic") || s.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
        break;
      case "WEBGL_compressed_texture_s3tc":
        r = s.getExtension("WEBGL_compressed_texture_s3tc") || s.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || s.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
        break;
      case "WEBGL_compressed_texture_pvrtc":
        r = s.getExtension("WEBGL_compressed_texture_pvrtc") || s.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
        break;
      default:
        r = s.getExtension(i);
    }
    return e[i] = r, r;
  }
  return {
    has: function(i) {
      return n(i) !== null;
    },
    init: function() {
      n("EXT_color_buffer_float"), n("WEBGL_clip_cull_distance"), n("OES_texture_float_linear"), n("EXT_color_buffer_half_float"), n("WEBGL_multisampled_render_to_texture"), n("WEBGL_render_shared_exponent");
    },
    get: function(i) {
      const r = n(i);
      return r === null && Ph("THREE.WebGLRenderer: " + i + " extension not supported."), r;
    }
  };
}
function VN(s, e, n, i) {
  const r = {}, c = /* @__PURE__ */ new WeakMap();
  function h(x) {
    const M = x.target;
    M.index !== null && e.remove(M.index);
    for (const R in M.attributes)
      e.remove(M.attributes[R]);
    M.removeEventListener("dispose", h), delete r[M.id];
    const b = c.get(M);
    b && (e.remove(b), c.delete(M)), i.releaseStatesOfGeometry(M), M.isInstancedBufferGeometry === !0 && delete M._maxInstanceCount, n.memory.geometries--;
  }
  function d(x, M) {
    return r[M.id] === !0 || (M.addEventListener("dispose", h), r[M.id] = !0, n.memory.geometries++), M;
  }
  function v(x) {
    const M = x.attributes;
    for (const b in M)
      e.update(M[b], s.ARRAY_BUFFER);
  }
  function g(x) {
    const M = [], b = x.index, R = x.attributes.position;
    let w = 0;
    if (b !== null) {
      const U = b.array;
      w = b.version;
      for (let N = 0, O = U.length; N < O; N += 3) {
        const I = U[N + 0], V = U[N + 1], Y = U[N + 2];
        M.push(I, V, V, Y, Y, I);
      }
    } else if (R !== void 0) {
      const U = R.array;
      w = R.version;
      for (let N = 0, O = U.length / 3 - 1; N < O; N += 3) {
        const I = N + 0, V = N + 1, Y = N + 2;
        M.push(I, V, V, Y, Y, I);
      }
    } else
      return;
    const C = new (xE(M) ? tx : ex)(M, 1);
    C.version = w;
    const E = c.get(x);
    E && e.remove(E), c.set(x, C);
  }
  function S(x) {
    const M = c.get(x);
    if (M) {
      const b = x.index;
      b !== null && M.version < b.version && g(x);
    } else
      g(x);
    return c.get(x);
  }
  return {
    get: d,
    update: v,
    getWireframeAttribute: S
  };
}
function GN(s, e, n) {
  let i;
  function r(M) {
    i = M;
  }
  let c, h;
  function d(M) {
    c = M.type, h = M.bytesPerElement;
  }
  function v(M, b) {
    s.drawElements(i, b, c, M * h), n.update(b, i, 1);
  }
  function g(M, b, R) {
    R !== 0 && (s.drawElementsInstanced(i, b, c, M * h, R), n.update(b, i, R));
  }
  function S(M, b, R) {
    if (R === 0) return;
    e.get("WEBGL_multi_draw").multiDrawElementsWEBGL(i, b, 0, c, M, 0, R);
    let C = 0;
    for (let E = 0; E < R; E++)
      C += b[E];
    n.update(C, i, 1);
  }
  function x(M, b, R, w) {
    if (R === 0) return;
    const C = e.get("WEBGL_multi_draw");
    if (C === null)
      for (let E = 0; E < M.length; E++)
        g(M[E] / h, b[E], w[E]);
    else {
      C.multiDrawElementsInstancedWEBGL(i, b, 0, c, M, 0, w, 0, R);
      let E = 0;
      for (let U = 0; U < R; U++)
        E += b[U] * w[U];
      n.update(E, i, 1);
    }
  }
  this.setMode = r, this.setIndex = d, this.render = v, this.renderInstances = g, this.renderMultiDraw = S, this.renderMultiDrawInstances = x;
}
function FN(s) {
  const e = {
    geometries: 0,
    textures: 0
  }, n = {
    frame: 0,
    calls: 0,
    triangles: 0,
    points: 0,
    lines: 0
  };
  function i(c, h, d) {
    switch (n.calls++, h) {
      case s.TRIANGLES:
        n.triangles += d * (c / 3);
        break;
      case s.LINES:
        n.lines += d * (c / 2);
        break;
      case s.LINE_STRIP:
        n.lines += d * (c - 1);
        break;
      case s.LINE_LOOP:
        n.lines += d * c;
        break;
      case s.POINTS:
        n.points += d * c;
        break;
      default:
        console.error("THREE.WebGLInfo: Unknown draw mode:", h);
        break;
    }
  }
  function r() {
    n.calls = 0, n.triangles = 0, n.points = 0, n.lines = 0;
  }
  return {
    memory: e,
    render: n,
    programs: null,
    autoReset: !0,
    reset: r,
    update: i
  };
}
function XN(s, e, n) {
  const i = /* @__PURE__ */ new WeakMap(), r = new xn();
  function c(h, d, v) {
    const g = h.morphTargetInfluences, S = d.morphAttributes.position || d.morphAttributes.normal || d.morphAttributes.color, x = S !== void 0 ? S.length : 0;
    let M = i.get(d);
    if (M === void 0 || M.count !== x) {
      let b = function() {
        k.dispose(), i.delete(d), d.removeEventListener("dispose", b);
      };
      M !== void 0 && M.texture.dispose();
      const R = d.morphAttributes.position !== void 0, w = d.morphAttributes.normal !== void 0, C = d.morphAttributes.color !== void 0, E = d.morphAttributes.position || [], U = d.morphAttributes.normal || [], N = d.morphAttributes.color || [];
      let O = 0;
      R === !0 && (O = 1), w === !0 && (O = 2), C === !0 && (O = 3);
      let I = d.attributes.position.count * O, V = 1;
      I > e.maxTextureSize && (V = Math.ceil(I / e.maxTextureSize), I = e.maxTextureSize);
      const Y = new Float32Array(I * V * 4 * x), k = new W0(Y, I, V, x);
      k.type = es, k.needsUpdate = !0;
      const B = O * 4;
      for (let z = 0; z < x; z++) {
        const W = E[z], le = U[z], ae = N[z], oe = I * V * 4 * z;
        for (let pe = 0; pe < W.count; pe++) {
          const P = pe * B;
          R === !0 && (r.fromBufferAttribute(W, pe), Y[oe + P + 0] = r.x, Y[oe + P + 1] = r.y, Y[oe + P + 2] = r.z, Y[oe + P + 3] = 0), w === !0 && (r.fromBufferAttribute(le, pe), Y[oe + P + 4] = r.x, Y[oe + P + 5] = r.y, Y[oe + P + 6] = r.z, Y[oe + P + 7] = 0), C === !0 && (r.fromBufferAttribute(ae, pe), Y[oe + P + 8] = r.x, Y[oe + P + 9] = r.y, Y[oe + P + 10] = r.z, Y[oe + P + 11] = ae.itemSize === 4 ? r.w : 1);
        }
      }
      M = {
        count: x,
        texture: k,
        size: new De(I, V)
      }, i.set(d, M), d.addEventListener("dispose", b);
    }
    if (h.isInstancedMesh === !0 && h.morphTexture !== null)
      v.getUniforms().setValue(s, "morphTexture", h.morphTexture, n);
    else {
      let b = 0;
      for (let w = 0; w < g.length; w++)
        b += g[w];
      const R = d.morphTargetsRelative ? 1 : 1 - b;
      v.getUniforms().setValue(s, "morphTargetBaseInfluence", R), v.getUniforms().setValue(s, "morphTargetInfluences", g);
    }
    v.getUniforms().setValue(s, "morphTargetsTexture", M.texture, n), v.getUniforms().setValue(s, "morphTargetsTextureSize", M.size);
  }
  return {
    update: c
  };
}
function qN(s, e, n, i) {
  let r = /* @__PURE__ */ new WeakMap();
  function c(v) {
    const g = i.render.frame, S = v.geometry, x = e.get(v, S);
    if (r.get(x) !== g && (e.update(x), r.set(x, g)), v.isInstancedMesh && (v.hasEventListener("dispose", d) === !1 && v.addEventListener("dispose", d), r.get(v) !== g && (n.update(v.instanceMatrix, s.ARRAY_BUFFER), v.instanceColor !== null && n.update(v.instanceColor, s.ARRAY_BUFFER), r.set(v, g))), v.isSkinnedMesh) {
      const M = v.skeleton;
      r.get(M) !== g && (M.update(), r.set(M, g));
    }
    return x;
  }
  function h() {
    r = /* @__PURE__ */ new WeakMap();
  }
  function d(v) {
    const g = v.target;
    g.removeEventListener("dispose", d), n.remove(g.instanceMatrix), g.instanceColor !== null && n.remove(g.instanceColor);
  }
  return {
    update: c,
    dispose: h
  };
}
const AT = /* @__PURE__ */ new si(), IM = /* @__PURE__ */ new ty(1, 1), RT = /* @__PURE__ */ new W0(), CT = /* @__PURE__ */ new Z0(), wT = /* @__PURE__ */ new hm(), HM = [], VM = [], GM = new Float32Array(16), FM = new Float32Array(9), XM = new Float32Array(4);
function ed(s, e, n) {
  const i = s[0];
  if (i <= 0 || i > 0) return s;
  const r = e * n;
  let c = HM[r];
  if (c === void 0 && (c = new Float32Array(r), HM[r] = c), e !== 0) {
    i.toArray(c, 0);
    for (let h = 1, d = 0; h !== e; ++h)
      d += n, s[h].toArray(c, d);
  }
  return c;
}
function Qi(s, e) {
  if (s.length !== e.length) return !1;
  for (let n = 0, i = s.length; n < i; n++)
    if (s[n] !== e[n]) return !1;
  return !0;
}
function Ki(s, e) {
  for (let n = 0, i = e.length; n < i; n++)
    s[n] = e[n];
}
function vy(s, e) {
  let n = VM[e];
  n === void 0 && (n = new Int32Array(e), VM[e] = n);
  for (let i = 0; i !== e; ++i)
    n[i] = s.allocateTextureUnit();
  return n;
}
function YN(s, e) {
  const n = this.cache;
  n[0] !== e && (s.uniform1f(this.addr, e), n[0] = e);
}
function kN(s, e) {
  const n = this.cache;
  if (e.x !== void 0)
    (n[0] !== e.x || n[1] !== e.y) && (s.uniform2f(this.addr, e.x, e.y), n[0] = e.x, n[1] = e.y);
  else {
    if (Qi(n, e)) return;
    s.uniform2fv(this.addr, e), Ki(n, e);
  }
}
function WN(s, e) {
  const n = this.cache;
  if (e.x !== void 0)
    (n[0] !== e.x || n[1] !== e.y || n[2] !== e.z) && (s.uniform3f(this.addr, e.x, e.y, e.z), n[0] = e.x, n[1] = e.y, n[2] = e.z);
  else if (e.r !== void 0)
    (n[0] !== e.r || n[1] !== e.g || n[2] !== e.b) && (s.uniform3f(this.addr, e.r, e.g, e.b), n[0] = e.r, n[1] = e.g, n[2] = e.b);
  else {
    if (Qi(n, e)) return;
    s.uniform3fv(this.addr, e), Ki(n, e);
  }
}
function ZN(s, e) {
  const n = this.cache;
  if (e.x !== void 0)
    (n[0] !== e.x || n[1] !== e.y || n[2] !== e.z || n[3] !== e.w) && (s.uniform4f(this.addr, e.x, e.y, e.z, e.w), n[0] = e.x, n[1] = e.y, n[2] = e.z, n[3] = e.w);
  else {
    if (Qi(n, e)) return;
    s.uniform4fv(this.addr, e), Ki(n, e);
  }
}
function jN(s, e) {
  const n = this.cache, i = e.elements;
  if (i === void 0) {
    if (Qi(n, e)) return;
    s.uniformMatrix2fv(this.addr, !1, e), Ki(n, e);
  } else {
    if (Qi(n, i)) return;
    XM.set(i), s.uniformMatrix2fv(this.addr, !1, XM), Ki(n, i);
  }
}
function QN(s, e) {
  const n = this.cache, i = e.elements;
  if (i === void 0) {
    if (Qi(n, e)) return;
    s.uniformMatrix3fv(this.addr, !1, e), Ki(n, e);
  } else {
    if (Qi(n, i)) return;
    FM.set(i), s.uniformMatrix3fv(this.addr, !1, FM), Ki(n, i);
  }
}
function KN(s, e) {
  const n = this.cache, i = e.elements;
  if (i === void 0) {
    if (Qi(n, e)) return;
    s.uniformMatrix4fv(this.addr, !1, e), Ki(n, e);
  } else {
    if (Qi(n, i)) return;
    GM.set(i), s.uniformMatrix4fv(this.addr, !1, GM), Ki(n, i);
  }
}
function JN(s, e) {
  const n = this.cache;
  n[0] !== e && (s.uniform1i(this.addr, e), n[0] = e);
}
function $N(s, e) {
  const n = this.cache;
  if (e.x !== void 0)
    (n[0] !== e.x || n[1] !== e.y) && (s.uniform2i(this.addr, e.x, e.y), n[0] = e.x, n[1] = e.y);
  else {
    if (Qi(n, e)) return;
    s.uniform2iv(this.addr, e), Ki(n, e);
  }
}
function eO(s, e) {
  const n = this.cache;
  if (e.x !== void 0)
    (n[0] !== e.x || n[1] !== e.y || n[2] !== e.z) && (s.uniform3i(this.addr, e.x, e.y, e.z), n[0] = e.x, n[1] = e.y, n[2] = e.z);
  else {
    if (Qi(n, e)) return;
    s.uniform3iv(this.addr, e), Ki(n, e);
  }
}
function tO(s, e) {
  const n = this.cache;
  if (e.x !== void 0)
    (n[0] !== e.x || n[1] !== e.y || n[2] !== e.z || n[3] !== e.w) && (s.uniform4i(this.addr, e.x, e.y, e.z, e.w), n[0] = e.x, n[1] = e.y, n[2] = e.z, n[3] = e.w);
  else {
    if (Qi(n, e)) return;
    s.uniform4iv(this.addr, e), Ki(n, e);
  }
}
function nO(s, e) {
  const n = this.cache;
  n[0] !== e && (s.uniform1ui(this.addr, e), n[0] = e);
}
function iO(s, e) {
  const n = this.cache;
  if (e.x !== void 0)
    (n[0] !== e.x || n[1] !== e.y) && (s.uniform2ui(this.addr, e.x, e.y), n[0] = e.x, n[1] = e.y);
  else {
    if (Qi(n, e)) return;
    s.uniform2uiv(this.addr, e), Ki(n, e);
  }
}
function aO(s, e) {
  const n = this.cache;
  if (e.x !== void 0)
    (n[0] !== e.x || n[1] !== e.y || n[2] !== e.z) && (s.uniform3ui(this.addr, e.x, e.y, e.z), n[0] = e.x, n[1] = e.y, n[2] = e.z);
  else {
    if (Qi(n, e)) return;
    s.uniform3uiv(this.addr, e), Ki(n, e);
  }
}
function sO(s, e) {
  const n = this.cache;
  if (e.x !== void 0)
    (n[0] !== e.x || n[1] !== e.y || n[2] !== e.z || n[3] !== e.w) && (s.uniform4ui(this.addr, e.x, e.y, e.z, e.w), n[0] = e.x, n[1] = e.y, n[2] = e.z, n[3] = e.w);
  else {
    if (Qi(n, e)) return;
    s.uniform4uiv(this.addr, e), Ki(n, e);
  }
}
function rO(s, e, n) {
  const i = this.cache, r = n.allocateTextureUnit();
  i[0] !== r && (s.uniform1i(this.addr, r), i[0] = r);
  let c;
  this.type === s.SAMPLER_2D_SHADOW ? (IM.compareFunction = KS, c = IM) : c = AT, n.setTexture2D(e || c, r);
}
function oO(s, e, n) {
  const i = this.cache, r = n.allocateTextureUnit();
  i[0] !== r && (s.uniform1i(this.addr, r), i[0] = r), n.setTexture3D(e || CT, r);
}
function lO(s, e, n) {
  const i = this.cache, r = n.allocateTextureUnit();
  i[0] !== r && (s.uniform1i(this.addr, r), i[0] = r), n.setTextureCube(e || wT, r);
}
function cO(s, e, n) {
  const i = this.cache, r = n.allocateTextureUnit();
  i[0] !== r && (s.uniform1i(this.addr, r), i[0] = r), n.setTexture2DArray(e || RT, r);
}
function uO(s) {
  switch (s) {
    case 5126:
      return YN;
    // FLOAT
    case 35664:
      return kN;
    // _VEC2
    case 35665:
      return WN;
    // _VEC3
    case 35666:
      return ZN;
    // _VEC4
    case 35674:
      return jN;
    // _MAT2
    case 35675:
      return QN;
    // _MAT3
    case 35676:
      return KN;
    // _MAT4
    case 5124:
    case 35670:
      return JN;
    // INT, BOOL
    case 35667:
    case 35671:
      return $N;
    // _VEC2
    case 35668:
    case 35672:
      return eO;
    // _VEC3
    case 35669:
    case 35673:
      return tO;
    // _VEC4
    case 5125:
      return nO;
    // UINT
    case 36294:
      return iO;
    // _VEC2
    case 36295:
      return aO;
    // _VEC3
    case 36296:
      return sO;
    // _VEC4
    case 35678:
    // SAMPLER_2D
    case 36198:
    // SAMPLER_EXTERNAL_OES
    case 36298:
    // INT_SAMPLER_2D
    case 36306:
    // UNSIGNED_INT_SAMPLER_2D
    case 35682:
      return rO;
    case 35679:
    // SAMPLER_3D
    case 36299:
    // INT_SAMPLER_3D
    case 36307:
      return oO;
    case 35680:
    // SAMPLER_CUBE
    case 36300:
    // INT_SAMPLER_CUBE
    case 36308:
    // UNSIGNED_INT_SAMPLER_CUBE
    case 36293:
      return lO;
    case 36289:
    // SAMPLER_2D_ARRAY
    case 36303:
    // INT_SAMPLER_2D_ARRAY
    case 36311:
    // UNSIGNED_INT_SAMPLER_2D_ARRAY
    case 36292:
      return cO;
  }
}
function fO(s, e) {
  s.uniform1fv(this.addr, e);
}
function hO(s, e) {
  const n = ed(e, this.size, 2);
  s.uniform2fv(this.addr, n);
}
function dO(s, e) {
  const n = ed(e, this.size, 3);
  s.uniform3fv(this.addr, n);
}
function pO(s, e) {
  const n = ed(e, this.size, 4);
  s.uniform4fv(this.addr, n);
}
function mO(s, e) {
  const n = ed(e, this.size, 4);
  s.uniformMatrix2fv(this.addr, !1, n);
}
function vO(s, e) {
  const n = ed(e, this.size, 9);
  s.uniformMatrix3fv(this.addr, !1, n);
}
function gO(s, e) {
  const n = ed(e, this.size, 16);
  s.uniformMatrix4fv(this.addr, !1, n);
}
function yO(s, e) {
  s.uniform1iv(this.addr, e);
}
function _O(s, e) {
  s.uniform2iv(this.addr, e);
}
function SO(s, e) {
  s.uniform3iv(this.addr, e);
}
function xO(s, e) {
  s.uniform4iv(this.addr, e);
}
function MO(s, e) {
  s.uniform1uiv(this.addr, e);
}
function bO(s, e) {
  s.uniform2uiv(this.addr, e);
}
function EO(s, e) {
  s.uniform3uiv(this.addr, e);
}
function TO(s, e) {
  s.uniform4uiv(this.addr, e);
}
function AO(s, e, n) {
  const i = this.cache, r = e.length, c = vy(n, r);
  Qi(i, c) || (s.uniform1iv(this.addr, c), Ki(i, c));
  for (let h = 0; h !== r; ++h)
    n.setTexture2D(e[h] || AT, c[h]);
}
function RO(s, e, n) {
  const i = this.cache, r = e.length, c = vy(n, r);
  Qi(i, c) || (s.uniform1iv(this.addr, c), Ki(i, c));
  for (let h = 0; h !== r; ++h)
    n.setTexture3D(e[h] || CT, c[h]);
}
function CO(s, e, n) {
  const i = this.cache, r = e.length, c = vy(n, r);
  Qi(i, c) || (s.uniform1iv(this.addr, c), Ki(i, c));
  for (let h = 0; h !== r; ++h)
    n.setTextureCube(e[h] || wT, c[h]);
}
function wO(s, e, n) {
  const i = this.cache, r = e.length, c = vy(n, r);
  Qi(i, c) || (s.uniform1iv(this.addr, c), Ki(i, c));
  for (let h = 0; h !== r; ++h)
    n.setTexture2DArray(e[h] || RT, c[h]);
}
function DO(s) {
  switch (s) {
    case 5126:
      return fO;
    // FLOAT
    case 35664:
      return hO;
    // _VEC2
    case 35665:
      return dO;
    // _VEC3
    case 35666:
      return pO;
    // _VEC4
    case 35674:
      return mO;
    // _MAT2
    case 35675:
      return vO;
    // _MAT3
    case 35676:
      return gO;
    // _MAT4
    case 5124:
    case 35670:
      return yO;
    // INT, BOOL
    case 35667:
    case 35671:
      return _O;
    // _VEC2
    case 35668:
    case 35672:
      return SO;
    // _VEC3
    case 35669:
    case 35673:
      return xO;
    // _VEC4
    case 5125:
      return MO;
    // UINT
    case 36294:
      return bO;
    // _VEC2
    case 36295:
      return EO;
    // _VEC3
    case 36296:
      return TO;
    // _VEC4
    case 35678:
    // SAMPLER_2D
    case 36198:
    // SAMPLER_EXTERNAL_OES
    case 36298:
    // INT_SAMPLER_2D
    case 36306:
    // UNSIGNED_INT_SAMPLER_2D
    case 35682:
      return AO;
    case 35679:
    // SAMPLER_3D
    case 36299:
    // INT_SAMPLER_3D
    case 36307:
      return RO;
    case 35680:
    // SAMPLER_CUBE
    case 36300:
    // INT_SAMPLER_CUBE
    case 36308:
    // UNSIGNED_INT_SAMPLER_CUBE
    case 36293:
      return CO;
    case 36289:
    // SAMPLER_2D_ARRAY
    case 36303:
    // INT_SAMPLER_2D_ARRAY
    case 36311:
    // UNSIGNED_INT_SAMPLER_2D_ARRAY
    case 36292:
      return wO;
  }
}
class UO {
  constructor(e, n, i) {
    this.id = e, this.addr = i, this.cache = [], this.type = n.type, this.setValue = uO(n.type);
  }
}
class NO {
  constructor(e, n, i) {
    this.id = e, this.addr = i, this.cache = [], this.type = n.type, this.size = n.size, this.setValue = DO(n.type);
  }
}
class OO {
  constructor(e) {
    this.id = e, this.seq = [], this.map = {};
  }
  setValue(e, n, i) {
    const r = this.seq;
    for (let c = 0, h = r.length; c !== h; ++c) {
      const d = r[c];
      d.setValue(e, n[d.id], i);
    }
  }
}
const Q_ = /(\w+)(\])?(\[|\.)?/g;
function qM(s, e) {
  s.seq.push(e), s.map[e.id] = e;
}
function LO(s, e, n) {
  const i = s.name, r = i.length;
  for (Q_.lastIndex = 0; ; ) {
    const c = Q_.exec(i), h = Q_.lastIndex;
    let d = c[1];
    const v = c[2] === "]", g = c[3];
    if (v && (d = d | 0), g === void 0 || g === "[" && h + 2 === r) {
      qM(n, g === void 0 ? new UO(d, s, e) : new NO(d, s, e));
      break;
    } else {
      let x = n.map[d];
      x === void 0 && (x = new OO(d), qM(n, x)), n = x;
    }
  }
}
class kg {
  constructor(e, n) {
    this.seq = [], this.map = {};
    const i = e.getProgramParameter(n, e.ACTIVE_UNIFORMS);
    for (let r = 0; r < i; ++r) {
      const c = e.getActiveUniform(n, r), h = e.getUniformLocation(n, c.name);
      LO(c, h, this);
    }
  }
  setValue(e, n, i, r) {
    const c = this.map[n];
    c !== void 0 && c.setValue(e, i, r);
  }
  setOptional(e, n, i) {
    const r = n[i];
    r !== void 0 && this.setValue(e, i, r);
  }
  static upload(e, n, i, r) {
    for (let c = 0, h = n.length; c !== h; ++c) {
      const d = n[c], v = i[d.id];
      v.needsUpdate !== !1 && d.setValue(e, v.value, r);
    }
  }
  static seqWithValue(e, n) {
    const i = [];
    for (let r = 0, c = e.length; r !== c; ++r) {
      const h = e[r];
      h.id in n && i.push(h);
    }
    return i;
  }
}
function YM(s, e, n) {
  const i = s.createShader(e);
  return s.shaderSource(i, n), s.compileShader(i), i;
}
const zO = 37297;
let BO = 0;
function PO(s, e) {
  const n = s.split(`
`), i = [], r = Math.max(e - 6, 0), c = Math.min(e + 6, n.length);
  for (let h = r; h < c; h++) {
    const d = h + 1;
    i.push(`${d === e ? ">" : " "} ${d}: ${n[h]}`);
  }
  return i.join(`
`);
}
const kM = /* @__PURE__ */ new Qt();
function IO(s) {
  vn._getMatrix(kM, vn.workingColorSpace, s);
  const e = `mat3( ${kM.elements.map((n) => n.toFixed(4))} )`;
  switch (vn.getTransfer(s)) {
    case Qp:
      return [e, "LinearTransferOETF"];
    case Pn:
      return [e, "sRGBTransferOETF"];
    default:
      return console.warn("THREE.WebGLProgram: Unsupported color space: ", s), [e, "LinearTransferOETF"];
  }
}
function WM(s, e, n) {
  const i = s.getShaderParameter(e, s.COMPILE_STATUS), c = (s.getShaderInfoLog(e) || "").trim();
  if (i && c === "") return "";
  const h = /ERROR: 0:(\d+)/.exec(c);
  if (h) {
    const d = parseInt(h[1]);
    return n.toUpperCase() + `

` + c + `

` + PO(s.getShaderSource(e), d);
  } else
    return c;
}
function HO(s, e) {
  const n = IO(e);
  return [
    `vec4 ${s}( vec4 value ) {`,
    `	return ${n[1]}( vec4( value.rgb * ${n[0]}, value.a ) );`,
    "}"
  ].join(`
`);
}
function VO(s, e) {
  let n;
  switch (e) {
    case nE:
      n = "Linear";
      break;
    case iE:
      n = "Reinhard";
      break;
    case aE:
      n = "Cineon";
      break;
    case GS:
      n = "ACESFilmic";
      break;
    case rE:
      n = "AgX";
      break;
    case oE:
      n = "Neutral";
      break;
    case sE:
      n = "Custom";
      break;
    default:
      console.warn("THREE.WebGLProgram: Unsupported toneMapping:", e), n = "Linear";
  }
  return "vec3 " + s + "( vec3 color ) { return " + n + "ToneMapping( color ); }";
}
const Vg = /* @__PURE__ */ new j();
function GO() {
  vn.getLuminanceCoefficients(Vg);
  const s = Vg.x.toFixed(4), e = Vg.y.toFixed(4), n = Vg.z.toFixed(4);
  return [
    "float luminance( const in vec3 rgb ) {",
    `	const vec3 weights = vec3( ${s}, ${e}, ${n} );`,
    "	return dot( weights, rgb );",
    "}"
  ].join(`
`);
}
function FO(s) {
  return [
    s.extensionClipCullDistance ? "#extension GL_ANGLE_clip_cull_distance : require" : "",
    s.extensionMultiDraw ? "#extension GL_ANGLE_multi_draw : require" : ""
  ].filter(Up).join(`
`);
}
function XO(s) {
  const e = [];
  for (const n in s) {
    const i = s[n];
    i !== !1 && e.push("#define " + n + " " + i);
  }
  return e.join(`
`);
}
function qO(s, e) {
  const n = {}, i = s.getProgramParameter(e, s.ACTIVE_ATTRIBUTES);
  for (let r = 0; r < i; r++) {
    const c = s.getActiveAttrib(e, r), h = c.name;
    let d = 1;
    c.type === s.FLOAT_MAT2 && (d = 2), c.type === s.FLOAT_MAT3 && (d = 3), c.type === s.FLOAT_MAT4 && (d = 4), n[h] = {
      type: c.type,
      location: s.getAttribLocation(e, h),
      locationSize: d
    };
  }
  return n;
}
function Up(s) {
  return s !== "";
}
function ZM(s, e) {
  const n = e.numSpotLightShadows + e.numSpotLightMaps - e.numSpotLightShadowsWithMaps;
  return s.replace(/NUM_DIR_LIGHTS/g, e.numDirLights).replace(/NUM_SPOT_LIGHTS/g, e.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g, e.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g, n).replace(/NUM_RECT_AREA_LIGHTS/g, e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, e.numPointLights).replace(/NUM_HEMI_LIGHTS/g, e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g, e.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g, e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, e.numPointLightShadows);
}
function jM(s, e) {
  return s.replace(/NUM_CLIPPING_PLANES/g, e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, e.numClippingPlanes - e.numClipIntersection);
}
const YO = /^[ \t]*#include +<([\w\d./]+)>/gm;
function US(s) {
  return s.replace(YO, WO);
}
const kO = /* @__PURE__ */ new Map();
function WO(s, e) {
  let n = tn[e];
  if (n === void 0) {
    const i = kO.get(e);
    if (i !== void 0)
      n = tn[i], console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.', e, i);
    else
      throw new Error("Can not resolve #include <" + e + ">");
  }
  return US(n);
}
const ZO = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;
function QM(s) {
  return s.replace(ZO, jO);
}
function jO(s, e, n, i) {
  let r = "";
  for (let c = parseInt(e); c < parseInt(n); c++)
    r += i.replace(/\[\s*i\s*\]/g, "[ " + c + " ]").replace(/UNROLLED_LOOP_INDEX/g, c);
  return r;
}
function KM(s) {
  let e = `precision ${s.precision} float;
	precision ${s.precision} int;
	precision ${s.precision} sampler2D;
	precision ${s.precision} samplerCube;
	precision ${s.precision} sampler3D;
	precision ${s.precision} sampler2DArray;
	precision ${s.precision} sampler2DShadow;
	precision ${s.precision} samplerCubeShadow;
	precision ${s.precision} sampler2DArrayShadow;
	precision ${s.precision} isampler2D;
	precision ${s.precision} isampler3D;
	precision ${s.precision} isamplerCube;
	precision ${s.precision} isampler2DArray;
	precision ${s.precision} usampler2D;
	precision ${s.precision} usampler3D;
	precision ${s.precision} usamplerCube;
	precision ${s.precision} usampler2DArray;
	`;
  return s.precision === "highp" ? e += `
#define HIGH_PRECISION` : s.precision === "mediump" ? e += `
#define MEDIUM_PRECISION` : s.precision === "lowp" && (e += `
#define LOW_PRECISION`), e;
}
function QO(s) {
  let e = "SHADOWMAP_TYPE_BASIC";
  return s.shadowMapType === I0 ? e = "SHADOWMAP_TYPE_PCF" : s.shadowMapType === Np ? e = "SHADOWMAP_TYPE_PCF_SOFT" : s.shadowMapType === Xr && (e = "SHADOWMAP_TYPE_VSM"), e;
}
function KO(s) {
  let e = "ENVMAP_TYPE_CUBE";
  if (s.envMap)
    switch (s.envMapMode) {
      case Sl:
      case Rc:
        e = "ENVMAP_TYPE_CUBE";
        break;
      case Qh:
        e = "ENVMAP_TYPE_CUBE_UV";
        break;
    }
  return e;
}
function JO(s) {
  let e = "ENVMAP_MODE_REFLECTION";
  if (s.envMap)
    switch (s.envMapMode) {
      case Rc:
        e = "ENVMAP_MODE_REFRACTION";
        break;
    }
  return e;
}
function $O(s) {
  let e = "ENVMAP_BLENDING_NONE";
  if (s.envMap)
    switch (s.combine) {
      case cm:
        e = "ENVMAP_BLENDING_MULTIPLY";
        break;
      case eE:
        e = "ENVMAP_BLENDING_MIX";
        break;
      case tE:
        e = "ENVMAP_BLENDING_ADD";
        break;
    }
  return e;
}
function e4(s) {
  const e = s.envMapCubeUVHeight;
  if (e === null) return null;
  const n = Math.log2(e) - 2, i = 1 / e;
  return { texelWidth: 1 / (3 * Math.max(Math.pow(2, n), 112)), texelHeight: i, maxMip: n };
}
function t4(s, e, n, i) {
  const r = s.getContext(), c = n.defines;
  let h = n.vertexShader, d = n.fragmentShader;
  const v = QO(n), g = KO(n), S = JO(n), x = $O(n), M = e4(n), b = FO(n), R = XO(c), w = r.createProgram();
  let C, E, U = n.glslVersion ? "#version " + n.glslVersion + `
` : "";
  n.isRawShaderMaterial ? (C = [
    "#define SHADER_TYPE " + n.shaderType,
    "#define SHADER_NAME " + n.shaderName,
    R
  ].filter(Up).join(`
`), C.length > 0 && (C += `
`), E = [
    "#define SHADER_TYPE " + n.shaderType,
    "#define SHADER_NAME " + n.shaderName,
    R
  ].filter(Up).join(`
`), E.length > 0 && (E += `
`)) : (C = [
    KM(n),
    "#define SHADER_TYPE " + n.shaderType,
    "#define SHADER_NAME " + n.shaderName,
    R,
    n.extensionClipCullDistance ? "#define USE_CLIP_DISTANCE" : "",
    n.batching ? "#define USE_BATCHING" : "",
    n.batchingColor ? "#define USE_BATCHING_COLOR" : "",
    n.instancing ? "#define USE_INSTANCING" : "",
    n.instancingColor ? "#define USE_INSTANCING_COLOR" : "",
    n.instancingMorph ? "#define USE_INSTANCING_MORPH" : "",
    n.useFog && n.fog ? "#define USE_FOG" : "",
    n.useFog && n.fogExp2 ? "#define FOG_EXP2" : "",
    n.map ? "#define USE_MAP" : "",
    n.envMap ? "#define USE_ENVMAP" : "",
    n.envMap ? "#define " + S : "",
    n.lightMap ? "#define USE_LIGHTMAP" : "",
    n.aoMap ? "#define USE_AOMAP" : "",
    n.bumpMap ? "#define USE_BUMPMAP" : "",
    n.normalMap ? "#define USE_NORMALMAP" : "",
    n.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
    n.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "",
    n.displacementMap ? "#define USE_DISPLACEMENTMAP" : "",
    n.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
    n.anisotropy ? "#define USE_ANISOTROPY" : "",
    n.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "",
    n.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
    n.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
    n.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
    n.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
    n.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "",
    n.specularMap ? "#define USE_SPECULARMAP" : "",
    n.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
    n.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
    n.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
    n.metalnessMap ? "#define USE_METALNESSMAP" : "",
    n.alphaMap ? "#define USE_ALPHAMAP" : "",
    n.alphaHash ? "#define USE_ALPHAHASH" : "",
    n.transmission ? "#define USE_TRANSMISSION" : "",
    n.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
    n.thicknessMap ? "#define USE_THICKNESSMAP" : "",
    n.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
    n.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
    //
    n.mapUv ? "#define MAP_UV " + n.mapUv : "",
    n.alphaMapUv ? "#define ALPHAMAP_UV " + n.alphaMapUv : "",
    n.lightMapUv ? "#define LIGHTMAP_UV " + n.lightMapUv : "",
    n.aoMapUv ? "#define AOMAP_UV " + n.aoMapUv : "",
    n.emissiveMapUv ? "#define EMISSIVEMAP_UV " + n.emissiveMapUv : "",
    n.bumpMapUv ? "#define BUMPMAP_UV " + n.bumpMapUv : "",
    n.normalMapUv ? "#define NORMALMAP_UV " + n.normalMapUv : "",
    n.displacementMapUv ? "#define DISPLACEMENTMAP_UV " + n.displacementMapUv : "",
    n.metalnessMapUv ? "#define METALNESSMAP_UV " + n.metalnessMapUv : "",
    n.roughnessMapUv ? "#define ROUGHNESSMAP_UV " + n.roughnessMapUv : "",
    n.anisotropyMapUv ? "#define ANISOTROPYMAP_UV " + n.anisotropyMapUv : "",
    n.clearcoatMapUv ? "#define CLEARCOATMAP_UV " + n.clearcoatMapUv : "",
    n.clearcoatNormalMapUv ? "#define CLEARCOAT_NORMALMAP_UV " + n.clearcoatNormalMapUv : "",
    n.clearcoatRoughnessMapUv ? "#define CLEARCOAT_ROUGHNESSMAP_UV " + n.clearcoatRoughnessMapUv : "",
    n.iridescenceMapUv ? "#define IRIDESCENCEMAP_UV " + n.iridescenceMapUv : "",
    n.iridescenceThicknessMapUv ? "#define IRIDESCENCE_THICKNESSMAP_UV " + n.iridescenceThicknessMapUv : "",
    n.sheenColorMapUv ? "#define SHEEN_COLORMAP_UV " + n.sheenColorMapUv : "",
    n.sheenRoughnessMapUv ? "#define SHEEN_ROUGHNESSMAP_UV " + n.sheenRoughnessMapUv : "",
    n.specularMapUv ? "#define SPECULARMAP_UV " + n.specularMapUv : "",
    n.specularColorMapUv ? "#define SPECULAR_COLORMAP_UV " + n.specularColorMapUv : "",
    n.specularIntensityMapUv ? "#define SPECULAR_INTENSITYMAP_UV " + n.specularIntensityMapUv : "",
    n.transmissionMapUv ? "#define TRANSMISSIONMAP_UV " + n.transmissionMapUv : "",
    n.thicknessMapUv ? "#define THICKNESSMAP_UV " + n.thicknessMapUv : "",
    //
    n.vertexTangents && n.flatShading === !1 ? "#define USE_TANGENT" : "",
    n.vertexColors ? "#define USE_COLOR" : "",
    n.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
    n.vertexUv1s ? "#define USE_UV1" : "",
    n.vertexUv2s ? "#define USE_UV2" : "",
    n.vertexUv3s ? "#define USE_UV3" : "",
    n.pointsUvs ? "#define USE_POINTS_UV" : "",
    n.flatShading ? "#define FLAT_SHADED" : "",
    n.skinning ? "#define USE_SKINNING" : "",
    n.morphTargets ? "#define USE_MORPHTARGETS" : "",
    n.morphNormals && n.flatShading === !1 ? "#define USE_MORPHNORMALS" : "",
    n.morphColors ? "#define USE_MORPHCOLORS" : "",
    n.morphTargetsCount > 0 ? "#define MORPHTARGETS_TEXTURE_STRIDE " + n.morphTextureStride : "",
    n.morphTargetsCount > 0 ? "#define MORPHTARGETS_COUNT " + n.morphTargetsCount : "",
    n.doubleSided ? "#define DOUBLE_SIDED" : "",
    n.flipSided ? "#define FLIP_SIDED" : "",
    n.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
    n.shadowMapEnabled ? "#define " + v : "",
    n.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "",
    n.numLightProbes > 0 ? "#define USE_LIGHT_PROBES" : "",
    n.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
    n.reversedDepthBuffer ? "#define USE_REVERSEDEPTHBUF" : "",
    "uniform mat4 modelMatrix;",
    "uniform mat4 modelViewMatrix;",
    "uniform mat4 projectionMatrix;",
    "uniform mat4 viewMatrix;",
    "uniform mat3 normalMatrix;",
    "uniform vec3 cameraPosition;",
    "uniform bool isOrthographic;",
    "#ifdef USE_INSTANCING",
    "	attribute mat4 instanceMatrix;",
    "#endif",
    "#ifdef USE_INSTANCING_COLOR",
    "	attribute vec3 instanceColor;",
    "#endif",
    "#ifdef USE_INSTANCING_MORPH",
    "	uniform sampler2D morphTexture;",
    "#endif",
    "attribute vec3 position;",
    "attribute vec3 normal;",
    "attribute vec2 uv;",
    "#ifdef USE_UV1",
    "	attribute vec2 uv1;",
    "#endif",
    "#ifdef USE_UV2",
    "	attribute vec2 uv2;",
    "#endif",
    "#ifdef USE_UV3",
    "	attribute vec2 uv3;",
    "#endif",
    "#ifdef USE_TANGENT",
    "	attribute vec4 tangent;",
    "#endif",
    "#if defined( USE_COLOR_ALPHA )",
    "	attribute vec4 color;",
    "#elif defined( USE_COLOR )",
    "	attribute vec3 color;",
    "#endif",
    "#ifdef USE_SKINNING",
    "	attribute vec4 skinIndex;",
    "	attribute vec4 skinWeight;",
    "#endif",
    `
`
  ].filter(Up).join(`
`), E = [
    KM(n),
    "#define SHADER_TYPE " + n.shaderType,
    "#define SHADER_NAME " + n.shaderName,
    R,
    n.useFog && n.fog ? "#define USE_FOG" : "",
    n.useFog && n.fogExp2 ? "#define FOG_EXP2" : "",
    n.alphaToCoverage ? "#define ALPHA_TO_COVERAGE" : "",
    n.map ? "#define USE_MAP" : "",
    n.matcap ? "#define USE_MATCAP" : "",
    n.envMap ? "#define USE_ENVMAP" : "",
    n.envMap ? "#define " + g : "",
    n.envMap ? "#define " + S : "",
    n.envMap ? "#define " + x : "",
    M ? "#define CUBEUV_TEXEL_WIDTH " + M.texelWidth : "",
    M ? "#define CUBEUV_TEXEL_HEIGHT " + M.texelHeight : "",
    M ? "#define CUBEUV_MAX_MIP " + M.maxMip + ".0" : "",
    n.lightMap ? "#define USE_LIGHTMAP" : "",
    n.aoMap ? "#define USE_AOMAP" : "",
    n.bumpMap ? "#define USE_BUMPMAP" : "",
    n.normalMap ? "#define USE_NORMALMAP" : "",
    n.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
    n.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "",
    n.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
    n.anisotropy ? "#define USE_ANISOTROPY" : "",
    n.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "",
    n.clearcoat ? "#define USE_CLEARCOAT" : "",
    n.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
    n.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
    n.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
    n.dispersion ? "#define USE_DISPERSION" : "",
    n.iridescence ? "#define USE_IRIDESCENCE" : "",
    n.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
    n.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "",
    n.specularMap ? "#define USE_SPECULARMAP" : "",
    n.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
    n.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
    n.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
    n.metalnessMap ? "#define USE_METALNESSMAP" : "",
    n.alphaMap ? "#define USE_ALPHAMAP" : "",
    n.alphaTest ? "#define USE_ALPHATEST" : "",
    n.alphaHash ? "#define USE_ALPHAHASH" : "",
    n.sheen ? "#define USE_SHEEN" : "",
    n.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
    n.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
    n.transmission ? "#define USE_TRANSMISSION" : "",
    n.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
    n.thicknessMap ? "#define USE_THICKNESSMAP" : "",
    n.vertexTangents && n.flatShading === !1 ? "#define USE_TANGENT" : "",
    n.vertexColors || n.instancingColor || n.batchingColor ? "#define USE_COLOR" : "",
    n.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
    n.vertexUv1s ? "#define USE_UV1" : "",
    n.vertexUv2s ? "#define USE_UV2" : "",
    n.vertexUv3s ? "#define USE_UV3" : "",
    n.pointsUvs ? "#define USE_POINTS_UV" : "",
    n.gradientMap ? "#define USE_GRADIENTMAP" : "",
    n.flatShading ? "#define FLAT_SHADED" : "",
    n.doubleSided ? "#define DOUBLE_SIDED" : "",
    n.flipSided ? "#define FLIP_SIDED" : "",
    n.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
    n.shadowMapEnabled ? "#define " + v : "",
    n.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "",
    n.numLightProbes > 0 ? "#define USE_LIGHT_PROBES" : "",
    n.decodeVideoTexture ? "#define DECODE_VIDEO_TEXTURE" : "",
    n.decodeVideoTextureEmissive ? "#define DECODE_VIDEO_TEXTURE_EMISSIVE" : "",
    n.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
    n.reversedDepthBuffer ? "#define USE_REVERSEDEPTHBUF" : "",
    "uniform mat4 viewMatrix;",
    "uniform vec3 cameraPosition;",
    "uniform bool isOrthographic;",
    n.toneMapping !== Wr ? "#define TONE_MAPPING" : "",
    n.toneMapping !== Wr ? tn.tonemapping_pars_fragment : "",
    // this code is required here because it is used by the toneMapping() function defined below
    n.toneMapping !== Wr ? VO("toneMapping", n.toneMapping) : "",
    n.dithering ? "#define DITHERING" : "",
    n.opaque ? "#define OPAQUE" : "",
    tn.colorspace_pars_fragment,
    // this code is required here because it is used by the various encoding/decoding function defined below
    HO("linearToOutputTexel", n.outputColorSpace),
    GO(),
    n.useDepthPacking ? "#define DEPTH_PACKING " + n.depthPacking : "",
    `
`
  ].filter(Up).join(`
`)), h = US(h), h = ZM(h, n), h = jM(h, n), d = US(d), d = ZM(d, n), d = jM(d, n), h = QM(h), d = QM(d), n.isRawShaderMaterial !== !0 && (U = `#version 300 es
`, C = [
    b,
    "#define attribute in",
    "#define varying out",
    "#define texture2D texture"
  ].join(`
`) + `
` + C, E = [
    "#define varying in",
    n.glslVersion === MS ? "" : "layout(location = 0) out highp vec4 pc_fragColor;",
    n.glslVersion === MS ? "" : "#define gl_FragColor pc_fragColor",
    "#define gl_FragDepthEXT gl_FragDepth",
    "#define texture2D texture",
    "#define textureCube texture",
    "#define texture2DProj textureProj",
    "#define texture2DLodEXT textureLod",
    "#define texture2DProjLodEXT textureProjLod",
    "#define textureCubeLodEXT textureLod",
    "#define texture2DGradEXT textureGrad",
    "#define texture2DProjGradEXT textureProjGrad",
    "#define textureCubeGradEXT textureGrad"
  ].join(`
`) + `
` + E);
  const N = U + C + h, O = U + E + d, I = YM(r, r.VERTEX_SHADER, N), V = YM(r, r.FRAGMENT_SHADER, O);
  r.attachShader(w, I), r.attachShader(w, V), n.index0AttributeName !== void 0 ? r.bindAttribLocation(w, 0, n.index0AttributeName) : n.morphTargets === !0 && r.bindAttribLocation(w, 0, "position"), r.linkProgram(w);
  function Y(W) {
    if (s.debug.checkShaderErrors) {
      const le = r.getProgramInfoLog(w) || "", ae = r.getShaderInfoLog(I) || "", oe = r.getShaderInfoLog(V) || "", pe = le.trim(), P = ae.trim(), K = oe.trim();
      let Q = !0, fe = !0;
      if (r.getProgramParameter(w, r.LINK_STATUS) === !1)
        if (Q = !1, typeof s.debug.onShaderError == "function")
          s.debug.onShaderError(r, w, I, V);
        else {
          const q = WM(r, I, "vertex"), te = WM(r, V, "fragment");
          console.error(
            "THREE.WebGLProgram: Shader Error " + r.getError() + " - VALIDATE_STATUS " + r.getProgramParameter(w, r.VALIDATE_STATUS) + `

Material Name: ` + W.name + `
Material Type: ` + W.type + `

Program Info Log: ` + pe + `
` + q + `
` + te
          );
        }
      else pe !== "" ? console.warn("THREE.WebGLProgram: Program Info Log:", pe) : (P === "" || K === "") && (fe = !1);
      fe && (W.diagnostics = {
        runnable: Q,
        programLog: pe,
        vertexShader: {
          log: P,
          prefix: C
        },
        fragmentShader: {
          log: K,
          prefix: E
        }
      });
    }
    r.deleteShader(I), r.deleteShader(V), k = new kg(r, w), B = qO(r, w);
  }
  let k;
  this.getUniforms = function() {
    return k === void 0 && Y(this), k;
  };
  let B;
  this.getAttributes = function() {
    return B === void 0 && Y(this), B;
  };
  let z = n.rendererExtensionParallelShaderCompile === !1;
  return this.isReady = function() {
    return z === !1 && (z = r.getProgramParameter(w, zO)), z;
  }, this.destroy = function() {
    i.releaseStatesOfProgram(this), r.deleteProgram(w), this.program = void 0;
  }, this.type = n.shaderType, this.name = n.shaderName, this.id = BO++, this.cacheKey = e, this.usedTimes = 1, this.program = w, this.vertexShader = I, this.fragmentShader = V, this;
}
let n4 = 0;
class i4 {
  constructor() {
    this.shaderCache = /* @__PURE__ */ new Map(), this.materialCache = /* @__PURE__ */ new Map();
  }
  update(e) {
    const n = e.vertexShader, i = e.fragmentShader, r = this._getShaderStage(n), c = this._getShaderStage(i), h = this._getShaderCacheForMaterial(e);
    return h.has(r) === !1 && (h.add(r), r.usedTimes++), h.has(c) === !1 && (h.add(c), c.usedTimes++), this;
  }
  remove(e) {
    const n = this.materialCache.get(e);
    for (const i of n)
      i.usedTimes--, i.usedTimes === 0 && this.shaderCache.delete(i.code);
    return this.materialCache.delete(e), this;
  }
  getVertexShaderID(e) {
    return this._getShaderStage(e.vertexShader).id;
  }
  getFragmentShaderID(e) {
    return this._getShaderStage(e.fragmentShader).id;
  }
  dispose() {
    this.shaderCache.clear(), this.materialCache.clear();
  }
  _getShaderCacheForMaterial(e) {
    const n = this.materialCache;
    let i = n.get(e);
    return i === void 0 && (i = /* @__PURE__ */ new Set(), n.set(e, i)), i;
  }
  _getShaderStage(e) {
    const n = this.shaderCache;
    let i = n.get(e);
    return i === void 0 && (i = new a4(e), n.set(e, i)), i;
  }
}
class a4 {
  constructor(e) {
    this.id = n4++, this.code = e, this.usedTimes = 0;
  }
}
function s4(s, e, n, i, r, c, h) {
  const d = new qh(), v = new i4(), g = /* @__PURE__ */ new Set(), S = [], x = r.logarithmicDepthBuffer, M = r.vertexTextures;
  let b = r.precision;
  const R = {
    MeshDepthMaterial: "depth",
    MeshDistanceMaterial: "distanceRGBA",
    MeshNormalMaterial: "normal",
    MeshBasicMaterial: "basic",
    MeshLambertMaterial: "lambert",
    MeshPhongMaterial: "phong",
    MeshToonMaterial: "toon",
    MeshStandardMaterial: "physical",
    MeshPhysicalMaterial: "physical",
    MeshMatcapMaterial: "matcap",
    LineBasicMaterial: "basic",
    LineDashedMaterial: "dashed",
    PointsMaterial: "points",
    ShadowMaterial: "shadow",
    SpriteMaterial: "sprite"
  };
  function w(B) {
    return g.add(B), B === 0 ? "uv" : `uv${B}`;
  }
  function C(B, z, W, le, ae) {
    const oe = le.fog, pe = ae.geometry, P = B.isMeshStandardMaterial ? le.environment : null, K = (B.isMeshStandardMaterial ? n : e).get(B.envMap || P), Q = K && K.mapping === Qh ? K.image.height : null, fe = R[B.type];
    B.precision !== null && (b = r.getMaxPrecision(B.precision), b !== B.precision && console.warn("THREE.WebGLProgram.getParameters:", B.precision, "not supported, using", b, "instead."));
    const q = pe.morphAttributes.position || pe.morphAttributes.normal || pe.morphAttributes.color, te = q !== void 0 ? q.length : 0;
    let Me = 0;
    pe.morphAttributes.position !== void 0 && (Me = 1), pe.morphAttributes.normal !== void 0 && (Me = 2), pe.morphAttributes.color !== void 0 && (Me = 3);
    let Re, Ne, he, we;
    if (fe) {
      const rn = qr[fe];
      Re = rn.vertexShader, Ne = rn.fragmentShader;
    } else
      Re = B.vertexShader, Ne = B.fragmentShader, v.update(B), he = v.getVertexShaderID(B), we = v.getFragmentShaderID(B);
    const Fe = s.getRenderTarget(), $e = s.state.buffers.depth.getReversed(), ut = ae.isInstancedMesh === !0, Tt = ae.isBatchedMesh === !0, gn = !!B.map, Ct = !!B.matcap, ee = !!K, He = !!B.aoMap, Ue = !!B.lightMap, Xe = !!B.bumpMap, Ce = !!B.normalMap, et = !!B.displacementMap, Ge = !!B.emissiveMap, Ze = !!B.metalnessMap, At = !!B.roughnessMap, Bt = B.anisotropy > 0, Z = B.clearcoat > 0, H = B.dispersion > 0, me = B.iridescence > 0, Te = B.sheen > 0, ze = B.transmission > 0, Ae = Bt && !!B.anisotropyMap, at = Z && !!B.clearcoatMap, Qe = Z && !!B.clearcoatNormalMap, dt = Z && !!B.clearcoatRoughnessMap, pt = me && !!B.iridescenceMap, Ve = me && !!B.iridescenceThicknessMap, tt = Te && !!B.sheenColorMap, St = Te && !!B.sheenRoughnessMap, mt = !!B.specularMap, nt = !!B.specularColorMap, Pt = !!B.specularIntensityMap, se = ze && !!B.transmissionMap, ke = ze && !!B.thicknessMap, Ke = !!B.gradientMap, ct = !!B.alphaMap, qe = B.alphaTest > 0, Pe = !!B.alphaHash, vt = !!B.extensions;
    let Ut = Wr;
    B.toneMapped && (Fe === null || Fe.isXRRenderTarget === !0) && (Ut = s.toneMapping);
    const un = {
      shaderID: fe,
      shaderType: B.type,
      shaderName: B.name,
      vertexShader: Re,
      fragmentShader: Ne,
      defines: B.defines,
      customVertexShaderID: he,
      customFragmentShaderID: we,
      isRawShaderMaterial: B.isRawShaderMaterial === !0,
      glslVersion: B.glslVersion,
      precision: b,
      batching: Tt,
      batchingColor: Tt && ae._colorsTexture !== null,
      instancing: ut,
      instancingColor: ut && ae.instanceColor !== null,
      instancingMorph: ut && ae.morphTexture !== null,
      supportsVertexTextures: M,
      outputColorSpace: Fe === null ? s.outputColorSpace : Fe.isXRRenderTarget === !0 ? Fe.texture.colorSpace : Ho,
      alphaToCoverage: !!B.alphaToCoverage,
      map: gn,
      matcap: Ct,
      envMap: ee,
      envMapMode: ee && K.mapping,
      envMapCubeUVHeight: Q,
      aoMap: He,
      lightMap: Ue,
      bumpMap: Xe,
      normalMap: Ce,
      displacementMap: M && et,
      emissiveMap: Ge,
      normalMapObjectSpace: Ce && B.normalMapType === dE,
      normalMapTangentSpace: Ce && B.normalMapType === Dc,
      metalnessMap: Ze,
      roughnessMap: At,
      anisotropy: Bt,
      anisotropyMap: Ae,
      clearcoat: Z,
      clearcoatMap: at,
      clearcoatNormalMap: Qe,
      clearcoatRoughnessMap: dt,
      dispersion: H,
      iridescence: me,
      iridescenceMap: pt,
      iridescenceThicknessMap: Ve,
      sheen: Te,
      sheenColorMap: tt,
      sheenRoughnessMap: St,
      specularMap: mt,
      specularColorMap: nt,
      specularIntensityMap: Pt,
      transmission: ze,
      transmissionMap: se,
      thicknessMap: ke,
      gradientMap: Ke,
      opaque: B.transparent === !1 && B.blending === ku && B.alphaToCoverage === !1,
      alphaMap: ct,
      alphaTest: qe,
      alphaHash: Pe,
      combine: B.combine,
      //
      mapUv: gn && w(B.map.channel),
      aoMapUv: He && w(B.aoMap.channel),
      lightMapUv: Ue && w(B.lightMap.channel),
      bumpMapUv: Xe && w(B.bumpMap.channel),
      normalMapUv: Ce && w(B.normalMap.channel),
      displacementMapUv: et && w(B.displacementMap.channel),
      emissiveMapUv: Ge && w(B.emissiveMap.channel),
      metalnessMapUv: Ze && w(B.metalnessMap.channel),
      roughnessMapUv: At && w(B.roughnessMap.channel),
      anisotropyMapUv: Ae && w(B.anisotropyMap.channel),
      clearcoatMapUv: at && w(B.clearcoatMap.channel),
      clearcoatNormalMapUv: Qe && w(B.clearcoatNormalMap.channel),
      clearcoatRoughnessMapUv: dt && w(B.clearcoatRoughnessMap.channel),
      iridescenceMapUv: pt && w(B.iridescenceMap.channel),
      iridescenceThicknessMapUv: Ve && w(B.iridescenceThicknessMap.channel),
      sheenColorMapUv: tt && w(B.sheenColorMap.channel),
      sheenRoughnessMapUv: St && w(B.sheenRoughnessMap.channel),
      specularMapUv: mt && w(B.specularMap.channel),
      specularColorMapUv: nt && w(B.specularColorMap.channel),
      specularIntensityMapUv: Pt && w(B.specularIntensityMap.channel),
      transmissionMapUv: se && w(B.transmissionMap.channel),
      thicknessMapUv: ke && w(B.thicknessMap.channel),
      alphaMapUv: ct && w(B.alphaMap.channel),
      //
      vertexTangents: !!pe.attributes.tangent && (Ce || Bt),
      vertexColors: B.vertexColors,
      vertexAlphas: B.vertexColors === !0 && !!pe.attributes.color && pe.attributes.color.itemSize === 4,
      pointsUvs: ae.isPoints === !0 && !!pe.attributes.uv && (gn || ct),
      fog: !!oe,
      useFog: B.fog === !0,
      fogExp2: !!oe && oe.isFogExp2,
      flatShading: B.flatShading === !0 && B.wireframe === !1,
      sizeAttenuation: B.sizeAttenuation === !0,
      logarithmicDepthBuffer: x,
      reversedDepthBuffer: $e,
      skinning: ae.isSkinnedMesh === !0,
      morphTargets: pe.morphAttributes.position !== void 0,
      morphNormals: pe.morphAttributes.normal !== void 0,
      morphColors: pe.morphAttributes.color !== void 0,
      morphTargetsCount: te,
      morphTextureStride: Me,
      numDirLights: z.directional.length,
      numPointLights: z.point.length,
      numSpotLights: z.spot.length,
      numSpotLightMaps: z.spotLightMap.length,
      numRectAreaLights: z.rectArea.length,
      numHemiLights: z.hemi.length,
      numDirLightShadows: z.directionalShadowMap.length,
      numPointLightShadows: z.pointShadowMap.length,
      numSpotLightShadows: z.spotShadowMap.length,
      numSpotLightShadowsWithMaps: z.numSpotLightShadowsWithMaps,
      numLightProbes: z.numLightProbes,
      numClippingPlanes: h.numPlanes,
      numClipIntersection: h.numIntersection,
      dithering: B.dithering,
      shadowMapEnabled: s.shadowMap.enabled && W.length > 0,
      shadowMapType: s.shadowMap.type,
      toneMapping: Ut,
      decodeVideoTexture: gn && B.map.isVideoTexture === !0 && vn.getTransfer(B.map.colorSpace) === Pn,
      decodeVideoTextureEmissive: Ge && B.emissiveMap.isVideoTexture === !0 && vn.getTransfer(B.emissiveMap.colorSpace) === Pn,
      premultipliedAlpha: B.premultipliedAlpha,
      doubleSided: B.side === Ms,
      flipSided: B.side === ji,
      useDepthPacking: B.depthPacking >= 0,
      depthPacking: B.depthPacking || 0,
      index0AttributeName: B.index0AttributeName,
      extensionClipCullDistance: vt && B.extensions.clipCullDistance === !0 && i.has("WEBGL_clip_cull_distance"),
      extensionMultiDraw: (vt && B.extensions.multiDraw === !0 || Tt) && i.has("WEBGL_multi_draw"),
      rendererExtensionParallelShaderCompile: i.has("KHR_parallel_shader_compile"),
      customProgramCacheKey: B.customProgramCacheKey()
    };
    return un.vertexUv1s = g.has(1), un.vertexUv2s = g.has(2), un.vertexUv3s = g.has(3), g.clear(), un;
  }
  function E(B) {
    const z = [];
    if (B.shaderID ? z.push(B.shaderID) : (z.push(B.customVertexShaderID), z.push(B.customFragmentShaderID)), B.defines !== void 0)
      for (const W in B.defines)
        z.push(W), z.push(B.defines[W]);
    return B.isRawShaderMaterial === !1 && (U(z, B), N(z, B), z.push(s.outputColorSpace)), z.push(B.customProgramCacheKey), z.join();
  }
  function U(B, z) {
    B.push(z.precision), B.push(z.outputColorSpace), B.push(z.envMapMode), B.push(z.envMapCubeUVHeight), B.push(z.mapUv), B.push(z.alphaMapUv), B.push(z.lightMapUv), B.push(z.aoMapUv), B.push(z.bumpMapUv), B.push(z.normalMapUv), B.push(z.displacementMapUv), B.push(z.emissiveMapUv), B.push(z.metalnessMapUv), B.push(z.roughnessMapUv), B.push(z.anisotropyMapUv), B.push(z.clearcoatMapUv), B.push(z.clearcoatNormalMapUv), B.push(z.clearcoatRoughnessMapUv), B.push(z.iridescenceMapUv), B.push(z.iridescenceThicknessMapUv), B.push(z.sheenColorMapUv), B.push(z.sheenRoughnessMapUv), B.push(z.specularMapUv), B.push(z.specularColorMapUv), B.push(z.specularIntensityMapUv), B.push(z.transmissionMapUv), B.push(z.thicknessMapUv), B.push(z.combine), B.push(z.fogExp2), B.push(z.sizeAttenuation), B.push(z.morphTargetsCount), B.push(z.morphAttributeCount), B.push(z.numDirLights), B.push(z.numPointLights), B.push(z.numSpotLights), B.push(z.numSpotLightMaps), B.push(z.numHemiLights), B.push(z.numRectAreaLights), B.push(z.numDirLightShadows), B.push(z.numPointLightShadows), B.push(z.numSpotLightShadows), B.push(z.numSpotLightShadowsWithMaps), B.push(z.numLightProbes), B.push(z.shadowMapType), B.push(z.toneMapping), B.push(z.numClippingPlanes), B.push(z.numClipIntersection), B.push(z.depthPacking);
  }
  function N(B, z) {
    d.disableAll(), z.supportsVertexTextures && d.enable(0), z.instancing && d.enable(1), z.instancingColor && d.enable(2), z.instancingMorph && d.enable(3), z.matcap && d.enable(4), z.envMap && d.enable(5), z.normalMapObjectSpace && d.enable(6), z.normalMapTangentSpace && d.enable(7), z.clearcoat && d.enable(8), z.iridescence && d.enable(9), z.alphaTest && d.enable(10), z.vertexColors && d.enable(11), z.vertexAlphas && d.enable(12), z.vertexUv1s && d.enable(13), z.vertexUv2s && d.enable(14), z.vertexUv3s && d.enable(15), z.vertexTangents && d.enable(16), z.anisotropy && d.enable(17), z.alphaHash && d.enable(18), z.batching && d.enable(19), z.dispersion && d.enable(20), z.batchingColor && d.enable(21), z.gradientMap && d.enable(22), B.push(d.mask), d.disableAll(), z.fog && d.enable(0), z.useFog && d.enable(1), z.flatShading && d.enable(2), z.logarithmicDepthBuffer && d.enable(3), z.reversedDepthBuffer && d.enable(4), z.skinning && d.enable(5), z.morphTargets && d.enable(6), z.morphNormals && d.enable(7), z.morphColors && d.enable(8), z.premultipliedAlpha && d.enable(9), z.shadowMapEnabled && d.enable(10), z.doubleSided && d.enable(11), z.flipSided && d.enable(12), z.useDepthPacking && d.enable(13), z.dithering && d.enable(14), z.transmission && d.enable(15), z.sheen && d.enable(16), z.opaque && d.enable(17), z.pointsUvs && d.enable(18), z.decodeVideoTexture && d.enable(19), z.decodeVideoTextureEmissive && d.enable(20), z.alphaToCoverage && d.enable(21), B.push(d.mask);
  }
  function O(B) {
    const z = R[B.type];
    let W;
    if (z) {
      const le = qr[z];
      W = AE.clone(le.uniforms);
    } else
      W = B.uniforms;
    return W;
  }
  function I(B, z) {
    let W;
    for (let le = 0, ae = S.length; le < ae; le++) {
      const oe = S[le];
      if (oe.cacheKey === z) {
        W = oe, ++W.usedTimes;
        break;
      }
    }
    return W === void 0 && (W = new t4(s, z, B, c), S.push(W)), W;
  }
  function V(B) {
    if (--B.usedTimes === 0) {
      const z = S.indexOf(B);
      S[z] = S[S.length - 1], S.pop(), B.destroy();
    }
  }
  function Y(B) {
    v.remove(B);
  }
  function k() {
    v.dispose();
  }
  return {
    getParameters: C,
    getProgramCacheKey: E,
    getUniforms: O,
    acquireProgram: I,
    releaseProgram: V,
    releaseShaderCache: Y,
    // Exposed for resource monitoring & error feedback via renderer.info:
    programs: S,
    dispose: k
  };
}
function r4() {
  let s = /* @__PURE__ */ new WeakMap();
  function e(h) {
    return s.has(h);
  }
  function n(h) {
    let d = s.get(h);
    return d === void 0 && (d = {}, s.set(h, d)), d;
  }
  function i(h) {
    s.delete(h);
  }
  function r(h, d, v) {
    s.get(h)[d] = v;
  }
  function c() {
    s = /* @__PURE__ */ new WeakMap();
  }
  return {
    has: e,
    get: n,
    remove: i,
    update: r,
    dispose: c
  };
}
function o4(s, e) {
  return s.groupOrder !== e.groupOrder ? s.groupOrder - e.groupOrder : s.renderOrder !== e.renderOrder ? s.renderOrder - e.renderOrder : s.material.id !== e.material.id ? s.material.id - e.material.id : s.z !== e.z ? s.z - e.z : s.id - e.id;
}
function JM(s, e) {
  return s.groupOrder !== e.groupOrder ? s.groupOrder - e.groupOrder : s.renderOrder !== e.renderOrder ? s.renderOrder - e.renderOrder : s.z !== e.z ? e.z - s.z : s.id - e.id;
}
function $M() {
  const s = [];
  let e = 0;
  const n = [], i = [], r = [];
  function c() {
    e = 0, n.length = 0, i.length = 0, r.length = 0;
  }
  function h(x, M, b, R, w, C) {
    let E = s[e];
    return E === void 0 ? (E = {
      id: x.id,
      object: x,
      geometry: M,
      material: b,
      groupOrder: R,
      renderOrder: x.renderOrder,
      z: w,
      group: C
    }, s[e] = E) : (E.id = x.id, E.object = x, E.geometry = M, E.material = b, E.groupOrder = R, E.renderOrder = x.renderOrder, E.z = w, E.group = C), e++, E;
  }
  function d(x, M, b, R, w, C) {
    const E = h(x, M, b, R, w, C);
    b.transmission > 0 ? i.push(E) : b.transparent === !0 ? r.push(E) : n.push(E);
  }
  function v(x, M, b, R, w, C) {
    const E = h(x, M, b, R, w, C);
    b.transmission > 0 ? i.unshift(E) : b.transparent === !0 ? r.unshift(E) : n.unshift(E);
  }
  function g(x, M) {
    n.length > 1 && n.sort(x || o4), i.length > 1 && i.sort(M || JM), r.length > 1 && r.sort(M || JM);
  }
  function S() {
    for (let x = e, M = s.length; x < M; x++) {
      const b = s[x];
      if (b.id === null) break;
      b.id = null, b.object = null, b.geometry = null, b.material = null, b.group = null;
    }
  }
  return {
    opaque: n,
    transmissive: i,
    transparent: r,
    init: c,
    push: d,
    unshift: v,
    finish: S,
    sort: g
  };
}
function l4() {
  let s = /* @__PURE__ */ new WeakMap();
  function e(i, r) {
    const c = s.get(i);
    let h;
    return c === void 0 ? (h = new $M(), s.set(i, [h])) : r >= c.length ? (h = new $M(), c.push(h)) : h = c[r], h;
  }
  function n() {
    s = /* @__PURE__ */ new WeakMap();
  }
  return {
    get: e,
    dispose: n
  };
}
function c4() {
  const s = {};
  return {
    get: function(e) {
      if (s[e.id] !== void 0)
        return s[e.id];
      let n;
      switch (e.type) {
        case "DirectionalLight":
          n = {
            direction: new j(),
            color: new lt()
          };
          break;
        case "SpotLight":
          n = {
            position: new j(),
            direction: new j(),
            color: new lt(),
            distance: 0,
            coneCos: 0,
            penumbraCos: 0,
            decay: 0
          };
          break;
        case "PointLight":
          n = {
            position: new j(),
            color: new lt(),
            distance: 0,
            decay: 0
          };
          break;
        case "HemisphereLight":
          n = {
            direction: new j(),
            skyColor: new lt(),
            groundColor: new lt()
          };
          break;
        case "RectAreaLight":
          n = {
            color: new lt(),
            position: new j(),
            halfWidth: new j(),
            halfHeight: new j()
          };
          break;
      }
      return s[e.id] = n, n;
    }
  };
}
function u4() {
  const s = {};
  return {
    get: function(e) {
      if (s[e.id] !== void 0)
        return s[e.id];
      let n;
      switch (e.type) {
        case "DirectionalLight":
          n = {
            shadowIntensity: 1,
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new De()
          };
          break;
        case "SpotLight":
          n = {
            shadowIntensity: 1,
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new De()
          };
          break;
        case "PointLight":
          n = {
            shadowIntensity: 1,
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new De(),
            shadowCameraNear: 1,
            shadowCameraFar: 1e3
          };
          break;
      }
      return s[e.id] = n, n;
    }
  };
}
let f4 = 0;
function h4(s, e) {
  return (e.castShadow ? 2 : 0) - (s.castShadow ? 2 : 0) + (e.map ? 1 : 0) - (s.map ? 1 : 0);
}
function d4(s) {
  const e = new c4(), n = u4(), i = {
    version: 0,
    hash: {
      directionalLength: -1,
      pointLength: -1,
      spotLength: -1,
      rectAreaLength: -1,
      hemiLength: -1,
      numDirectionalShadows: -1,
      numPointShadows: -1,
      numSpotShadows: -1,
      numSpotMaps: -1,
      numLightProbes: -1
    },
    ambient: [0, 0, 0],
    probe: [],
    directional: [],
    directionalShadow: [],
    directionalShadowMap: [],
    directionalShadowMatrix: [],
    spot: [],
    spotLightMap: [],
    spotShadow: [],
    spotShadowMap: [],
    spotLightMatrix: [],
    rectArea: [],
    rectAreaLTC1: null,
    rectAreaLTC2: null,
    point: [],
    pointShadow: [],
    pointShadowMap: [],
    pointShadowMatrix: [],
    hemi: [],
    numSpotLightShadowsWithMaps: 0,
    numLightProbes: 0
  };
  for (let g = 0; g < 9; g++) i.probe.push(new j());
  const r = new j(), c = new Ft(), h = new Ft();
  function d(g) {
    let S = 0, x = 0, M = 0;
    for (let B = 0; B < 9; B++) i.probe[B].set(0, 0, 0);
    let b = 0, R = 0, w = 0, C = 0, E = 0, U = 0, N = 0, O = 0, I = 0, V = 0, Y = 0;
    g.sort(h4);
    for (let B = 0, z = g.length; B < z; B++) {
      const W = g[B], le = W.color, ae = W.intensity, oe = W.distance, pe = W.shadow && W.shadow.map ? W.shadow.map.texture : null;
      if (W.isAmbientLight)
        S += le.r * ae, x += le.g * ae, M += le.b * ae;
      else if (W.isLightProbe) {
        for (let P = 0; P < 9; P++)
          i.probe[P].addScaledVector(W.sh.coefficients[P], ae);
        Y++;
      } else if (W.isDirectionalLight) {
        const P = e.get(W);
        if (P.color.copy(W.color).multiplyScalar(W.intensity), W.castShadow) {
          const K = W.shadow, Q = n.get(W);
          Q.shadowIntensity = K.intensity, Q.shadowBias = K.bias, Q.shadowNormalBias = K.normalBias, Q.shadowRadius = K.radius, Q.shadowMapSize = K.mapSize, i.directionalShadow[b] = Q, i.directionalShadowMap[b] = pe, i.directionalShadowMatrix[b] = W.shadow.matrix, U++;
        }
        i.directional[b] = P, b++;
      } else if (W.isSpotLight) {
        const P = e.get(W);
        P.position.setFromMatrixPosition(W.matrixWorld), P.color.copy(le).multiplyScalar(ae), P.distance = oe, P.coneCos = Math.cos(W.angle), P.penumbraCos = Math.cos(W.angle * (1 - W.penumbra)), P.decay = W.decay, i.spot[w] = P;
        const K = W.shadow;
        if (W.map && (i.spotLightMap[I] = W.map, I++, K.updateMatrices(W), W.castShadow && V++), i.spotLightMatrix[w] = K.matrix, W.castShadow) {
          const Q = n.get(W);
          Q.shadowIntensity = K.intensity, Q.shadowBias = K.bias, Q.shadowNormalBias = K.normalBias, Q.shadowRadius = K.radius, Q.shadowMapSize = K.mapSize, i.spotShadow[w] = Q, i.spotShadowMap[w] = pe, O++;
        }
        w++;
      } else if (W.isRectAreaLight) {
        const P = e.get(W);
        P.color.copy(le).multiplyScalar(ae), P.halfWidth.set(W.width * 0.5, 0, 0), P.halfHeight.set(0, W.height * 0.5, 0), i.rectArea[C] = P, C++;
      } else if (W.isPointLight) {
        const P = e.get(W);
        if (P.color.copy(W.color).multiplyScalar(W.intensity), P.distance = W.distance, P.decay = W.decay, W.castShadow) {
          const K = W.shadow, Q = n.get(W);
          Q.shadowIntensity = K.intensity, Q.shadowBias = K.bias, Q.shadowNormalBias = K.normalBias, Q.shadowRadius = K.radius, Q.shadowMapSize = K.mapSize, Q.shadowCameraNear = K.camera.near, Q.shadowCameraFar = K.camera.far, i.pointShadow[R] = Q, i.pointShadowMap[R] = pe, i.pointShadowMatrix[R] = W.shadow.matrix, N++;
        }
        i.point[R] = P, R++;
      } else if (W.isHemisphereLight) {
        const P = e.get(W);
        P.skyColor.copy(W.color).multiplyScalar(ae), P.groundColor.copy(W.groundColor).multiplyScalar(ae), i.hemi[E] = P, E++;
      }
    }
    C > 0 && (s.has("OES_texture_float_linear") === !0 ? (i.rectAreaLTC1 = rt.LTC_FLOAT_1, i.rectAreaLTC2 = rt.LTC_FLOAT_2) : (i.rectAreaLTC1 = rt.LTC_HALF_1, i.rectAreaLTC2 = rt.LTC_HALF_2)), i.ambient[0] = S, i.ambient[1] = x, i.ambient[2] = M;
    const k = i.hash;
    (k.directionalLength !== b || k.pointLength !== R || k.spotLength !== w || k.rectAreaLength !== C || k.hemiLength !== E || k.numDirectionalShadows !== U || k.numPointShadows !== N || k.numSpotShadows !== O || k.numSpotMaps !== I || k.numLightProbes !== Y) && (i.directional.length = b, i.spot.length = w, i.rectArea.length = C, i.point.length = R, i.hemi.length = E, i.directionalShadow.length = U, i.directionalShadowMap.length = U, i.pointShadow.length = N, i.pointShadowMap.length = N, i.spotShadow.length = O, i.spotShadowMap.length = O, i.directionalShadowMatrix.length = U, i.pointShadowMatrix.length = N, i.spotLightMatrix.length = O + I - V, i.spotLightMap.length = I, i.numSpotLightShadowsWithMaps = V, i.numLightProbes = Y, k.directionalLength = b, k.pointLength = R, k.spotLength = w, k.rectAreaLength = C, k.hemiLength = E, k.numDirectionalShadows = U, k.numPointShadows = N, k.numSpotShadows = O, k.numSpotMaps = I, k.numLightProbes = Y, i.version = f4++);
  }
  function v(g, S) {
    let x = 0, M = 0, b = 0, R = 0, w = 0;
    const C = S.matrixWorldInverse;
    for (let E = 0, U = g.length; E < U; E++) {
      const N = g[E];
      if (N.isDirectionalLight) {
        const O = i.directional[x];
        O.direction.setFromMatrixPosition(N.matrixWorld), r.setFromMatrixPosition(N.target.matrixWorld), O.direction.sub(r), O.direction.transformDirection(C), x++;
      } else if (N.isSpotLight) {
        const O = i.spot[b];
        O.position.setFromMatrixPosition(N.matrixWorld), O.position.applyMatrix4(C), O.direction.setFromMatrixPosition(N.matrixWorld), r.setFromMatrixPosition(N.target.matrixWorld), O.direction.sub(r), O.direction.transformDirection(C), b++;
      } else if (N.isRectAreaLight) {
        const O = i.rectArea[R];
        O.position.setFromMatrixPosition(N.matrixWorld), O.position.applyMatrix4(C), h.identity(), c.copy(N.matrixWorld), c.premultiply(C), h.extractRotation(c), O.halfWidth.set(N.width * 0.5, 0, 0), O.halfHeight.set(0, N.height * 0.5, 0), O.halfWidth.applyMatrix4(h), O.halfHeight.applyMatrix4(h), R++;
      } else if (N.isPointLight) {
        const O = i.point[M];
        O.position.setFromMatrixPosition(N.matrixWorld), O.position.applyMatrix4(C), M++;
      } else if (N.isHemisphereLight) {
        const O = i.hemi[w];
        O.direction.setFromMatrixPosition(N.matrixWorld), O.direction.transformDirection(C), w++;
      }
    }
  }
  return {
    setup: d,
    setupView: v,
    state: i
  };
}
function eb(s) {
  const e = new d4(s), n = [], i = [];
  function r(S) {
    g.camera = S, n.length = 0, i.length = 0;
  }
  function c(S) {
    n.push(S);
  }
  function h(S) {
    i.push(S);
  }
  function d() {
    e.setup(n);
  }
  function v(S) {
    e.setupView(n, S);
  }
  const g = {
    lightsArray: n,
    shadowsArray: i,
    camera: null,
    lights: e,
    transmissionRenderTarget: {}
  };
  return {
    init: r,
    state: g,
    setupLights: d,
    setupLightsView: v,
    pushLight: c,
    pushShadow: h
  };
}
function p4(s) {
  let e = /* @__PURE__ */ new WeakMap();
  function n(r, c = 0) {
    const h = e.get(r);
    let d;
    return h === void 0 ? (d = new eb(s), e.set(r, [d])) : c >= h.length ? (d = new eb(s), h.push(d)) : d = h[c], d;
  }
  function i() {
    e = /* @__PURE__ */ new WeakMap();
  }
  return {
    get: n,
    dispose: i
  };
}
const m4 = `void main() {
	gl_Position = vec4( position, 1.0 );
}`, v4 = `uniform sampler2D shadow_pass;
uniform vec2 resolution;
uniform float radius;
#include <packing>
void main() {
	const float samples = float( VSM_SAMPLES );
	float mean = 0.0;
	float squared_mean = 0.0;
	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );
	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;
	for ( float i = 0.0; i < samples; i ++ ) {
		float uvOffset = uvStart + i * uvStride;
		#ifdef HORIZONTAL_PASS
			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );
			mean += distribution.x;
			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;
		#else
			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );
			mean += depth;
			squared_mean += depth * depth;
		#endif
	}
	mean = mean / samples;
	squared_mean = squared_mean / samples;
	float std_dev = sqrt( squared_mean - mean * mean );
	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );
}`;
function g4(s, e, n) {
  let i = new Jh();
  const r = new De(), c = new De(), h = new xn(), d = new dx({ depthPacking: hE }), v = new px(), g = {}, S = n.maxTextureSize, x = { [Po]: ji, [ji]: Po, [Ms]: Ms }, M = new ts({
    defines: {
      VSM_SAMPLES: 8
    },
    uniforms: {
      shadow_pass: { value: null },
      resolution: { value: new De() },
      radius: { value: 4 }
    },
    vertexShader: m4,
    fragmentShader: v4
  }), b = M.clone();
  b.defines.HORIZONTAL_PASS = 1;
  const R = new Kt();
  R.setAttribute(
    "position",
    new Nn(
      new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]),
      3
    )
  );
  const w = new Ci(R, M), C = this;
  this.enabled = !1, this.autoUpdate = !0, this.needsUpdate = !1, this.type = I0;
  let E = this.type;
  this.render = function(V, Y, k) {
    if (C.enabled === !1 || C.autoUpdate === !1 && C.needsUpdate === !1 || V.length === 0) return;
    const B = s.getRenderTarget(), z = s.getActiveCubeFace(), W = s.getActiveMipmapLevel(), le = s.state;
    le.setBlending(dr), le.buffers.depth.getReversed() ? le.buffers.color.setClear(0, 0, 0, 0) : le.buffers.color.setClear(1, 1, 1, 1), le.buffers.depth.setTest(!0), le.setScissorTest(!1);
    const ae = E !== Xr && this.type === Xr, oe = E === Xr && this.type !== Xr;
    for (let pe = 0, P = V.length; pe < P; pe++) {
      const K = V[pe], Q = K.shadow;
      if (Q === void 0) {
        console.warn("THREE.WebGLShadowMap:", K, "has no shadow.");
        continue;
      }
      if (Q.autoUpdate === !1 && Q.needsUpdate === !1) continue;
      r.copy(Q.mapSize);
      const fe = Q.getFrameExtents();
      if (r.multiply(fe), c.copy(Q.mapSize), (r.x > S || r.y > S) && (r.x > S && (c.x = Math.floor(S / fe.x), r.x = c.x * fe.x, Q.mapSize.x = c.x), r.y > S && (c.y = Math.floor(S / fe.y), r.y = c.y * fe.y, Q.mapSize.y = c.y)), Q.map === null || ae === !0 || oe === !0) {
        const te = this.type !== Xr ? { minFilter: wi, magFilter: wi } : {};
        Q.map !== null && Q.map.dispose(), Q.map = new Ua(r.x, r.y, te), Q.map.texture.name = K.name + ".shadowMap", Q.camera.updateProjectionMatrix();
      }
      s.setRenderTarget(Q.map), s.clear();
      const q = Q.getViewportCount();
      for (let te = 0; te < q; te++) {
        const Me = Q.getViewport(te);
        h.set(
          c.x * Me.x,
          c.y * Me.y,
          c.x * Me.z,
          c.y * Me.w
        ), le.viewport(h), Q.updateMatrices(K, te), i = Q.getFrustum(), O(Y, k, Q.camera, K, this.type);
      }
      Q.isPointLightShadow !== !0 && this.type === Xr && U(Q, k), Q.needsUpdate = !1;
    }
    E = this.type, C.needsUpdate = !1, s.setRenderTarget(B, z, W);
  };
  function U(V, Y) {
    const k = e.update(w);
    M.defines.VSM_SAMPLES !== V.blurSamples && (M.defines.VSM_SAMPLES = V.blurSamples, b.defines.VSM_SAMPLES = V.blurSamples, M.needsUpdate = !0, b.needsUpdate = !0), V.mapPass === null && (V.mapPass = new Ua(r.x, r.y)), M.uniforms.shadow_pass.value = V.map.texture, M.uniforms.resolution.value = V.mapSize, M.uniforms.radius.value = V.radius, s.setRenderTarget(V.mapPass), s.clear(), s.renderBufferDirect(Y, null, k, M, w, null), b.uniforms.shadow_pass.value = V.mapPass.texture, b.uniforms.resolution.value = V.mapSize, b.uniforms.radius.value = V.radius, s.setRenderTarget(V.map), s.clear(), s.renderBufferDirect(Y, null, k, b, w, null);
  }
  function N(V, Y, k, B) {
    let z = null;
    const W = k.isPointLight === !0 ? V.customDistanceMaterial : V.customDepthMaterial;
    if (W !== void 0)
      z = W;
    else if (z = k.isPointLight === !0 ? v : d, s.localClippingEnabled && Y.clipShadows === !0 && Array.isArray(Y.clippingPlanes) && Y.clippingPlanes.length !== 0 || Y.displacementMap && Y.displacementScale !== 0 || Y.alphaMap && Y.alphaTest > 0 || Y.map && Y.alphaTest > 0 || Y.alphaToCoverage === !0) {
      const le = z.uuid, ae = Y.uuid;
      let oe = g[le];
      oe === void 0 && (oe = {}, g[le] = oe);
      let pe = oe[ae];
      pe === void 0 && (pe = z.clone(), oe[ae] = pe, Y.addEventListener("dispose", I)), z = pe;
    }
    if (z.visible = Y.visible, z.wireframe = Y.wireframe, B === Xr ? z.side = Y.shadowSide !== null ? Y.shadowSide : Y.side : z.side = Y.shadowSide !== null ? Y.shadowSide : x[Y.side], z.alphaMap = Y.alphaMap, z.alphaTest = Y.alphaToCoverage === !0 ? 0.5 : Y.alphaTest, z.map = Y.map, z.clipShadows = Y.clipShadows, z.clippingPlanes = Y.clippingPlanes, z.clipIntersection = Y.clipIntersection, z.displacementMap = Y.displacementMap, z.displacementScale = Y.displacementScale, z.displacementBias = Y.displacementBias, z.wireframeLinewidth = Y.wireframeLinewidth, z.linewidth = Y.linewidth, k.isPointLight === !0 && z.isMeshDistanceMaterial === !0) {
      const le = s.properties.get(z);
      le.light = k;
    }
    return z;
  }
  function O(V, Y, k, B, z) {
    if (V.visible === !1) return;
    if (V.layers.test(Y.layers) && (V.isMesh || V.isLine || V.isPoints) && (V.castShadow || V.receiveShadow && z === Xr) && (!V.frustumCulled || i.intersectsObject(V))) {
      V.modelViewMatrix.multiplyMatrices(k.matrixWorldInverse, V.matrixWorld);
      const ae = e.update(V), oe = V.material;
      if (Array.isArray(oe)) {
        const pe = ae.groups;
        for (let P = 0, K = pe.length; P < K; P++) {
          const Q = pe[P], fe = oe[Q.materialIndex];
          if (fe && fe.visible) {
            const q = N(V, fe, B, z);
            V.onBeforeShadow(s, V, Y, k, ae, q, Q), s.renderBufferDirect(k, null, ae, q, V, Q), V.onAfterShadow(s, V, Y, k, ae, q, Q);
          }
        }
      } else if (oe.visible) {
        const pe = N(V, oe, B, z);
        V.onBeforeShadow(s, V, Y, k, ae, pe, null), s.renderBufferDirect(k, null, ae, pe, V, null), V.onAfterShadow(s, V, Y, k, ae, pe, null);
      }
    }
    const le = V.children;
    for (let ae = 0, oe = le.length; ae < oe; ae++)
      O(le[ae], Y, k, B, z);
  }
  function I(V) {
    V.target.removeEventListener("dispose", I);
    for (const k in g) {
      const B = g[k], z = V.target.uuid;
      z in B && (B[z].dispose(), delete B[z]);
    }
  }
}
const y4 = {
  [Qg]: Kg,
  [Jg]: t0,
  [$g]: n0,
  [Qu]: e0,
  [Kg]: Qg,
  [t0]: Jg,
  [n0]: $g,
  [e0]: Qu
};
function _4(s, e) {
  function n() {
    let se = !1;
    const ke = new xn();
    let Ke = null;
    const ct = new xn(0, 0, 0, 0);
    return {
      setMask: function(qe) {
        Ke !== qe && !se && (s.colorMask(qe, qe, qe, qe), Ke = qe);
      },
      setLocked: function(qe) {
        se = qe;
      },
      setClear: function(qe, Pe, vt, Ut, un) {
        un === !0 && (qe *= Ut, Pe *= Ut, vt *= Ut), ke.set(qe, Pe, vt, Ut), ct.equals(ke) === !1 && (s.clearColor(qe, Pe, vt, Ut), ct.copy(ke));
      },
      reset: function() {
        se = !1, Ke = null, ct.set(-1, 0, 0, 0);
      }
    };
  }
  function i() {
    let se = !1, ke = !1, Ke = null, ct = null, qe = null;
    return {
      setReversed: function(Pe) {
        if (ke !== Pe) {
          const vt = e.get("EXT_clip_control");
          Pe ? vt.clipControlEXT(vt.LOWER_LEFT_EXT, vt.ZERO_TO_ONE_EXT) : vt.clipControlEXT(vt.LOWER_LEFT_EXT, vt.NEGATIVE_ONE_TO_ONE_EXT), ke = Pe;
          const Ut = qe;
          qe = null, this.setClear(Ut);
        }
      },
      getReversed: function() {
        return ke;
      },
      setTest: function(Pe) {
        Pe ? Fe(s.DEPTH_TEST) : $e(s.DEPTH_TEST);
      },
      setMask: function(Pe) {
        Ke !== Pe && !se && (s.depthMask(Pe), Ke = Pe);
      },
      setFunc: function(Pe) {
        if (ke && (Pe = y4[Pe]), ct !== Pe) {
          switch (Pe) {
            case Qg:
              s.depthFunc(s.NEVER);
              break;
            case Kg:
              s.depthFunc(s.ALWAYS);
              break;
            case Jg:
              s.depthFunc(s.LESS);
              break;
            case Qu:
              s.depthFunc(s.LEQUAL);
              break;
            case $g:
              s.depthFunc(s.EQUAL);
              break;
            case e0:
              s.depthFunc(s.GEQUAL);
              break;
            case t0:
              s.depthFunc(s.GREATER);
              break;
            case n0:
              s.depthFunc(s.NOTEQUAL);
              break;
            default:
              s.depthFunc(s.LEQUAL);
          }
          ct = Pe;
        }
      },
      setLocked: function(Pe) {
        se = Pe;
      },
      setClear: function(Pe) {
        qe !== Pe && (ke && (Pe = 1 - Pe), s.clearDepth(Pe), qe = Pe);
      },
      reset: function() {
        se = !1, Ke = null, ct = null, qe = null, ke = !1;
      }
    };
  }
  function r() {
    let se = !1, ke = null, Ke = null, ct = null, qe = null, Pe = null, vt = null, Ut = null, un = null;
    return {
      setTest: function(rn) {
        se || (rn ? Fe(s.STENCIL_TEST) : $e(s.STENCIL_TEST));
      },
      setMask: function(rn) {
        ke !== rn && !se && (s.stencilMask(rn), ke = rn);
      },
      setFunc: function(rn, is, pi) {
        (Ke !== rn || ct !== is || qe !== pi) && (s.stencilFunc(rn, is, pi), Ke = rn, ct = is, qe = pi);
      },
      setOp: function(rn, is, pi) {
        (Pe !== rn || vt !== is || Ut !== pi) && (s.stencilOp(rn, is, pi), Pe = rn, vt = is, Ut = pi);
      },
      setLocked: function(rn) {
        se = rn;
      },
      setClear: function(rn) {
        un !== rn && (s.clearStencil(rn), un = rn);
      },
      reset: function() {
        se = !1, ke = null, Ke = null, ct = null, qe = null, Pe = null, vt = null, Ut = null, un = null;
      }
    };
  }
  const c = new n(), h = new i(), d = new r(), v = /* @__PURE__ */ new WeakMap(), g = /* @__PURE__ */ new WeakMap();
  let S = {}, x = {}, M = /* @__PURE__ */ new WeakMap(), b = [], R = null, w = !1, C = null, E = null, U = null, N = null, O = null, I = null, V = null, Y = new lt(0, 0, 0), k = 0, B = !1, z = null, W = null, le = null, ae = null, oe = null;
  const pe = s.getParameter(s.MAX_COMBINED_TEXTURE_IMAGE_UNITS);
  let P = !1, K = 0;
  const Q = s.getParameter(s.VERSION);
  Q.indexOf("WebGL") !== -1 ? (K = parseFloat(/^WebGL (\d)/.exec(Q)[1]), P = K >= 1) : Q.indexOf("OpenGL ES") !== -1 && (K = parseFloat(/^OpenGL ES (\d)/.exec(Q)[1]), P = K >= 2);
  let fe = null, q = {};
  const te = s.getParameter(s.SCISSOR_BOX), Me = s.getParameter(s.VIEWPORT), Re = new xn().fromArray(te), Ne = new xn().fromArray(Me);
  function he(se, ke, Ke, ct) {
    const qe = new Uint8Array(4), Pe = s.createTexture();
    s.bindTexture(se, Pe), s.texParameteri(se, s.TEXTURE_MIN_FILTER, s.NEAREST), s.texParameteri(se, s.TEXTURE_MAG_FILTER, s.NEAREST);
    for (let vt = 0; vt < Ke; vt++)
      se === s.TEXTURE_3D || se === s.TEXTURE_2D_ARRAY ? s.texImage3D(ke, 0, s.RGBA, 1, 1, ct, 0, s.RGBA, s.UNSIGNED_BYTE, qe) : s.texImage2D(ke + vt, 0, s.RGBA, 1, 1, 0, s.RGBA, s.UNSIGNED_BYTE, qe);
    return Pe;
  }
  const we = {};
  we[s.TEXTURE_2D] = he(s.TEXTURE_2D, s.TEXTURE_2D, 1), we[s.TEXTURE_CUBE_MAP] = he(s.TEXTURE_CUBE_MAP, s.TEXTURE_CUBE_MAP_POSITIVE_X, 6), we[s.TEXTURE_2D_ARRAY] = he(s.TEXTURE_2D_ARRAY, s.TEXTURE_2D_ARRAY, 1, 1), we[s.TEXTURE_3D] = he(s.TEXTURE_3D, s.TEXTURE_3D, 1, 1), c.setClear(0, 0, 0, 1), h.setClear(1), d.setClear(0), Fe(s.DEPTH_TEST), h.setFunc(Qu), Xe(!1), Ce(vS), Fe(s.CULL_FACE), He(dr);
  function Fe(se) {
    S[se] !== !0 && (s.enable(se), S[se] = !0);
  }
  function $e(se) {
    S[se] !== !1 && (s.disable(se), S[se] = !1);
  }
  function ut(se, ke) {
    return x[se] !== ke ? (s.bindFramebuffer(se, ke), x[se] = ke, se === s.DRAW_FRAMEBUFFER && (x[s.FRAMEBUFFER] = ke), se === s.FRAMEBUFFER && (x[s.DRAW_FRAMEBUFFER] = ke), !0) : !1;
  }
  function Tt(se, ke) {
    let Ke = b, ct = !1;
    if (se) {
      Ke = M.get(ke), Ke === void 0 && (Ke = [], M.set(ke, Ke));
      const qe = se.textures;
      if (Ke.length !== qe.length || Ke[0] !== s.COLOR_ATTACHMENT0) {
        for (let Pe = 0, vt = qe.length; Pe < vt; Pe++)
          Ke[Pe] = s.COLOR_ATTACHMENT0 + Pe;
        Ke.length = qe.length, ct = !0;
      }
    } else
      Ke[0] !== s.BACK && (Ke[0] = s.BACK, ct = !0);
    ct && s.drawBuffers(Ke);
  }
  function gn(se) {
    return R !== se ? (s.useProgram(se), R = se, !0) : !1;
  }
  const Ct = {
    [Ec]: s.FUNC_ADD,
    [Pb]: s.FUNC_SUBTRACT,
    [Ib]: s.FUNC_REVERSE_SUBTRACT
  };
  Ct[Hb] = s.MIN, Ct[Vb] = s.MAX;
  const ee = {
    [Gb]: s.ZERO,
    [Fb]: s.ONE,
    [Xb]: s.SRC_COLOR,
    [Zg]: s.SRC_ALPHA,
    [jb]: s.SRC_ALPHA_SATURATE,
    [Wb]: s.DST_COLOR,
    [Yb]: s.DST_ALPHA,
    [qb]: s.ONE_MINUS_SRC_COLOR,
    [jg]: s.ONE_MINUS_SRC_ALPHA,
    [Zb]: s.ONE_MINUS_DST_COLOR,
    [kb]: s.ONE_MINUS_DST_ALPHA,
    [Qb]: s.CONSTANT_COLOR,
    [Kb]: s.ONE_MINUS_CONSTANT_COLOR,
    [Jb]: s.CONSTANT_ALPHA,
    [$b]: s.ONE_MINUS_CONSTANT_ALPHA
  };
  function He(se, ke, Ke, ct, qe, Pe, vt, Ut, un, rn) {
    if (se === dr) {
      w === !0 && ($e(s.BLEND), w = !1);
      return;
    }
    if (w === !1 && (Fe(s.BLEND), w = !0), se !== Bb) {
      if (se !== C || rn !== B) {
        if ((E !== Ec || O !== Ec) && (s.blendEquation(s.FUNC_ADD), E = Ec, O = Ec), rn)
          switch (se) {
            case ku:
              s.blendFuncSeparate(s.ONE, s.ONE_MINUS_SRC_ALPHA, s.ONE, s.ONE_MINUS_SRC_ALPHA);
              break;
            case gS:
              s.blendFunc(s.ONE, s.ONE);
              break;
            case yS:
              s.blendFuncSeparate(s.ZERO, s.ONE_MINUS_SRC_COLOR, s.ZERO, s.ONE);
              break;
            case _S:
              s.blendFuncSeparate(s.DST_COLOR, s.ONE_MINUS_SRC_ALPHA, s.ZERO, s.ONE);
              break;
            default:
              console.error("THREE.WebGLState: Invalid blending: ", se);
              break;
          }
        else
          switch (se) {
            case ku:
              s.blendFuncSeparate(s.SRC_ALPHA, s.ONE_MINUS_SRC_ALPHA, s.ONE, s.ONE_MINUS_SRC_ALPHA);
              break;
            case gS:
              s.blendFuncSeparate(s.SRC_ALPHA, s.ONE, s.ONE, s.ONE);
              break;
            case yS:
              console.error("THREE.WebGLState: SubtractiveBlending requires material.premultipliedAlpha = true");
              break;
            case _S:
              console.error("THREE.WebGLState: MultiplyBlending requires material.premultipliedAlpha = true");
              break;
            default:
              console.error("THREE.WebGLState: Invalid blending: ", se);
              break;
          }
        U = null, N = null, I = null, V = null, Y.set(0, 0, 0), k = 0, C = se, B = rn;
      }
      return;
    }
    qe = qe || ke, Pe = Pe || Ke, vt = vt || ct, (ke !== E || qe !== O) && (s.blendEquationSeparate(Ct[ke], Ct[qe]), E = ke, O = qe), (Ke !== U || ct !== N || Pe !== I || vt !== V) && (s.blendFuncSeparate(ee[Ke], ee[ct], ee[Pe], ee[vt]), U = Ke, N = ct, I = Pe, V = vt), (Ut.equals(Y) === !1 || un !== k) && (s.blendColor(Ut.r, Ut.g, Ut.b, un), Y.copy(Ut), k = un), C = se, B = !1;
  }
  function Ue(se, ke) {
    se.side === Ms ? $e(s.CULL_FACE) : Fe(s.CULL_FACE);
    let Ke = se.side === ji;
    ke && (Ke = !Ke), Xe(Ke), se.blending === ku && se.transparent === !1 ? He(dr) : He(se.blending, se.blendEquation, se.blendSrc, se.blendDst, se.blendEquationAlpha, se.blendSrcAlpha, se.blendDstAlpha, se.blendColor, se.blendAlpha, se.premultipliedAlpha), h.setFunc(se.depthFunc), h.setTest(se.depthTest), h.setMask(se.depthWrite), c.setMask(se.colorWrite);
    const ct = se.stencilWrite;
    d.setTest(ct), ct && (d.setMask(se.stencilWriteMask), d.setFunc(se.stencilFunc, se.stencilRef, se.stencilFuncMask), d.setOp(se.stencilFail, se.stencilZFail, se.stencilZPass)), Ge(se.polygonOffset, se.polygonOffsetFactor, se.polygonOffsetUnits), se.alphaToCoverage === !0 ? Fe(s.SAMPLE_ALPHA_TO_COVERAGE) : $e(s.SAMPLE_ALPHA_TO_COVERAGE);
  }
  function Xe(se) {
    z !== se && (se ? s.frontFace(s.CW) : s.frontFace(s.CCW), z = se);
  }
  function Ce(se) {
    se !== Ob ? (Fe(s.CULL_FACE), se !== W && (se === vS ? s.cullFace(s.BACK) : se === Lb ? s.cullFace(s.FRONT) : s.cullFace(s.FRONT_AND_BACK))) : $e(s.CULL_FACE), W = se;
  }
  function et(se) {
    se !== le && (P && s.lineWidth(se), le = se);
  }
  function Ge(se, ke, Ke) {
    se ? (Fe(s.POLYGON_OFFSET_FILL), (ae !== ke || oe !== Ke) && (s.polygonOffset(ke, Ke), ae = ke, oe = Ke)) : $e(s.POLYGON_OFFSET_FILL);
  }
  function Ze(se) {
    se ? Fe(s.SCISSOR_TEST) : $e(s.SCISSOR_TEST);
  }
  function At(se) {
    se === void 0 && (se = s.TEXTURE0 + pe - 1), fe !== se && (s.activeTexture(se), fe = se);
  }
  function Bt(se, ke, Ke) {
    Ke === void 0 && (fe === null ? Ke = s.TEXTURE0 + pe - 1 : Ke = fe);
    let ct = q[Ke];
    ct === void 0 && (ct = { type: void 0, texture: void 0 }, q[Ke] = ct), (ct.type !== se || ct.texture !== ke) && (fe !== Ke && (s.activeTexture(Ke), fe = Ke), s.bindTexture(se, ke || we[se]), ct.type = se, ct.texture = ke);
  }
  function Z() {
    const se = q[fe];
    se !== void 0 && se.type !== void 0 && (s.bindTexture(se.type, null), se.type = void 0, se.texture = void 0);
  }
  function H() {
    try {
      s.compressedTexImage2D(...arguments);
    } catch (se) {
      console.error("THREE.WebGLState:", se);
    }
  }
  function me() {
    try {
      s.compressedTexImage3D(...arguments);
    } catch (se) {
      console.error("THREE.WebGLState:", se);
    }
  }
  function Te() {
    try {
      s.texSubImage2D(...arguments);
    } catch (se) {
      console.error("THREE.WebGLState:", se);
    }
  }
  function ze() {
    try {
      s.texSubImage3D(...arguments);
    } catch (se) {
      console.error("THREE.WebGLState:", se);
    }
  }
  function Ae() {
    try {
      s.compressedTexSubImage2D(...arguments);
    } catch (se) {
      console.error("THREE.WebGLState:", se);
    }
  }
  function at() {
    try {
      s.compressedTexSubImage3D(...arguments);
    } catch (se) {
      console.error("THREE.WebGLState:", se);
    }
  }
  function Qe() {
    try {
      s.texStorage2D(...arguments);
    } catch (se) {
      console.error("THREE.WebGLState:", se);
    }
  }
  function dt() {
    try {
      s.texStorage3D(...arguments);
    } catch (se) {
      console.error("THREE.WebGLState:", se);
    }
  }
  function pt() {
    try {
      s.texImage2D(...arguments);
    } catch (se) {
      console.error("THREE.WebGLState:", se);
    }
  }
  function Ve() {
    try {
      s.texImage3D(...arguments);
    } catch (se) {
      console.error("THREE.WebGLState:", se);
    }
  }
  function tt(se) {
    Re.equals(se) === !1 && (s.scissor(se.x, se.y, se.z, se.w), Re.copy(se));
  }
  function St(se) {
    Ne.equals(se) === !1 && (s.viewport(se.x, se.y, se.z, se.w), Ne.copy(se));
  }
  function mt(se, ke) {
    let Ke = g.get(ke);
    Ke === void 0 && (Ke = /* @__PURE__ */ new WeakMap(), g.set(ke, Ke));
    let ct = Ke.get(se);
    ct === void 0 && (ct = s.getUniformBlockIndex(ke, se.name), Ke.set(se, ct));
  }
  function nt(se, ke) {
    const ct = g.get(ke).get(se);
    v.get(ke) !== ct && (s.uniformBlockBinding(ke, ct, se.__bindingPointIndex), v.set(ke, ct));
  }
  function Pt() {
    s.disable(s.BLEND), s.disable(s.CULL_FACE), s.disable(s.DEPTH_TEST), s.disable(s.POLYGON_OFFSET_FILL), s.disable(s.SCISSOR_TEST), s.disable(s.STENCIL_TEST), s.disable(s.SAMPLE_ALPHA_TO_COVERAGE), s.blendEquation(s.FUNC_ADD), s.blendFunc(s.ONE, s.ZERO), s.blendFuncSeparate(s.ONE, s.ZERO, s.ONE, s.ZERO), s.blendColor(0, 0, 0, 0), s.colorMask(!0, !0, !0, !0), s.clearColor(0, 0, 0, 0), s.depthMask(!0), s.depthFunc(s.LESS), h.setReversed(!1), s.clearDepth(1), s.stencilMask(4294967295), s.stencilFunc(s.ALWAYS, 0, 4294967295), s.stencilOp(s.KEEP, s.KEEP, s.KEEP), s.clearStencil(0), s.cullFace(s.BACK), s.frontFace(s.CCW), s.polygonOffset(0, 0), s.activeTexture(s.TEXTURE0), s.bindFramebuffer(s.FRAMEBUFFER, null), s.bindFramebuffer(s.DRAW_FRAMEBUFFER, null), s.bindFramebuffer(s.READ_FRAMEBUFFER, null), s.useProgram(null), s.lineWidth(1), s.scissor(0, 0, s.canvas.width, s.canvas.height), s.viewport(0, 0, s.canvas.width, s.canvas.height), S = {}, fe = null, q = {}, x = {}, M = /* @__PURE__ */ new WeakMap(), b = [], R = null, w = !1, C = null, E = null, U = null, N = null, O = null, I = null, V = null, Y = new lt(0, 0, 0), k = 0, B = !1, z = null, W = null, le = null, ae = null, oe = null, Re.set(0, 0, s.canvas.width, s.canvas.height), Ne.set(0, 0, s.canvas.width, s.canvas.height), c.reset(), h.reset(), d.reset();
  }
  return {
    buffers: {
      color: c,
      depth: h,
      stencil: d
    },
    enable: Fe,
    disable: $e,
    bindFramebuffer: ut,
    drawBuffers: Tt,
    useProgram: gn,
    setBlending: He,
    setMaterial: Ue,
    setFlipSided: Xe,
    setCullFace: Ce,
    setLineWidth: et,
    setPolygonOffset: Ge,
    setScissorTest: Ze,
    activeTexture: At,
    bindTexture: Bt,
    unbindTexture: Z,
    compressedTexImage2D: H,
    compressedTexImage3D: me,
    texImage2D: pt,
    texImage3D: Ve,
    updateUBOMapping: mt,
    uniformBlockBinding: nt,
    texStorage2D: Qe,
    texStorage3D: dt,
    texSubImage2D: Te,
    texSubImage3D: ze,
    compressedTexSubImage2D: Ae,
    compressedTexSubImage3D: at,
    scissor: tt,
    viewport: St,
    reset: Pt
  };
}
function S4(s, e, n, i, r, c, h) {
  const d = e.has("WEBGL_multisampled_render_to_texture") ? e.get("WEBGL_multisampled_render_to_texture") : null, v = typeof navigator > "u" ? !1 : /OculusBrowser/g.test(navigator.userAgent), g = new De(), S = /* @__PURE__ */ new WeakMap();
  let x;
  const M = /* @__PURE__ */ new WeakMap();
  let b = !1;
  try {
    b = typeof OffscreenCanvas < "u" && new OffscreenCanvas(1, 1).getContext("2d") !== null;
  } catch {
  }
  function R(Z, H) {
    return b ? (
      // eslint-disable-next-line compat/compat
      new OffscreenCanvas(Z, H)
    ) : Jp("canvas");
  }
  function w(Z, H, me) {
    let Te = 1;
    const ze = Bt(Z);
    if ((ze.width > me || ze.height > me) && (Te = me / Math.max(ze.width, ze.height)), Te < 1)
      if (typeof HTMLImageElement < "u" && Z instanceof HTMLImageElement || typeof HTMLCanvasElement < "u" && Z instanceof HTMLCanvasElement || typeof ImageBitmap < "u" && Z instanceof ImageBitmap || typeof VideoFrame < "u" && Z instanceof VideoFrame) {
        const Ae = Math.floor(Te * ze.width), at = Math.floor(Te * ze.height);
        x === void 0 && (x = R(Ae, at));
        const Qe = H ? R(Ae, at) : x;
        return Qe.width = Ae, Qe.height = at, Qe.getContext("2d").drawImage(Z, 0, 0, Ae, at), console.warn("THREE.WebGLRenderer: Texture has been resized from (" + ze.width + "x" + ze.height + ") to (" + Ae + "x" + at + ")."), Qe;
      } else
        return "data" in Z && console.warn("THREE.WebGLRenderer: Image in DataTexture is too big (" + ze.width + "x" + ze.height + ")."), Z;
    return Z;
  }
  function C(Z) {
    return Z.generateMipmaps;
  }
  function E(Z) {
    s.generateMipmap(Z);
  }
  function U(Z) {
    return Z.isWebGLCubeRenderTarget ? s.TEXTURE_CUBE_MAP : Z.isWebGL3DRenderTarget ? s.TEXTURE_3D : Z.isWebGLArrayRenderTarget || Z.isCompressedArrayTexture ? s.TEXTURE_2D_ARRAY : s.TEXTURE_2D;
  }
  function N(Z, H, me, Te, ze = !1) {
    if (Z !== null) {
      if (s[Z] !== void 0) return s[Z];
      console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" + Z + "'");
    }
    let Ae = H;
    if (H === s.RED && (me === s.FLOAT && (Ae = s.R32F), me === s.HALF_FLOAT && (Ae = s.R16F), me === s.UNSIGNED_BYTE && (Ae = s.R8)), H === s.RED_INTEGER && (me === s.UNSIGNED_BYTE && (Ae = s.R8UI), me === s.UNSIGNED_SHORT && (Ae = s.R16UI), me === s.UNSIGNED_INT && (Ae = s.R32UI), me === s.BYTE && (Ae = s.R8I), me === s.SHORT && (Ae = s.R16I), me === s.INT && (Ae = s.R32I)), H === s.RG && (me === s.FLOAT && (Ae = s.RG32F), me === s.HALF_FLOAT && (Ae = s.RG16F), me === s.UNSIGNED_BYTE && (Ae = s.RG8)), H === s.RG_INTEGER && (me === s.UNSIGNED_BYTE && (Ae = s.RG8UI), me === s.UNSIGNED_SHORT && (Ae = s.RG16UI), me === s.UNSIGNED_INT && (Ae = s.RG32UI), me === s.BYTE && (Ae = s.RG8I), me === s.SHORT && (Ae = s.RG16I), me === s.INT && (Ae = s.RG32I)), H === s.RGB_INTEGER && (me === s.UNSIGNED_BYTE && (Ae = s.RGB8UI), me === s.UNSIGNED_SHORT && (Ae = s.RGB16UI), me === s.UNSIGNED_INT && (Ae = s.RGB32UI), me === s.BYTE && (Ae = s.RGB8I), me === s.SHORT && (Ae = s.RGB16I), me === s.INT && (Ae = s.RGB32I)), H === s.RGBA_INTEGER && (me === s.UNSIGNED_BYTE && (Ae = s.RGBA8UI), me === s.UNSIGNED_SHORT && (Ae = s.RGBA16UI), me === s.UNSIGNED_INT && (Ae = s.RGBA32UI), me === s.BYTE && (Ae = s.RGBA8I), me === s.SHORT && (Ae = s.RGBA16I), me === s.INT && (Ae = s.RGBA32I)), H === s.RGB && me === s.UNSIGNED_INT_5_9_9_9_REV && (Ae = s.RGB9_E5), H === s.RGBA) {
      const at = ze ? Qp : vn.getTransfer(Te);
      me === s.FLOAT && (Ae = s.RGBA32F), me === s.HALF_FLOAT && (Ae = s.RGBA16F), me === s.UNSIGNED_BYTE && (Ae = at === Pn ? s.SRGB8_ALPHA8 : s.RGBA8), me === s.UNSIGNED_SHORT_4_4_4_4 && (Ae = s.RGBA4), me === s.UNSIGNED_SHORT_5_5_5_1 && (Ae = s.RGB5_A1);
    }
    return (Ae === s.R16F || Ae === s.R32F || Ae === s.RG16F || Ae === s.RG32F || Ae === s.RGBA16F || Ae === s.RGBA32F) && e.get("EXT_color_buffer_float"), Ae;
  }
  function O(Z, H) {
    let me;
    return Z ? H === null || H === Io || H === Ku ? me = s.DEPTH24_STENCIL8 : H === es ? me = s.DEPTH32F_STENCIL8 : H === Vh && (me = s.DEPTH24_STENCIL8, console.warn("DepthTexture: 16 bit depth attachment is not supported with stencil. Using 24-bit attachment.")) : H === null || H === Io || H === Ku ? me = s.DEPTH_COMPONENT24 : H === es ? me = s.DEPTH_COMPONENT32F : H === Vh && (me = s.DEPTH_COMPONENT16), me;
  }
  function I(Z, H) {
    return C(Z) === !0 || Z.isFramebufferTexture && Z.minFilter !== wi && Z.minFilter !== di ? Math.log2(Math.max(H.width, H.height)) + 1 : Z.mipmaps !== void 0 && Z.mipmaps.length > 0 ? Z.mipmaps.length : Z.isCompressedTexture && Array.isArray(Z.image) ? H.mipmaps.length : 1;
  }
  function V(Z) {
    const H = Z.target;
    H.removeEventListener("dispose", V), k(H), H.isVideoTexture && S.delete(H);
  }
  function Y(Z) {
    const H = Z.target;
    H.removeEventListener("dispose", Y), z(H);
  }
  function k(Z) {
    const H = i.get(Z);
    if (H.__webglInit === void 0) return;
    const me = Z.source, Te = M.get(me);
    if (Te) {
      const ze = Te[H.__cacheKey];
      ze.usedTimes--, ze.usedTimes === 0 && B(Z), Object.keys(Te).length === 0 && M.delete(me);
    }
    i.remove(Z);
  }
  function B(Z) {
    const H = i.get(Z);
    s.deleteTexture(H.__webglTexture);
    const me = Z.source, Te = M.get(me);
    delete Te[H.__cacheKey], h.memory.textures--;
  }
  function z(Z) {
    const H = i.get(Z);
    if (Z.depthTexture && (Z.depthTexture.dispose(), i.remove(Z.depthTexture)), Z.isWebGLCubeRenderTarget)
      for (let Te = 0; Te < 6; Te++) {
        if (Array.isArray(H.__webglFramebuffer[Te]))
          for (let ze = 0; ze < H.__webglFramebuffer[Te].length; ze++) s.deleteFramebuffer(H.__webglFramebuffer[Te][ze]);
        else
          s.deleteFramebuffer(H.__webglFramebuffer[Te]);
        H.__webglDepthbuffer && s.deleteRenderbuffer(H.__webglDepthbuffer[Te]);
      }
    else {
      if (Array.isArray(H.__webglFramebuffer))
        for (let Te = 0; Te < H.__webglFramebuffer.length; Te++) s.deleteFramebuffer(H.__webglFramebuffer[Te]);
      else
        s.deleteFramebuffer(H.__webglFramebuffer);
      if (H.__webglDepthbuffer && s.deleteRenderbuffer(H.__webglDepthbuffer), H.__webglMultisampledFramebuffer && s.deleteFramebuffer(H.__webglMultisampledFramebuffer), H.__webglColorRenderbuffer)
        for (let Te = 0; Te < H.__webglColorRenderbuffer.length; Te++)
          H.__webglColorRenderbuffer[Te] && s.deleteRenderbuffer(H.__webglColorRenderbuffer[Te]);
      H.__webglDepthRenderbuffer && s.deleteRenderbuffer(H.__webglDepthRenderbuffer);
    }
    const me = Z.textures;
    for (let Te = 0, ze = me.length; Te < ze; Te++) {
      const Ae = i.get(me[Te]);
      Ae.__webglTexture && (s.deleteTexture(Ae.__webglTexture), h.memory.textures--), i.remove(me[Te]);
    }
    i.remove(Z);
  }
  let W = 0;
  function le() {
    W = 0;
  }
  function ae() {
    const Z = W;
    return Z >= r.maxTextures && console.warn("THREE.WebGLTextures: Trying to use " + Z + " texture units while this GPU supports only " + r.maxTextures), W += 1, Z;
  }
  function oe(Z) {
    const H = [];
    return H.push(Z.wrapS), H.push(Z.wrapT), H.push(Z.wrapR || 0), H.push(Z.magFilter), H.push(Z.minFilter), H.push(Z.anisotropy), H.push(Z.internalFormat), H.push(Z.format), H.push(Z.type), H.push(Z.generateMipmaps), H.push(Z.premultiplyAlpha), H.push(Z.flipY), H.push(Z.unpackAlignment), H.push(Z.colorSpace), H.join();
  }
  function pe(Z, H) {
    const me = i.get(Z);
    if (Z.isVideoTexture && Ze(Z), Z.isRenderTargetTexture === !1 && Z.isExternalTexture !== !0 && Z.version > 0 && me.__version !== Z.version) {
      const Te = Z.image;
      if (Te === null)
        console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");
      else if (Te.complete === !1)
        console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");
      else {
        we(me, Z, H);
        return;
      }
    } else Z.isExternalTexture && (me.__webglTexture = Z.sourceTexture ? Z.sourceTexture : null);
    n.bindTexture(s.TEXTURE_2D, me.__webglTexture, s.TEXTURE0 + H);
  }
  function P(Z, H) {
    const me = i.get(Z);
    if (Z.isRenderTargetTexture === !1 && Z.version > 0 && me.__version !== Z.version) {
      we(me, Z, H);
      return;
    }
    n.bindTexture(s.TEXTURE_2D_ARRAY, me.__webglTexture, s.TEXTURE0 + H);
  }
  function K(Z, H) {
    const me = i.get(Z);
    if (Z.isRenderTargetTexture === !1 && Z.version > 0 && me.__version !== Z.version) {
      we(me, Z, H);
      return;
    }
    n.bindTexture(s.TEXTURE_3D, me.__webglTexture, s.TEXTURE0 + H);
  }
  function Q(Z, H) {
    const me = i.get(Z);
    if (Z.version > 0 && me.__version !== Z.version) {
      Fe(me, Z, H);
      return;
    }
    n.bindTexture(s.TEXTURE_CUBE_MAP, me.__webglTexture, s.TEXTURE0 + H);
  }
  const fe = {
    [kp]: s.REPEAT,
    [hr]: s.CLAMP_TO_EDGE,
    [Wp]: s.MIRRORED_REPEAT
  }, q = {
    [wi]: s.NEAREST,
    [FS]: s.NEAREST_MIPMAP_NEAREST,
    [Oh]: s.NEAREST_MIPMAP_LINEAR,
    [di]: s.LINEAR,
    [Op]: s.LINEAR_MIPMAP_NEAREST,
    [Lo]: s.LINEAR_MIPMAP_LINEAR
  }, te = {
    [pE]: s.NEVER,
    [SE]: s.ALWAYS,
    [mE]: s.LESS,
    [KS]: s.LEQUAL,
    [vE]: s.EQUAL,
    [_E]: s.GEQUAL,
    [gE]: s.GREATER,
    [yE]: s.NOTEQUAL
  };
  function Me(Z, H) {
    if (H.type === es && e.has("OES_texture_float_linear") === !1 && (H.magFilter === di || H.magFilter === Op || H.magFilter === Oh || H.magFilter === Lo || H.minFilter === di || H.minFilter === Op || H.minFilter === Oh || H.minFilter === Lo) && console.warn("THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device."), s.texParameteri(Z, s.TEXTURE_WRAP_S, fe[H.wrapS]), s.texParameteri(Z, s.TEXTURE_WRAP_T, fe[H.wrapT]), (Z === s.TEXTURE_3D || Z === s.TEXTURE_2D_ARRAY) && s.texParameteri(Z, s.TEXTURE_WRAP_R, fe[H.wrapR]), s.texParameteri(Z, s.TEXTURE_MAG_FILTER, q[H.magFilter]), s.texParameteri(Z, s.TEXTURE_MIN_FILTER, q[H.minFilter]), H.compareFunction && (s.texParameteri(Z, s.TEXTURE_COMPARE_MODE, s.COMPARE_REF_TO_TEXTURE), s.texParameteri(Z, s.TEXTURE_COMPARE_FUNC, te[H.compareFunction])), e.has("EXT_texture_filter_anisotropic") === !0) {
      if (H.magFilter === wi || H.minFilter !== Oh && H.minFilter !== Lo || H.type === es && e.has("OES_texture_float_linear") === !1) return;
      if (H.anisotropy > 1 || i.get(H).__currentAnisotropy) {
        const me = e.get("EXT_texture_filter_anisotropic");
        s.texParameterf(Z, me.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(H.anisotropy, r.getMaxAnisotropy())), i.get(H).__currentAnisotropy = H.anisotropy;
      }
    }
  }
  function Re(Z, H) {
    let me = !1;
    Z.__webglInit === void 0 && (Z.__webglInit = !0, H.addEventListener("dispose", V));
    const Te = H.source;
    let ze = M.get(Te);
    ze === void 0 && (ze = {}, M.set(Te, ze));
    const Ae = oe(H);
    if (Ae !== Z.__cacheKey) {
      ze[Ae] === void 0 && (ze[Ae] = {
        texture: s.createTexture(),
        usedTimes: 0
      }, h.memory.textures++, me = !0), ze[Ae].usedTimes++;
      const at = ze[Z.__cacheKey];
      at !== void 0 && (ze[Z.__cacheKey].usedTimes--, at.usedTimes === 0 && B(H)), Z.__cacheKey = Ae, Z.__webglTexture = ze[Ae].texture;
    }
    return me;
  }
  function Ne(Z, H, me) {
    return Math.floor(Math.floor(Z / me) / H);
  }
  function he(Z, H, me, Te) {
    const Ae = Z.updateRanges;
    if (Ae.length === 0)
      n.texSubImage2D(s.TEXTURE_2D, 0, 0, 0, H.width, H.height, me, Te, H.data);
    else {
      Ae.sort((Ve, tt) => Ve.start - tt.start);
      let at = 0;
      for (let Ve = 1; Ve < Ae.length; Ve++) {
        const tt = Ae[at], St = Ae[Ve], mt = tt.start + tt.count, nt = Ne(St.start, H.width, 4), Pt = Ne(tt.start, H.width, 4);
        St.start <= mt + 1 && nt === Pt && Ne(St.start + St.count - 1, H.width, 4) === nt ? tt.count = Math.max(
          tt.count,
          St.start + St.count - tt.start
        ) : (++at, Ae[at] = St);
      }
      Ae.length = at + 1;
      const Qe = s.getParameter(s.UNPACK_ROW_LENGTH), dt = s.getParameter(s.UNPACK_SKIP_PIXELS), pt = s.getParameter(s.UNPACK_SKIP_ROWS);
      s.pixelStorei(s.UNPACK_ROW_LENGTH, H.width);
      for (let Ve = 0, tt = Ae.length; Ve < tt; Ve++) {
        const St = Ae[Ve], mt = Math.floor(St.start / 4), nt = Math.ceil(St.count / 4), Pt = mt % H.width, se = Math.floor(mt / H.width), ke = nt, Ke = 1;
        s.pixelStorei(s.UNPACK_SKIP_PIXELS, Pt), s.pixelStorei(s.UNPACK_SKIP_ROWS, se), n.texSubImage2D(s.TEXTURE_2D, 0, Pt, se, ke, Ke, me, Te, H.data);
      }
      Z.clearUpdateRanges(), s.pixelStorei(s.UNPACK_ROW_LENGTH, Qe), s.pixelStorei(s.UNPACK_SKIP_PIXELS, dt), s.pixelStorei(s.UNPACK_SKIP_ROWS, pt);
    }
  }
  function we(Z, H, me) {
    let Te = s.TEXTURE_2D;
    (H.isDataArrayTexture || H.isCompressedArrayTexture) && (Te = s.TEXTURE_2D_ARRAY), H.isData3DTexture && (Te = s.TEXTURE_3D);
    const ze = Re(Z, H), Ae = H.source;
    n.bindTexture(Te, Z.__webglTexture, s.TEXTURE0 + me);
    const at = i.get(Ae);
    if (Ae.version !== at.__version || ze === !0) {
      n.activeTexture(s.TEXTURE0 + me);
      const Qe = vn.getPrimaries(vn.workingColorSpace), dt = H.colorSpace === Yr ? null : vn.getPrimaries(H.colorSpace), pt = H.colorSpace === Yr || Qe === dt ? s.NONE : s.BROWSER_DEFAULT_WEBGL;
      s.pixelStorei(s.UNPACK_FLIP_Y_WEBGL, H.flipY), s.pixelStorei(s.UNPACK_PREMULTIPLY_ALPHA_WEBGL, H.premultiplyAlpha), s.pixelStorei(s.UNPACK_ALIGNMENT, H.unpackAlignment), s.pixelStorei(s.UNPACK_COLORSPACE_CONVERSION_WEBGL, pt);
      let Ve = w(H.image, !1, r.maxTextureSize);
      Ve = At(H, Ve);
      const tt = c.convert(H.format, H.colorSpace), St = c.convert(H.type);
      let mt = N(H.internalFormat, tt, St, H.colorSpace, H.isVideoTexture);
      Me(Te, H);
      let nt;
      const Pt = H.mipmaps, se = H.isVideoTexture !== !0, ke = at.__version === void 0 || ze === !0, Ke = Ae.dataReady, ct = I(H, Ve);
      if (H.isDepthTexture)
        mt = O(H.format === Ju, H.type), ke && (se ? n.texStorage2D(s.TEXTURE_2D, 1, mt, Ve.width, Ve.height) : n.texImage2D(s.TEXTURE_2D, 0, mt, Ve.width, Ve.height, 0, tt, St, null));
      else if (H.isDataTexture)
        if (Pt.length > 0) {
          se && ke && n.texStorage2D(s.TEXTURE_2D, ct, mt, Pt[0].width, Pt[0].height);
          for (let qe = 0, Pe = Pt.length; qe < Pe; qe++)
            nt = Pt[qe], se ? Ke && n.texSubImage2D(s.TEXTURE_2D, qe, 0, 0, nt.width, nt.height, tt, St, nt.data) : n.texImage2D(s.TEXTURE_2D, qe, mt, nt.width, nt.height, 0, tt, St, nt.data);
          H.generateMipmaps = !1;
        } else
          se ? (ke && n.texStorage2D(s.TEXTURE_2D, ct, mt, Ve.width, Ve.height), Ke && he(H, Ve, tt, St)) : n.texImage2D(s.TEXTURE_2D, 0, mt, Ve.width, Ve.height, 0, tt, St, Ve.data);
      else if (H.isCompressedTexture)
        if (H.isCompressedArrayTexture) {
          se && ke && n.texStorage3D(s.TEXTURE_2D_ARRAY, ct, mt, Pt[0].width, Pt[0].height, Ve.depth);
          for (let qe = 0, Pe = Pt.length; qe < Pe; qe++)
            if (nt = Pt[qe], H.format !== Ca)
              if (tt !== null)
                if (se) {
                  if (Ke)
                    if (H.layerUpdates.size > 0) {
                      const vt = wS(nt.width, nt.height, H.format, H.type);
                      for (const Ut of H.layerUpdates) {
                        const un = nt.data.subarray(
                          Ut * vt / nt.data.BYTES_PER_ELEMENT,
                          (Ut + 1) * vt / nt.data.BYTES_PER_ELEMENT
                        );
                        n.compressedTexSubImage3D(s.TEXTURE_2D_ARRAY, qe, 0, 0, Ut, nt.width, nt.height, 1, tt, un);
                      }
                      H.clearLayerUpdates();
                    } else
                      n.compressedTexSubImage3D(s.TEXTURE_2D_ARRAY, qe, 0, 0, 0, nt.width, nt.height, Ve.depth, tt, nt.data);
                } else
                  n.compressedTexImage3D(s.TEXTURE_2D_ARRAY, qe, mt, nt.width, nt.height, Ve.depth, 0, nt.data, 0, 0);
              else
                console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");
            else
              se ? Ke && n.texSubImage3D(s.TEXTURE_2D_ARRAY, qe, 0, 0, 0, nt.width, nt.height, Ve.depth, tt, St, nt.data) : n.texImage3D(s.TEXTURE_2D_ARRAY, qe, mt, nt.width, nt.height, Ve.depth, 0, tt, St, nt.data);
        } else {
          se && ke && n.texStorage2D(s.TEXTURE_2D, ct, mt, Pt[0].width, Pt[0].height);
          for (let qe = 0, Pe = Pt.length; qe < Pe; qe++)
            nt = Pt[qe], H.format !== Ca ? tt !== null ? se ? Ke && n.compressedTexSubImage2D(s.TEXTURE_2D, qe, 0, 0, nt.width, nt.height, tt, nt.data) : n.compressedTexImage2D(s.TEXTURE_2D, qe, mt, nt.width, nt.height, 0, nt.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()") : se ? Ke && n.texSubImage2D(s.TEXTURE_2D, qe, 0, 0, nt.width, nt.height, tt, St, nt.data) : n.texImage2D(s.TEXTURE_2D, qe, mt, nt.width, nt.height, 0, tt, St, nt.data);
        }
      else if (H.isDataArrayTexture)
        if (se) {
          if (ke && n.texStorage3D(s.TEXTURE_2D_ARRAY, ct, mt, Ve.width, Ve.height, Ve.depth), Ke)
            if (H.layerUpdates.size > 0) {
              const qe = wS(Ve.width, Ve.height, H.format, H.type);
              for (const Pe of H.layerUpdates) {
                const vt = Ve.data.subarray(
                  Pe * qe / Ve.data.BYTES_PER_ELEMENT,
                  (Pe + 1) * qe / Ve.data.BYTES_PER_ELEMENT
                );
                n.texSubImage3D(s.TEXTURE_2D_ARRAY, 0, 0, 0, Pe, Ve.width, Ve.height, 1, tt, St, vt);
              }
              H.clearLayerUpdates();
            } else
              n.texSubImage3D(s.TEXTURE_2D_ARRAY, 0, 0, 0, 0, Ve.width, Ve.height, Ve.depth, tt, St, Ve.data);
        } else
          n.texImage3D(s.TEXTURE_2D_ARRAY, 0, mt, Ve.width, Ve.height, Ve.depth, 0, tt, St, Ve.data);
      else if (H.isData3DTexture)
        se ? (ke && n.texStorage3D(s.TEXTURE_3D, ct, mt, Ve.width, Ve.height, Ve.depth), Ke && n.texSubImage3D(s.TEXTURE_3D, 0, 0, 0, 0, Ve.width, Ve.height, Ve.depth, tt, St, Ve.data)) : n.texImage3D(s.TEXTURE_3D, 0, mt, Ve.width, Ve.height, Ve.depth, 0, tt, St, Ve.data);
      else if (H.isFramebufferTexture) {
        if (ke)
          if (se)
            n.texStorage2D(s.TEXTURE_2D, ct, mt, Ve.width, Ve.height);
          else {
            let qe = Ve.width, Pe = Ve.height;
            for (let vt = 0; vt < ct; vt++)
              n.texImage2D(s.TEXTURE_2D, vt, mt, qe, Pe, 0, tt, St, null), qe >>= 1, Pe >>= 1;
          }
      } else if (Pt.length > 0) {
        if (se && ke) {
          const qe = Bt(Pt[0]);
          n.texStorage2D(s.TEXTURE_2D, ct, mt, qe.width, qe.height);
        }
        for (let qe = 0, Pe = Pt.length; qe < Pe; qe++)
          nt = Pt[qe], se ? Ke && n.texSubImage2D(s.TEXTURE_2D, qe, 0, 0, tt, St, nt) : n.texImage2D(s.TEXTURE_2D, qe, mt, tt, St, nt);
        H.generateMipmaps = !1;
      } else if (se) {
        if (ke) {
          const qe = Bt(Ve);
          n.texStorage2D(s.TEXTURE_2D, ct, mt, qe.width, qe.height);
        }
        Ke && n.texSubImage2D(s.TEXTURE_2D, 0, 0, 0, tt, St, Ve);
      } else
        n.texImage2D(s.TEXTURE_2D, 0, mt, tt, St, Ve);
      C(H) && E(Te), at.__version = Ae.version, H.onUpdate && H.onUpdate(H);
    }
    Z.__version = H.version;
  }
  function Fe(Z, H, me) {
    if (H.image.length !== 6) return;
    const Te = Re(Z, H), ze = H.source;
    n.bindTexture(s.TEXTURE_CUBE_MAP, Z.__webglTexture, s.TEXTURE0 + me);
    const Ae = i.get(ze);
    if (ze.version !== Ae.__version || Te === !0) {
      n.activeTexture(s.TEXTURE0 + me);
      const at = vn.getPrimaries(vn.workingColorSpace), Qe = H.colorSpace === Yr ? null : vn.getPrimaries(H.colorSpace), dt = H.colorSpace === Yr || at === Qe ? s.NONE : s.BROWSER_DEFAULT_WEBGL;
      s.pixelStorei(s.UNPACK_FLIP_Y_WEBGL, H.flipY), s.pixelStorei(s.UNPACK_PREMULTIPLY_ALPHA_WEBGL, H.premultiplyAlpha), s.pixelStorei(s.UNPACK_ALIGNMENT, H.unpackAlignment), s.pixelStorei(s.UNPACK_COLORSPACE_CONVERSION_WEBGL, dt);
      const pt = H.isCompressedTexture || H.image[0].isCompressedTexture, Ve = H.image[0] && H.image[0].isDataTexture, tt = [];
      for (let Pe = 0; Pe < 6; Pe++)
        !pt && !Ve ? tt[Pe] = w(H.image[Pe], !0, r.maxCubemapSize) : tt[Pe] = Ve ? H.image[Pe].image : H.image[Pe], tt[Pe] = At(H, tt[Pe]);
      const St = tt[0], mt = c.convert(H.format, H.colorSpace), nt = c.convert(H.type), Pt = N(H.internalFormat, mt, nt, H.colorSpace), se = H.isVideoTexture !== !0, ke = Ae.__version === void 0 || Te === !0, Ke = ze.dataReady;
      let ct = I(H, St);
      Me(s.TEXTURE_CUBE_MAP, H);
      let qe;
      if (pt) {
        se && ke && n.texStorage2D(s.TEXTURE_CUBE_MAP, ct, Pt, St.width, St.height);
        for (let Pe = 0; Pe < 6; Pe++) {
          qe = tt[Pe].mipmaps;
          for (let vt = 0; vt < qe.length; vt++) {
            const Ut = qe[vt];
            H.format !== Ca ? mt !== null ? se ? Ke && n.compressedTexSubImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X + Pe, vt, 0, 0, Ut.width, Ut.height, mt, Ut.data) : n.compressedTexImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X + Pe, vt, Pt, Ut.width, Ut.height, 0, Ut.data) : console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()") : se ? Ke && n.texSubImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X + Pe, vt, 0, 0, Ut.width, Ut.height, mt, nt, Ut.data) : n.texImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X + Pe, vt, Pt, Ut.width, Ut.height, 0, mt, nt, Ut.data);
          }
        }
      } else {
        if (qe = H.mipmaps, se && ke) {
          qe.length > 0 && ct++;
          const Pe = Bt(tt[0]);
          n.texStorage2D(s.TEXTURE_CUBE_MAP, ct, Pt, Pe.width, Pe.height);
        }
        for (let Pe = 0; Pe < 6; Pe++)
          if (Ve) {
            se ? Ke && n.texSubImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X + Pe, 0, 0, 0, tt[Pe].width, tt[Pe].height, mt, nt, tt[Pe].data) : n.texImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X + Pe, 0, Pt, tt[Pe].width, tt[Pe].height, 0, mt, nt, tt[Pe].data);
            for (let vt = 0; vt < qe.length; vt++) {
              const un = qe[vt].image[Pe].image;
              se ? Ke && n.texSubImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X + Pe, vt + 1, 0, 0, un.width, un.height, mt, nt, un.data) : n.texImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X + Pe, vt + 1, Pt, un.width, un.height, 0, mt, nt, un.data);
            }
          } else {
            se ? Ke && n.texSubImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X + Pe, 0, 0, 0, mt, nt, tt[Pe]) : n.texImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X + Pe, 0, Pt, mt, nt, tt[Pe]);
            for (let vt = 0; vt < qe.length; vt++) {
              const Ut = qe[vt];
              se ? Ke && n.texSubImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X + Pe, vt + 1, 0, 0, mt, nt, Ut.image[Pe]) : n.texImage2D(s.TEXTURE_CUBE_MAP_POSITIVE_X + Pe, vt + 1, Pt, mt, nt, Ut.image[Pe]);
            }
          }
      }
      C(H) && E(s.TEXTURE_CUBE_MAP), Ae.__version = ze.version, H.onUpdate && H.onUpdate(H);
    }
    Z.__version = H.version;
  }
  function $e(Z, H, me, Te, ze, Ae) {
    const at = c.convert(me.format, me.colorSpace), Qe = c.convert(me.type), dt = N(me.internalFormat, at, Qe, me.colorSpace), pt = i.get(H), Ve = i.get(me);
    if (Ve.__renderTarget = H, !pt.__hasExternalTextures) {
      const tt = Math.max(1, H.width >> Ae), St = Math.max(1, H.height >> Ae);
      ze === s.TEXTURE_3D || ze === s.TEXTURE_2D_ARRAY ? n.texImage3D(ze, Ae, dt, tt, St, H.depth, 0, at, Qe, null) : n.texImage2D(ze, Ae, dt, tt, St, 0, at, Qe, null);
    }
    n.bindFramebuffer(s.FRAMEBUFFER, Z), Ge(H) ? d.framebufferTexture2DMultisampleEXT(s.FRAMEBUFFER, Te, ze, Ve.__webglTexture, 0, et(H)) : (ze === s.TEXTURE_2D || ze >= s.TEXTURE_CUBE_MAP_POSITIVE_X && ze <= s.TEXTURE_CUBE_MAP_NEGATIVE_Z) && s.framebufferTexture2D(s.FRAMEBUFFER, Te, ze, Ve.__webglTexture, Ae), n.bindFramebuffer(s.FRAMEBUFFER, null);
  }
  function ut(Z, H, me) {
    if (s.bindRenderbuffer(s.RENDERBUFFER, Z), H.depthBuffer) {
      const Te = H.depthTexture, ze = Te && Te.isDepthTexture ? Te.type : null, Ae = O(H.stencilBuffer, ze), at = H.stencilBuffer ? s.DEPTH_STENCIL_ATTACHMENT : s.DEPTH_ATTACHMENT, Qe = et(H);
      Ge(H) ? d.renderbufferStorageMultisampleEXT(s.RENDERBUFFER, Qe, Ae, H.width, H.height) : me ? s.renderbufferStorageMultisample(s.RENDERBUFFER, Qe, Ae, H.width, H.height) : s.renderbufferStorage(s.RENDERBUFFER, Ae, H.width, H.height), s.framebufferRenderbuffer(s.FRAMEBUFFER, at, s.RENDERBUFFER, Z);
    } else {
      const Te = H.textures;
      for (let ze = 0; ze < Te.length; ze++) {
        const Ae = Te[ze], at = c.convert(Ae.format, Ae.colorSpace), Qe = c.convert(Ae.type), dt = N(Ae.internalFormat, at, Qe, Ae.colorSpace), pt = et(H);
        me && Ge(H) === !1 ? s.renderbufferStorageMultisample(s.RENDERBUFFER, pt, dt, H.width, H.height) : Ge(H) ? d.renderbufferStorageMultisampleEXT(s.RENDERBUFFER, pt, dt, H.width, H.height) : s.renderbufferStorage(s.RENDERBUFFER, dt, H.width, H.height);
      }
    }
    s.bindRenderbuffer(s.RENDERBUFFER, null);
  }
  function Tt(Z, H) {
    if (H && H.isWebGLCubeRenderTarget) throw new Error("Depth Texture with cube render targets is not supported");
    if (n.bindFramebuffer(s.FRAMEBUFFER, Z), !(H.depthTexture && H.depthTexture.isDepthTexture))
      throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
    const Te = i.get(H.depthTexture);
    Te.__renderTarget = H, (!Te.__webglTexture || H.depthTexture.image.width !== H.width || H.depthTexture.image.height !== H.height) && (H.depthTexture.image.width = H.width, H.depthTexture.image.height = H.height, H.depthTexture.needsUpdate = !0), pe(H.depthTexture, 0);
    const ze = Te.__webglTexture, Ae = et(H);
    if (H.depthTexture.format === Gh)
      Ge(H) ? d.framebufferTexture2DMultisampleEXT(s.FRAMEBUFFER, s.DEPTH_ATTACHMENT, s.TEXTURE_2D, ze, 0, Ae) : s.framebufferTexture2D(s.FRAMEBUFFER, s.DEPTH_ATTACHMENT, s.TEXTURE_2D, ze, 0);
    else if (H.depthTexture.format === Ju)
      Ge(H) ? d.framebufferTexture2DMultisampleEXT(s.FRAMEBUFFER, s.DEPTH_STENCIL_ATTACHMENT, s.TEXTURE_2D, ze, 0, Ae) : s.framebufferTexture2D(s.FRAMEBUFFER, s.DEPTH_STENCIL_ATTACHMENT, s.TEXTURE_2D, ze, 0);
    else
      throw new Error("Unknown depthTexture format");
  }
  function gn(Z) {
    const H = i.get(Z), me = Z.isWebGLCubeRenderTarget === !0;
    if (H.__boundDepthTexture !== Z.depthTexture) {
      const Te = Z.depthTexture;
      if (H.__depthDisposeCallback && H.__depthDisposeCallback(), Te) {
        const ze = () => {
          delete H.__boundDepthTexture, delete H.__depthDisposeCallback, Te.removeEventListener("dispose", ze);
        };
        Te.addEventListener("dispose", ze), H.__depthDisposeCallback = ze;
      }
      H.__boundDepthTexture = Te;
    }
    if (Z.depthTexture && !H.__autoAllocateDepthBuffer) {
      if (me) throw new Error("target.depthTexture not supported in Cube render targets");
      const Te = Z.texture.mipmaps;
      Te && Te.length > 0 ? Tt(H.__webglFramebuffer[0], Z) : Tt(H.__webglFramebuffer, Z);
    } else if (me) {
      H.__webglDepthbuffer = [];
      for (let Te = 0; Te < 6; Te++)
        if (n.bindFramebuffer(s.FRAMEBUFFER, H.__webglFramebuffer[Te]), H.__webglDepthbuffer[Te] === void 0)
          H.__webglDepthbuffer[Te] = s.createRenderbuffer(), ut(H.__webglDepthbuffer[Te], Z, !1);
        else {
          const ze = Z.stencilBuffer ? s.DEPTH_STENCIL_ATTACHMENT : s.DEPTH_ATTACHMENT, Ae = H.__webglDepthbuffer[Te];
          s.bindRenderbuffer(s.RENDERBUFFER, Ae), s.framebufferRenderbuffer(s.FRAMEBUFFER, ze, s.RENDERBUFFER, Ae);
        }
    } else {
      const Te = Z.texture.mipmaps;
      if (Te && Te.length > 0 ? n.bindFramebuffer(s.FRAMEBUFFER, H.__webglFramebuffer[0]) : n.bindFramebuffer(s.FRAMEBUFFER, H.__webglFramebuffer), H.__webglDepthbuffer === void 0)
        H.__webglDepthbuffer = s.createRenderbuffer(), ut(H.__webglDepthbuffer, Z, !1);
      else {
        const ze = Z.stencilBuffer ? s.DEPTH_STENCIL_ATTACHMENT : s.DEPTH_ATTACHMENT, Ae = H.__webglDepthbuffer;
        s.bindRenderbuffer(s.RENDERBUFFER, Ae), s.framebufferRenderbuffer(s.FRAMEBUFFER, ze, s.RENDERBUFFER, Ae);
      }
    }
    n.bindFramebuffer(s.FRAMEBUFFER, null);
  }
  function Ct(Z, H, me) {
    const Te = i.get(Z);
    H !== void 0 && $e(Te.__webglFramebuffer, Z, Z.texture, s.COLOR_ATTACHMENT0, s.TEXTURE_2D, 0), me !== void 0 && gn(Z);
  }
  function ee(Z) {
    const H = Z.texture, me = i.get(Z), Te = i.get(H);
    Z.addEventListener("dispose", Y);
    const ze = Z.textures, Ae = Z.isWebGLCubeRenderTarget === !0, at = ze.length > 1;
    if (at || (Te.__webglTexture === void 0 && (Te.__webglTexture = s.createTexture()), Te.__version = H.version, h.memory.textures++), Ae) {
      me.__webglFramebuffer = [];
      for (let Qe = 0; Qe < 6; Qe++)
        if (H.mipmaps && H.mipmaps.length > 0) {
          me.__webglFramebuffer[Qe] = [];
          for (let dt = 0; dt < H.mipmaps.length; dt++)
            me.__webglFramebuffer[Qe][dt] = s.createFramebuffer();
        } else
          me.__webglFramebuffer[Qe] = s.createFramebuffer();
    } else {
      if (H.mipmaps && H.mipmaps.length > 0) {
        me.__webglFramebuffer = [];
        for (let Qe = 0; Qe < H.mipmaps.length; Qe++)
          me.__webglFramebuffer[Qe] = s.createFramebuffer();
      } else
        me.__webglFramebuffer = s.createFramebuffer();
      if (at)
        for (let Qe = 0, dt = ze.length; Qe < dt; Qe++) {
          const pt = i.get(ze[Qe]);
          pt.__webglTexture === void 0 && (pt.__webglTexture = s.createTexture(), h.memory.textures++);
        }
      if (Z.samples > 0 && Ge(Z) === !1) {
        me.__webglMultisampledFramebuffer = s.createFramebuffer(), me.__webglColorRenderbuffer = [], n.bindFramebuffer(s.FRAMEBUFFER, me.__webglMultisampledFramebuffer);
        for (let Qe = 0; Qe < ze.length; Qe++) {
          const dt = ze[Qe];
          me.__webglColorRenderbuffer[Qe] = s.createRenderbuffer(), s.bindRenderbuffer(s.RENDERBUFFER, me.__webglColorRenderbuffer[Qe]);
          const pt = c.convert(dt.format, dt.colorSpace), Ve = c.convert(dt.type), tt = N(dt.internalFormat, pt, Ve, dt.colorSpace, Z.isXRRenderTarget === !0), St = et(Z);
          s.renderbufferStorageMultisample(s.RENDERBUFFER, St, tt, Z.width, Z.height), s.framebufferRenderbuffer(s.FRAMEBUFFER, s.COLOR_ATTACHMENT0 + Qe, s.RENDERBUFFER, me.__webglColorRenderbuffer[Qe]);
        }
        s.bindRenderbuffer(s.RENDERBUFFER, null), Z.depthBuffer && (me.__webglDepthRenderbuffer = s.createRenderbuffer(), ut(me.__webglDepthRenderbuffer, Z, !0)), n.bindFramebuffer(s.FRAMEBUFFER, null);
      }
    }
    if (Ae) {
      n.bindTexture(s.TEXTURE_CUBE_MAP, Te.__webglTexture), Me(s.TEXTURE_CUBE_MAP, H);
      for (let Qe = 0; Qe < 6; Qe++)
        if (H.mipmaps && H.mipmaps.length > 0)
          for (let dt = 0; dt < H.mipmaps.length; dt++)
            $e(me.__webglFramebuffer[Qe][dt], Z, H, s.COLOR_ATTACHMENT0, s.TEXTURE_CUBE_MAP_POSITIVE_X + Qe, dt);
        else
          $e(me.__webglFramebuffer[Qe], Z, H, s.COLOR_ATTACHMENT0, s.TEXTURE_CUBE_MAP_POSITIVE_X + Qe, 0);
      C(H) && E(s.TEXTURE_CUBE_MAP), n.unbindTexture();
    } else if (at) {
      for (let Qe = 0, dt = ze.length; Qe < dt; Qe++) {
        const pt = ze[Qe], Ve = i.get(pt);
        let tt = s.TEXTURE_2D;
        (Z.isWebGL3DRenderTarget || Z.isWebGLArrayRenderTarget) && (tt = Z.isWebGL3DRenderTarget ? s.TEXTURE_3D : s.TEXTURE_2D_ARRAY), n.bindTexture(tt, Ve.__webglTexture), Me(tt, pt), $e(me.__webglFramebuffer, Z, pt, s.COLOR_ATTACHMENT0 + Qe, tt, 0), C(pt) && E(tt);
      }
      n.unbindTexture();
    } else {
      let Qe = s.TEXTURE_2D;
      if ((Z.isWebGL3DRenderTarget || Z.isWebGLArrayRenderTarget) && (Qe = Z.isWebGL3DRenderTarget ? s.TEXTURE_3D : s.TEXTURE_2D_ARRAY), n.bindTexture(Qe, Te.__webglTexture), Me(Qe, H), H.mipmaps && H.mipmaps.length > 0)
        for (let dt = 0; dt < H.mipmaps.length; dt++)
          $e(me.__webglFramebuffer[dt], Z, H, s.COLOR_ATTACHMENT0, Qe, dt);
      else
        $e(me.__webglFramebuffer, Z, H, s.COLOR_ATTACHMENT0, Qe, 0);
      C(H) && E(Qe), n.unbindTexture();
    }
    Z.depthBuffer && gn(Z);
  }
  function He(Z) {
    const H = Z.textures;
    for (let me = 0, Te = H.length; me < Te; me++) {
      const ze = H[me];
      if (C(ze)) {
        const Ae = U(Z), at = i.get(ze).__webglTexture;
        n.bindTexture(Ae, at), E(Ae), n.unbindTexture();
      }
    }
  }
  const Ue = [], Xe = [];
  function Ce(Z) {
    if (Z.samples > 0) {
      if (Ge(Z) === !1) {
        const H = Z.textures, me = Z.width, Te = Z.height;
        let ze = s.COLOR_BUFFER_BIT;
        const Ae = Z.stencilBuffer ? s.DEPTH_STENCIL_ATTACHMENT : s.DEPTH_ATTACHMENT, at = i.get(Z), Qe = H.length > 1;
        if (Qe)
          for (let pt = 0; pt < H.length; pt++)
            n.bindFramebuffer(s.FRAMEBUFFER, at.__webglMultisampledFramebuffer), s.framebufferRenderbuffer(s.FRAMEBUFFER, s.COLOR_ATTACHMENT0 + pt, s.RENDERBUFFER, null), n.bindFramebuffer(s.FRAMEBUFFER, at.__webglFramebuffer), s.framebufferTexture2D(s.DRAW_FRAMEBUFFER, s.COLOR_ATTACHMENT0 + pt, s.TEXTURE_2D, null, 0);
        n.bindFramebuffer(s.READ_FRAMEBUFFER, at.__webglMultisampledFramebuffer);
        const dt = Z.texture.mipmaps;
        dt && dt.length > 0 ? n.bindFramebuffer(s.DRAW_FRAMEBUFFER, at.__webglFramebuffer[0]) : n.bindFramebuffer(s.DRAW_FRAMEBUFFER, at.__webglFramebuffer);
        for (let pt = 0; pt < H.length; pt++) {
          if (Z.resolveDepthBuffer && (Z.depthBuffer && (ze |= s.DEPTH_BUFFER_BIT), Z.stencilBuffer && Z.resolveStencilBuffer && (ze |= s.STENCIL_BUFFER_BIT)), Qe) {
            s.framebufferRenderbuffer(s.READ_FRAMEBUFFER, s.COLOR_ATTACHMENT0, s.RENDERBUFFER, at.__webglColorRenderbuffer[pt]);
            const Ve = i.get(H[pt]).__webglTexture;
            s.framebufferTexture2D(s.DRAW_FRAMEBUFFER, s.COLOR_ATTACHMENT0, s.TEXTURE_2D, Ve, 0);
          }
          s.blitFramebuffer(0, 0, me, Te, 0, 0, me, Te, ze, s.NEAREST), v === !0 && (Ue.length = 0, Xe.length = 0, Ue.push(s.COLOR_ATTACHMENT0 + pt), Z.depthBuffer && Z.resolveDepthBuffer === !1 && (Ue.push(Ae), Xe.push(Ae), s.invalidateFramebuffer(s.DRAW_FRAMEBUFFER, Xe)), s.invalidateFramebuffer(s.READ_FRAMEBUFFER, Ue));
        }
        if (n.bindFramebuffer(s.READ_FRAMEBUFFER, null), n.bindFramebuffer(s.DRAW_FRAMEBUFFER, null), Qe)
          for (let pt = 0; pt < H.length; pt++) {
            n.bindFramebuffer(s.FRAMEBUFFER, at.__webglMultisampledFramebuffer), s.framebufferRenderbuffer(s.FRAMEBUFFER, s.COLOR_ATTACHMENT0 + pt, s.RENDERBUFFER, at.__webglColorRenderbuffer[pt]);
            const Ve = i.get(H[pt]).__webglTexture;
            n.bindFramebuffer(s.FRAMEBUFFER, at.__webglFramebuffer), s.framebufferTexture2D(s.DRAW_FRAMEBUFFER, s.COLOR_ATTACHMENT0 + pt, s.TEXTURE_2D, Ve, 0);
          }
        n.bindFramebuffer(s.DRAW_FRAMEBUFFER, at.__webglMultisampledFramebuffer);
      } else if (Z.depthBuffer && Z.resolveDepthBuffer === !1 && v) {
        const H = Z.stencilBuffer ? s.DEPTH_STENCIL_ATTACHMENT : s.DEPTH_ATTACHMENT;
        s.invalidateFramebuffer(s.DRAW_FRAMEBUFFER, [H]);
      }
    }
  }
  function et(Z) {
    return Math.min(r.maxSamples, Z.samples);
  }
  function Ge(Z) {
    const H = i.get(Z);
    return Z.samples > 0 && e.has("WEBGL_multisampled_render_to_texture") === !0 && H.__useRenderToTexture !== !1;
  }
  function Ze(Z) {
    const H = h.render.frame;
    S.get(Z) !== H && (S.set(Z, H), Z.update());
  }
  function At(Z, H) {
    const me = Z.colorSpace, Te = Z.format, ze = Z.type;
    return Z.isCompressedTexture === !0 || Z.isVideoTexture === !0 || me !== Ho && me !== Yr && (vn.getTransfer(me) === Pn ? (Te !== Ca || ze !== Da) && console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.") : console.error("THREE.WebGLTextures: Unsupported texture color space:", me)), H;
  }
  function Bt(Z) {
    return typeof HTMLImageElement < "u" && Z instanceof HTMLImageElement ? (g.width = Z.naturalWidth || Z.width, g.height = Z.naturalHeight || Z.height) : typeof VideoFrame < "u" && Z instanceof VideoFrame ? (g.width = Z.displayWidth, g.height = Z.displayHeight) : (g.width = Z.width, g.height = Z.height), g;
  }
  this.allocateTextureUnit = ae, this.resetTextureUnits = le, this.setTexture2D = pe, this.setTexture2DArray = P, this.setTexture3D = K, this.setTextureCube = Q, this.rebindTextures = Ct, this.setupRenderTarget = ee, this.updateRenderTargetMipmap = He, this.updateMultisampleRenderTarget = Ce, this.setupDepthRenderbuffer = gn, this.setupFrameBufferTexture = $e, this.useMultisampledRTT = Ge;
}
function DT(s, e) {
  function n(i, r = Yr) {
    let c;
    const h = vn.getTransfer(r);
    if (i === Da) return s.UNSIGNED_BYTE;
    if (i === G0) return s.UNSIGNED_SHORT_4_4_4_4;
    if (i === F0) return s.UNSIGNED_SHORT_5_5_5_1;
    if (i === YS) return s.UNSIGNED_INT_5_9_9_9_REV;
    if (i === XS) return s.BYTE;
    if (i === qS) return s.SHORT;
    if (i === Vh) return s.UNSIGNED_SHORT;
    if (i === V0) return s.INT;
    if (i === Io) return s.UNSIGNED_INT;
    if (i === es) return s.FLOAT;
    if (i === nf) return s.HALF_FLOAT;
    if (i === kS) return s.ALPHA;
    if (i === WS) return s.RGB;
    if (i === Ca) return s.RGBA;
    if (i === Gh) return s.DEPTH_COMPONENT;
    if (i === Ju) return s.DEPTH_STENCIL;
    if (i === X0) return s.RED;
    if (i === um) return s.RED_INTEGER;
    if (i === ZS) return s.RG;
    if (i === q0) return s.RG_INTEGER;
    if (i === Y0) return s.RGBA_INTEGER;
    if (i === Lp || i === zp || i === Bp || i === Pp)
      if (h === Pn)
        if (c = e.get("WEBGL_compressed_texture_s3tc_srgb"), c !== null) {
          if (i === Lp) return c.COMPRESSED_SRGB_S3TC_DXT1_EXT;
          if (i === zp) return c.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
          if (i === Bp) return c.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
          if (i === Pp) return c.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;
        } else
          return null;
      else if (c = e.get("WEBGL_compressed_texture_s3tc"), c !== null) {
        if (i === Lp) return c.COMPRESSED_RGB_S3TC_DXT1_EXT;
        if (i === zp) return c.COMPRESSED_RGBA_S3TC_DXT1_EXT;
        if (i === Bp) return c.COMPRESSED_RGBA_S3TC_DXT3_EXT;
        if (i === Pp) return c.COMPRESSED_RGBA_S3TC_DXT5_EXT;
      } else
        return null;
    if (i === i0 || i === a0 || i === s0 || i === r0)
      if (c = e.get("WEBGL_compressed_texture_pvrtc"), c !== null) {
        if (i === i0) return c.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
        if (i === a0) return c.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
        if (i === s0) return c.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
        if (i === r0) return c.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
      } else
        return null;
    if (i === o0 || i === l0 || i === c0)
      if (c = e.get("WEBGL_compressed_texture_etc"), c !== null) {
        if (i === o0 || i === l0) return h === Pn ? c.COMPRESSED_SRGB8_ETC2 : c.COMPRESSED_RGB8_ETC2;
        if (i === c0) return h === Pn ? c.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : c.COMPRESSED_RGBA8_ETC2_EAC;
      } else
        return null;
    if (i === u0 || i === f0 || i === h0 || i === d0 || i === p0 || i === m0 || i === v0 || i === g0 || i === y0 || i === _0 || i === S0 || i === x0 || i === M0 || i === b0)
      if (c = e.get("WEBGL_compressed_texture_astc"), c !== null) {
        if (i === u0) return h === Pn ? c.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : c.COMPRESSED_RGBA_ASTC_4x4_KHR;
        if (i === f0) return h === Pn ? c.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : c.COMPRESSED_RGBA_ASTC_5x4_KHR;
        if (i === h0) return h === Pn ? c.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : c.COMPRESSED_RGBA_ASTC_5x5_KHR;
        if (i === d0) return h === Pn ? c.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : c.COMPRESSED_RGBA_ASTC_6x5_KHR;
        if (i === p0) return h === Pn ? c.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : c.COMPRESSED_RGBA_ASTC_6x6_KHR;
        if (i === m0) return h === Pn ? c.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : c.COMPRESSED_RGBA_ASTC_8x5_KHR;
        if (i === v0) return h === Pn ? c.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : c.COMPRESSED_RGBA_ASTC_8x6_KHR;
        if (i === g0) return h === Pn ? c.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : c.COMPRESSED_RGBA_ASTC_8x8_KHR;
        if (i === y0) return h === Pn ? c.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : c.COMPRESSED_RGBA_ASTC_10x5_KHR;
        if (i === _0) return h === Pn ? c.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : c.COMPRESSED_RGBA_ASTC_10x6_KHR;
        if (i === S0) return h === Pn ? c.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : c.COMPRESSED_RGBA_ASTC_10x8_KHR;
        if (i === x0) return h === Pn ? c.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : c.COMPRESSED_RGBA_ASTC_10x10_KHR;
        if (i === M0) return h === Pn ? c.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : c.COMPRESSED_RGBA_ASTC_12x10_KHR;
        if (i === b0) return h === Pn ? c.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : c.COMPRESSED_RGBA_ASTC_12x12_KHR;
      } else
        return null;
    if (i === Ip || i === E0 || i === T0)
      if (c = e.get("EXT_texture_compression_bptc"), c !== null) {
        if (i === Ip) return h === Pn ? c.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : c.COMPRESSED_RGBA_BPTC_UNORM_EXT;
        if (i === E0) return c.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;
        if (i === T0) return c.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT;
      } else
        return null;
    if (i === jS || i === A0 || i === R0 || i === C0)
      if (c = e.get("EXT_texture_compression_rgtc"), c !== null) {
        if (i === Ip) return c.COMPRESSED_RED_RGTC1_EXT;
        if (i === A0) return c.COMPRESSED_SIGNED_RED_RGTC1_EXT;
        if (i === R0) return c.COMPRESSED_RED_GREEN_RGTC2_EXT;
        if (i === C0) return c.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;
      } else
        return null;
    return i === Ku ? s.UNSIGNED_INT_24_8 : s[i] !== void 0 ? s[i] : null;
  }
  return { convert: n };
}
class UT extends si {
  /**
   * Creates a new raw texture.
   *
   * @param {?WebGLTexture} [sourceTexture=null] - The external texture.
   */
  constructor(e = null) {
    super(), this.sourceTexture = e, this.isExternalTexture = !0;
  }
}
const x4 = `
void main() {

	gl_Position = vec4( position, 1.0 );

}`, M4 = `
uniform sampler2DArray depthColor;
uniform float depthWidth;
uniform float depthHeight;

void main() {

	vec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );

	if ( coord.x >= 1.0 ) {

		gl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;

	} else {

		gl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;

	}

}`;
class b4 {
  /**
   * Constructs a new depth sensing module.
   */
  constructor() {
    this.texture = null, this.mesh = null, this.depthNear = 0, this.depthFar = 0;
  }
  /**
   * Inits the depth sensing module
   *
   * @param {XRWebGLDepthInformation} depthData - The XR depth data.
   * @param {XRRenderState} renderState - The XR render state.
   */
  init(e, n) {
    if (this.texture === null) {
      const i = new UT(e.texture);
      (e.depthNear !== n.depthNear || e.depthFar !== n.depthFar) && (this.depthNear = e.depthNear, this.depthFar = e.depthFar), this.texture = i;
    }
  }
  /**
   * Returns a plane mesh that visualizes the depth texture.
   *
   * @param {ArrayCamera} cameraXR - The XR camera.
   * @return {?Mesh} The plane mesh.
   */
  getMesh(e) {
    if (this.texture !== null && this.mesh === null) {
      const n = e.cameras[0].viewport, i = new ts({
        vertexShader: x4,
        fragmentShader: M4,
        uniforms: {
          depthColor: { value: this.texture },
          depthWidth: { value: n.z },
          depthHeight: { value: n.w }
        }
      });
      this.mesh = new Ci(new $h(20, 20), i);
    }
    return this.mesh;
  }
  /**
   * Resets the module
   */
  reset() {
    this.texture = null, this.mesh = null;
  }
  /**
   * Returns a texture representing the depth of the user's environment.
   *
   * @return {?ExternalTexture} The depth texture.
   */
  getDepthTexture() {
    return this.texture;
  }
}
class E4 extends qs {
  /**
   * Constructs a new WebGL renderer.
   *
   * @param {WebGLRenderer} renderer - The renderer.
   * @param {WebGL2RenderingContext} gl - The rendering context.
   */
  constructor(e, n) {
    super();
    const i = this;
    let r = null, c = 1, h = null, d = "local-floor", v = 1, g = null, S = null, x = null, M = null, b = null, R = null;
    const w = new b4(), C = {}, E = n.getContextAttributes();
    let U = null, N = null;
    const O = [], I = [], V = new De();
    let Y = null;
    const k = new Zi();
    k.viewport = new xn();
    const B = new Zi();
    B.viewport = new xn();
    const z = [k, B], W = new _T();
    let le = null, ae = null;
    this.cameraAutoUpdate = !0, this.enabled = !1, this.isPresenting = !1, this.getController = function(he) {
      let we = O[he];
      return we === void 0 && (we = new Yg(), O[he] = we), we.getTargetRaySpace();
    }, this.getControllerGrip = function(he) {
      let we = O[he];
      return we === void 0 && (we = new Yg(), O[he] = we), we.getGripSpace();
    }, this.getHand = function(he) {
      let we = O[he];
      return we === void 0 && (we = new Yg(), O[he] = we), we.getHandSpace();
    };
    function oe(he) {
      const we = I.indexOf(he.inputSource);
      if (we === -1)
        return;
      const Fe = O[we];
      Fe !== void 0 && (Fe.update(he.inputSource, he.frame, g || h), Fe.dispatchEvent({ type: he.type, data: he.inputSource }));
    }
    function pe() {
      r.removeEventListener("select", oe), r.removeEventListener("selectstart", oe), r.removeEventListener("selectend", oe), r.removeEventListener("squeeze", oe), r.removeEventListener("squeezestart", oe), r.removeEventListener("squeezeend", oe), r.removeEventListener("end", pe), r.removeEventListener("inputsourceschange", P);
      for (let he = 0; he < O.length; he++) {
        const we = I[he];
        we !== null && (I[he] = null, O[he].disconnect(we));
      }
      le = null, ae = null, w.reset();
      for (const he in C)
        delete C[he];
      e.setRenderTarget(U), b = null, M = null, x = null, r = null, N = null, Ne.stop(), i.isPresenting = !1, e.setPixelRatio(Y), e.setSize(V.width, V.height, !1), i.dispatchEvent({ type: "sessionend" });
    }
    this.setFramebufferScaleFactor = function(he) {
      c = he, i.isPresenting === !0 && console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.");
    }, this.setReferenceSpaceType = function(he) {
      d = he, i.isPresenting === !0 && console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.");
    }, this.getReferenceSpace = function() {
      return g || h;
    }, this.setReferenceSpace = function(he) {
      g = he;
    }, this.getBaseLayer = function() {
      return M !== null ? M : b;
    }, this.getBinding = function() {
      return x;
    }, this.getFrame = function() {
      return R;
    }, this.getSession = function() {
      return r;
    }, this.setSession = async function(he) {
      if (r = he, r !== null) {
        if (U = e.getRenderTarget(), r.addEventListener("select", oe), r.addEventListener("selectstart", oe), r.addEventListener("selectend", oe), r.addEventListener("squeeze", oe), r.addEventListener("squeezestart", oe), r.addEventListener("squeezeend", oe), r.addEventListener("end", pe), r.addEventListener("inputsourceschange", P), E.xrCompatible !== !0 && await n.makeXRCompatible(), Y = e.getPixelRatio(), e.getSize(V), typeof XRWebGLBinding < "u" && (x = new XRWebGLBinding(r, n)), x !== null && "createProjectionLayer" in XRWebGLBinding.prototype) {
          let Fe = null, $e = null, ut = null;
          E.depth && (ut = E.stencil ? n.DEPTH24_STENCIL8 : n.DEPTH_COMPONENT24, Fe = E.stencil ? Ju : Gh, $e = E.stencil ? Ku : Io);
          const Tt = {
            colorFormat: n.RGBA8,
            depthFormat: ut,
            scaleFactor: c
          };
          M = x.createProjectionLayer(Tt), r.updateRenderState({ layers: [M] }), e.setPixelRatio(1), e.setSize(M.textureWidth, M.textureHeight, !1), N = new Ua(
            M.textureWidth,
            M.textureHeight,
            {
              format: Ca,
              type: Da,
              depthTexture: new ty(M.textureWidth, M.textureHeight, $e, void 0, void 0, void 0, void 0, void 0, void 0, Fe),
              stencilBuffer: E.stencil,
              colorSpace: e.outputColorSpace,
              samples: E.antialias ? 4 : 0,
              resolveDepthBuffer: M.ignoreDepthValues === !1,
              resolveStencilBuffer: M.ignoreDepthValues === !1
            }
          );
        } else {
          const Fe = {
            antialias: E.antialias,
            alpha: !0,
            depth: E.depth,
            stencil: E.stencil,
            framebufferScaleFactor: c
          };
          b = new XRWebGLLayer(r, n, Fe), r.updateRenderState({ baseLayer: b }), e.setPixelRatio(1), e.setSize(b.framebufferWidth, b.framebufferHeight, !1), N = new Ua(
            b.framebufferWidth,
            b.framebufferHeight,
            {
              format: Ca,
              type: Da,
              colorSpace: e.outputColorSpace,
              stencilBuffer: E.stencil,
              resolveDepthBuffer: b.ignoreDepthValues === !1,
              resolveStencilBuffer: b.ignoreDepthValues === !1
            }
          );
        }
        N.isXRRenderTarget = !0, this.setFoveation(v), g = null, h = await r.requestReferenceSpace(d), Ne.setContext(r), Ne.start(), i.isPresenting = !0, i.dispatchEvent({ type: "sessionstart" });
      }
    }, this.getEnvironmentBlendMode = function() {
      if (r !== null)
        return r.environmentBlendMode;
    }, this.getDepthTexture = function() {
      return w.getDepthTexture();
    };
    function P(he) {
      for (let we = 0; we < he.removed.length; we++) {
        const Fe = he.removed[we], $e = I.indexOf(Fe);
        $e >= 0 && (I[$e] = null, O[$e].disconnect(Fe));
      }
      for (let we = 0; we < he.added.length; we++) {
        const Fe = he.added[we];
        let $e = I.indexOf(Fe);
        if ($e === -1) {
          for (let Tt = 0; Tt < O.length; Tt++)
            if (Tt >= I.length) {
              I.push(Fe), $e = Tt;
              break;
            } else if (I[Tt] === null) {
              I[Tt] = Fe, $e = Tt;
              break;
            }
          if ($e === -1) break;
        }
        const ut = O[$e];
        ut && ut.connect(Fe);
      }
    }
    const K = new j(), Q = new j();
    function fe(he, we, Fe) {
      K.setFromMatrixPosition(we.matrixWorld), Q.setFromMatrixPosition(Fe.matrixWorld);
      const $e = K.distanceTo(Q), ut = we.projectionMatrix.elements, Tt = Fe.projectionMatrix.elements, gn = ut[14] / (ut[10] - 1), Ct = ut[14] / (ut[10] + 1), ee = (ut[9] + 1) / ut[5], He = (ut[9] - 1) / ut[5], Ue = (ut[8] - 1) / ut[0], Xe = (Tt[8] + 1) / Tt[0], Ce = gn * Ue, et = gn * Xe, Ge = $e / (-Ue + Xe), Ze = Ge * -Ue;
      if (we.matrixWorld.decompose(he.position, he.quaternion, he.scale), he.translateX(Ze), he.translateZ(Ge), he.matrixWorld.compose(he.position, he.quaternion, he.scale), he.matrixWorldInverse.copy(he.matrixWorld).invert(), ut[10] === -1)
        he.projectionMatrix.copy(we.projectionMatrix), he.projectionMatrixInverse.copy(we.projectionMatrixInverse);
      else {
        const At = gn + Ge, Bt = Ct + Ge, Z = Ce - Ze, H = et + ($e - Ze), me = ee * Ct / Bt * At, Te = He * Ct / Bt * At;
        he.projectionMatrix.makePerspective(Z, H, me, Te, At, Bt), he.projectionMatrixInverse.copy(he.projectionMatrix).invert();
      }
    }
    function q(he, we) {
      we === null ? he.matrixWorld.copy(he.matrix) : he.matrixWorld.multiplyMatrices(we.matrixWorld, he.matrix), he.matrixWorldInverse.copy(he.matrixWorld).invert();
    }
    this.updateCamera = function(he) {
      if (r === null) return;
      let we = he.near, Fe = he.far;
      w.texture !== null && (w.depthNear > 0 && (we = w.depthNear), w.depthFar > 0 && (Fe = w.depthFar)), W.near = B.near = k.near = we, W.far = B.far = k.far = Fe, (le !== W.near || ae !== W.far) && (r.updateRenderState({
        depthNear: W.near,
        depthFar: W.far
      }), le = W.near, ae = W.far), W.layers.mask = he.layers.mask | 6, k.layers.mask = W.layers.mask & 3, B.layers.mask = W.layers.mask & 5;
      const $e = he.parent, ut = W.cameras;
      q(W, $e);
      for (let Tt = 0; Tt < ut.length; Tt++)
        q(ut[Tt], $e);
      ut.length === 2 ? fe(W, k, B) : W.projectionMatrix.copy(k.projectionMatrix), te(he, W, $e);
    };
    function te(he, we, Fe) {
      Fe === null ? he.matrix.copy(we.matrixWorld) : (he.matrix.copy(Fe.matrixWorld), he.matrix.invert(), he.matrix.multiply(we.matrixWorld)), he.matrix.decompose(he.position, he.quaternion, he.scale), he.updateMatrixWorld(!0), he.projectionMatrix.copy(we.projectionMatrix), he.projectionMatrixInverse.copy(we.projectionMatrixInverse), he.isPerspectiveCamera && (he.fov = Xh * 2 * Math.atan(1 / he.projectionMatrix.elements[5]), he.zoom = 1);
    }
    this.getCamera = function() {
      return W;
    }, this.getFoveation = function() {
      if (!(M === null && b === null))
        return v;
    }, this.setFoveation = function(he) {
      v = he, M !== null && (M.fixedFoveation = he), b !== null && b.fixedFoveation !== void 0 && (b.fixedFoveation = he);
    }, this.hasDepthSensing = function() {
      return w.texture !== null;
    }, this.getDepthSensingMesh = function() {
      return w.getMesh(W);
    }, this.getCameraTexture = function(he) {
      return C[he];
    };
    let Me = null;
    function Re(he, we) {
      if (S = we.getViewerPose(g || h), R = we, S !== null) {
        const Fe = S.views;
        b !== null && (e.setRenderTargetFramebuffer(N, b.framebuffer), e.setRenderTarget(N));
        let $e = !1;
        Fe.length !== W.cameras.length && (W.cameras.length = 0, $e = !0);
        for (let Ct = 0; Ct < Fe.length; Ct++) {
          const ee = Fe[Ct];
          let He = null;
          if (b !== null)
            He = b.getViewport(ee);
          else {
            const Xe = x.getViewSubImage(M, ee);
            He = Xe.viewport, Ct === 0 && (e.setRenderTargetTextures(
              N,
              Xe.colorTexture,
              Xe.depthStencilTexture
            ), e.setRenderTarget(N));
          }
          let Ue = z[Ct];
          Ue === void 0 && (Ue = new Zi(), Ue.layers.enable(Ct), Ue.viewport = new xn(), z[Ct] = Ue), Ue.matrix.fromArray(ee.transform.matrix), Ue.matrix.decompose(Ue.position, Ue.quaternion, Ue.scale), Ue.projectionMatrix.fromArray(ee.projectionMatrix), Ue.projectionMatrixInverse.copy(Ue.projectionMatrix).invert(), Ue.viewport.set(He.x, He.y, He.width, He.height), Ct === 0 && (W.matrix.copy(Ue.matrix), W.matrix.decompose(W.position, W.quaternion, W.scale)), $e === !0 && W.cameras.push(Ue);
        }
        const ut = r.enabledFeatures;
        if (ut && ut.includes("depth-sensing") && r.depthUsage == "gpu-optimized" && x) {
          const Ct = x.getDepthInformation(Fe[0]);
          Ct && Ct.isValid && Ct.texture && w.init(Ct, r.renderState);
        }
        if (ut && ut.includes("camera-access") && (e.state.unbindTexture(), x))
          for (let Ct = 0; Ct < Fe.length; Ct++) {
            const ee = Fe[Ct].camera;
            if (ee) {
              let He = C[ee];
              He || (He = new UT(), C[ee] = He);
              const Ue = x.getCameraImage(ee);
              He.sourceTexture = Ue;
            }
          }
      }
      for (let Fe = 0; Fe < O.length; Fe++) {
        const $e = I[Fe], ut = O[Fe];
        $e !== null && ut !== void 0 && ut.update($e, we, g || h);
      }
      Me && Me(he, we), we.detectedPlanes && i.dispatchEvent({ type: "planesdetected", data: we }), R = null;
    }
    const Ne = new TT();
    Ne.setAnimationLoop(Re), this.setAnimationLoop = function(he) {
      Me = he;
    }, this.dispose = function() {
    };
  }
}
const Hu = /* @__PURE__ */ new Xs(), T4 = /* @__PURE__ */ new Ft();
function A4(s, e) {
  function n(C, E) {
    C.matrixAutoUpdate === !0 && C.updateMatrix(), E.value.copy(C.matrix);
  }
  function i(C, E) {
    E.color.getRGB(C.fogColor.value, TE(s)), E.isFog ? (C.fogNear.value = E.near, C.fogFar.value = E.far) : E.isFogExp2 && (C.fogDensity.value = E.density);
  }
  function r(C, E, U, N, O) {
    E.isMeshBasicMaterial || E.isMeshLambertMaterial ? c(C, E) : E.isMeshToonMaterial ? (c(C, E), x(C, E)) : E.isMeshPhongMaterial ? (c(C, E), S(C, E)) : E.isMeshStandardMaterial ? (c(C, E), M(C, E), E.isMeshPhysicalMaterial && b(C, E, O)) : E.isMeshMatcapMaterial ? (c(C, E), R(C, E)) : E.isMeshDepthMaterial ? c(C, E) : E.isMeshDistanceMaterial ? (c(C, E), w(C, E)) : E.isMeshNormalMaterial ? c(C, E) : E.isLineBasicMaterial ? (h(C, E), E.isLineDashedMaterial && d(C, E)) : E.isPointsMaterial ? v(C, E, U, N) : E.isSpriteMaterial ? g(C, E) : E.isShadowMaterial ? (C.color.value.copy(E.color), C.opacity.value = E.opacity) : E.isShaderMaterial && (E.uniformsNeedUpdate = !1);
  }
  function c(C, E) {
    C.opacity.value = E.opacity, E.color && C.diffuse.value.copy(E.color), E.emissive && C.emissive.value.copy(E.emissive).multiplyScalar(E.emissiveIntensity), E.map && (C.map.value = E.map, n(E.map, C.mapTransform)), E.alphaMap && (C.alphaMap.value = E.alphaMap, n(E.alphaMap, C.alphaMapTransform)), E.bumpMap && (C.bumpMap.value = E.bumpMap, n(E.bumpMap, C.bumpMapTransform), C.bumpScale.value = E.bumpScale, E.side === ji && (C.bumpScale.value *= -1)), E.normalMap && (C.normalMap.value = E.normalMap, n(E.normalMap, C.normalMapTransform), C.normalScale.value.copy(E.normalScale), E.side === ji && C.normalScale.value.negate()), E.displacementMap && (C.displacementMap.value = E.displacementMap, n(E.displacementMap, C.displacementMapTransform), C.displacementScale.value = E.displacementScale, C.displacementBias.value = E.displacementBias), E.emissiveMap && (C.emissiveMap.value = E.emissiveMap, n(E.emissiveMap, C.emissiveMapTransform)), E.specularMap && (C.specularMap.value = E.specularMap, n(E.specularMap, C.specularMapTransform)), E.alphaTest > 0 && (C.alphaTest.value = E.alphaTest);
    const U = e.get(E), N = U.envMap, O = U.envMapRotation;
    N && (C.envMap.value = N, Hu.copy(O), Hu.x *= -1, Hu.y *= -1, Hu.z *= -1, N.isCubeTexture && N.isRenderTargetTexture === !1 && (Hu.y *= -1, Hu.z *= -1), C.envMapRotation.value.setFromMatrix4(T4.makeRotationFromEuler(Hu)), C.flipEnvMap.value = N.isCubeTexture && N.isRenderTargetTexture === !1 ? -1 : 1, C.reflectivity.value = E.reflectivity, C.ior.value = E.ior, C.refractionRatio.value = E.refractionRatio), E.lightMap && (C.lightMap.value = E.lightMap, C.lightMapIntensity.value = E.lightMapIntensity, n(E.lightMap, C.lightMapTransform)), E.aoMap && (C.aoMap.value = E.aoMap, C.aoMapIntensity.value = E.aoMapIntensity, n(E.aoMap, C.aoMapTransform));
  }
  function h(C, E) {
    C.diffuse.value.copy(E.color), C.opacity.value = E.opacity, E.map && (C.map.value = E.map, n(E.map, C.mapTransform));
  }
  function d(C, E) {
    C.dashSize.value = E.dashSize, C.totalSize.value = E.dashSize + E.gapSize, C.scale.value = E.scale;
  }
  function v(C, E, U, N) {
    C.diffuse.value.copy(E.color), C.opacity.value = E.opacity, C.size.value = E.size * U, C.scale.value = N * 0.5, E.map && (C.map.value = E.map, n(E.map, C.uvTransform)), E.alphaMap && (C.alphaMap.value = E.alphaMap, n(E.alphaMap, C.alphaMapTransform)), E.alphaTest > 0 && (C.alphaTest.value = E.alphaTest);
  }
  function g(C, E) {
    C.diffuse.value.copy(E.color), C.opacity.value = E.opacity, C.rotation.value = E.rotation, E.map && (C.map.value = E.map, n(E.map, C.mapTransform)), E.alphaMap && (C.alphaMap.value = E.alphaMap, n(E.alphaMap, C.alphaMapTransform)), E.alphaTest > 0 && (C.alphaTest.value = E.alphaTest);
  }
  function S(C, E) {
    C.specular.value.copy(E.specular), C.shininess.value = Math.max(E.shininess, 1e-4);
  }
  function x(C, E) {
    E.gradientMap && (C.gradientMap.value = E.gradientMap);
  }
  function M(C, E) {
    C.metalness.value = E.metalness, E.metalnessMap && (C.metalnessMap.value = E.metalnessMap, n(E.metalnessMap, C.metalnessMapTransform)), C.roughness.value = E.roughness, E.roughnessMap && (C.roughnessMap.value = E.roughnessMap, n(E.roughnessMap, C.roughnessMapTransform)), E.envMap && (C.envMapIntensity.value = E.envMapIntensity);
  }
  function b(C, E, U) {
    C.ior.value = E.ior, E.sheen > 0 && (C.sheenColor.value.copy(E.sheenColor).multiplyScalar(E.sheen), C.sheenRoughness.value = E.sheenRoughness, E.sheenColorMap && (C.sheenColorMap.value = E.sheenColorMap, n(E.sheenColorMap, C.sheenColorMapTransform)), E.sheenRoughnessMap && (C.sheenRoughnessMap.value = E.sheenRoughnessMap, n(E.sheenRoughnessMap, C.sheenRoughnessMapTransform))), E.clearcoat > 0 && (C.clearcoat.value = E.clearcoat, C.clearcoatRoughness.value = E.clearcoatRoughness, E.clearcoatMap && (C.clearcoatMap.value = E.clearcoatMap, n(E.clearcoatMap, C.clearcoatMapTransform)), E.clearcoatRoughnessMap && (C.clearcoatRoughnessMap.value = E.clearcoatRoughnessMap, n(E.clearcoatRoughnessMap, C.clearcoatRoughnessMapTransform)), E.clearcoatNormalMap && (C.clearcoatNormalMap.value = E.clearcoatNormalMap, n(E.clearcoatNormalMap, C.clearcoatNormalMapTransform), C.clearcoatNormalScale.value.copy(E.clearcoatNormalScale), E.side === ji && C.clearcoatNormalScale.value.negate())), E.dispersion > 0 && (C.dispersion.value = E.dispersion), E.iridescence > 0 && (C.iridescence.value = E.iridescence, C.iridescenceIOR.value = E.iridescenceIOR, C.iridescenceThicknessMinimum.value = E.iridescenceThicknessRange[0], C.iridescenceThicknessMaximum.value = E.iridescenceThicknessRange[1], E.iridescenceMap && (C.iridescenceMap.value = E.iridescenceMap, n(E.iridescenceMap, C.iridescenceMapTransform)), E.iridescenceThicknessMap && (C.iridescenceThicknessMap.value = E.iridescenceThicknessMap, n(E.iridescenceThicknessMap, C.iridescenceThicknessMapTransform))), E.transmission > 0 && (C.transmission.value = E.transmission, C.transmissionSamplerMap.value = U.texture, C.transmissionSamplerSize.value.set(U.width, U.height), E.transmissionMap && (C.transmissionMap.value = E.transmissionMap, n(E.transmissionMap, C.transmissionMapTransform)), C.thickness.value = E.thickness, E.thicknessMap && (C.thicknessMap.value = E.thicknessMap, n(E.thicknessMap, C.thicknessMapTransform)), C.attenuationDistance.value = E.attenuationDistance, C.attenuationColor.value.copy(E.attenuationColor)), E.anisotropy > 0 && (C.anisotropyVector.value.set(E.anisotropy * Math.cos(E.anisotropyRotation), E.anisotropy * Math.sin(E.anisotropyRotation)), E.anisotropyMap && (C.anisotropyMap.value = E.anisotropyMap, n(E.anisotropyMap, C.anisotropyMapTransform))), C.specularIntensity.value = E.specularIntensity, C.specularColor.value.copy(E.specularColor), E.specularColorMap && (C.specularColorMap.value = E.specularColorMap, n(E.specularColorMap, C.specularColorMapTransform)), E.specularIntensityMap && (C.specularIntensityMap.value = E.specularIntensityMap, n(E.specularIntensityMap, C.specularIntensityMapTransform));
  }
  function R(C, E) {
    E.matcap && (C.matcap.value = E.matcap);
  }
  function w(C, E) {
    const U = e.get(E).light;
    C.referencePosition.value.setFromMatrixPosition(U.matrixWorld), C.nearDistance.value = U.shadow.camera.near, C.farDistance.value = U.shadow.camera.far;
  }
  return {
    refreshFogUniforms: i,
    refreshMaterialUniforms: r
  };
}
function R4(s, e, n, i) {
  let r = {}, c = {}, h = [];
  const d = s.getParameter(s.MAX_UNIFORM_BUFFER_BINDINGS);
  function v(U, N) {
    const O = N.program;
    i.uniformBlockBinding(U, O);
  }
  function g(U, N) {
    let O = r[U.id];
    O === void 0 && (R(U), O = S(U), r[U.id] = O, U.addEventListener("dispose", C));
    const I = N.program;
    i.updateUBOMapping(U, I);
    const V = e.render.frame;
    c[U.id] !== V && (M(U), c[U.id] = V);
  }
  function S(U) {
    const N = x();
    U.__bindingPointIndex = N;
    const O = s.createBuffer(), I = U.__size, V = U.usage;
    return s.bindBuffer(s.UNIFORM_BUFFER, O), s.bufferData(s.UNIFORM_BUFFER, I, V), s.bindBuffer(s.UNIFORM_BUFFER, null), s.bindBufferBase(s.UNIFORM_BUFFER, N, O), O;
  }
  function x() {
    for (let U = 0; U < d; U++)
      if (h.indexOf(U) === -1)
        return h.push(U), U;
    return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."), 0;
  }
  function M(U) {
    const N = r[U.id], O = U.uniforms, I = U.__cache;
    s.bindBuffer(s.UNIFORM_BUFFER, N);
    for (let V = 0, Y = O.length; V < Y; V++) {
      const k = Array.isArray(O[V]) ? O[V] : [O[V]];
      for (let B = 0, z = k.length; B < z; B++) {
        const W = k[B];
        if (b(W, V, B, I) === !0) {
          const le = W.__offset, ae = Array.isArray(W.value) ? W.value : [W.value];
          let oe = 0;
          for (let pe = 0; pe < ae.length; pe++) {
            const P = ae[pe], K = w(P);
            typeof P == "number" || typeof P == "boolean" ? (W.__data[0] = P, s.bufferSubData(s.UNIFORM_BUFFER, le + oe, W.__data)) : P.isMatrix3 ? (W.__data[0] = P.elements[0], W.__data[1] = P.elements[1], W.__data[2] = P.elements[2], W.__data[3] = 0, W.__data[4] = P.elements[3], W.__data[5] = P.elements[4], W.__data[6] = P.elements[5], W.__data[7] = 0, W.__data[8] = P.elements[6], W.__data[9] = P.elements[7], W.__data[10] = P.elements[8], W.__data[11] = 0) : (P.toArray(W.__data, oe), oe += K.storage / Float32Array.BYTES_PER_ELEMENT);
          }
          s.bufferSubData(s.UNIFORM_BUFFER, le, W.__data);
        }
      }
    }
    s.bindBuffer(s.UNIFORM_BUFFER, null);
  }
  function b(U, N, O, I) {
    const V = U.value, Y = N + "_" + O;
    if (I[Y] === void 0)
      return typeof V == "number" || typeof V == "boolean" ? I[Y] = V : I[Y] = V.clone(), !0;
    {
      const k = I[Y];
      if (typeof V == "number" || typeof V == "boolean") {
        if (k !== V)
          return I[Y] = V, !0;
      } else if (k.equals(V) === !1)
        return k.copy(V), !0;
    }
    return !1;
  }
  function R(U) {
    const N = U.uniforms;
    let O = 0;
    const I = 16;
    for (let Y = 0, k = N.length; Y < k; Y++) {
      const B = Array.isArray(N[Y]) ? N[Y] : [N[Y]];
      for (let z = 0, W = B.length; z < W; z++) {
        const le = B[z], ae = Array.isArray(le.value) ? le.value : [le.value];
        for (let oe = 0, pe = ae.length; oe < pe; oe++) {
          const P = ae[oe], K = w(P), Q = O % I, fe = Q % K.boundary, q = Q + fe;
          O += fe, q !== 0 && I - q < K.storage && (O += I - q), le.__data = new Float32Array(K.storage / Float32Array.BYTES_PER_ELEMENT), le.__offset = O, O += K.storage;
        }
      }
    }
    const V = O % I;
    return V > 0 && (O += I - V), U.__size = O, U.__cache = {}, this;
  }
  function w(U) {
    const N = {
      boundary: 0,
      // bytes
      storage: 0
      // bytes
    };
    return typeof U == "number" || typeof U == "boolean" ? (N.boundary = 4, N.storage = 4) : U.isVector2 ? (N.boundary = 8, N.storage = 8) : U.isVector3 || U.isColor ? (N.boundary = 16, N.storage = 12) : U.isVector4 ? (N.boundary = 16, N.storage = 16) : U.isMatrix3 ? (N.boundary = 48, N.storage = 48) : U.isMatrix4 ? (N.boundary = 64, N.storage = 64) : U.isTexture ? console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group.") : console.warn("THREE.WebGLRenderer: Unsupported uniform value type.", U), N;
  }
  function C(U) {
    const N = U.target;
    N.removeEventListener("dispose", C);
    const O = h.indexOf(N.__bindingPointIndex);
    h.splice(O, 1), s.deleteBuffer(r[N.id]), delete r[N.id], delete c[N.id];
  }
  function E() {
    for (const U in r)
      s.deleteBuffer(r[U]);
    h = [], r = {}, c = {};
  }
  return {
    bind: v,
    update: g,
    dispose: E
  };
}
class NT {
  /**
   * Constructs a new WebGL renderer.
   *
   * @param {WebGLRenderer~Options} [parameters] - The configuration parameter.
   */
  constructor(e = {}) {
    const {
      canvas: n = ME(),
      context: i = null,
      depth: r = !0,
      stencil: c = !1,
      alpha: h = !1,
      antialias: d = !1,
      premultipliedAlpha: v = !0,
      preserveDrawingBuffer: g = !1,
      powerPreference: S = "default",
      failIfMajorPerformanceCaveat: x = !1,
      reversedDepthBuffer: M = !1
    } = e;
    this.isWebGLRenderer = !0;
    let b;
    if (i !== null) {
      if (typeof WebGLRenderingContext < "u" && i instanceof WebGLRenderingContext)
        throw new Error("THREE.WebGLRenderer: WebGL 1 is not supported since r163.");
      b = i.getContextAttributes().alpha;
    } else
      b = h;
    const R = new Uint32Array(4), w = new Int32Array(4);
    let C = null, E = null;
    const U = [], N = [];
    this.domElement = n, this.debug = {
      /**
       * Enables error checking and reporting when shader programs are being compiled.
       * @type {boolean}
       */
      checkShaderErrors: !0,
      /**
       * Callback for custom error reporting.
       * @type {?Function}
       */
      onShaderError: null
    }, this.autoClear = !0, this.autoClearColor = !0, this.autoClearDepth = !0, this.autoClearStencil = !0, this.sortObjects = !0, this.clippingPlanes = [], this.localClippingEnabled = !1, this.toneMapping = Wr, this.toneMappingExposure = 1, this.transmissionResolutionScale = 1;
    const O = this;
    let I = !1;
    this._outputColorSpace = ei;
    let V = 0, Y = 0, k = null, B = -1, z = null;
    const W = new xn(), le = new xn();
    let ae = null;
    const oe = new lt(0);
    let pe = 0, P = n.width, K = n.height, Q = 1, fe = null, q = null;
    const te = new xn(0, 0, P, K), Me = new xn(0, 0, P, K);
    let Re = !1;
    const Ne = new Jh();
    let he = !1, we = !1;
    const Fe = new Ft(), $e = new j(), ut = new xn(), Tt = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: !0 };
    let gn = !1;
    function Ct() {
      return k === null ? Q : 1;
    }
    let ee = i;
    function He(F, re) {
      return n.getContext(F, re);
    }
    try {
      const F = {
        alpha: !0,
        depth: r,
        stencil: c,
        antialias: d,
        premultipliedAlpha: v,
        preserveDrawingBuffer: g,
        powerPreference: S,
        failIfMajorPerformanceCaveat: x
      };
      if ("setAttribute" in n && n.setAttribute("data-engine", `three.js r${lm}`), n.addEventListener("webglcontextlost", Ke, !1), n.addEventListener("webglcontextrestored", ct, !1), n.addEventListener("webglcontextcreationerror", qe, !1), ee === null) {
        const re = "webgl2";
        if (ee = He(re, F), ee === null)
          throw He(re) ? new Error("Error creating WebGL context with your selected attributes.") : new Error("Error creating WebGL context.");
      }
    } catch (F) {
      throw console.error("THREE.WebGLRenderer: " + F.message), F;
    }
    let Ue, Xe, Ce, et, Ge, Ze, At, Bt, Z, H, me, Te, ze, Ae, at, Qe, dt, pt, Ve, tt, St, mt, nt, Pt;
    function se() {
      Ue = new HN(ee), Ue.init(), mt = new DT(ee, Ue), Xe = new NN(ee, Ue, e, mt), Ce = new _4(ee, Ue), Xe.reversedDepthBuffer && M && Ce.buffers.depth.setReversed(!0), et = new FN(ee), Ge = new r4(), Ze = new S4(ee, Ue, Ce, Ge, Xe, mt, et), At = new LN(O), Bt = new IN(O), Z = new Zw(ee), nt = new DN(ee, Z), H = new VN(ee, Z, et, nt), me = new qN(ee, H, Z, et), Ve = new XN(ee, Xe, Ze), Qe = new ON(Ge), Te = new s4(O, At, Bt, Ue, Xe, nt, Qe), ze = new A4(O, Ge), Ae = new l4(), at = new p4(Ue), pt = new wN(O, At, Bt, Ce, me, b, v), dt = new g4(O, me, Xe), Pt = new R4(ee, et, Xe, Ce), tt = new UN(ee, Ue, et), St = new GN(ee, Ue, et), et.programs = Te.programs, O.capabilities = Xe, O.extensions = Ue, O.properties = Ge, O.renderLists = Ae, O.shadowMap = dt, O.state = Ce, O.info = et;
    }
    se();
    const ke = new E4(O, ee);
    this.xr = ke, this.getContext = function() {
      return ee;
    }, this.getContextAttributes = function() {
      return ee.getContextAttributes();
    }, this.forceContextLoss = function() {
      const F = Ue.get("WEBGL_lose_context");
      F && F.loseContext();
    }, this.forceContextRestore = function() {
      const F = Ue.get("WEBGL_lose_context");
      F && F.restoreContext();
    }, this.getPixelRatio = function() {
      return Q;
    }, this.setPixelRatio = function(F) {
      F !== void 0 && (Q = F, this.setSize(P, K, !1));
    }, this.getSize = function(F) {
      return F.set(P, K);
    }, this.setSize = function(F, re, ve = !0) {
      if (ke.isPresenting) {
        console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");
        return;
      }
      P = F, K = re, n.width = Math.floor(F * Q), n.height = Math.floor(re * Q), ve === !0 && (n.style.width = F + "px", n.style.height = re + "px"), this.setViewport(0, 0, F, re);
    }, this.getDrawingBufferSize = function(F) {
      return F.set(P * Q, K * Q).floor();
    }, this.setDrawingBufferSize = function(F, re, ve) {
      P = F, K = re, Q = ve, n.width = Math.floor(F * ve), n.height = Math.floor(re * ve), this.setViewport(0, 0, F, re);
    }, this.getCurrentViewport = function(F) {
      return F.copy(W);
    }, this.getViewport = function(F) {
      return F.copy(te);
    }, this.setViewport = function(F, re, ve, xe) {
      F.isVector4 ? te.set(F.x, F.y, F.z, F.w) : te.set(F, re, ve, xe), Ce.viewport(W.copy(te).multiplyScalar(Q).round());
    }, this.getScissor = function(F) {
      return F.copy(Me);
    }, this.setScissor = function(F, re, ve, xe) {
      F.isVector4 ? Me.set(F.x, F.y, F.z, F.w) : Me.set(F, re, ve, xe), Ce.scissor(le.copy(Me).multiplyScalar(Q).round());
    }, this.getScissorTest = function() {
      return Re;
    }, this.setScissorTest = function(F) {
      Ce.setScissorTest(Re = F);
    }, this.setOpaqueSort = function(F) {
      fe = F;
    }, this.setTransparentSort = function(F) {
      q = F;
    }, this.getClearColor = function(F) {
      return F.copy(pt.getClearColor());
    }, this.setClearColor = function() {
      pt.setClearColor(...arguments);
    }, this.getClearAlpha = function() {
      return pt.getClearAlpha();
    }, this.setClearAlpha = function() {
      pt.setClearAlpha(...arguments);
    }, this.clear = function(F = !0, re = !0, ve = !0) {
      let xe = 0;
      if (F) {
        let ce = !1;
        if (k !== null) {
          const Ye = k.texture.format;
          ce = Ye === Y0 || Ye === q0 || Ye === um;
        }
        if (ce) {
          const Ye = k.texture.type, Je = Ye === Da || Ye === Io || Ye === Vh || Ye === Ku || Ye === G0 || Ye === F0, ft = pt.getClearColor(), it = pt.getClearAlpha(), Mt = ft.r, wt = ft.g, _t = ft.b;
          Je ? (R[0] = Mt, R[1] = wt, R[2] = _t, R[3] = it, ee.clearBufferuiv(ee.COLOR, 0, R)) : (w[0] = Mt, w[1] = wt, w[2] = _t, w[3] = it, ee.clearBufferiv(ee.COLOR, 0, w));
        } else
          xe |= ee.COLOR_BUFFER_BIT;
      }
      re && (xe |= ee.DEPTH_BUFFER_BIT), ve && (xe |= ee.STENCIL_BUFFER_BIT, this.state.buffers.stencil.setMask(4294967295)), ee.clear(xe);
    }, this.clearColor = function() {
      this.clear(!0, !1, !1);
    }, this.clearDepth = function() {
      this.clear(!1, !0, !1);
    }, this.clearStencil = function() {
      this.clear(!1, !1, !0);
    }, this.dispose = function() {
      n.removeEventListener("webglcontextlost", Ke, !1), n.removeEventListener("webglcontextrestored", ct, !1), n.removeEventListener("webglcontextcreationerror", qe, !1), pt.dispose(), Ae.dispose(), at.dispose(), Ge.dispose(), At.dispose(), Bt.dispose(), me.dispose(), nt.dispose(), Pt.dispose(), Te.dispose(), ke.dispose(), ke.removeEventListener("sessionstart", pi), ke.removeEventListener("sessionend", mi), jn.stop();
    };
    function Ke(F) {
      F.preventDefault(), console.log("THREE.WebGLRenderer: Context Lost."), I = !0;
    }
    function ct() {
      console.log("THREE.WebGLRenderer: Context Restored."), I = !1;
      const F = et.autoReset, re = dt.enabled, ve = dt.autoUpdate, xe = dt.needsUpdate, ce = dt.type;
      se(), et.autoReset = F, dt.enabled = re, dt.autoUpdate = ve, dt.needsUpdate = xe, dt.type = ce;
    }
    function qe(F) {
      console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ", F.statusMessage);
    }
    function Pe(F) {
      const re = F.target;
      re.removeEventListener("dispose", Pe), vt(re);
    }
    function vt(F) {
      Ut(F), Ge.remove(F);
    }
    function Ut(F) {
      const re = Ge.get(F).programs;
      re !== void 0 && (re.forEach(function(ve) {
        Te.releaseProgram(ve);
      }), F.isShaderMaterial && Te.releaseShaderCache(F));
    }
    this.renderBufferDirect = function(F, re, ve, xe, ce, Ye) {
      re === null && (re = Tt);
      const Je = ce.isMesh && ce.matrixWorld.determinant() < 0, ft = Ys(F, re, ve, xe, ce);
      Ce.setMaterial(xe, Je);
      let it = ve.index, Mt = 1;
      if (xe.wireframe === !0) {
        if (it = H.getWireframeAttribute(ve), it === void 0) return;
        Mt = 2;
      }
      const wt = ve.drawRange, _t = ve.attributes.position;
      let Zt = wt.start * Mt, hn = (wt.start + wt.count) * Mt;
      Ye !== null && (Zt = Math.max(Zt, Ye.start * Mt), hn = Math.min(hn, (Ye.start + Ye.count) * Mt)), it !== null ? (Zt = Math.max(Zt, 0), hn = Math.min(hn, it.count)) : _t != null && (Zt = Math.max(Zt, 0), hn = Math.min(hn, _t.count));
      const Yn = hn - Zt;
      if (Yn < 0 || Yn === 1 / 0) return;
      nt.setup(ce, xe, ft, ve, it);
      let Cn, Yt = tt;
      if (it !== null && (Cn = Z.get(it), Yt = St, Yt.setIndex(Cn)), ce.isMesh)
        xe.wireframe === !0 ? (Ce.setLineWidth(xe.wireframeLinewidth * Ct()), Yt.setMode(ee.LINES)) : Yt.setMode(ee.TRIANGLES);
      else if (ce.isLine) {
        let bt = xe.linewidth;
        bt === void 0 && (bt = 1), Ce.setLineWidth(bt * Ct()), ce.isLineSegments ? Yt.setMode(ee.LINES) : ce.isLineLoop ? Yt.setMode(ee.LINE_LOOP) : Yt.setMode(ee.LINE_STRIP);
      } else ce.isPoints ? Yt.setMode(ee.POINTS) : ce.isSprite && Yt.setMode(ee.TRIANGLES);
      if (ce.isBatchedMesh)
        if (ce._multiDrawInstances !== null)
          Ph("THREE.WebGLRenderer: renderMultiDrawInstances has been deprecated and will be removed in r184. Append to renderMultiDraw arguments and use indirection."), Yt.renderMultiDrawInstances(ce._multiDrawStarts, ce._multiDrawCounts, ce._multiDrawCount, ce._multiDrawInstances);
        else if (Ue.get("WEBGL_multi_draw"))
          Yt.renderMultiDraw(ce._multiDrawStarts, ce._multiDrawCounts, ce._multiDrawCount);
        else {
          const bt = ce._multiDrawStarts, kn = ce._multiDrawCounts, nn = ce._multiDrawCount, Bi = it ? Z.get(it).bytesPerElement : 1, ss = Ge.get(xe).currentProgram.getUniforms();
          for (let Pi = 0; Pi < nn; Pi++)
            ss.setValue(ee, "_gl_DrawID", Pi), Yt.render(bt[Pi] / Bi, kn[Pi]);
        }
      else if (ce.isInstancedMesh)
        Yt.renderInstances(Zt, Yn, ce.count);
      else if (ve.isInstancedBufferGeometry) {
        const bt = ve._maxInstanceCount !== void 0 ? ve._maxInstanceCount : 1 / 0, kn = Math.min(ve.instanceCount, bt);
        Yt.renderInstances(Zt, Yn, kn);
      } else
        Yt.render(Zt, Yn);
    };
    function un(F, re, ve) {
      F.transparent === !0 && F.side === Ms && F.forceSinglePass === !1 ? (F.side = ji, F.needsUpdate = !0, za(F, re, ve), F.side = Po, F.needsUpdate = !0, za(F, re, ve), F.side = Ms) : za(F, re, ve);
    }
    this.compile = function(F, re, ve = null) {
      ve === null && (ve = F), E = at.get(ve), E.init(re), N.push(E), ve.traverseVisible(function(ce) {
        ce.isLight && ce.layers.test(re.layers) && (E.pushLight(ce), ce.castShadow && E.pushShadow(ce));
      }), F !== ve && F.traverseVisible(function(ce) {
        ce.isLight && ce.layers.test(re.layers) && (E.pushLight(ce), ce.castShadow && E.pushShadow(ce));
      }), E.setupLights();
      const xe = /* @__PURE__ */ new Set();
      return F.traverse(function(ce) {
        if (!(ce.isMesh || ce.isPoints || ce.isLine || ce.isSprite))
          return;
        const Ye = ce.material;
        if (Ye)
          if (Array.isArray(Ye))
            for (let Je = 0; Je < Ye.length; Je++) {
              const ft = Ye[Je];
              un(ft, ve, ce), xe.add(ft);
            }
          else
            un(Ye, ve, ce), xe.add(Ye);
      }), E = N.pop(), xe;
    }, this.compileAsync = function(F, re, ve = null) {
      const xe = this.compile(F, re, ve);
      return new Promise((ce) => {
        function Ye() {
          if (xe.forEach(function(Je) {
            Ge.get(Je).currentProgram.isReady() && xe.delete(Je);
          }), xe.size === 0) {
            ce(F);
            return;
          }
          setTimeout(Ye, 10);
        }
        Ue.get("KHR_parallel_shader_compile") !== null ? Ye() : setTimeout(Ye, 10);
      });
    };
    let rn = null;
    function is(F) {
      rn && rn(F);
    }
    function pi() {
      jn.stop();
    }
    function mi() {
      jn.start();
    }
    const jn = new TT();
    jn.setAnimationLoop(is), typeof self < "u" && jn.setContext(self), this.setAnimationLoop = function(F) {
      rn = F, ke.setAnimationLoop(F), F === null ? jn.stop() : jn.start();
    }, ke.addEventListener("sessionstart", pi), ke.addEventListener("sessionend", mi), this.render = function(F, re) {
      if (re !== void 0 && re.isCamera !== !0) {
        console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
        return;
      }
      if (I === !0) return;
      if (F.matrixWorldAutoUpdate === !0 && F.updateMatrixWorld(), re.parent === null && re.matrixWorldAutoUpdate === !0 && re.updateMatrixWorld(), ke.enabled === !0 && ke.isPresenting === !0 && (ke.cameraAutoUpdate === !0 && ke.updateCamera(re), re = ke.getCamera()), F.isScene === !0 && F.onBeforeRender(O, F, re, k), E = at.get(F, N.length), E.init(re), N.push(E), Fe.multiplyMatrices(re.projectionMatrix, re.matrixWorldInverse), Ne.setFromProjectionMatrix(Fe, Gs, re.reversedDepth), we = this.localClippingEnabled, he = Qe.init(this.clippingPlanes, we), C = Ae.get(F, U.length), C.init(), U.push(C), ke.enabled === !0 && ke.isPresenting === !0) {
        const Ye = O.xr.getDepthSensingMesh();
        Ye !== null && as(Ye, re, -1 / 0, O.sortObjects);
      }
      as(F, re, 0, O.sortObjects), C.finish(), O.sortObjects === !0 && C.sort(fe, q), gn = ke.enabled === !1 || ke.isPresenting === !1 || ke.hasDepthSensing() === !1, gn && pt.addToRenderList(C, F), this.info.render.frame++, he === !0 && Qe.beginShadows();
      const ve = E.state.shadowsArray;
      dt.render(ve, F, re), he === !0 && Qe.endShadows(), this.info.autoReset === !0 && this.info.reset();
      const xe = C.opaque, ce = C.transmissive;
      if (E.setupLights(), re.isArrayCamera) {
        const Ye = re.cameras;
        if (ce.length > 0)
          for (let Je = 0, ft = Ye.length; Je < ft; Je++) {
            const it = Ye[Je];
            Lc(xe, ce, F, it);
          }
        gn && pt.render(F);
        for (let Je = 0, ft = Ye.length; Je < ft; Je++) {
          const it = Ye[Je];
          Na(C, F, it, it.viewport);
        }
      } else
        ce.length > 0 && Lc(xe, ce, F, re), gn && pt.render(F), Na(C, F, re);
      k !== null && Y === 0 && (Ze.updateMultisampleRenderTarget(k), Ze.updateRenderTargetMipmap(k)), F.isScene === !0 && F.onAfterRender(O, F, re), nt.resetDefaultState(), B = -1, z = null, N.pop(), N.length > 0 ? (E = N[N.length - 1], he === !0 && Qe.setGlobalState(O.clippingPlanes, E.state.camera)) : E = null, U.pop(), U.length > 0 ? C = U[U.length - 1] : C = null;
    };
    function as(F, re, ve, xe) {
      if (F.visible === !1) return;
      if (F.layers.test(re.layers)) {
        if (F.isGroup)
          ve = F.renderOrder;
        else if (F.isLOD)
          F.autoUpdate === !0 && F.update(re);
        else if (F.isLight)
          E.pushLight(F), F.castShadow && E.pushShadow(F);
        else if (F.isSprite) {
          if (!F.frustumCulled || Ne.intersectsSprite(F)) {
            xe && ut.setFromMatrixPosition(F.matrixWorld).applyMatrix4(Fe);
            const Je = me.update(F), ft = F.material;
            ft.visible && C.push(F, Je, ft, ve, ut.z, null);
          }
        } else if ((F.isMesh || F.isLine || F.isPoints) && (!F.frustumCulled || Ne.intersectsObject(F))) {
          const Je = me.update(F), ft = F.material;
          if (xe && (F.boundingSphere !== void 0 ? (F.boundingSphere === null && F.computeBoundingSphere(), ut.copy(F.boundingSphere.center)) : (Je.boundingSphere === null && Je.computeBoundingSphere(), ut.copy(Je.boundingSphere.center)), ut.applyMatrix4(F.matrixWorld).applyMatrix4(Fe)), Array.isArray(ft)) {
            const it = Je.groups;
            for (let Mt = 0, wt = it.length; Mt < wt; Mt++) {
              const _t = it[Mt], Zt = ft[_t.materialIndex];
              Zt && Zt.visible && C.push(F, Je, Zt, ve, ut.z, _t);
            }
          } else ft.visible && C.push(F, Je, ft, ve, ut.z, null);
        }
      }
      const Ye = F.children;
      for (let Je = 0, ft = Ye.length; Je < ft; Je++)
        as(Ye[Je], re, ve, xe);
    }
    function Na(F, re, ve, xe) {
      const ce = F.opaque, Ye = F.transmissive, Je = F.transparent;
      E.setupLightsView(ve), he === !0 && Qe.setGlobalState(O.clippingPlanes, ve), xe && Ce.viewport(W.copy(xe)), ce.length > 0 && Oa(ce, re, ve), Ye.length > 0 && Oa(Ye, re, ve), Je.length > 0 && Oa(Je, re, ve), Ce.buffers.depth.setTest(!0), Ce.buffers.depth.setMask(!0), Ce.buffers.color.setMask(!0), Ce.setPolygonOffset(!1);
    }
    function Lc(F, re, ve, xe) {
      if ((ve.isScene === !0 ? ve.overrideMaterial : null) !== null)
        return;
      E.state.transmissionRenderTarget[xe.id] === void 0 && (E.state.transmissionRenderTarget[xe.id] = new Ua(1, 1, {
        generateMipmaps: !0,
        type: Ue.has("EXT_color_buffer_half_float") || Ue.has("EXT_color_buffer_float") ? nf : Da,
        minFilter: Lo,
        samples: 4,
        stencilBuffer: c,
        resolveDepthBuffer: !1,
        resolveStencilBuffer: !1,
        colorSpace: vn.workingColorSpace
      }));
      const Ye = E.state.transmissionRenderTarget[xe.id], Je = xe.viewport || W;
      Ye.setSize(Je.z * O.transmissionResolutionScale, Je.w * O.transmissionResolutionScale);
      const ft = O.getRenderTarget(), it = O.getActiveCubeFace(), Mt = O.getActiveMipmapLevel();
      O.setRenderTarget(Ye), O.getClearColor(oe), pe = O.getClearAlpha(), pe < 1 && O.setClearColor(16777215, 0.5), O.clear(), gn && pt.render(ve);
      const wt = O.toneMapping;
      O.toneMapping = Wr;
      const _t = xe.viewport;
      if (xe.viewport !== void 0 && (xe.viewport = void 0), E.setupLightsView(xe), he === !0 && Qe.setGlobalState(O.clippingPlanes, xe), Oa(F, ve, xe), Ze.updateMultisampleRenderTarget(Ye), Ze.updateRenderTargetMipmap(Ye), Ue.has("WEBGL_multisampled_render_to_texture") === !1) {
        let Zt = !1;
        for (let hn = 0, Yn = re.length; hn < Yn; hn++) {
          const Cn = re[hn], Yt = Cn.object, bt = Cn.geometry, kn = Cn.material, nn = Cn.group;
          if (kn.side === Ms && Yt.layers.test(xe.layers)) {
            const Bi = kn.side;
            kn.side = ji, kn.needsUpdate = !0, La(Yt, ve, xe, bt, kn, nn), kn.side = Bi, kn.needsUpdate = !0, Zt = !0;
          }
        }
        Zt === !0 && (Ze.updateMultisampleRenderTarget(Ye), Ze.updateRenderTargetMipmap(Ye));
      }
      O.setRenderTarget(ft, it, Mt), O.setClearColor(oe, pe), _t !== void 0 && (xe.viewport = _t), O.toneMapping = wt;
    }
    function Oa(F, re, ve) {
      const xe = re.isScene === !0 ? re.overrideMaterial : null;
      for (let ce = 0, Ye = F.length; ce < Ye; ce++) {
        const Je = F[ce], ft = Je.object, it = Je.geometry, Mt = Je.group;
        let wt = Je.material;
        wt.allowOverride === !0 && xe !== null && (wt = xe), ft.layers.test(ve.layers) && La(ft, re, ve, it, wt, Mt);
      }
    }
    function La(F, re, ve, xe, ce, Ye) {
      F.onBeforeRender(O, re, ve, xe, ce, Ye), F.modelViewMatrix.multiplyMatrices(ve.matrixWorldInverse, F.matrixWorld), F.normalMatrix.getNormalMatrix(F.modelViewMatrix), ce.onBeforeRender(O, re, ve, xe, F, Ye), ce.transparent === !0 && ce.side === Ms && ce.forceSinglePass === !1 ? (ce.side = ji, ce.needsUpdate = !0, O.renderBufferDirect(ve, re, xe, ce, F, Ye), ce.side = Po, ce.needsUpdate = !0, O.renderBufferDirect(ve, re, xe, ce, F, Ye), ce.side = Ms) : O.renderBufferDirect(ve, re, xe, ce, F, Ye), F.onAfterRender(O, re, ve, xe, ce, Ye);
    }
    function za(F, re, ve) {
      re.isScene !== !0 && (re = Tt);
      const xe = Ge.get(F), ce = E.state.lights, Ye = E.state.shadowsArray, Je = ce.state.version, ft = Te.getParameters(F, ce.state, Ye, re, ve), it = Te.getProgramCacheKey(ft);
      let Mt = xe.programs;
      xe.environment = F.isMeshStandardMaterial ? re.environment : null, xe.fog = re.fog, xe.envMap = (F.isMeshStandardMaterial ? Bt : At).get(F.envMap || xe.environment), xe.envMapRotation = xe.environment !== null && F.envMap === null ? re.environmentRotation : F.envMapRotation, Mt === void 0 && (F.addEventListener("dispose", Pe), Mt = /* @__PURE__ */ new Map(), xe.programs = Mt);
      let wt = Mt.get(it);
      if (wt !== void 0) {
        if (xe.currentProgram === wt && xe.lightsStateVersion === Je)
          return As(F, ft), wt;
      } else
        ft.uniforms = Te.getUniforms(F), F.onBeforeCompile(ft, O), wt = Te.acquireProgram(ft, it), Mt.set(it, wt), xe.uniforms = ft.uniforms;
      const _t = xe.uniforms;
      return (!F.isShaderMaterial && !F.isRawShaderMaterial || F.clipping === !0) && (_t.clippingPlanes = Qe.uniform), As(F, ft), xe.needsLights = mr(F), xe.lightsStateVersion = Je, xe.needsLights && (_t.ambientLightColor.value = ce.state.ambient, _t.lightProbe.value = ce.state.probe, _t.directionalLights.value = ce.state.directional, _t.directionalLightShadows.value = ce.state.directionalShadow, _t.spotLights.value = ce.state.spot, _t.spotLightShadows.value = ce.state.spotShadow, _t.rectAreaLights.value = ce.state.rectArea, _t.ltc_1.value = ce.state.rectAreaLTC1, _t.ltc_2.value = ce.state.rectAreaLTC2, _t.pointLights.value = ce.state.point, _t.pointLightShadows.value = ce.state.pointShadow, _t.hemisphereLights.value = ce.state.hemi, _t.directionalShadowMap.value = ce.state.directionalShadowMap, _t.directionalShadowMatrix.value = ce.state.directionalShadowMatrix, _t.spotShadowMap.value = ce.state.spotShadowMap, _t.spotLightMatrix.value = ce.state.spotLightMatrix, _t.spotLightMap.value = ce.state.spotLightMap, _t.pointShadowMap.value = ce.state.pointShadowMap, _t.pointShadowMatrix.value = ce.state.pointShadowMatrix), xe.currentProgram = wt, xe.uniformsList = null, wt;
    }
    function In(F) {
      if (F.uniformsList === null) {
        const re = F.currentProgram.getUniforms();
        F.uniformsList = kg.seqWithValue(re.seq, F.uniforms);
      }
      return F.uniformsList;
    }
    function As(F, re) {
      const ve = Ge.get(F);
      ve.outputColorSpace = re.outputColorSpace, ve.batching = re.batching, ve.batchingColor = re.batchingColor, ve.instancing = re.instancing, ve.instancingColor = re.instancingColor, ve.instancingMorph = re.instancingMorph, ve.skinning = re.skinning, ve.morphTargets = re.morphTargets, ve.morphNormals = re.morphNormals, ve.morphColors = re.morphColors, ve.morphTargetsCount = re.morphTargetsCount, ve.numClippingPlanes = re.numClippingPlanes, ve.numIntersection = re.numClipIntersection, ve.vertexAlphas = re.vertexAlphas, ve.vertexTangents = re.vertexTangents, ve.toneMapping = re.toneMapping;
    }
    function Ys(F, re, ve, xe, ce) {
      re.isScene !== !0 && (re = Tt), Ze.resetTextureUnits();
      const Ye = re.fog, Je = xe.isMeshStandardMaterial ? re.environment : null, ft = k === null ? O.outputColorSpace : k.isXRRenderTarget === !0 ? k.texture.colorSpace : Ho, it = (xe.isMeshStandardMaterial ? Bt : At).get(xe.envMap || Je), Mt = xe.vertexColors === !0 && !!ve.attributes.color && ve.attributes.color.itemSize === 4, wt = !!ve.attributes.tangent && (!!xe.normalMap || xe.anisotropy > 0), _t = !!ve.morphAttributes.position, Zt = !!ve.morphAttributes.normal, hn = !!ve.morphAttributes.color;
      let Yn = Wr;
      xe.toneMapped && (k === null || k.isXRRenderTarget === !0) && (Yn = O.toneMapping);
      const Cn = ve.morphAttributes.position || ve.morphAttributes.normal || ve.morphAttributes.color, Yt = Cn !== void 0 ? Cn.length : 0, bt = Ge.get(xe), kn = E.state.lights;
      if (he === !0 && (we === !0 || F !== z)) {
        const Kn = F === z && xe.id === B;
        Qe.setState(xe, F, Kn);
      }
      let nn = !1;
      xe.version === bt.__version ? (bt.needsLights && bt.lightsStateVersion !== kn.state.version || bt.outputColorSpace !== ft || ce.isBatchedMesh && bt.batching === !1 || !ce.isBatchedMesh && bt.batching === !0 || ce.isBatchedMesh && bt.batchingColor === !0 && ce.colorTexture === null || ce.isBatchedMesh && bt.batchingColor === !1 && ce.colorTexture !== null || ce.isInstancedMesh && bt.instancing === !1 || !ce.isInstancedMesh && bt.instancing === !0 || ce.isSkinnedMesh && bt.skinning === !1 || !ce.isSkinnedMesh && bt.skinning === !0 || ce.isInstancedMesh && bt.instancingColor === !0 && ce.instanceColor === null || ce.isInstancedMesh && bt.instancingColor === !1 && ce.instanceColor !== null || ce.isInstancedMesh && bt.instancingMorph === !0 && ce.morphTexture === null || ce.isInstancedMesh && bt.instancingMorph === !1 && ce.morphTexture !== null || bt.envMap !== it || xe.fog === !0 && bt.fog !== Ye || bt.numClippingPlanes !== void 0 && (bt.numClippingPlanes !== Qe.numPlanes || bt.numIntersection !== Qe.numIntersection) || bt.vertexAlphas !== Mt || bt.vertexTangents !== wt || bt.morphTargets !== _t || bt.morphNormals !== Zt || bt.morphColors !== hn || bt.toneMapping !== Yn || bt.morphTargetsCount !== Yt) && (nn = !0) : (nn = !0, bt.__version = xe.version);
      let Bi = bt.currentProgram;
      nn === !0 && (Bi = za(xe, re, ce));
      let ss = !1, Pi = !1, xi = !1;
      const Dn = Bi.getUniforms(), Ji = bt.uniforms;
      if (Ce.useProgram(Bi.program) && (ss = !0, Pi = !0, xi = !0), xe.id !== B && (B = xe.id, Pi = !0), ss || z !== F) {
        Ce.buffers.depth.getReversed() && F.reversedDepth !== !0 && (F._reversedDepth = !0, F.updateProjectionMatrix()), Dn.setValue(ee, "projectionMatrix", F.projectionMatrix), Dn.setValue(ee, "viewMatrix", F.matrixWorldInverse);
        const Hi = Dn.map.cameraPosition;
        Hi !== void 0 && Hi.setValue(ee, $e.setFromMatrixPosition(F.matrixWorld)), Xe.logarithmicDepthBuffer && Dn.setValue(
          ee,
          "logDepthBufFC",
          2 / (Math.log(F.far + 1) / Math.LN2)
        ), (xe.isMeshPhongMaterial || xe.isMeshToonMaterial || xe.isMeshLambertMaterial || xe.isMeshBasicMaterial || xe.isMeshStandardMaterial || xe.isShaderMaterial) && Dn.setValue(ee, "isOrthographic", F.isOrthographicCamera === !0), z !== F && (z = F, Pi = !0, xi = !0);
      }
      if (ce.isSkinnedMesh) {
        Dn.setOptional(ee, ce, "bindMatrix"), Dn.setOptional(ee, ce, "bindMatrixInverse");
        const Kn = ce.skeleton;
        Kn && (Kn.boneTexture === null && Kn.computeBoneTexture(), Dn.setValue(ee, "boneTexture", Kn.boneTexture, Ze));
      }
      ce.isBatchedMesh && (Dn.setOptional(ee, ce, "batchingTexture"), Dn.setValue(ee, "batchingTexture", ce._matricesTexture, Ze), Dn.setOptional(ee, ce, "batchingIdTexture"), Dn.setValue(ee, "batchingIdTexture", ce._indirectTexture, Ze), Dn.setOptional(ee, ce, "batchingColorTexture"), ce._colorsTexture !== null && Dn.setValue(ee, "batchingColorTexture", ce._colorsTexture, Ze));
      const Ii = ve.morphAttributes;
      if ((Ii.position !== void 0 || Ii.normal !== void 0 || Ii.color !== void 0) && Ve.update(ce, ve, Bi), (Pi || bt.receiveShadow !== ce.receiveShadow) && (bt.receiveShadow = ce.receiveShadow, Dn.setValue(ee, "receiveShadow", ce.receiveShadow)), xe.isMeshGouraudMaterial && xe.envMap !== null && (Ji.envMap.value = it, Ji.flipEnvMap.value = it.isCubeTexture && it.isRenderTargetTexture === !1 ? -1 : 1), xe.isMeshStandardMaterial && xe.envMap === null && re.environment !== null && (Ji.envMapIntensity.value = re.environmentIntensity), Pi && (Dn.setValue(ee, "toneMappingExposure", O.toneMappingExposure), bt.needsLights && Qr(Ji, xi), Ye && xe.fog === !0 && ze.refreshFogUniforms(Ji, Ye), ze.refreshMaterialUniforms(Ji, xe, Q, K, E.state.transmissionRenderTarget[F.id]), kg.upload(ee, In(bt), Ji, Ze)), xe.isShaderMaterial && xe.uniformsNeedUpdate === !0 && (kg.upload(ee, In(bt), Ji, Ze), xe.uniformsNeedUpdate = !1), xe.isSpriteMaterial && Dn.setValue(ee, "center", ce.center), Dn.setValue(ee, "modelViewMatrix", ce.modelViewMatrix), Dn.setValue(ee, "normalMatrix", ce.normalMatrix), Dn.setValue(ee, "modelMatrix", ce.matrixWorld), xe.isShaderMaterial || xe.isRawShaderMaterial) {
        const Kn = xe.uniformsGroups;
        for (let Hi = 0, Go = Kn.length; Hi < Go; Hi++) {
          const Mi = Kn[Hi];
          Pt.update(Mi, Bi), Pt.bind(Mi, Bi);
        }
      }
      return Bi;
    }
    function Qr(F, re) {
      F.ambientLightColor.needsUpdate = re, F.lightProbe.needsUpdate = re, F.directionalLights.needsUpdate = re, F.directionalLightShadows.needsUpdate = re, F.pointLights.needsUpdate = re, F.pointLightShadows.needsUpdate = re, F.spotLights.needsUpdate = re, F.spotLightShadows.needsUpdate = re, F.rectAreaLights.needsUpdate = re, F.hemisphereLights.needsUpdate = re;
    }
    function mr(F) {
      return F.isMeshLambertMaterial || F.isMeshToonMaterial || F.isMeshPhongMaterial || F.isMeshStandardMaterial || F.isShadowMaterial || F.isShaderMaterial && F.lights === !0;
    }
    this.getActiveCubeFace = function() {
      return V;
    }, this.getActiveMipmapLevel = function() {
      return Y;
    }, this.getRenderTarget = function() {
      return k;
    }, this.setRenderTargetTextures = function(F, re, ve) {
      const xe = Ge.get(F);
      xe.__autoAllocateDepthBuffer = F.resolveDepthBuffer === !1, xe.__autoAllocateDepthBuffer === !1 && (xe.__useRenderToTexture = !1), Ge.get(F.texture).__webglTexture = re, Ge.get(F.depthTexture).__webglTexture = xe.__autoAllocateDepthBuffer ? void 0 : ve, xe.__hasExternalTextures = !0;
    }, this.setRenderTargetFramebuffer = function(F, re) {
      const ve = Ge.get(F);
      ve.__webglFramebuffer = re, ve.__useDefaultFramebuffer = re === void 0;
    };
    const vi = ee.createFramebuffer();
    this.setRenderTarget = function(F, re = 0, ve = 0) {
      k = F, V = re, Y = ve;
      let xe = !0, ce = null, Ye = !1, Je = !1;
      if (F) {
        const it = Ge.get(F);
        if (it.__useDefaultFramebuffer !== void 0)
          Ce.bindFramebuffer(ee.FRAMEBUFFER, null), xe = !1;
        else if (it.__webglFramebuffer === void 0)
          Ze.setupRenderTarget(F);
        else if (it.__hasExternalTextures)
          Ze.rebindTextures(F, Ge.get(F.texture).__webglTexture, Ge.get(F.depthTexture).__webglTexture);
        else if (F.depthBuffer) {
          const _t = F.depthTexture;
          if (it.__boundDepthTexture !== _t) {
            if (_t !== null && Ge.has(_t) && (F.width !== _t.image.width || F.height !== _t.image.height))
              throw new Error("WebGLRenderTarget: Attached DepthTexture is initialized to the incorrect size.");
            Ze.setupDepthRenderbuffer(F);
          }
        }
        const Mt = F.texture;
        (Mt.isData3DTexture || Mt.isDataArrayTexture || Mt.isCompressedArrayTexture) && (Je = !0);
        const wt = Ge.get(F).__webglFramebuffer;
        F.isWebGLCubeRenderTarget ? (Array.isArray(wt[re]) ? ce = wt[re][ve] : ce = wt[re], Ye = !0) : F.samples > 0 && Ze.useMultisampledRTT(F) === !1 ? ce = Ge.get(F).__webglMultisampledFramebuffer : Array.isArray(wt) ? ce = wt[ve] : ce = wt, W.copy(F.viewport), le.copy(F.scissor), ae = F.scissorTest;
      } else
        W.copy(te).multiplyScalar(Q).floor(), le.copy(Me).multiplyScalar(Q).floor(), ae = Re;
      if (ve !== 0 && (ce = vi), Ce.bindFramebuffer(ee.FRAMEBUFFER, ce) && xe && Ce.drawBuffers(F, ce), Ce.viewport(W), Ce.scissor(le), Ce.setScissorTest(ae), Ye) {
        const it = Ge.get(F.texture);
        ee.framebufferTexture2D(ee.FRAMEBUFFER, ee.COLOR_ATTACHMENT0, ee.TEXTURE_CUBE_MAP_POSITIVE_X + re, it.__webglTexture, ve);
      } else if (Je) {
        const it = re;
        for (let Mt = 0; Mt < F.textures.length; Mt++) {
          const wt = Ge.get(F.textures[Mt]);
          ee.framebufferTextureLayer(ee.FRAMEBUFFER, ee.COLOR_ATTACHMENT0 + Mt, wt.__webglTexture, ve, it);
        }
      } else if (F !== null && ve !== 0) {
        const it = Ge.get(F.texture);
        ee.framebufferTexture2D(ee.FRAMEBUFFER, ee.COLOR_ATTACHMENT0, ee.TEXTURE_2D, it.__webglTexture, ve);
      }
      B = -1;
    }, this.readRenderTargetPixels = function(F, re, ve, xe, ce, Ye, Je, ft = 0) {
      if (!(F && F.isWebGLRenderTarget)) {
        console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
        return;
      }
      let it = Ge.get(F).__webglFramebuffer;
      if (F.isWebGLCubeRenderTarget && Je !== void 0 && (it = it[Je]), it) {
        Ce.bindFramebuffer(ee.FRAMEBUFFER, it);
        try {
          const Mt = F.textures[ft], wt = Mt.format, _t = Mt.type;
          if (!Xe.textureFormatReadable(wt)) {
            console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");
            return;
          }
          if (!Xe.textureTypeReadable(_t)) {
            console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
            return;
          }
          re >= 0 && re <= F.width - xe && ve >= 0 && ve <= F.height - ce && (F.textures.length > 1 && ee.readBuffer(ee.COLOR_ATTACHMENT0 + ft), ee.readPixels(re, ve, xe, ce, mt.convert(wt), mt.convert(_t), Ye));
        } finally {
          const Mt = k !== null ? Ge.get(k).__webglFramebuffer : null;
          Ce.bindFramebuffer(ee.FRAMEBUFFER, Mt);
        }
      }
    }, this.readRenderTargetPixelsAsync = async function(F, re, ve, xe, ce, Ye, Je, ft = 0) {
      if (!(F && F.isWebGLRenderTarget))
        throw new Error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
      let it = Ge.get(F).__webglFramebuffer;
      if (F.isWebGLCubeRenderTarget && Je !== void 0 && (it = it[Je]), it)
        if (re >= 0 && re <= F.width - xe && ve >= 0 && ve <= F.height - ce) {
          Ce.bindFramebuffer(ee.FRAMEBUFFER, it);
          const Mt = F.textures[ft], wt = Mt.format, _t = Mt.type;
          if (!Xe.textureFormatReadable(wt))
            throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in RGBA or implementation defined format.");
          if (!Xe.textureTypeReadable(_t))
            throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in UnsignedByteType or implementation defined type.");
          const Zt = ee.createBuffer();
          ee.bindBuffer(ee.PIXEL_PACK_BUFFER, Zt), ee.bufferData(ee.PIXEL_PACK_BUFFER, Ye.byteLength, ee.STREAM_READ), F.textures.length > 1 && ee.readBuffer(ee.COLOR_ATTACHMENT0 + ft), ee.readPixels(re, ve, xe, ce, mt.convert(wt), mt.convert(_t), 0);
          const hn = k !== null ? Ge.get(k).__webglFramebuffer : null;
          Ce.bindFramebuffer(ee.FRAMEBUFFER, hn);
          const Yn = ee.fenceSync(ee.SYNC_GPU_COMMANDS_COMPLETE, 0);
          return ee.flush(), await fC(ee, Yn, 4), ee.bindBuffer(ee.PIXEL_PACK_BUFFER, Zt), ee.getBufferSubData(ee.PIXEL_PACK_BUFFER, 0, Ye), ee.deleteBuffer(Zt), ee.deleteSync(Yn), Ye;
        } else
          throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: requested read bounds are out of range.");
    }, this.copyFramebufferToTexture = function(F, re = null, ve = 0) {
      const xe = Math.pow(2, -ve), ce = Math.floor(F.image.width * xe), Ye = Math.floor(F.image.height * xe), Je = re !== null ? re.x : 0, ft = re !== null ? re.y : 0;
      Ze.setTexture2D(F, 0), ee.copyTexSubImage2D(ee.TEXTURE_2D, ve, 0, 0, Je, ft, ce, Ye), Ce.unbindTexture();
    };
    const Ml = ee.createFramebuffer(), bl = ee.createFramebuffer();
    this.copyTextureToTexture = function(F, re, ve = null, xe = null, ce = 0, Ye = null) {
      Ye === null && (ce !== 0 ? (Ph("WebGLRenderer: copyTextureToTexture function signature has changed to support src and dst mipmap levels."), Ye = ce, ce = 0) : Ye = 0);
      let Je, ft, it, Mt, wt, _t, Zt, hn, Yn;
      const Cn = F.isCompressedTexture ? F.mipmaps[Ye] : F.image;
      if (ve !== null)
        Je = ve.max.x - ve.min.x, ft = ve.max.y - ve.min.y, it = ve.isBox3 ? ve.max.z - ve.min.z : 1, Mt = ve.min.x, wt = ve.min.y, _t = ve.isBox3 ? ve.min.z : 0;
      else {
        const Ii = Math.pow(2, -ce);
        Je = Math.floor(Cn.width * Ii), ft = Math.floor(Cn.height * Ii), F.isDataArrayTexture ? it = Cn.depth : F.isData3DTexture ? it = Math.floor(Cn.depth * Ii) : it = 1, Mt = 0, wt = 0, _t = 0;
      }
      xe !== null ? (Zt = xe.x, hn = xe.y, Yn = xe.z) : (Zt = 0, hn = 0, Yn = 0);
      const Yt = mt.convert(re.format), bt = mt.convert(re.type);
      let kn;
      re.isData3DTexture ? (Ze.setTexture3D(re, 0), kn = ee.TEXTURE_3D) : re.isDataArrayTexture || re.isCompressedArrayTexture ? (Ze.setTexture2DArray(re, 0), kn = ee.TEXTURE_2D_ARRAY) : (Ze.setTexture2D(re, 0), kn = ee.TEXTURE_2D), ee.pixelStorei(ee.UNPACK_FLIP_Y_WEBGL, re.flipY), ee.pixelStorei(ee.UNPACK_PREMULTIPLY_ALPHA_WEBGL, re.premultiplyAlpha), ee.pixelStorei(ee.UNPACK_ALIGNMENT, re.unpackAlignment);
      const nn = ee.getParameter(ee.UNPACK_ROW_LENGTH), Bi = ee.getParameter(ee.UNPACK_IMAGE_HEIGHT), ss = ee.getParameter(ee.UNPACK_SKIP_PIXELS), Pi = ee.getParameter(ee.UNPACK_SKIP_ROWS), xi = ee.getParameter(ee.UNPACK_SKIP_IMAGES);
      ee.pixelStorei(ee.UNPACK_ROW_LENGTH, Cn.width), ee.pixelStorei(ee.UNPACK_IMAGE_HEIGHT, Cn.height), ee.pixelStorei(ee.UNPACK_SKIP_PIXELS, Mt), ee.pixelStorei(ee.UNPACK_SKIP_ROWS, wt), ee.pixelStorei(ee.UNPACK_SKIP_IMAGES, _t);
      const Dn = F.isDataArrayTexture || F.isData3DTexture, Ji = re.isDataArrayTexture || re.isData3DTexture;
      if (F.isDepthTexture) {
        const Ii = Ge.get(F), Kn = Ge.get(re), Hi = Ge.get(Ii.__renderTarget), Go = Ge.get(Kn.__renderTarget);
        Ce.bindFramebuffer(ee.READ_FRAMEBUFFER, Hi.__webglFramebuffer), Ce.bindFramebuffer(ee.DRAW_FRAMEBUFFER, Go.__webglFramebuffer);
        for (let Mi = 0; Mi < it; Mi++)
          Dn && (ee.framebufferTextureLayer(ee.READ_FRAMEBUFFER, ee.COLOR_ATTACHMENT0, Ge.get(F).__webglTexture, ce, _t + Mi), ee.framebufferTextureLayer(ee.DRAW_FRAMEBUFFER, ee.COLOR_ATTACHMENT0, Ge.get(re).__webglTexture, Ye, Yn + Mi)), ee.blitFramebuffer(Mt, wt, Je, ft, Zt, hn, Je, ft, ee.DEPTH_BUFFER_BIT, ee.NEAREST);
        Ce.bindFramebuffer(ee.READ_FRAMEBUFFER, null), Ce.bindFramebuffer(ee.DRAW_FRAMEBUFFER, null);
      } else if (ce !== 0 || F.isRenderTargetTexture || Ge.has(F)) {
        const Ii = Ge.get(F), Kn = Ge.get(re);
        Ce.bindFramebuffer(ee.READ_FRAMEBUFFER, Ml), Ce.bindFramebuffer(ee.DRAW_FRAMEBUFFER, bl);
        for (let Hi = 0; Hi < it; Hi++)
          Dn ? ee.framebufferTextureLayer(ee.READ_FRAMEBUFFER, ee.COLOR_ATTACHMENT0, Ii.__webglTexture, ce, _t + Hi) : ee.framebufferTexture2D(ee.READ_FRAMEBUFFER, ee.COLOR_ATTACHMENT0, ee.TEXTURE_2D, Ii.__webglTexture, ce), Ji ? ee.framebufferTextureLayer(ee.DRAW_FRAMEBUFFER, ee.COLOR_ATTACHMENT0, Kn.__webglTexture, Ye, Yn + Hi) : ee.framebufferTexture2D(ee.DRAW_FRAMEBUFFER, ee.COLOR_ATTACHMENT0, ee.TEXTURE_2D, Kn.__webglTexture, Ye), ce !== 0 ? ee.blitFramebuffer(Mt, wt, Je, ft, Zt, hn, Je, ft, ee.COLOR_BUFFER_BIT, ee.NEAREST) : Ji ? ee.copyTexSubImage3D(kn, Ye, Zt, hn, Yn + Hi, Mt, wt, Je, ft) : ee.copyTexSubImage2D(kn, Ye, Zt, hn, Mt, wt, Je, ft);
        Ce.bindFramebuffer(ee.READ_FRAMEBUFFER, null), Ce.bindFramebuffer(ee.DRAW_FRAMEBUFFER, null);
      } else
        Ji ? F.isDataTexture || F.isData3DTexture ? ee.texSubImage3D(kn, Ye, Zt, hn, Yn, Je, ft, it, Yt, bt, Cn.data) : re.isCompressedArrayTexture ? ee.compressedTexSubImage3D(kn, Ye, Zt, hn, Yn, Je, ft, it, Yt, Cn.data) : ee.texSubImage3D(kn, Ye, Zt, hn, Yn, Je, ft, it, Yt, bt, Cn) : F.isDataTexture ? ee.texSubImage2D(ee.TEXTURE_2D, Ye, Zt, hn, Je, ft, Yt, bt, Cn.data) : F.isCompressedTexture ? ee.compressedTexSubImage2D(ee.TEXTURE_2D, Ye, Zt, hn, Cn.width, Cn.height, Yt, Cn.data) : ee.texSubImage2D(ee.TEXTURE_2D, Ye, Zt, hn, Je, ft, Yt, bt, Cn);
      ee.pixelStorei(ee.UNPACK_ROW_LENGTH, nn), ee.pixelStorei(ee.UNPACK_IMAGE_HEIGHT, Bi), ee.pixelStorei(ee.UNPACK_SKIP_PIXELS, ss), ee.pixelStorei(ee.UNPACK_SKIP_ROWS, Pi), ee.pixelStorei(ee.UNPACK_SKIP_IMAGES, xi), Ye === 0 && re.generateMipmaps && ee.generateMipmap(kn), Ce.unbindTexture();
    }, this.copyTextureToTexture3D = function(F, re, ve = null, xe = null, ce = 0) {
      return Ph('WebGLRenderer: copyTextureToTexture3D function has been deprecated. Use "copyTextureToTexture" instead.'), this.copyTextureToTexture(F, re, ve, xe, ce);
    }, this.initRenderTarget = function(F) {
      Ge.get(F).__webglFramebuffer === void 0 && Ze.setupRenderTarget(F);
    }, this.initTexture = function(F) {
      F.isCubeTexture ? Ze.setTextureCube(F, 0) : F.isData3DTexture ? Ze.setTexture3D(F, 0) : F.isDataArrayTexture || F.isCompressedArrayTexture ? Ze.setTexture2DArray(F, 0) : Ze.setTexture2D(F, 0), Ce.unbindTexture();
    }, this.resetState = function() {
      V = 0, Y = 0, k = null, Ce.reset(), nt.reset();
    }, typeof __THREE_DEVTOOLS__ < "u" && __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
  }
  /**
   * Defines the coordinate system of the renderer.
   *
   * In `WebGLRenderer`, the value is always `WebGLCoordinateSystem`.
   *
   * @type {WebGLCoordinateSystem|WebGPUCoordinateSystem}
   * @default WebGLCoordinateSystem
   * @readonly
   */
  get coordinateSystem() {
    return Gs;
  }
  /**
   * Defines the output color space of the renderer.
   *
   * @type {SRGBColorSpace|LinearSRGBColorSpace}
   * @default SRGBColorSpace
   */
  get outputColorSpace() {
    return this._outputColorSpace;
  }
  set outputColorSpace(e) {
    this._outputColorSpace = e;
    const n = this.getContext();
    n.drawingBufferColorSpace = vn._getDrawingBufferColorSpace(e), n.unpackColorSpace = vn._getUnpackColorSpace();
  }
}
const C4 = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  ACESFilmicToneMapping: GS,
  AddEquation: Ec,
  AddOperation: tE,
  AdditiveAnimationBlendMode: QS,
  AdditiveBlending: gS,
  AgXToneMapping: rE,
  AlphaFormat: kS,
  AlwaysCompare: SE,
  AlwaysDepth: Kg,
  AlwaysStencilFunc: xS,
  AmbientLight: dT,
  AnimationAction: MT,
  AnimationClip: sm,
  AnimationLoader: I3,
  AnimationMixer: dw,
  AnimationObjectGroup: fw,
  AnimationUtils: L3,
  ArcCurve: HE,
  ArrayCamera: _T,
  ArrowHelper: Hw,
  AttachedBindMode: SS,
  Audio: ST,
  AudioAnalyser: tw,
  AudioContext: Sx,
  AudioListener: J3,
  AudioLoader: j3,
  AxesHelper: Vw,
  BackSide: ji,
  BasicDepthPacking: wc,
  BasicShadowMap: zb,
  BatchedMesh: LE,
  Bone: ix,
  BooleanKeyframeTrack: sf,
  Box2: bw,
  Box3: wa,
  Box3Helper: Pw,
  BoxGeometry: af,
  BoxHelper: Bw,
  BufferAttribute: Nn,
  BufferGeometry: Kt,
  BufferGeometryLoader: yT,
  ByteType: XS,
  Cache: zo,
  Camera: fm,
  CameraHelper: zw,
  CanvasTexture: i3,
  CapsuleGeometry: ny,
  CatmullRomCurve3: VE,
  CineonToneMapping: aE,
  CircleGeometry: iy,
  ClampToEdgeWrapping: hr,
  Clock: xx,
  Color: lt,
  ColorKeyframeTrack: gx,
  ColorManagement: vn,
  CompressedArrayTexture: t3,
  CompressedCubeTexture: n3,
  CompressedTexture: ey,
  CompressedTextureLoader: H3,
  ConeGeometry: pm,
  ConstantAlphaFactor: Jb,
  ConstantColorFactor: Qb,
  Controls: Fw,
  CubeCamera: RE,
  CubeReflectionMapping: Sl,
  CubeRefractionMapping: Rc,
  CubeTexture: hm,
  CubeTextureLoader: V3,
  CubeUVReflectionMapping: Qh,
  CubicBezierCurve: rx,
  CubicBezierCurve3: GE,
  CubicInterpolant: sT,
  CullFaceBack: vS,
  CullFaceFront: Lb,
  CullFaceFrontBack: uR,
  CullFaceNone: Ob,
  Curve: Zr,
  CurvePath: XE,
  CustomBlending: Bb,
  CustomToneMapping: sE,
  CylinderGeometry: dm,
  Cylindrical: Mw,
  Data3DTexture: Z0,
  DataArrayTexture: W0,
  DataTexture: Bo,
  DataTextureLoader: G3,
  DataUtils: AC,
  DecrementStencilOp: ER,
  DecrementWrapStencilOp: AR,
  DefaultLoadingManager: lT,
  DepthFormat: Gh,
  DepthStencilFormat: Ju,
  DepthTexture: ty,
  DetachedBindMode: lE,
  DirectionalLight: hT,
  DirectionalLightHelper: Lw,
  DiscreteInterpolant: rT,
  DodecahedronGeometry: ay,
  DoubleSide: Ms,
  DstAlphaFactor: Yb,
  DstColorFactor: Wb,
  DynamicCopyUsage: GR,
  DynamicDrawUsage: zR,
  DynamicReadUsage: IR,
  EdgesGeometry: IE,
  EllipseCurve: sy,
  EqualCompare: vE,
  EqualDepth: $g,
  EqualStencilFunc: DR,
  EquirectangularReflectionMapping: qp,
  EquirectangularRefractionMapping: Yp,
  Euler: Xs,
  EventDispatcher: qs,
  ExtrudeGeometry: ry,
  FileLoader: xl,
  Float16BufferAttribute: OC,
  Float32BufferAttribute: yt,
  FloatType: es,
  Fog: Q0,
  FogExp2: j0,
  FramebufferTexture: e3,
  FrontSide: Po,
  Frustum: Jh,
  FrustumArray: $0,
  GLBufferAttribute: yw,
  GLSL1: XR,
  GLSL3: MS,
  GreaterCompare: gE,
  GreaterDepth: t0,
  GreaterEqualCompare: _E,
  GreaterEqualDepth: e0,
  GreaterEqualStencilFunc: LR,
  GreaterStencilFunc: NR,
  GridHelper: Nw,
  Group: zh,
  HalfFloatType: nf,
  HemisphereLight: cT,
  HemisphereLightHelper: Uw,
  IcosahedronGeometry: oy,
  ImageBitmapLoader: Z3,
  ImageLoader: rm,
  ImageUtils: bE,
  IncrementStencilOp: bR,
  IncrementWrapStencilOp: TR,
  InstancedBufferAttribute: kh,
  InstancedBufferGeometry: gT,
  InstancedInterleavedBuffer: gw,
  InstancedMesh: OE,
  Int16BufferAttribute: UC,
  Int32BufferAttribute: NC,
  Int8BufferAttribute: CC,
  IntType: V0,
  InterleavedBuffer: K0,
  InterleavedBufferAttribute: $u,
  Interpolant: gm,
  InterpolateDiscrete: Zp,
  InterpolateLinear: w0,
  InterpolateSmooth: qg,
  InterpolationSamplingMode: kR,
  InterpolationSamplingType: YR,
  InvertStencilOp: RR,
  KeepStencilOp: Vu,
  KeyframeTrack: pr,
  LOD: UE,
  LatheGeometry: ly,
  Layers: qh,
  LessCompare: mE,
  LessDepth: Jg,
  LessEqualCompare: KS,
  LessEqualDepth: Qu,
  LessEqualStencilFunc: UR,
  LessStencilFunc: wR,
  Light: Oc,
  LightProbe: vT,
  Line: Cc,
  Line3: Aw,
  LineBasicMaterial: ns,
  LineCurve: ox,
  LineCurve3: FE,
  LineDashedMaterial: nT,
  LineLoop: zE,
  LineSegments: Vo,
  LinearFilter: di,
  LinearInterpolant: vx,
  LinearMipMapLinearFilter: pR,
  LinearMipMapNearestFilter: dR,
  LinearMipmapLinearFilter: Lo,
  LinearMipmapNearestFilter: Op,
  LinearSRGBColorSpace: Ho,
  LinearToneMapping: nE,
  LinearTransfer: Qp,
  Loader: Ts,
  LoaderUtils: RS,
  LoadingManager: yx,
  LoopOnce: cE,
  LoopPingPong: fE,
  LoopRepeat: uE,
  MOUSE: lR,
  Material: sa,
  MaterialLoader: my,
  MathUtils: cC,
  Matrix2: Ex,
  Matrix3: Qt,
  Matrix4: Ft,
  MaxEquation: Vb,
  Mesh: Ci,
  MeshBasicMaterial: Uc,
  MeshDepthMaterial: dx,
  MeshDistanceMaterial: px,
  MeshLambertMaterial: eT,
  MeshMatcapMaterial: tT,
  MeshNormalMaterial: hx,
  MeshPhongMaterial: JE,
  MeshPhysicalMaterial: KE,
  MeshStandardMaterial: fx,
  MeshToonMaterial: $E,
  MinEquation: Hb,
  MirroredRepeatWrapping: Wp,
  MixOperation: eE,
  MultiplyBlending: _S,
  MultiplyOperation: cm,
  NearestFilter: wi,
  NearestMipMapLinearFilter: hR,
  NearestMipMapNearestFilter: fR,
  NearestMipmapLinearFilter: Oh,
  NearestMipmapNearestFilter: FS,
  NeutralToneMapping: oE,
  NeverCompare: pE,
  NeverDepth: Qg,
  NeverStencilFunc: CR,
  NoBlending: dr,
  NoColorSpace: Yr,
  NoToneMapping: Wr,
  NormalAnimationBlendMode: k0,
  NormalBlending: ku,
  NotEqualCompare: yE,
  NotEqualDepth: n0,
  NotEqualStencilFunc: OR,
  NumberKeyframeTrack: im,
  Object3D: Mn,
  ObjectLoader: k3,
  ObjectSpaceNormalMap: dE,
  OctahedronGeometry: mm,
  OneFactor: Fb,
  OneMinusConstantAlphaFactor: $b,
  OneMinusConstantColorFactor: Kb,
  OneMinusDstAlphaFactor: kb,
  OneMinusDstColorFactor: Zb,
  OneMinusSrcAlphaFactor: jg,
  OneMinusSrcColorFactor: qb,
  OrthographicCamera: _m,
  PCFShadowMap: I0,
  PCFSoftShadowMap: Np,
  PMREMGenerator: DS,
  Path: O0,
  PerspectiveCamera: Zi,
  Plane: bc,
  PlaneGeometry: $h,
  PlaneHelper: Iw,
  PointLight: fT,
  PointLightHelper: ww,
  Points: BE,
  PointsMaterial: ax,
  PolarGridHelper: Ow,
  PolyhedronGeometry: Nc,
  PositionalAudio: ew,
  PropertyBinding: Sn,
  PropertyMixer: xT,
  QuadraticBezierCurve: lx,
  QuadraticBezierCurve3: cx,
  Quaternion: Es,
  QuaternionKeyframeTrack: ym,
  QuaternionLinearInterpolant: oT,
  RED_GREEN_RGTC2_Format: R0,
  RED_RGTC1_Format: jS,
  REVISION: lm,
  RGBADepthPacking: hE,
  RGBAFormat: Ca,
  RGBAIntegerFormat: Y0,
  RGBA_ASTC_10x10_Format: x0,
  RGBA_ASTC_10x5_Format: y0,
  RGBA_ASTC_10x6_Format: _0,
  RGBA_ASTC_10x8_Format: S0,
  RGBA_ASTC_12x10_Format: M0,
  RGBA_ASTC_12x12_Format: b0,
  RGBA_ASTC_4x4_Format: u0,
  RGBA_ASTC_5x4_Format: f0,
  RGBA_ASTC_5x5_Format: h0,
  RGBA_ASTC_6x5_Format: d0,
  RGBA_ASTC_6x6_Format: p0,
  RGBA_ASTC_8x5_Format: m0,
  RGBA_ASTC_8x6_Format: v0,
  RGBA_ASTC_8x8_Format: g0,
  RGBA_BPTC_Format: Ip,
  RGBA_ETC2_EAC_Format: c0,
  RGBA_PVRTC_2BPPV1_Format: r0,
  RGBA_PVRTC_4BPPV1_Format: s0,
  RGBA_S3TC_DXT1_Format: zp,
  RGBA_S3TC_DXT3_Format: Bp,
  RGBA_S3TC_DXT5_Format: Pp,
  RGBDepthPacking: _R,
  RGBFormat: WS,
  RGBIntegerFormat: mR,
  RGB_BPTC_SIGNED_Format: E0,
  RGB_BPTC_UNSIGNED_Format: T0,
  RGB_ETC1_Format: o0,
  RGB_ETC2_Format: l0,
  RGB_PVRTC_2BPPV1_Format: a0,
  RGB_PVRTC_4BPPV1_Format: i0,
  RGB_S3TC_DXT1_Format: Lp,
  RGDepthPacking: SR,
  RGFormat: ZS,
  RGIntegerFormat: q0,
  RawShaderMaterial: QE,
  Ray: Kh,
  Raycaster: bT,
  RectAreaLight: pT,
  RedFormat: X0,
  RedIntegerFormat: um,
  ReinhardToneMapping: iE,
  RenderTarget: $S,
  RenderTarget3D: pw,
  RepeatWrapping: kp,
  ReplaceStencilOp: MR,
  ReverseSubtractEquation: Ib,
  RingGeometry: cy,
  SIGNED_RED_GREEN_RGTC2_Format: C0,
  SIGNED_RED_RGTC1_Format: A0,
  SRGBColorSpace: ei,
  SRGBTransfer: Pn,
  Scene: $p,
  ShaderChunk: tn,
  ShaderLib: qr,
  ShaderMaterial: ts,
  ShadowMaterial: jE,
  Shape: Zu,
  ShapeGeometry: uy,
  ShapePath: Gw,
  ShapeUtils: kr,
  ShortType: qS,
  Skeleton: J0,
  SkeletonHelper: Cw,
  SkinnedMesh: NE,
  Source: Ac,
  Sphere: ma,
  SphereGeometry: vm,
  Spherical: xw,
  SphericalHarmonics3: mT,
  SplineCurve: ux,
  SpotLight: uT,
  SpotLightHelper: Rw,
  Sprite: DE,
  SpriteMaterial: nx,
  SrcAlphaFactor: Zg,
  SrcAlphaSaturateFactor: jb,
  SrcColorFactor: Xb,
  StaticCopyUsage: VR,
  StaticDrawUsage: Kp,
  StaticReadUsage: PR,
  StereoCamera: Q3,
  StreamCopyUsage: FR,
  StreamDrawUsage: BR,
  StreamReadUsage: HR,
  StringKeyframeTrack: rf,
  SubtractEquation: Pb,
  SubtractiveBlending: yS,
  TOUCH: cR,
  TangentSpaceNormalMap: Dc,
  TetrahedronGeometry: fy,
  Texture: si,
  TextureLoader: F3,
  TextureUtils: Ww,
  Timer: _w,
  TimestampQuery: qR,
  TorusGeometry: hy,
  TorusKnotGeometry: dy,
  Triangle: bs,
  TriangleFanDrawMode: yR,
  TriangleStripDrawMode: gR,
  TrianglesDrawMode: vR,
  TubeGeometry: py,
  UVMapping: H0,
  Uint16BufferAttribute: ex,
  Uint32BufferAttribute: tx,
  Uint8BufferAttribute: wC,
  Uint8ClampedBufferAttribute: DC,
  Uniform: qn,
  UniformsGroup: vw,
  UniformsLib: rt,
  UniformsUtils: AE,
  UnsignedByteType: Da,
  UnsignedInt248Type: Ku,
  UnsignedInt5999Type: YS,
  UnsignedIntType: Io,
  UnsignedShort4444Type: G0,
  UnsignedShort5551Type: F0,
  UnsignedShortType: Vh,
  VSMShadowMap: Xr,
  Vector2: De,
  Vector3: j,
  Vector4: xn,
  VectorKeyframeTrack: am,
  VideoFrameTexture: $C,
  VideoTexture: PE,
  WebGL3DRenderTarget: vC,
  WebGLArrayRenderTarget: mC,
  WebGLCoordinateSystem: Gs,
  WebGLCubeRenderTarget: CE,
  WebGLRenderTarget: Ua,
  WebGLRenderer: NT,
  WebGLUtils: DT,
  WebGPUCoordinateSystem: Fh,
  WebXRController: Yg,
  WireframeGeometry: ZE,
  WrapAroundEnding: jp,
  ZeroCurvatureEnding: Xu,
  ZeroFactor: Gb,
  ZeroSlopeEnding: qu,
  ZeroStencilOp: xR,
  createCanvasElement: ME
}, Symbol.toStringTag, { value: "Module" }));
var K_ = { exports: {} }, J_ = {}, $_ = { exports: {} }, eS = {};
/**
 * @license React
 * use-sync-external-store-shim.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var tb;
function w4() {
  if (tb) return eS;
  tb = 1;
  var s = jh();
  function e(x, M) {
    return x === M && (x !== 0 || 1 / x === 1 / M) || x !== x && M !== M;
  }
  var n = typeof Object.is == "function" ? Object.is : e, i = s.useState, r = s.useEffect, c = s.useLayoutEffect, h = s.useDebugValue;
  function d(x, M) {
    var b = M(), R = i({ inst: { value: b, getSnapshot: M } }), w = R[0].inst, C = R[1];
    return c(
      function() {
        w.value = b, w.getSnapshot = M, v(w) && C({ inst: w });
      },
      [x, b, M]
    ), r(
      function() {
        return v(w) && C({ inst: w }), x(function() {
          v(w) && C({ inst: w });
        });
      },
      [x]
    ), h(b), b;
  }
  function v(x) {
    var M = x.getSnapshot;
    x = x.value;
    try {
      var b = M();
      return !n(x, b);
    } catch {
      return !0;
    }
  }
  function g(x, M) {
    return M();
  }
  var S = typeof window > "u" || typeof window.document > "u" || typeof window.document.createElement > "u" ? g : d;
  return eS.useSyncExternalStore = s.useSyncExternalStore !== void 0 ? s.useSyncExternalStore : S, eS;
}
var nb;
function D4() {
  return nb || (nb = 1, $_.exports = w4()), $_.exports;
}
/**
 * @license React
 * use-sync-external-store-shim/with-selector.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var ib;
function U4() {
  if (ib) return J_;
  ib = 1;
  var s = jh(), e = D4();
  function n(g, S) {
    return g === S && (g !== 0 || 1 / g === 1 / S) || g !== g && S !== S;
  }
  var i = typeof Object.is == "function" ? Object.is : n, r = e.useSyncExternalStore, c = s.useRef, h = s.useEffect, d = s.useMemo, v = s.useDebugValue;
  return J_.useSyncExternalStoreWithSelector = function(g, S, x, M, b) {
    var R = c(null);
    if (R.current === null) {
      var w = { hasValue: !1, value: null };
      R.current = w;
    } else w = R.current;
    R = d(
      function() {
        function E(V) {
          if (!U) {
            if (U = !0, N = V, V = M(V), b !== void 0 && w.hasValue) {
              var Y = w.value;
              if (b(Y, V))
                return O = Y;
            }
            return O = V;
          }
          if (Y = O, i(N, V)) return Y;
          var k = M(V);
          return b !== void 0 && b(Y, k) ? (N = V, Y) : (N = V, O = k);
        }
        var U = !1, N, O, I = x === void 0 ? null : x;
        return [
          function() {
            return E(S());
          },
          I === null ? void 0 : function() {
            return E(I());
          }
        ];
      },
      [S, x, M, b]
    );
    var C = r(g, R[0], R[1]);
    return h(
      function() {
        w.hasValue = !0, w.value = C;
      },
      [C]
    ), v(C), C;
  }, J_;
}
var ab;
function N4() {
  return ab || (ab = 1, K_.exports = U4()), K_.exports;
}
var O4 = N4();
const L4 = /* @__PURE__ */ VS(O4), sb = (s) => {
  let e;
  const n = /* @__PURE__ */ new Set(), i = (g, S) => {
    const x = typeof g == "function" ? g(e) : g;
    if (!Object.is(x, e)) {
      const M = e;
      e = S ?? (typeof x != "object" || x === null) ? x : Object.assign({}, e, x), n.forEach((b) => b(e, M));
    }
  }, r = () => e, d = { setState: i, getState: r, getInitialState: () => v, subscribe: (g) => (n.add(g), () => n.delete(g)) }, v = e = s(i, r, d);
  return d;
}, z4 = (s) => s ? sb(s) : sb, { useSyncExternalStoreWithSelector: B4 } = L4, P4 = (s) => s;
function I4(s, e = P4, n) {
  const i = B4(
    s.subscribe,
    s.getState,
    s.getInitialState,
    e,
    n
  );
  return Nb.useDebugValue(i), i;
}
const rb = (s, e) => {
  const n = z4(s), i = (r, c = e) => I4(n, r, c);
  return Object.assign(i, n), i;
}, H4 = (s, e) => s ? rb(s, e) : rb;
var tS = { exports: {} }, nS = { exports: {} }, iS = { exports: {} }, aS = {};
/**
 * @license React
 * scheduler.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var ob;
function V4() {
  return ob || (ob = 1, function(s) {
    function e(P, K) {
      var Q = P.length;
      P.push(K);
      e: for (; 0 < Q; ) {
        var fe = Q - 1 >>> 1, q = P[fe];
        if (0 < r(q, K))
          P[fe] = K, P[Q] = q, Q = fe;
        else break e;
      }
    }
    function n(P) {
      return P.length === 0 ? null : P[0];
    }
    function i(P) {
      if (P.length === 0) return null;
      var K = P[0], Q = P.pop();
      if (Q !== K) {
        P[0] = Q;
        e: for (var fe = 0, q = P.length, te = q >>> 1; fe < te; ) {
          var Me = 2 * (fe + 1) - 1, Re = P[Me], Ne = Me + 1, he = P[Ne];
          if (0 > r(Re, Q))
            Ne < q && 0 > r(he, Re) ? (P[fe] = he, P[Ne] = Q, fe = Ne) : (P[fe] = Re, P[Me] = Q, fe = Me);
          else if (Ne < q && 0 > r(he, Q))
            P[fe] = he, P[Ne] = Q, fe = Ne;
          else break e;
        }
      }
      return K;
    }
    function r(P, K) {
      var Q = P.sortIndex - K.sortIndex;
      return Q !== 0 ? Q : P.id - K.id;
    }
    if (s.unstable_now = void 0, typeof performance == "object" && typeof performance.now == "function") {
      var c = performance;
      s.unstable_now = function() {
        return c.now();
      };
    } else {
      var h = Date, d = h.now();
      s.unstable_now = function() {
        return h.now() - d;
      };
    }
    var v = [], g = [], S = 1, x = null, M = 3, b = !1, R = !1, w = !1, C = typeof setTimeout == "function" ? setTimeout : null, E = typeof clearTimeout == "function" ? clearTimeout : null, U = typeof setImmediate < "u" ? setImmediate : null;
    function N(P) {
      for (var K = n(g); K !== null; ) {
        if (K.callback === null) i(g);
        else if (K.startTime <= P)
          i(g), K.sortIndex = K.expirationTime, e(v, K);
        else break;
        K = n(g);
      }
    }
    function O(P) {
      if (w = !1, N(P), !R)
        if (n(v) !== null)
          R = !0, oe();
        else {
          var K = n(g);
          K !== null && pe(O, K.startTime - P);
        }
    }
    var I = !1, V = -1, Y = 5, k = -1;
    function B() {
      return !(s.unstable_now() - k < Y);
    }
    function z() {
      if (I) {
        var P = s.unstable_now();
        k = P;
        var K = !0;
        try {
          e: {
            R = !1, w && (w = !1, E(V), V = -1), b = !0;
            var Q = M;
            try {
              t: {
                for (N(P), x = n(v); x !== null && !(x.expirationTime > P && B()); ) {
                  var fe = x.callback;
                  if (typeof fe == "function") {
                    x.callback = null, M = x.priorityLevel;
                    var q = fe(
                      x.expirationTime <= P
                    );
                    if (P = s.unstable_now(), typeof q == "function") {
                      x.callback = q, N(P), K = !0;
                      break t;
                    }
                    x === n(v) && i(v), N(P);
                  } else i(v);
                  x = n(v);
                }
                if (x !== null) K = !0;
                else {
                  var te = n(g);
                  te !== null && pe(
                    O,
                    te.startTime - P
                  ), K = !1;
                }
              }
              break e;
            } finally {
              x = null, M = Q, b = !1;
            }
            K = void 0;
          }
        } finally {
          K ? W() : I = !1;
        }
      }
    }
    var W;
    if (typeof U == "function")
      W = function() {
        U(z);
      };
    else if (typeof MessageChannel < "u") {
      var le = new MessageChannel(), ae = le.port2;
      le.port1.onmessage = z, W = function() {
        ae.postMessage(null);
      };
    } else
      W = function() {
        C(z, 0);
      };
    function oe() {
      I || (I = !0, W());
    }
    function pe(P, K) {
      V = C(function() {
        P(s.unstable_now());
      }, K);
    }
    s.unstable_IdlePriority = 5, s.unstable_ImmediatePriority = 1, s.unstable_LowPriority = 4, s.unstable_NormalPriority = 3, s.unstable_Profiling = null, s.unstable_UserBlockingPriority = 2, s.unstable_cancelCallback = function(P) {
      P.callback = null;
    }, s.unstable_continueExecution = function() {
      R || b || (R = !0, oe());
    }, s.unstable_forceFrameRate = function(P) {
      0 > P || 125 < P ? console.error(
        "forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"
      ) : Y = 0 < P ? Math.floor(1e3 / P) : 5;
    }, s.unstable_getCurrentPriorityLevel = function() {
      return M;
    }, s.unstable_getFirstCallbackNode = function() {
      return n(v);
    }, s.unstable_next = function(P) {
      switch (M) {
        case 1:
        case 2:
        case 3:
          var K = 3;
          break;
        default:
          K = M;
      }
      var Q = M;
      M = K;
      try {
        return P();
      } finally {
        M = Q;
      }
    }, s.unstable_pauseExecution = function() {
    }, s.unstable_requestPaint = function() {
    }, s.unstable_runWithPriority = function(P, K) {
      switch (P) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
          break;
        default:
          P = 3;
      }
      var Q = M;
      M = P;
      try {
        return K();
      } finally {
        M = Q;
      }
    }, s.unstable_scheduleCallback = function(P, K, Q) {
      var fe = s.unstable_now();
      switch (typeof Q == "object" && Q !== null ? (Q = Q.delay, Q = typeof Q == "number" && 0 < Q ? fe + Q : fe) : Q = fe, P) {
        case 1:
          var q = -1;
          break;
        case 2:
          q = 250;
          break;
        case 5:
          q = 1073741823;
          break;
        case 4:
          q = 1e4;
          break;
        default:
          q = 5e3;
      }
      return q = Q + q, P = {
        id: S++,
        callback: K,
        priorityLevel: P,
        startTime: Q,
        expirationTime: q,
        sortIndex: -1
      }, Q > fe ? (P.sortIndex = Q, e(g, P), n(v) === null && P === n(g) && (w ? (E(V), V = -1) : w = !0, pe(O, Q - fe))) : (P.sortIndex = q, e(v, P), R || b || (R = !0, oe())), P;
    }, s.unstable_shouldYield = B, s.unstable_wrapCallback = function(P) {
      var K = M;
      return function() {
        var Q = M;
        M = K;
        try {
          return P.apply(this, arguments);
        } finally {
          M = Q;
        }
      };
    };
  }(aS)), aS;
}
var lb;
function G4() {
  return lb || (lb = 1, iS.exports = V4()), iS.exports;
}
var cb;
function F4() {
  return cb || (cb = 1, function(s) {
    /**
     * @license React
     * react-reconciler.production.js
     *
     * Copyright (c) Meta Platforms, Inc. and affiliates.
     *
     * This source code is licensed under the MIT license found in the
     * LICENSE file in the root directory of this source tree.
     */
    s.exports = function(e) {
      function n(l, u, m, _) {
        return new Dd(l, u, m, _);
      }
      function i() {
      }
      function r(l) {
        var u = "https://react.dev/errors/" + l;
        if (1 < arguments.length) {
          u += "?args[]=" + encodeURIComponent(arguments[1]);
          for (var m = 2; m < arguments.length; m++)
            u += "&args[]=" + encodeURIComponent(arguments[m]);
        }
        return "Minified React error #" + l + "; visit " + u + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
      }
      function c(l) {
        return l === null || typeof l != "object" ? null : (l = Cr && l[Cr] || l["@@iterator"], typeof l == "function" ? l : null);
      }
      function h(l) {
        if (l == null) return null;
        if (typeof l == "function")
          return l.$$typeof === Ld ? null : l.displayName || l.name || null;
        if (typeof l == "string") return l;
        switch (l) {
          case ho:
            return "Fragment";
          case cs:
            return "Portal";
          case Df:
            return "Profiler";
          case lu:
            return "StrictMode";
          case Uf:
            return "Suspense";
          case Xl:
            return "SuspenseList";
        }
        if (typeof l == "object")
          switch (l.$$typeof) {
            case ws:
              return (l.displayName || "Context") + ".Provider";
            case Nd:
              return (l._context.displayName || "Context") + ".Consumer";
            case uu:
              var u = l.render;
              return l = l.displayName, l || (l = u.displayName || u.name || "", l = l !== "" ? "ForwardRef(" + l + ")" : "ForwardRef"), l;
            case Nf:
              return u = l.displayName || null, u !== null ? u : h(l.type) || "Memo";
            case us:
              u = l._payload, l = l._init;
              try {
                return h(l(u));
              } catch {
              }
          }
        return null;
      }
      function d(l) {
        if (Qs === void 0)
          try {
            throw Error();
          } catch (m) {
            var u = m.stack.trim().match(/\n( *(at )?)/);
            Qs = u && u[1] || "", wr = -1 < m.stack.indexOf(`
    at`) ? " (<anonymous>)" : -1 < m.stack.indexOf("@") ? "@unknown:0:0" : "";
          }
        return `
` + Qs + l + wr;
      }
      function v(l, u) {
        if (!l || ko) return "";
        ko = !0;
        var m = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        try {
          var _ = {
            DetermineComponentFrameRoot: function() {
              try {
                if (u) {
                  var st = function() {
                    throw Error();
                  };
                  if (Object.defineProperty(st.prototype, "props", {
                    set: function() {
                      throw Error();
                    }
                  }), typeof Reflect == "object" && Reflect.construct) {
                    try {
                      Reflect.construct(st, []);
                    } catch (qt) {
                      var ot = qt;
                    }
                    Reflect.construct(l, [], st);
                  } else {
                    try {
                      st.call();
                    } catch (qt) {
                      ot = qt;
                    }
                    l.call(st.prototype);
                  }
                } else {
                  try {
                    throw Error();
                  } catch (qt) {
                    ot = qt;
                  }
                  (st = l()) && typeof st.catch == "function" && st.catch(function() {
                  });
                }
              } catch (qt) {
                if (qt && ot && typeof qt.stack == "string")
                  return [qt.stack, ot.stack];
              }
              return [null, null];
            }
          };
          _.DetermineComponentFrameRoot.displayName = "DetermineComponentFrameRoot";
          var A = Object.getOwnPropertyDescriptor(
            _.DetermineComponentFrameRoot,
            "name"
          );
          A && A.configurable && Object.defineProperty(
            _.DetermineComponentFrameRoot,
            "name",
            { value: "DetermineComponentFrameRoot" }
          );
          var D = _.DetermineComponentFrameRoot(), X = D[0], $ = D[1];
          if (X && $) {
            var de = X.split(`
`), Oe = $.split(`
`);
            for (A = _ = 0; _ < de.length && !de[_].includes("DetermineComponentFrameRoot"); )
              _++;
            for (; A < Oe.length && !Oe[A].includes(
              "DetermineComponentFrameRoot"
            ); )
              A++;
            if (_ === de.length || A === Oe.length)
              for (_ = de.length - 1, A = Oe.length - 1; 1 <= _ && 0 <= A && de[_] !== Oe[A]; )
                A--;
            for (; 1 <= _ && 0 <= A; _--, A--)
              if (de[_] !== Oe[A]) {
                if (_ !== 1 || A !== 1)
                  do
                    if (_--, A--, 0 > A || de[_] !== Oe[A]) {
                      var je = `
` + de[_].replace(" at new ", " at ");
                      return l.displayName && je.includes("<anonymous>") && (je = je.replace("<anonymous>", l.displayName)), je;
                    }
                  while (1 <= _ && 0 <= A);
                break;
              }
          }
        } finally {
          ko = !1, Error.prepareStackTrace = m;
        }
        return (m = l ? l.displayName || l.name : "") ? d(m) : "";
      }
      function g(l) {
        switch (l.tag) {
          case 26:
          case 27:
          case 5:
            return d(l.type);
          case 16:
            return d("Lazy");
          case 13:
            return d("Suspense");
          case 19:
            return d("SuspenseList");
          case 0:
          case 15:
            return l = v(l.type, !1), l;
          case 11:
            return l = v(l.type.render, !1), l;
          case 1:
            return l = v(l.type, !0), l;
          default:
            return "";
        }
      }
      function S(l) {
        try {
          var u = "";
          do
            u += g(l), l = l.return;
          while (l);
          return u;
        } catch (m) {
          return `
Error generating stack: ` + m.message + `
` + m.stack;
        }
      }
      function x(l) {
        var u = l, m = l;
        if (l.alternate) for (; u.return; ) u = u.return;
        else {
          l = u;
          do
            u = l, (u.flags & 4098) !== 0 && (m = u.return), l = u.return;
          while (l);
        }
        return u.tag === 3 ? m : null;
      }
      function M(l) {
        if (x(l) !== l)
          throw Error(r(188));
      }
      function b(l) {
        var u = l.alternate;
        if (!u) {
          if (u = x(l), u === null) throw Error(r(188));
          return u !== l ? null : l;
        }
        for (var m = l, _ = u; ; ) {
          var A = m.return;
          if (A === null) break;
          var D = A.alternate;
          if (D === null) {
            if (_ = A.return, _ !== null) {
              m = _;
              continue;
            }
            break;
          }
          if (A.child === D.child) {
            for (D = A.child; D; ) {
              if (D === m) return M(A), l;
              if (D === _) return M(A), u;
              D = D.sibling;
            }
            throw Error(r(188));
          }
          if (m.return !== _.return) m = A, _ = D;
          else {
            for (var X = !1, $ = A.child; $; ) {
              if ($ === m) {
                X = !0, m = A, _ = D;
                break;
              }
              if ($ === _) {
                X = !0, _ = A, m = D;
                break;
              }
              $ = $.sibling;
            }
            if (!X) {
              for ($ = D.child; $; ) {
                if ($ === m) {
                  X = !0, m = D, _ = A;
                  break;
                }
                if ($ === _) {
                  X = !0, _ = D, m = A;
                  break;
                }
                $ = $.sibling;
              }
              if (!X) throw Error(r(189));
            }
          }
          if (m.alternate !== _) throw Error(r(190));
        }
        if (m.tag !== 3) throw Error(r(188));
        return m.stateNode.current === m ? l : u;
      }
      function R(l) {
        var u = l.tag;
        if (u === 5 || u === 26 || u === 27 || u === 6) return l;
        for (l = l.child; l !== null; ) {
          if (u = R(l), u !== null) return u;
          l = l.sibling;
        }
        return null;
      }
      function w(l) {
        var u = l.tag;
        if (u === 5 || u === 26 || u === 27 || u === 6) return l;
        for (l = l.child; l !== null; ) {
          if (l.tag !== 4 && (u = w(l), u !== null))
            return u;
          l = l.sibling;
        }
        return null;
      }
      function C(l) {
        return { current: l };
      }
      function E(l) {
        0 > Or || (l.current = li[Or], li[Or] = null, Or--);
      }
      function U(l, u) {
        Or++, li[Or] = l.current, l.current = u;
      }
      function N(l) {
        return l >>>= 0, l === 0 ? 32 : 31 - (Av(l) / Rv | 0) | 0;
      }
      function O(l) {
        var u = l & 42;
        if (u !== 0) return u;
        switch (l & -l) {
          case 1:
            return 1;
          case 2:
            return 2;
          case 4:
            return 4;
          case 8:
            return 8;
          case 16:
            return 16;
          case 32:
            return 32;
          case 64:
            return 64;
          case 128:
          case 256:
          case 512:
          case 1024:
          case 2048:
          case 4096:
          case 8192:
          case 16384:
          case 32768:
          case 65536:
          case 131072:
          case 262144:
          case 524288:
          case 1048576:
          case 2097152:
            return l & 4194176;
          case 4194304:
          case 8388608:
          case 16777216:
          case 33554432:
            return l & 62914560;
          case 67108864:
            return 67108864;
          case 134217728:
            return 134217728;
          case 268435456:
            return 268435456;
          case 536870912:
            return 536870912;
          case 1073741824:
            return 0;
          default:
            return l;
        }
      }
      function I(l, u) {
        var m = l.pendingLanes;
        if (m === 0) return 0;
        var _ = 0, A = l.suspendedLanes, D = l.pingedLanes, X = l.warmLanes;
        l = l.finishedLanes !== 0;
        var $ = m & 134217727;
        return $ !== 0 ? (m = $ & ~A, m !== 0 ? _ = O(m) : (D &= $, D !== 0 ? _ = O(D) : l || (X = $ & ~X, X !== 0 && (_ = O(X))))) : ($ = m & ~A, $ !== 0 ? _ = O($) : D !== 0 ? _ = O(D) : l || (X = m & ~X, X !== 0 && (_ = O(X)))), _ === 0 ? 0 : u !== 0 && u !== _ && (u & A) === 0 && (A = _ & -_, X = u & -u, A >= X || A === 32 && (X & 4194176) !== 0) ? u : _;
      }
      function V(l, u) {
        return (l.pendingLanes & ~(l.suspendedLanes & ~l.pingedLanes) & u) === 0;
      }
      function Y(l, u) {
        switch (l) {
          case 1:
          case 2:
          case 4:
          case 8:
            return u + 250;
          case 16:
          case 32:
          case 64:
          case 128:
          case 256:
          case 512:
          case 1024:
          case 2048:
          case 4096:
          case 8192:
          case 16384:
          case 32768:
          case 65536:
          case 131072:
          case 262144:
          case 524288:
          case 1048576:
          case 2097152:
            return u + 5e3;
          case 4194304:
          case 8388608:
          case 16777216:
          case 33554432:
            return -1;
          case 67108864:
          case 134217728:
          case 268435456:
          case 536870912:
          case 1073741824:
            return -1;
          default:
            return -1;
        }
      }
      function k() {
        var l = Js;
        return Js <<= 1, (Js & 4194176) === 0 && (Js = 128), l;
      }
      function B() {
        var l = jo;
        return jo <<= 1, (jo & 62914560) === 0 && (jo = 4194304), l;
      }
      function z(l) {
        for (var u = [], m = 0; 31 > m; m++) u.push(l);
        return u;
      }
      function W(l, u) {
        l.pendingLanes |= u, u !== 268435456 && (l.suspendedLanes = 0, l.pingedLanes = 0, l.warmLanes = 0);
      }
      function le(l, u, m, _, A, D) {
        var X = l.pendingLanes;
        l.pendingLanes = m, l.suspendedLanes = 0, l.pingedLanes = 0, l.warmLanes = 0, l.expiredLanes &= m, l.entangledLanes &= m, l.errorRecoveryDisabledLanes &= m, l.shellSuspendCounter = 0;
        var $ = l.entanglements, de = l.expirationTimes, Oe = l.hiddenUpdates;
        for (m = X & ~m; 0 < m; ) {
          var je = 31 - fa(m), st = 1 << je;
          $[je] = 0, de[je] = -1;
          var ot = Oe[je];
          if (ot !== null)
            for (Oe[je] = null, je = 0; je < ot.length; je++) {
              var qt = ot[je];
              qt !== null && (qt.lane &= -536870913);
            }
          m &= ~st;
        }
        _ !== 0 && ae(l, _, 0), D !== 0 && A === 0 && l.tag !== 0 && (l.suspendedLanes |= D & ~(X & ~u));
      }
      function ae(l, u, m) {
        l.pendingLanes |= u, l.suspendedLanes &= ~u;
        var _ = 31 - fa(u);
        l.entangledLanes |= u, l.entanglements[_] = l.entanglements[_] | 1073741824 | m & 4194218;
      }
      function oe(l, u) {
        var m = l.entangledLanes |= u;
        for (l = l.entanglements; m; ) {
          var _ = 31 - fa(m), A = 1 << _;
          A & u | l[_] & u && (l[_] |= u), m &= ~A;
        }
      }
      function pe(l) {
        return l &= -l, 2 < l ? 8 < l ? (l & 134217727) !== 0 ? 32 : 268435456 : 8 : 2;
      }
      function P(l) {
        if (Ma && typeof Ma.onCommitFiberRoot == "function")
          try {
            Ma.onCommitFiberRoot(
              ci,
              l,
              void 0,
              (l.current.flags & 128) === 128
            );
          } catch {
          }
      }
      function K(l) {
        if (typeof Dv == "function" && Ni(l), Ma && typeof Ma.setStrictMode == "function")
          try {
            Ma.setStrictMode(ci, l);
          } catch {
          }
      }
      function Q(l, u) {
        return l === u && (l !== 0 || 1 / l === 1 / u) || l !== l && u !== u;
      }
      function fe(l, u) {
        if (typeof l == "object" && l !== null) {
          var m = $d.get(l);
          return m !== void 0 ? m : (u = {
            value: l,
            source: u,
            stack: S(u)
          }, $d.set(l, u), u);
        }
        return {
          value: l,
          source: u,
          stack: S(u)
        };
      }
      function q(l, u) {
        Qo[Ko++] = Jl, Qo[Ko++] = Jo, Jo = l, Jl = u;
      }
      function te(l, u, m) {
        Va[Ga++] = Ns, Va[Ga++] = Os, Va[Ga++] = So, So = l;
        var _ = Ns;
        l = Os;
        var A = 32 - fa(_) - 1;
        _ &= ~(1 << A), m += 1;
        var D = 32 - fa(u) + A;
        if (30 < D) {
          var X = A - A % 5;
          D = (_ & (1 << X) - 1).toString(32), _ >>= X, A -= X, Ns = 1 << 32 - fa(u) + A | m << A | _, Os = D + l;
        } else
          Ns = 1 << D | m << A | _, Os = l;
      }
      function Me(l) {
        l.return !== null && (q(l, 1), te(l, 1, 0));
      }
      function Re(l) {
        for (; l === Jo; )
          Jo = Qo[--Ko], Qo[Ko] = null, Jl = Qo[--Ko], Qo[Ko] = null;
        for (; l === So; )
          So = Va[--Ga], Va[Ga] = null, Os = Va[--Ga], Va[Ga] = null, Ns = Va[--Ga], Va[Ga] = null;
      }
      function Ne(l, u) {
        U($s, u), U($l, l), U(Ei, null), l = Ym(u), E(Ei), U(Ei, l);
      }
      function he() {
        E(Ei), E($l), E($s);
      }
      function we(l) {
        l.memoizedState !== null && U($o, l);
        var u = Ei.current, m = Wl(u, l.type);
        u !== m && (U($l, l), U(Ei, m));
      }
      function Fe(l) {
        $l.current === l && (E(Ei), E($l)), $o.current === l && (E($o), ca ? Ds._currentValue = mo : Ds._currentValue2 = mo);
      }
      function $e(l) {
        var u = Error(r(418, ""));
        throw ee(fe(u, l)), _u;
      }
      function ut(l, u) {
        if (!Yi) throw Error(r(175));
        vv(
          l.stateNode,
          l.type,
          l.memoizedProps,
          u,
          l
        ) || $e(l);
      }
      function Tt(l) {
        for (ki = l.return; ki; )
          switch (ki.tag) {
            case 3:
            case 27:
              Oi = !0;
              return;
            case 5:
            case 13:
              Oi = !1;
              return;
            default:
              ki = ki.return;
          }
      }
      function gn(l) {
        if (!Yi || l !== ki) return !1;
        if (!fn) return Tt(l), fn = !0, !1;
        var u = !1;
        if (On ? l.tag !== 3 && l.tag !== 27 && (l.tag !== 5 || Gf(l.type) && !Wt(l.type, l.memoizedProps)) && (u = !0) : l.tag !== 3 && (l.tag !== 5 || Gf(l.type) && !Wt(l.type, l.memoizedProps)) && (u = !0), u && Wi && $e(l), Tt(l), l.tag === 13) {
          if (!Yi) throw Error(r(316));
          if (l = l.memoizedState, l = l !== null ? l.dehydrated : null, !l) throw Error(r(317));
          Wi = yv(l);
        } else
          Wi = ki ? jd(l.stateNode) : null;
        return !0;
      }
      function Ct() {
        Yi && (Wi = ki = null, fn = !1);
      }
      function ee(l) {
        ds === null ? ds = [l] : ds.push(l);
      }
      function He() {
        for (var l = el, u = Ls = el = 0; u < l; ) {
          var m = ps[u];
          ps[u++] = null;
          var _ = ps[u];
          ps[u++] = null;
          var A = ps[u];
          ps[u++] = null;
          var D = ps[u];
          if (ps[u++] = null, _ !== null && A !== null) {
            var X = _.pending;
            X === null ? A.next = A : (A.next = X.next, X.next = A), _.pending = A;
          }
          D !== 0 && et(m, A, D);
        }
      }
      function Ue(l, u, m, _) {
        ps[el++] = l, ps[el++] = u, ps[el++] = m, ps[el++] = _, Ls |= _, l.lanes |= _, l = l.alternate, l !== null && (l.lanes |= _);
      }
      function Xe(l, u, m, _) {
        return Ue(l, u, m, _), Ge(l);
      }
      function Ce(l, u) {
        return Ue(l, null, null, u), Ge(l);
      }
      function et(l, u, m) {
        l.lanes |= m;
        var _ = l.alternate;
        _ !== null && (_.lanes |= m);
        for (var A = !1, D = l.return; D !== null; )
          D.childLanes |= m, _ = D.alternate, _ !== null && (_.childLanes |= m), D.tag === 22 && (l = D.stateNode, l === null || l._visibility & 1 || (A = !0)), l = D, D = D.return;
        A && u !== null && l.tag === 3 && (D = l.stateNode, A = 31 - fa(m), D = D.hiddenUpdates, l = D[A], l === null ? D[A] = [u] : l.push(u), u.lane = m | 536870912);
      }
      function Ge(l) {
        if (50 < lc)
          throw lc = 0, nh = null, Error(r(185));
        for (var u = l.return; u !== null; )
          l = u, u = l.return;
        return l.tag === 3 ? l.stateNode : null;
      }
      function Ze(l) {
        l !== Lr && l.next === null && (Lr === null ? Su = Lr = l : Lr = Lr.next = l), Hn = !0, tl || (tl = !0, Te(Bt));
      }
      function At(l, u) {
        if (!ep && Hn) {
          ep = !0;
          do
            for (var m = !1, _ = Su; _ !== null; ) {
              if (l !== 0) {
                var A = _.pendingLanes;
                if (A === 0) var D = 0;
                else {
                  var X = _.suspendedLanes, $ = _.pingedLanes;
                  D = (1 << 31 - fa(42 | l) + 1) - 1, D &= A & ~(X & ~$), D = D & 201326677 ? D & 201326677 | 1 : D ? D | 2 : 0;
                }
                D !== 0 && (m = !0, me(_, D));
              } else
                D = on, D = I(
                  _,
                  _ === Tn ? D : 0
                ), (D & 3) === 0 || V(_, D) || (m = !0, me(_, D));
              _ = _.next;
            }
          while (m);
          ep = !1;
        }
      }
      function Bt() {
        Hn = tl = !1;
        var l = 0;
        ec !== 0 && (jm() && (l = ec), ec = 0);
        for (var u = hs(), m = null, _ = Su; _ !== null; ) {
          var A = _.next, D = Z(_, u);
          D === 0 ? (_.next = null, m === null ? Su = A : m.next = A, A === null && (Lr = m)) : (m = _, (l !== 0 || (D & 3) !== 0) && (Hn = !0)), _ = A;
        }
        At(l);
      }
      function Z(l, u) {
        for (var m = l.suspendedLanes, _ = l.pingedLanes, A = l.expirationTimes, D = l.pendingLanes & -62914561; 0 < D; ) {
          var X = 31 - fa(D), $ = 1 << X, de = A[X];
          de === -1 ? (($ & m) === 0 || ($ & _) !== 0) && (A[X] = Y($, u)) : de <= u && (l.expiredLanes |= $), D &= ~$;
        }
        if (u = Tn, m = on, m = I(
          l,
          l === u ? m : 0
        ), _ = l.callbackNode, m === 0 || l === u && Un === 2 || l.cancelPendingCommit !== null)
          return _ !== null && _ !== null && Yf(_), l.callbackNode = null, l.callbackPriority = 0;
        if ((m & 3) === 0 || V(l, m)) {
          if (u = m & -m, u === l.callbackPriority) return u;
          switch (_ !== null && Yf(_), pe(m)) {
            case 2:
            case 8:
              m = wv;
              break;
            case 32:
              m = Zf;
              break;
            case 268435456:
              m = wy;
              break;
            default:
              m = Zf;
          }
          return _ = H.bind(null, l), m = yu(m, _), l.callbackPriority = u, l.callbackNode = m, u;
        }
        return _ !== null && _ !== null && Yf(_), l.callbackPriority = 2, l.callbackNode = null, 2;
      }
      function H(l, u) {
        var m = l.callbackNode;
        if (Cs() && l.callbackNode !== m)
          return null;
        var _ = on;
        return _ = I(
          l,
          l === Tn ? _ : 0
        ), _ === 0 ? null : (oo(l, _, u), Z(l, hs()), l.callbackNode != null && l.callbackNode === m ? H.bind(null, l) : null);
      }
      function me(l, u) {
        if (Cs()) return null;
        oo(l, u, !0);
      }
      function Te(l) {
        Hd ? Nr(function() {
          (pn & 6) !== 0 ? yu(Wf, l) : l();
        }) : yu(Wf, l);
      }
      function ze() {
        return ec === 0 && (ec = k()), ec;
      }
      function Ae(l, u) {
        if (tc === null) {
          var m = tc = [];
          nl = 0, Fa = ze(), il = {
            status: "pending",
            value: void 0,
            then: function(_) {
              m.push(_);
            }
          };
        }
        return nl++, u.then(at, at), u;
      }
      function at() {
        if (--nl === 0 && tc !== null) {
          il !== null && (il.status = "fulfilled");
          var l = tc;
          tc = null, Fa = 0, il = null;
          for (var u = 0; u < l.length; u++) (0, l[u])();
        }
      }
      function Qe(l, u) {
        var m = [], _ = {
          status: "pending",
          value: null,
          reason: null,
          then: function(A) {
            m.push(A);
          }
        };
        return l.then(
          function() {
            _.status = "fulfilled", _.value = u;
            for (var A = 0; A < m.length; A++) (0, m[A])(u);
          },
          function(A) {
            for (_.status = "rejected", _.reason = A, A = 0; A < m.length; A++)
              (0, m[A])(void 0);
          }
        ), _;
      }
      function dt(l) {
        l.updateQueue = {
          baseState: l.memoizedState,
          firstBaseUpdate: null,
          lastBaseUpdate: null,
          shared: { pending: null, lanes: 0, hiddenCallbacks: null },
          callbacks: null
        };
      }
      function pt(l, u) {
        l = l.updateQueue, u.updateQueue === l && (u.updateQueue = {
          baseState: l.baseState,
          firstBaseUpdate: l.firstBaseUpdate,
          lastBaseUpdate: l.lastBaseUpdate,
          shared: l.shared,
          callbacks: null
        });
      }
      function Ve(l) {
        return { lane: l, tag: 0, payload: null, callback: null, next: null };
      }
      function tt(l, u, m) {
        var _ = l.updateQueue;
        if (_ === null) return null;
        if (_ = _.shared, (pn & 2) !== 0) {
          var A = _.pending;
          return A === null ? u.next = u : (u.next = A.next, A.next = u), _.pending = u, u = Ge(l), et(l, null, m), u;
        }
        return Ue(l, _, u, m), Ge(l);
      }
      function St(l, u, m) {
        if (u = u.updateQueue, u !== null && (u = u.shared, (m & 4194176) !== 0)) {
          var _ = u.lanes;
          _ &= l.pendingLanes, m |= _, u.lanes = m, oe(l, m);
        }
      }
      function mt(l, u) {
        var m = l.updateQueue, _ = l.alternate;
        if (_ !== null && (_ = _.updateQueue, m === _)) {
          var A = null, D = null;
          if (m = m.firstBaseUpdate, m !== null) {
            do {
              var X = {
                lane: m.lane,
                tag: m.tag,
                payload: m.payload,
                callback: null,
                next: null
              };
              D === null ? A = D = X : D = D.next = X, m = m.next;
            } while (m !== null);
            D === null ? A = D = u : D = D.next = u;
          } else A = D = u;
          m = {
            baseState: _.baseState,
            firstBaseUpdate: A,
            lastBaseUpdate: D,
            shared: _.shared,
            callbacks: _.callbacks
          }, l.updateQueue = m;
          return;
        }
        l = m.lastBaseUpdate, l === null ? m.firstBaseUpdate = u : l.next = u, m.lastBaseUpdate = u;
      }
      function nt() {
        if (al) {
          var l = il;
          if (l !== null) throw l;
        }
      }
      function Pt(l, u, m, _) {
        al = !1;
        var A = l.updateQueue;
        zr = !1;
        var D = A.firstBaseUpdate, X = A.lastBaseUpdate, $ = A.shared.pending;
        if ($ !== null) {
          A.shared.pending = null;
          var de = $, Oe = de.next;
          de.next = null, X === null ? D = Oe : X.next = Oe, X = de;
          var je = l.alternate;
          je !== null && (je = je.updateQueue, $ = je.lastBaseUpdate, $ !== X && ($ === null ? je.firstBaseUpdate = Oe : $.next = Oe, je.lastBaseUpdate = de));
        }
        if (D !== null) {
          var st = A.baseState;
          X = 0, je = Oe = de = null, $ = D;
          do {
            var ot = $.lane & -536870913, qt = ot !== $.lane;
            if (qt ? (on & ot) === ot : (_ & ot) === ot) {
              ot !== 0 && ot === Fa && (al = !0), je !== null && (je = je.next = {
                lane: 0,
                tag: $.tag,
                payload: $.payload,
                callback: null,
                next: null
              });
              e: {
                var Qa = l, wo = $;
                ot = u;
                var Do = m;
                switch (wo.tag) {
                  case 1:
                    if (Qa = wo.payload, typeof Qa == "function") {
                      st = Qa.call(
                        Do,
                        st,
                        ot
                      );
                      break e;
                    }
                    st = Qa;
                    break e;
                  case 3:
                    Qa.flags = Qa.flags & -65537 | 128;
                  case 0:
                    if (Qa = wo.payload, ot = typeof Qa == "function" ? Qa.call(Do, st, ot) : Qa, ot == null) break e;
                    st = wf({}, st, ot);
                    break e;
                  case 2:
                    zr = !0;
                }
              }
              ot = $.callback, ot !== null && (l.flags |= 64, qt && (l.flags |= 8192), qt = A.callbacks, qt === null ? A.callbacks = [ot] : qt.push(ot));
            } else
              qt = {
                lane: ot,
                tag: $.tag,
                payload: $.payload,
                callback: $.callback,
                next: null
              }, je === null ? (Oe = je = qt, de = st) : je = je.next = qt, X |= ot;
            if ($ = $.next, $ === null) {
              if ($ = A.shared.pending, $ === null)
                break;
              qt = $, $ = qt.next, qt.next = null, A.lastBaseUpdate = qt, A.shared.pending = null;
            }
          } while (!0);
          je === null && (de = st), A.baseState = de, A.firstBaseUpdate = Oe, A.lastBaseUpdate = je, D === null && (A.shared.lanes = 0), Za |= X, l.lanes = X, l.memoizedState = st;
        }
      }
      function se(l, u) {
        if (typeof l != "function")
          throw Error(r(191, l));
        l.call(u);
      }
      function ke(l, u) {
        var m = l.callbacks;
        if (m !== null)
          for (l.callbacks = null, l = 0; l < m.length; l++)
            se(m[l], u);
      }
      function Ke(l, u) {
        if (ba(l, u)) return !0;
        if (typeof l != "object" || l === null || typeof u != "object" || u === null)
          return !1;
        var m = Object.keys(l), _ = Object.keys(u);
        if (m.length !== _.length) return !1;
        for (_ = 0; _ < m.length; _++) {
          var A = m[_];
          if (!er.call(u, A) || !ba(l[A], u[A]))
            return !1;
        }
        return !0;
      }
      function ct(l) {
        return l = l.status, l === "fulfilled" || l === "rejected";
      }
      function qe() {
      }
      function Pe(l, u, m) {
        switch (m = l[m], m === void 0 ? l.push(u) : m !== u && (u.then(qe, qe), u = m), u.status) {
          case "fulfilled":
            return u.value;
          case "rejected":
            throw l = u.reason, l === nc ? Error(r(483)) : l;
          default:
            if (typeof u.status == "string") u.then(qe, qe);
            else {
              if (l = Tn, l !== null && 100 < l.shellSuspendCounter)
                throw Error(r(482));
              l = u, l.status = "pending", l.then(
                function(_) {
                  if (u.status === "pending") {
                    var A = u;
                    A.status = "fulfilled", A.value = _;
                  }
                },
                function(_) {
                  if (u.status === "pending") {
                    var A = u;
                    A.status = "rejected", A.reason = _;
                  }
                }
              );
            }
            switch (u.status) {
              case "fulfilled":
                return u.value;
              case "rejected":
                throw l = u.reason, l === nc ? Error(r(483)) : l;
            }
            throw xo = u, nc;
        }
      }
      function vt() {
        if (xo === null) throw Error(r(459));
        var l = xo;
        return xo = null, l;
      }
      function Ut(l) {
        var u = bo;
        return bo += 1, Mo === null && (Mo = []), Pe(Mo, l, u);
      }
      function un(l, u) {
        u = u.props.ref, l.ref = u !== void 0 ? u : null;
      }
      function rn(l, u) {
        throw u.$$typeof === My ? Error(r(525)) : (l = Object.prototype.toString.call(u), Error(
          r(
            31,
            l === "[object Object]" ? "object with keys {" + Object.keys(u).join(", ") + "}" : l
          )
        ));
      }
      function is(l) {
        var u = l._init;
        return u(l._payload);
      }
      function pi(l) {
        function u(_e, ne) {
          if (l) {
            var Ee = _e.deletions;
            Ee === null ? (_e.deletions = [ne], _e.flags |= 16) : Ee.push(ne);
          }
        }
        function m(_e, ne) {
          if (!l) return null;
          for (; ne !== null; )
            u(_e, ne), ne = ne.sibling;
          return null;
        }
        function _(_e) {
          for (var ne = /* @__PURE__ */ new Map(); _e !== null; )
            _e.key !== null ? ne.set(_e.key, _e) : ne.set(_e.index, _e), _e = _e.sibling;
          return ne;
        }
        function A(_e, ne) {
          return _e = ls(_e, ne), _e.index = 0, _e.sibling = null, _e;
        }
        function D(_e, ne, Ee) {
          return _e.index = Ee, l ? (Ee = _e.alternate, Ee !== null ? (Ee = Ee.index, Ee < ne ? (_e.flags |= 33554434, ne) : Ee) : (_e.flags |= 33554434, ne)) : (_e.flags |= 1048576, ne);
        }
        function X(_e) {
          return l && _e.alternate === null && (_e.flags |= 33554434), _e;
        }
        function $(_e, ne, Ee, We) {
          return ne === null || ne.tag !== 6 ? (ne = Rf(Ee, _e.mode, We), ne.return = _e, ne) : (ne = A(ne, Ee), ne.return = _e, ne);
        }
        function de(_e, ne, Ee, We) {
          var xt = Ee.type;
          return xt === ho ? je(
            _e,
            ne,
            Ee.props.children,
            We,
            Ee.key
          ) : ne !== null && (ne.elementType === xt || typeof xt == "object" && xt !== null && xt.$$typeof === us && is(xt) === ne.type) ? (ne = A(ne, Ee.props), un(ne, Ee), ne.return = _e, ne) : (ne = js(
            Ee.type,
            Ee.key,
            Ee.props,
            null,
            _e.mode,
            We
          ), un(ne, Ee), ne.return = _e, ne);
        }
        function Oe(_e, ne, Ee, We) {
          return ne === null || ne.tag !== 4 || ne.stateNode.containerInfo !== Ee.containerInfo || ne.stateNode.implementation !== Ee.implementation ? (ne = Ud(Ee, _e.mode, We), ne.return = _e, ne) : (ne = A(ne, Ee.children || []), ne.return = _e, ne);
        }
        function je(_e, ne, Ee, We, xt) {
          return ne === null || ne.tag !== 7 ? (ne = ti(
            Ee,
            _e.mode,
            We,
            xt
          ), ne.return = _e, ne) : (ne = A(ne, Ee), ne.return = _e, ne);
        }
        function st(_e, ne, Ee) {
          if (typeof ne == "string" && ne !== "" || typeof ne == "number" || typeof ne == "bigint")
            return ne = Rf(
              "" + ne,
              _e.mode,
              Ee
            ), ne.return = _e, ne;
          if (typeof ne == "object" && ne !== null) {
            switch (ne.$$typeof) {
              case ou:
                return Ee = js(
                  ne.type,
                  ne.key,
                  ne.props,
                  null,
                  _e.mode,
                  Ee
                ), un(Ee, ne), Ee.return = _e, Ee;
              case cs:
                return ne = Ud(
                  ne,
                  _e.mode,
                  Ee
                ), ne.return = _e, ne;
              case us:
                var We = ne._init;
                return ne = We(ne._payload), st(_e, ne, Ee);
            }
            if (ql(ne) || c(ne))
              return ne = ti(
                ne,
                _e.mode,
                Ee,
                null
              ), ne.return = _e, ne;
            if (typeof ne.then == "function")
              return st(_e, Ut(ne), Ee);
            if (ne.$$typeof === ws)
              return st(
                _e,
                kc(_e, ne),
                Ee
              );
            rn(_e, ne);
          }
          return null;
        }
        function ot(_e, ne, Ee, We) {
          var xt = ne !== null ? ne.key : null;
          if (typeof Ee == "string" && Ee !== "" || typeof Ee == "number" || typeof Ee == "bigint")
            return xt !== null ? null : $(_e, ne, "" + Ee, We);
          if (typeof Ee == "object" && Ee !== null) {
            switch (Ee.$$typeof) {
              case ou:
                return Ee.key === xt ? de(_e, ne, Ee, We) : null;
              case cs:
                return Ee.key === xt ? Oe(_e, ne, Ee, We) : null;
              case us:
                return xt = Ee._init, Ee = xt(Ee._payload), ot(_e, ne, Ee, We);
            }
            if (ql(Ee) || c(Ee))
              return xt !== null ? null : je(_e, ne, Ee, We, null);
            if (typeof Ee.then == "function")
              return ot(
                _e,
                ne,
                Ut(Ee),
                We
              );
            if (Ee.$$typeof === ws)
              return ot(
                _e,
                ne,
                kc(_e, Ee),
                We
              );
            rn(_e, Ee);
          }
          return null;
        }
        function qt(_e, ne, Ee, We, xt) {
          if (typeof We == "string" && We !== "" || typeof We == "number" || typeof We == "bigint")
            return _e = _e.get(Ee) || null, $(ne, _e, "" + We, xt);
          if (typeof We == "object" && We !== null) {
            switch (We.$$typeof) {
              case ou:
                return _e = _e.get(
                  We.key === null ? Ee : We.key
                ) || null, de(ne, _e, We, xt);
              case cs:
                return _e = _e.get(
                  We.key === null ? Ee : We.key
                ) || null, Oe(ne, _e, We, xt);
              case us:
                var Zn = We._init;
                return We = Zn(We._payload), qt(
                  _e,
                  ne,
                  Ee,
                  We,
                  xt
                );
            }
            if (ql(We) || c(We))
              return _e = _e.get(Ee) || null, je(ne, _e, We, xt, null);
            if (typeof We.then == "function")
              return qt(
                _e,
                ne,
                Ee,
                Ut(We),
                xt
              );
            if (We.$$typeof === ws)
              return qt(
                _e,
                ne,
                Ee,
                kc(ne, We),
                xt
              );
            rn(ne, We);
          }
          return null;
        }
        function Qa(_e, ne, Ee, We) {
          for (var xt = null, Zn = null, Ht = ne, _n = ne = 0, ui = null; Ht !== null && _n < Ee.length; _n++) {
            Ht.index > _n ? (ui = Ht, Ht = null) : ui = Ht.sibling;
            var sn = ot(
              _e,
              Ht,
              Ee[_n],
              We
            );
            if (sn === null) {
              Ht === null && (Ht = ui);
              break;
            }
            l && Ht && sn.alternate === null && u(_e, Ht), ne = D(sn, ne, _n), Zn === null ? xt = sn : Zn.sibling = sn, Zn = sn, Ht = ui;
          }
          if (_n === Ee.length)
            return m(_e, Ht), fn && q(_e, _n), xt;
          if (Ht === null) {
            for (; _n < Ee.length; _n++)
              Ht = st(_e, Ee[_n], We), Ht !== null && (ne = D(
                Ht,
                ne,
                _n
              ), Zn === null ? xt = Ht : Zn.sibling = Ht, Zn = Ht);
            return fn && q(_e, _n), xt;
          }
          for (Ht = _(Ht); _n < Ee.length; _n++)
            ui = qt(
              Ht,
              _e,
              _n,
              Ee[_n],
              We
            ), ui !== null && (l && ui.alternate !== null && Ht.delete(
              ui.key === null ? _n : ui.key
            ), ne = D(
              ui,
              ne,
              _n
            ), Zn === null ? xt = ui : Zn.sibling = ui, Zn = ui);
          return l && Ht.forEach(function(lr) {
            return u(_e, lr);
          }), fn && q(_e, _n), xt;
        }
        function wo(_e, ne, Ee, We) {
          if (Ee == null) throw Error(r(151));
          for (var xt = null, Zn = null, Ht = ne, _n = ne = 0, ui = null, sn = Ee.next(); Ht !== null && !sn.done; _n++, sn = Ee.next()) {
            Ht.index > _n ? (ui = Ht, Ht = null) : ui = Ht.sibling;
            var lr = ot(_e, Ht, sn.value, We);
            if (lr === null) {
              Ht === null && (Ht = ui);
              break;
            }
            l && Ht && lr.alternate === null && u(_e, Ht), ne = D(lr, ne, _n), Zn === null ? xt = lr : Zn.sibling = lr, Zn = lr, Ht = ui;
          }
          if (sn.done)
            return m(_e, Ht), fn && q(_e, _n), xt;
          if (Ht === null) {
            for (; !sn.done; _n++, sn = Ee.next())
              sn = st(_e, sn.value, We), sn !== null && (ne = D(
                sn,
                ne,
                _n
              ), Zn === null ? xt = sn : Zn.sibling = sn, Zn = sn);
            return fn && q(_e, _n), xt;
          }
          for (Ht = _(Ht); !sn.done; _n++, sn = Ee.next())
            sn = qt(
              Ht,
              _e,
              _n,
              sn.value,
              We
            ), sn !== null && (l && sn.alternate !== null && Ht.delete(sn.key === null ? _n : sn.key), ne = D(sn, ne, _n), Zn === null ? xt = sn : Zn.sibling = sn, Zn = sn);
          return l && Ht.forEach(function(ih) {
            return u(_e, ih);
          }), fn && q(_e, _n), xt;
        }
        function Do(_e, ne, Ee, We) {
          if (typeof Ee == "object" && Ee !== null && Ee.type === ho && Ee.key === null && (Ee = Ee.props.children), typeof Ee == "object" && Ee !== null) {
            switch (Ee.$$typeof) {
              case ou:
                e: {
                  for (var xt = Ee.key; ne !== null; ) {
                    if (ne.key === xt) {
                      if (xt = Ee.type, xt === ho) {
                        if (ne.tag === 7) {
                          m(
                            _e,
                            ne.sibling
                          ), We = A(
                            ne,
                            Ee.props.children
                          ), We.return = _e, _e = We;
                          break e;
                        }
                      } else if (ne.elementType === xt || typeof xt == "object" && xt !== null && xt.$$typeof === us && is(xt) === ne.type) {
                        m(
                          _e,
                          ne.sibling
                        ), We = A(ne, Ee.props), un(We, Ee), We.return = _e, _e = We;
                        break e;
                      }
                      m(_e, ne);
                      break;
                    } else u(_e, ne);
                    ne = ne.sibling;
                  }
                  Ee.type === ho ? (We = ti(
                    Ee.props.children,
                    _e.mode,
                    We,
                    Ee.key
                  ), We.return = _e, _e = We) : (We = js(
                    Ee.type,
                    Ee.key,
                    Ee.props,
                    null,
                    _e.mode,
                    We
                  ), un(We, Ee), We.return = _e, _e = We);
                }
                return X(_e);
              case cs:
                e: {
                  for (xt = Ee.key; ne !== null; ) {
                    if (ne.key === xt)
                      if (ne.tag === 4 && ne.stateNode.containerInfo === Ee.containerInfo && ne.stateNode.implementation === Ee.implementation) {
                        m(
                          _e,
                          ne.sibling
                        ), We = A(
                          ne,
                          Ee.children || []
                        ), We.return = _e, _e = We;
                        break e;
                      } else {
                        m(_e, ne);
                        break;
                      }
                    else u(_e, ne);
                    ne = ne.sibling;
                  }
                  We = Ud(Ee, _e.mode, We), We.return = _e, _e = We;
                }
                return X(_e);
              case us:
                return xt = Ee._init, Ee = xt(Ee._payload), Do(
                  _e,
                  ne,
                  Ee,
                  We
                );
            }
            if (ql(Ee))
              return Qa(
                _e,
                ne,
                Ee,
                We
              );
            if (c(Ee)) {
              if (xt = c(Ee), typeof xt != "function")
                throw Error(r(150));
              return Ee = xt.call(Ee), wo(
                _e,
                ne,
                Ee,
                We
              );
            }
            if (typeof Ee.then == "function")
              return Do(
                _e,
                ne,
                Ut(Ee),
                We
              );
            if (Ee.$$typeof === ws)
              return Do(
                _e,
                ne,
                kc(_e, Ee),
                We
              );
            rn(_e, Ee);
          }
          return typeof Ee == "string" && Ee !== "" || typeof Ee == "number" || typeof Ee == "bigint" ? (Ee = "" + Ee, ne !== null && ne.tag === 6 ? (m(_e, ne.sibling), We = A(ne, Ee), We.return = _e, _e = We) : (m(_e, ne), We = Rf(Ee, _e.mode, We), We.return = _e, _e = We), X(_e)) : m(_e, ne);
        }
        return function(_e, ne, Ee, We) {
          try {
            bo = 0;
            var xt = Do(
              _e,
              ne,
              Ee,
              We
            );
            return Mo = null, xt;
          } catch (Ht) {
            if (Ht === nc) throw Ht;
            var Zn = n(29, Ht, null, _e.mode);
            return Zn.lanes = We, Zn.return = _e, Zn;
          } finally {
          }
        };
      }
      function mi(l, u) {
        l = na, U(ic, l), U(Vn, u), na = l | u.baseLanes;
      }
      function jn() {
        U(ic, na), U(Vn, Vn.current);
      }
      function as() {
        na = ic.current, E(Vn), E(ic);
      }
      function Na(l) {
        var u = l.alternate;
        U(Ti, Ti.current & 1), U(Xa, l), Ln === null && (u === null || Vn.current !== null || u.memoizedState !== null) && (Ln = l);
      }
      function Lc(l) {
        if (l.tag === 22) {
          if (U(Ti, Ti.current), U(Xa, l), Ln === null) {
            var u = l.alternate;
            u !== null && u.memoizedState !== null && (Ln = l);
          }
        } else Oa();
      }
      function Oa() {
        U(Ti, Ti.current), U(Xa, Xa.current);
      }
      function La(l) {
        E(Xa), Ln === l && (Ln = null), E(Ti);
      }
      function za(l) {
        for (var u = l; u !== null; ) {
          if (u.tag === 13) {
            var m = u.memoizedState;
            if (m !== null && (m = m.dehydrated, m === null || If(m) || Hf(m)))
              return u;
          } else if (u.tag === 19 && u.memoizedProps.revealOrder !== void 0) {
            if ((u.flags & 128) !== 0) return u;
          } else if (u.child !== null) {
            u.child.return = u, u = u.child;
            continue;
          }
          if (u === l) break;
          for (; u.sibling === null; ) {
            if (u.return === null || u.return === l) return null;
            u = u.return;
          }
          u.sibling.return = u.return, u = u.sibling;
        }
        return null;
      }
      function In() {
        throw Error(r(321));
      }
      function As(l, u) {
        if (u === null) return !1;
        for (var m = 0; m < u.length && m < l.length; m++)
          if (!ba(l[m], u[m])) return !1;
        return !0;
      }
      function Ys(l, u, m, _, A, D) {
        return Br = D, Jt = u, u.memoizedState = null, u.updateQueue = null, u.lanes = 0, It.H = l === null || l.memoizedState === null ? Ao : ha, To = !1, D = m(_, A), To = !1, sl && (D = mr(
          u,
          m,
          _,
          A
        )), Qr(l), D;
      }
      function Qr(l) {
        It.H = ni;
        var u = Dt !== null && Dt.next !== null;
        if (Br = 0, dn = Dt = Jt = null, ms = !1, rl = 0, Li = null, u) throw Error(r(300));
        l === null || zn || (l = l.dependencies, l !== null && Yc(l) && (zn = !0));
      }
      function mr(l, u, m, _) {
        Jt = l;
        var A = 0;
        do {
          if (sl && (Li = null), rl = 0, sl = !1, 25 <= A) throw Error(r(301));
          if (A += 1, dn = Dt = null, l.updateQueue != null) {
            var D = l.updateQueue;
            D.lastEffect = null, D.events = null, D.stores = null, D.memoCache != null && (D.memoCache.index = 0);
          }
          It.H = qa, D = u(m, _);
        } while (sl);
        return D;
      }
      function vi() {
        var l = It.H, u = l.useState()[0];
        return u = typeof u.then == "function" ? xe(u) : u, l = l.useState()[0], (Dt !== null ? Dt.memoizedState : null) !== l && (Jt.flags |= 1024), u;
      }
      function Ml() {
        var l = jf !== 0;
        return jf = 0, l;
      }
      function bl(l, u, m) {
        u.updateQueue = l.updateQueue, u.flags &= -2053, l.lanes &= ~m;
      }
      function F(l) {
        if (ms) {
          for (l = l.memoizedState; l !== null; ) {
            var u = l.queue;
            u !== null && (u.pending = null), l = l.next;
          }
          ms = !1;
        }
        Br = 0, dn = Dt = Jt = null, sl = !1, rl = jf = 0, Li = null;
      }
      function re() {
        var l = {
          memoizedState: null,
          baseState: null,
          baseQueue: null,
          queue: null,
          next: null
        };
        return dn === null ? Jt.memoizedState = dn = l : dn = dn.next = l, dn;
      }
      function ve() {
        if (Dt === null) {
          var l = Jt.alternate;
          l = l !== null ? l.memoizedState : null;
        } else l = Dt.next;
        var u = dn === null ? Jt.memoizedState : dn.next;
        if (u !== null)
          dn = u, Dt = l;
        else {
          if (l === null)
            throw Jt.alternate === null ? Error(r(467)) : Error(r(310));
          Dt = l, l = {
            memoizedState: Dt.memoizedState,
            baseState: Dt.baseState,
            baseQueue: Dt.baseQueue,
            queue: Dt.queue,
            next: null
          }, dn === null ? Jt.memoizedState = dn = l : dn = dn.next = l;
        }
        return dn;
      }
      function xe(l) {
        var u = rl;
        return rl += 1, Li === null && (Li = []), l = Pe(Li, l, u), u = Jt, (dn === null ? u.memoizedState : dn.next) === null && (u = u.alternate, It.H = u === null || u.memoizedState === null ? Ao : ha), l;
      }
      function ce(l) {
        if (l !== null && typeof l == "object") {
          if (typeof l.then == "function") return xe(l);
          if (l.$$typeof === ws) return Gi(l);
        }
        throw Error(r(438, String(l)));
      }
      function Ye(l) {
        var u = null, m = Jt.updateQueue;
        if (m !== null && (u = m.memoCache), u == null) {
          var _ = Jt.alternate;
          _ !== null && (_ = _.updateQueue, _ !== null && (_ = _.memoCache, _ != null && (u = {
            data: _.data.map(function(A) {
              return A.slice();
            }),
            index: 0
          })));
        }
        if (u == null && (u = { data: [], index: 0 }), m === null && (m = Qf(), Jt.updateQueue = m), m.memoCache = u, m = u.data[u.index], m === void 0)
          for (m = u.data[u.index] = Array(l), _ = 0; _ < l; _++)
            m[_] = qm;
        return u.index++, m;
      }
      function Je(l, u) {
        return typeof u == "function" ? u(l) : u;
      }
      function ft(l) {
        var u = ve();
        return it(u, Dt, l);
      }
      function it(l, u, m) {
        var _ = l.queue;
        if (_ === null) throw Error(r(311));
        _.lastRenderedReducer = m;
        var A = l.baseQueue, D = _.pending;
        if (D !== null) {
          if (A !== null) {
            var X = A.next;
            A.next = D.next, D.next = X;
          }
          u.baseQueue = A = D, _.pending = null;
        }
        if (D = l.baseState, A === null) l.memoizedState = D;
        else {
          u = A.next;
          var $ = X = null, de = null, Oe = u, je = !1;
          do {
            var st = Oe.lane & -536870913;
            if (st !== Oe.lane ? (on & st) === st : (Br & st) === st) {
              var ot = Oe.revertLane;
              if (ot === 0)
                de !== null && (de = de.next = {
                  lane: 0,
                  revertLane: 0,
                  action: Oe.action,
                  hasEagerState: Oe.hasEagerState,
                  eagerState: Oe.eagerState,
                  next: null
                }), st === Fa && (je = !0);
              else if ((Br & ot) === ot) {
                Oe = Oe.next, ot === Fa && (je = !0);
                continue;
              } else
                st = {
                  lane: 0,
                  revertLane: Oe.revertLane,
                  action: Oe.action,
                  hasEagerState: Oe.hasEagerState,
                  eagerState: Oe.eagerState,
                  next: null
                }, de === null ? ($ = de = st, X = D) : de = de.next = st, Jt.lanes |= ot, Za |= ot;
              st = Oe.action, To && m(D, st), D = Oe.hasEagerState ? Oe.eagerState : m(D, st);
            } else
              ot = {
                lane: st,
                revertLane: Oe.revertLane,
                action: Oe.action,
                hasEagerState: Oe.hasEagerState,
                eagerState: Oe.eagerState,
                next: null
              }, de === null ? ($ = de = ot, X = D) : de = de.next = ot, Jt.lanes |= st, Za |= st;
            Oe = Oe.next;
          } while (Oe !== null && Oe !== u);
          if (de === null ? X = D : de.next = $, !ba(D, l.memoizedState) && (zn = !0, je && (m = il, m !== null)))
            throw m;
          l.memoizedState = D, l.baseState = X, l.baseQueue = de, _.lastRenderedState = D;
        }
        return A === null && (_.lanes = 0), [l.memoizedState, _.dispatch];
      }
      function Mt(l) {
        var u = ve(), m = u.queue;
        if (m === null) throw Error(r(311));
        m.lastRenderedReducer = l;
        var _ = m.dispatch, A = m.pending, D = u.memoizedState;
        if (A !== null) {
          m.pending = null;
          var X = A = A.next;
          do
            D = l(D, X.action), X = X.next;
          while (X !== A);
          ba(D, u.memoizedState) || (zn = !0), u.memoizedState = D, u.baseQueue === null && (u.baseState = D), m.lastRenderedState = D;
        }
        return [D, _];
      }
      function wt(l, u, m) {
        var _ = Jt, A = ve(), D = fn;
        if (D) {
          if (m === void 0)
            throw Error(r(407));
          m = m();
        } else m = u();
        var X = !ba(
          (Dt || A).memoizedState,
          m
        );
        if (X && (A.memoizedState = m, zn = !0), A = A.queue, nd(hn.bind(null, _, A, l), [
          l
        ]), A.getSnapshot !== u || X || dn !== null && dn.memoizedState.tag & 1) {
          if (_.flags |= 2048, Mi(
            9,
            Zt.bind(
              null,
              _,
              A,
              m,
              u
            ),
            { destroy: void 0 },
            null
          ), Tn === null) throw Error(r(349));
          D || (Br & 60) !== 0 || _t(_, u, m);
        }
        return m;
      }
      function _t(l, u, m) {
        l.flags |= 16384, l = { getSnapshot: u, value: m }, u = Jt.updateQueue, u === null ? (u = Qf(), Jt.updateQueue = u, u.stores = [l]) : (m = u.stores, m === null ? u.stores = [l] : m.push(l));
      }
      function Zt(l, u, m, _) {
        u.value = m, u.getSnapshot = _, Yn(u) && Cn(l);
      }
      function hn(l, u, m) {
        return m(function() {
          Yn(u) && Cn(l);
        });
      }
      function Yn(l) {
        var u = l.getSnapshot;
        l = l.value;
        try {
          var m = u();
          return !ba(l, m);
        } catch {
          return !0;
        }
      }
      function Cn(l) {
        var u = Ce(l, 2);
        u !== null && Ui(u, l, 2);
      }
      function Yt(l) {
        var u = re();
        if (typeof l == "function") {
          var m = l;
          if (l = m(), To) {
            K(!0);
            try {
              m();
            } finally {
              K(!1);
            }
          }
        }
        return u.memoizedState = u.baseState = l, u.queue = {
          pending: null,
          lanes: 0,
          dispatch: null,
          lastRenderedReducer: Je,
          lastRenderedState: l
        }, u;
      }
      function bt(l, u, m, _) {
        return l.baseState = m, it(
          l,
          Dt,
          typeof _ == "function" ? _ : Je
        );
      }
      function kn(l, u, m, _, A) {
        if (Vc(l)) throw Error(r(485));
        if (l = u.action, l !== null) {
          var D = {
            payload: A,
            action: l,
            next: null,
            isTransition: !0,
            status: "pending",
            value: null,
            reason: null,
            listeners: [],
            then: function(X) {
              D.listeners.push(X);
            }
          };
          It.T !== null ? m(!0) : D.isTransition = !1, _(D), m = u.pending, m === null ? (D.next = u.pending = D, nn(u, D)) : (D.next = m.next, u.pending = m.next = D);
        }
      }
      function nn(l, u) {
        var m = u.action, _ = u.payload, A = l.state;
        if (u.isTransition) {
          var D = It.T, X = {};
          It.T = X;
          try {
            var $ = m(A, _), de = It.S;
            de !== null && de(X, $), Bi(l, u, $);
          } catch (Oe) {
            Pi(l, u, Oe);
          } finally {
            It.T = D;
          }
        } else
          try {
            D = m(A, _), Bi(l, u, D);
          } catch (Oe) {
            Pi(l, u, Oe);
          }
      }
      function Bi(l, u, m) {
        m !== null && typeof m == "object" && typeof m.then == "function" ? m.then(
          function(_) {
            ss(l, u, _);
          },
          function(_) {
            return Pi(l, u, _);
          }
        ) : ss(l, u, m);
      }
      function ss(l, u, m) {
        u.status = "fulfilled", u.value = m, xi(u), l.state = m, u = l.pending, u !== null && (m = u.next, m === u ? l.pending = null : (m = m.next, u.next = m, nn(l, m)));
      }
      function Pi(l, u, m) {
        var _ = l.pending;
        if (l.pending = null, _ !== null) {
          _ = _.next;
          do
            u.status = "rejected", u.reason = m, xi(u), u = u.next;
          while (u !== _);
        }
        l.action = null;
      }
      function xi(l) {
        l = l.listeners;
        for (var u = 0; u < l.length; u++) (0, l[u])();
      }
      function Dn(l, u) {
        return u;
      }
      function Ji(l, u) {
        if (fn) {
          var m = Tn.formState;
          if (m !== null) {
            e: {
              var _ = Jt;
              if (fn) {
                if (Wi) {
                  var A = Zd(
                    Wi,
                    Oi
                  );
                  if (A) {
                    Wi = jd(A), _ = hv(A);
                    break e;
                  }
                }
                $e(_);
              }
              _ = !1;
            }
            _ && (u = m[0]);
          }
        }
        m = re(), m.memoizedState = m.baseState = u, _ = {
          pending: null,
          lanes: 0,
          dispatch: null,
          lastRenderedReducer: Dn,
          lastRenderedState: u
        }, m.queue = _, m = rd.bind(
          null,
          Jt,
          _
        ), _.dispatch = m, _ = Yt(!1);
        var D = Al.bind(
          null,
          Jt,
          !1,
          _.queue
        );
        return _ = re(), A = {
          state: u,
          dispatch: null,
          action: l,
          pending: null
        }, _.queue = A, m = kn.bind(
          null,
          Jt,
          A,
          D,
          m
        ), A.dispatch = m, _.memoizedState = l, [u, m, !1];
      }
      function Ii(l) {
        var u = ve();
        return Kn(u, Dt, l);
      }
      function Kn(l, u, m) {
        u = it(
          l,
          u,
          Dn
        )[0], l = ft(Je)[0], u = typeof u == "object" && u !== null && typeof u.then == "function" ? xe(u) : u;
        var _ = ve(), A = _.queue, D = A.dispatch;
        return m !== _.memoizedState && (Jt.flags |= 2048, Mi(
          9,
          Hi.bind(null, A, m),
          { destroy: void 0 },
          null
        )), [u, D, l];
      }
      function Hi(l, u) {
        l.action = u;
      }
      function Go(l) {
        var u = ve(), m = Dt;
        if (m !== null)
          return Kn(u, m, l);
        ve(), u = u.memoizedState, m = ve();
        var _ = m.queue.dispatch;
        return m.memoizedState = l, [u, _, !1];
      }
      function Mi(l, u, m, _) {
        return l = { tag: l, create: u, inst: m, deps: _, next: null }, u = Jt.updateQueue, u === null && (u = Qf(), Jt.updateQueue = u), m = u.lastEffect, m === null ? u.lastEffect = l.next = l : (_ = m.next, m.next = l, l.next = _, u.lastEffect = l), l;
      }
      function xm() {
        return ve().memoizedState;
      }
      function zc(l, u, m, _) {
        var A = re();
        Jt.flags |= l, A.memoizedState = Mi(
          1 | u,
          m,
          { destroy: void 0 },
          _ === void 0 ? null : _
        );
      }
      function Bc(l, u, m, _) {
        var A = ve();
        _ = _ === void 0 ? null : _;
        var D = A.memoizedState.inst;
        Dt !== null && _ !== null && As(_, Dt.memoizedState.deps) ? A.memoizedState = Mi(u, m, D, _) : (Jt.flags |= l, A.memoizedState = Mi(1 | u, m, D, _));
      }
      function of(l, u) {
        zc(8390656, 8, l, u);
      }
      function nd(l, u) {
        Bc(2048, 8, l, u);
      }
      function Mm(l, u) {
        return Bc(4, 2, l, u);
      }
      function Pc(l, u) {
        return Bc(4, 4, l, u);
      }
      function lf(l, u) {
        if (typeof u == "function") {
          l = l();
          var m = u(l);
          return function() {
            typeof m == "function" ? m() : u(null);
          };
        }
        if (u != null)
          return l = l(), u.current = l, function() {
            u.current = null;
          };
      }
      function cf(l, u, m) {
        m = m != null ? m.concat([l]) : null, Bc(
          4,
          4,
          lf.bind(null, u, l),
          m
        );
      }
      function Kr() {
      }
      function Fo(l, u) {
        var m = ve();
        u = u === void 0 ? null : u;
        var _ = m.memoizedState;
        return u !== null && As(u, _[1]) ? _[0] : (m.memoizedState = [l, u], l);
      }
      function id(l, u) {
        var m = ve();
        u = u === void 0 ? null : u;
        var _ = m.memoizedState;
        if (u !== null && As(u, _[1]))
          return _[0];
        if (_ = l(), To) {
          K(!0);
          try {
            l();
          } finally {
            K(!1);
          }
        }
        return m.memoizedState = [_, u], _;
      }
      function Ic(l, u, m) {
        return m === void 0 || (Br & 1073741824) !== 0 ? l.memoizedState = u : (l.memoizedState = m, l = Td(), Jt.lanes |= l, Za |= l, m);
      }
      function ad(l, u, m, _) {
        return ba(m, u) ? m : Vn.current !== null ? (l = Ic(l, m, _), ba(l, u) || (zn = !0), l) : (Br & 42) === 0 ? (zn = !0, l.memoizedState = m) : (l = Td(), Jt.lanes |= l, Za |= l, u);
      }
      function El(l, u, m, _, A) {
        var D = Ur();
        ea(
          D !== 0 && 8 > D ? D : 8
        );
        var X = It.T, $ = {};
        It.T = $, Al(l, !1, u, m);
        try {
          var de = A(), Oe = It.S;
          if (Oe !== null && Oe($, de), de !== null && typeof de == "object" && typeof de.then == "function") {
            var je = Qe(
              de,
              _
            );
            Jr(
              l,
              u,
              je,
              ri(l)
            );
          } else
            Jr(
              l,
              u,
              _,
              ri(l)
            );
        } catch (st) {
          Jr(
            l,
            u,
            { then: function() {
            }, status: "rejected", reason: st },
            ri()
          );
        } finally {
          ea(D), It.T = X;
        }
      }
      function ks(l) {
        var u = l.memoizedState;
        if (u !== null) return u;
        u = {
          memoizedState: mo,
          baseState: mo,
          baseQueue: null,
          queue: {
            pending: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: Je,
            lastRenderedState: mo
          },
          next: null
        };
        var m = {};
        return u.next = {
          memoizedState: m,
          baseState: m,
          baseQueue: null,
          queue: {
            pending: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: Je,
            lastRenderedState: m
          },
          next: null
        }, l.memoizedState = u, l = l.alternate, l !== null && (l.memoizedState = u), u;
      }
      function Hc() {
        return Gi(Ds);
      }
      function Tl() {
        return ve().memoizedState;
      }
      function vr() {
        return ve().memoizedState;
      }
      function sd(l) {
        for (var u = l.return; u !== null; ) {
          switch (u.tag) {
            case 24:
            case 3:
              var m = ri();
              l = Ve(m);
              var _ = tt(u, l, m);
              _ !== null && (Ui(_, u, m), St(_, u, m)), u = { cache: no() }, l.payload = u;
              return;
          }
          u = u.return;
        }
      }
      function uf(l, u, m) {
        var _ = ri();
        m = {
          lane: _,
          revertLane: 0,
          action: m,
          hasEagerState: !1,
          eagerState: null,
          next: null
        }, Vc(l) ? ra(u, m) : (m = Xe(l, u, m, _), m !== null && (Ui(m, l, _), $r(m, u, _)));
      }
      function rd(l, u, m) {
        var _ = ri();
        Jr(l, u, m, _);
      }
      function Jr(l, u, m, _) {
        var A = {
          lane: _,
          revertLane: 0,
          action: m,
          hasEagerState: !1,
          eagerState: null,
          next: null
        };
        if (Vc(l)) ra(u, A);
        else {
          var D = l.alternate;
          if (l.lanes === 0 && (D === null || D.lanes === 0) && (D = u.lastRenderedReducer, D !== null))
            try {
              var X = u.lastRenderedState, $ = D(X, m);
              if (A.hasEagerState = !0, A.eagerState = $, ba($, X))
                return Ue(l, u, A, 0), Tn === null && He(), !1;
            } catch {
            } finally {
            }
          if (m = Xe(l, u, A, _), m !== null)
            return Ui(m, l, _), $r(m, u, _), !0;
        }
        return !1;
      }
      function Al(l, u, m, _) {
        if (_ = {
          lane: 2,
          revertLane: ze(),
          action: _,
          hasEagerState: !1,
          eagerState: null,
          next: null
        }, Vc(l)) {
          if (u) throw Error(r(479));
        } else
          u = Xe(
            l,
            m,
            _,
            2
          ), u !== null && Ui(u, l, 2);
      }
      function Vc(l) {
        var u = l.alternate;
        return l === Jt || u !== null && u === Jt;
      }
      function ra(l, u) {
        sl = ms = !0;
        var m = l.pending;
        m === null ? u.next = u : (u.next = m.next, m.next = u), l.pending = u;
      }
      function $r(l, u, m) {
        if ((m & 4194176) !== 0) {
          var _ = u.lanes;
          _ &= l.pendingLanes, m |= _, u.lanes = m, oe(l, m);
        }
      }
      function Rl(l, u, m, _) {
        u = l.memoizedState, m = m(_, u), m = m == null ? u : wf({}, u, m), l.memoizedState = m, l.lanes === 0 && (l.updateQueue.baseState = m);
      }
      function Cl(l, u, m, _, A, D, X) {
        return l = l.stateNode, typeof l.shouldComponentUpdate == "function" ? l.shouldComponentUpdate(_, D, X) : u.prototype && u.prototype.isPureReactComponent ? !Ke(m, _) || !Ke(A, D) : !0;
      }
      function bm(l, u, m, _) {
        l = u.state, typeof u.componentWillReceiveProps == "function" && u.componentWillReceiveProps(m, _), typeof u.UNSAFE_componentWillReceiveProps == "function" && u.UNSAFE_componentWillReceiveProps(m, _), u.state !== l && nr.enqueueReplaceState(u, u.state, null);
      }
      function gr(l, u) {
        var m = u;
        if ("ref" in u) {
          m = {};
          for (var _ in u)
            _ !== "ref" && (m[_] = u[_]);
        }
        if (l = l.defaultProps) {
          m === u && (m = wf({}, m));
          for (var A in l)
            m[A] === void 0 && (m[A] = l[A]);
        }
        return m;
      }
      function wl(l, u) {
        try {
          var m = l.onUncaughtError;
          m(u.value, { componentStack: u.stack });
        } catch (_) {
          setTimeout(function() {
            throw _;
          });
        }
      }
      function Dl(l, u, m) {
        try {
          var _ = l.onCaughtError;
          _(m.value, {
            componentStack: m.stack,
            errorBoundary: u.tag === 1 ? u.stateNode : null
          });
        } catch (A) {
          setTimeout(function() {
            throw A;
          });
        }
      }
      function Ul(l, u, m) {
        return m = Ve(m), m.tag = 3, m.payload = { element: null }, m.callback = function() {
          wl(l, u);
        }, m;
      }
      function od(l) {
        return l = Ve(l), l.tag = 3, l;
      }
      function Em(l, u, m, _) {
        var A = m.type.getDerivedStateFromError;
        if (typeof A == "function") {
          var D = _.value;
          l.payload = function() {
            return A(D);
          }, l.callback = function() {
            Dl(u, m, _);
          };
        }
        var X = m.stateNode;
        X !== null && typeof X.componentDidCatch == "function" && (l.callback = function() {
          Dl(u, m, _), typeof A != "function" && (Ro === null ? Ro = /* @__PURE__ */ new Set([this]) : Ro.add(this));
          var $ = _.stack;
          this.componentDidCatch(_.value, {
            componentStack: $ !== null ? $ : ""
          });
        });
      }
      function yy(l, u, m, _, A) {
        if (m.flags |= 32768, _ !== null && typeof _ == "object" && typeof _.then == "function") {
          if (u = m.alternate, u !== null && qc(
            u,
            m,
            A,
            !0
          ), m = Xa.current, m !== null) {
            switch (m.tag) {
              case 13:
                return Ln === null ? Tr() : m.alternate === null && Bn === 0 && (Bn = 3), m.flags &= -257, m.flags |= 65536, m.lanes = A, _ === Mu ? m.flags |= 16384 : (u = m.updateQueue, u === null ? m.updateQueue = /* @__PURE__ */ new Set([_]) : u.add(_), Yo(l, _, A)), !1;
              case 22:
                return m.flags |= 65536, _ === Mu ? m.flags |= 16384 : (u = m.updateQueue, u === null ? (u = {
                  transitions: null,
                  markerInstances: null,
                  retryQueue: /* @__PURE__ */ new Set([_])
                }, m.updateQueue = u) : (m = u.retryQueue, m === null ? u.retryQueue = /* @__PURE__ */ new Set([_]) : m.add(_)), Yo(l, _, A)), !1;
            }
            throw Error(r(435, m.tag));
          }
          return Yo(l, _, A), Tr(), !1;
        }
        if (fn)
          return u = Xa.current, u !== null ? ((u.flags & 65536) === 0 && (u.flags |= 256), u.flags |= 65536, u.lanes = A, _ !== _u && (l = Error(r(422), { cause: _ }), ee(
            fe(l, m)
          ))) : (_ !== _u && (u = Error(r(423), {
            cause: _
          }), ee(
            fe(u, m)
          )), l = l.current.alternate, l.flags |= 65536, A &= -A, l.lanes |= A, _ = fe(_, m), A = Ul(
            l.stateNode,
            _,
            A
          ), mt(l, A), Bn !== 4 && (Bn = 2)), !1;
        var D = Error(r(520), { cause: _ });
        if (D = fe(D, m), ll === null ? ll = [D] : ll.push(D), Bn !== 4 && (Bn = 2), u === null) return !0;
        _ = fe(_, m), m = u;
        do {
          switch (m.tag) {
            case 3:
              return m.flags |= 65536, l = A & -A, m.lanes |= l, l = Ul(m.stateNode, _, l), mt(m, l), !1;
            case 1:
              if (u = m.type, D = m.stateNode, (m.flags & 128) === 0 && (typeof u.getDerivedStateFromError == "function" || D !== null && typeof D.componentDidCatch == "function" && (Ro === null || !Ro.has(
                D
              ))))
                return m.flags |= 65536, A &= -A, m.lanes |= A, A = od(A), Em(
                  A,
                  l,
                  m,
                  _
                ), mt(m, A), !1;
          }
          m = m.return;
        } while (m !== null);
        return !1;
      }
      function Vi(l, u, m, _) {
        u.child = l === null ? tr(u, null, m, _) : Eo(
          u,
          l.child,
          m,
          _
        );
      }
      function ff(l, u, m, _, A) {
        m = m.render;
        var D = u.ref;
        if ("ref" in _) {
          var X = {};
          for (var $ in _)
            $ !== "ref" && (X[$] = _[$]);
        } else X = _;
        return to(u), _ = Ys(
          l,
          u,
          m,
          X,
          D,
          A
        ), $ = Ml(), l !== null && !zn ? (bl(l, u, A), yr(l, u, A)) : (fn && $ && Me(u), u.flags |= 1, Vi(l, u, _, A), u.child);
      }
      function Tm(l, u, m, _, A) {
        if (l === null) {
          var D = m.type;
          return typeof D == "function" && !iu(D) && D.defaultProps === void 0 && m.compare === null ? (u.tag = 15, u.type = D, Am(
            l,
            u,
            D,
            _,
            A
          )) : (l = js(
            m.type,
            null,
            _,
            u,
            u.mode,
            A
          ), l.ref = u.ref, l.return = u, u.child = l);
        }
        if (D = l.child, !hd(l, A)) {
          var X = D.memoizedProps;
          if (m = m.compare, m = m !== null ? m : Ke, m(X, _) && l.ref === u.ref)
            return yr(
              l,
              u,
              A
            );
        }
        return u.flags |= 1, l = ls(D, _), l.ref = u.ref, l.return = u, u.child = l;
      }
      function Am(l, u, m, _, A) {
        if (l !== null) {
          var D = l.memoizedProps;
          if (Ke(D, _) && l.ref === u.ref)
            if (zn = !1, u.pendingProps = _ = D, hd(l, A))
              (l.flags & 131072) !== 0 && (zn = !0);
            else
              return u.lanes = l.lanes, yr(l, u, A);
        }
        return hf(
          l,
          u,
          m,
          _,
          A
        );
      }
      function Rm(l, u, m) {
        var _ = u.pendingProps, A = _.children, D = (u.stateNode._pendingVisibility & 2) !== 0, X = l !== null ? l.memoizedState : null;
        if (Gc(l, u), _.mode === "hidden" || D) {
          if ((u.flags & 128) !== 0) {
            if (_ = X !== null ? X.baseLanes | m : m, l !== null) {
              for (A = u.child = l.child, D = 0; A !== null; )
                D = D | A.lanes | A.childLanes, A = A.sibling;
              u.childLanes = D & ~_;
            } else u.childLanes = 0, u.child = null;
            return Cm(
              l,
              u,
              _,
              m
            );
          }
          if ((m & 536870912) !== 0)
            u.memoizedState = { baseLanes: 0, cachePool: null }, l !== null && pf(
              u,
              X !== null ? X.cachePool : null
            ), X !== null ? mi(u, X) : jn(), Lc(u);
          else
            return u.lanes = u.childLanes = 536870912, Cm(
              l,
              u,
              X !== null ? X.baseLanes | m : m,
              m
            );
        } else
          X !== null ? (pf(u, X.cachePool), mi(u, X), Oa(), u.memoizedState = null) : (l !== null && pf(u, null), jn(), Oa());
        return Vi(l, u, A, m), u.child;
      }
      function Cm(l, u, m, _) {
        var A = pd();
        return A = A === null ? null : {
          parent: ca ? Gn._currentValue : Gn._currentValue2,
          pool: A
        }, u.memoizedState = {
          baseLanes: m,
          cachePool: A
        }, l !== null && pf(u, null), jn(), Lc(u), l !== null && qc(l, u, _, !0), null;
      }
      function Gc(l, u) {
        var m = u.ref;
        if (m === null)
          l !== null && l.ref !== null && (u.flags |= 2097664);
        else {
          if (typeof m != "function" && typeof m != "object")
            throw Error(r(284));
          (l === null || l.ref !== m) && (u.flags |= 2097664);
        }
      }
      function hf(l, u, m, _, A) {
        return to(u), m = Ys(
          l,
          u,
          m,
          _,
          void 0,
          A
        ), _ = Ml(), l !== null && !zn ? (bl(l, u, A), yr(l, u, A)) : (fn && _ && Me(u), u.flags |= 1, Vi(l, u, m, A), u.child);
      }
      function wm(l, u, m, _, A, D) {
        return to(u), u.updateQueue = null, m = mr(
          u,
          _,
          m,
          A
        ), Qr(l), _ = Ml(), l !== null && !zn ? (bl(l, u, D), yr(l, u, D)) : (fn && _ && Me(u), u.flags |= 1, Vi(l, u, m, D), u.child);
      }
      function Dm(l, u, m, _, A) {
        if (to(u), u.stateNode === null) {
          var D = _o, X = m.contextType;
          typeof X == "object" && X !== null && (D = Gi(X)), D = new m(_, D), u.memoizedState = D.state !== null && D.state !== void 0 ? D.state : null, D.updater = nr, u.stateNode = D, D._reactInternals = u, D = u.stateNode, D.props = _, D.state = u.memoizedState, D.refs = {}, dt(u), X = m.contextType, D.context = typeof X == "object" && X !== null ? Gi(X) : _o, D.state = u.memoizedState, X = m.getDerivedStateFromProps, typeof X == "function" && (Rl(
            u,
            m,
            X,
            _
          ), D.state = u.memoizedState), typeof m.getDerivedStateFromProps == "function" || typeof D.getSnapshotBeforeUpdate == "function" || typeof D.UNSAFE_componentWillMount != "function" && typeof D.componentWillMount != "function" || (X = D.state, typeof D.componentWillMount == "function" && D.componentWillMount(), typeof D.UNSAFE_componentWillMount == "function" && D.UNSAFE_componentWillMount(), X !== D.state && nr.enqueueReplaceState(
            D,
            D.state,
            null
          ), Pt(u, _, D, A), nt(), D.state = u.memoizedState), typeof D.componentDidMount == "function" && (u.flags |= 4194308), _ = !0;
        } else if (l === null) {
          D = u.stateNode;
          var $ = u.memoizedProps, de = gr(m, $);
          D.props = de;
          var Oe = D.context, je = m.contextType;
          X = _o, typeof je == "object" && je !== null && (X = Gi(je));
          var st = m.getDerivedStateFromProps;
          je = typeof st == "function" || typeof D.getSnapshotBeforeUpdate == "function", $ = u.pendingProps !== $, je || typeof D.UNSAFE_componentWillReceiveProps != "function" && typeof D.componentWillReceiveProps != "function" || ($ || Oe !== X) && bm(
            u,
            D,
            _,
            X
          ), zr = !1;
          var ot = u.memoizedState;
          D.state = ot, Pt(u, _, D, A), nt(), Oe = u.memoizedState, $ || ot !== Oe || zr ? (typeof st == "function" && (Rl(
            u,
            m,
            st,
            _
          ), Oe = u.memoizedState), (de = zr || Cl(
            u,
            m,
            de,
            _,
            ot,
            Oe,
            X
          )) ? (je || typeof D.UNSAFE_componentWillMount != "function" && typeof D.componentWillMount != "function" || (typeof D.componentWillMount == "function" && D.componentWillMount(), typeof D.UNSAFE_componentWillMount == "function" && D.UNSAFE_componentWillMount()), typeof D.componentDidMount == "function" && (u.flags |= 4194308)) : (typeof D.componentDidMount == "function" && (u.flags |= 4194308), u.memoizedProps = _, u.memoizedState = Oe), D.props = _, D.state = Oe, D.context = X, _ = de) : (typeof D.componentDidMount == "function" && (u.flags |= 4194308), _ = !1);
        } else {
          D = u.stateNode, pt(l, u), X = u.memoizedProps, je = gr(m, X), D.props = je, st = u.pendingProps, ot = D.context, Oe = m.contextType, de = _o, typeof Oe == "object" && Oe !== null && (de = Gi(Oe)), $ = m.getDerivedStateFromProps, (Oe = typeof $ == "function" || typeof D.getSnapshotBeforeUpdate == "function") || typeof D.UNSAFE_componentWillReceiveProps != "function" && typeof D.componentWillReceiveProps != "function" || (X !== st || ot !== de) && bm(
            u,
            D,
            _,
            de
          ), zr = !1, ot = u.memoizedState, D.state = ot, Pt(u, _, D, A), nt();
          var qt = u.memoizedState;
          X !== st || ot !== qt || zr || l !== null && l.dependencies !== null && Yc(l.dependencies) ? (typeof $ == "function" && (Rl(
            u,
            m,
            $,
            _
          ), qt = u.memoizedState), (je = zr || Cl(
            u,
            m,
            je,
            _,
            ot,
            qt,
            de
          ) || l !== null && l.dependencies !== null && Yc(l.dependencies)) ? (Oe || typeof D.UNSAFE_componentWillUpdate != "function" && typeof D.componentWillUpdate != "function" || (typeof D.componentWillUpdate == "function" && D.componentWillUpdate(_, qt, de), typeof D.UNSAFE_componentWillUpdate == "function" && D.UNSAFE_componentWillUpdate(
            _,
            qt,
            de
          )), typeof D.componentDidUpdate == "function" && (u.flags |= 4), typeof D.getSnapshotBeforeUpdate == "function" && (u.flags |= 1024)) : (typeof D.componentDidUpdate != "function" || X === l.memoizedProps && ot === l.memoizedState || (u.flags |= 4), typeof D.getSnapshotBeforeUpdate != "function" || X === l.memoizedProps && ot === l.memoizedState || (u.flags |= 1024), u.memoizedProps = _, u.memoizedState = qt), D.props = _, D.state = qt, D.context = de, _ = je) : (typeof D.componentDidUpdate != "function" || X === l.memoizedProps && ot === l.memoizedState || (u.flags |= 4), typeof D.getSnapshotBeforeUpdate != "function" || X === l.memoizedProps && ot === l.memoizedState || (u.flags |= 1024), _ = !1);
        }
        return D = _, Gc(l, u), _ = (u.flags & 128) !== 0, D || _ ? (D = u.stateNode, m = _ && typeof m.getDerivedStateFromError != "function" ? null : D.render(), u.flags |= 1, l !== null && _ ? (u.child = Eo(
          u,
          l.child,
          null,
          A
        ), u.child = Eo(
          u,
          null,
          m,
          A
        )) : Vi(l, u, m, A), u.memoizedState = D.state, l = u.child) : l = yr(
          l,
          u,
          A
        ), l;
      }
      function Um(l, u, m, _) {
        return Ct(), u.flags |= 256, Vi(l, u, m, _), u.child;
      }
      function ld(l) {
        return { baseLanes: l, cachePool: md() };
      }
      function Fc(l, u, m) {
        return l = l !== null ? l.childLanes & ~m : 0, u && (l |= ja), l;
      }
      function Nm(l, u, m) {
        var _ = u.pendingProps, A = !1, D = (u.flags & 128) !== 0, X;
        if ((X = D) || (X = l !== null && l.memoizedState === null ? !1 : (Ti.current & 2) !== 0), X && (A = !0, u.flags &= -129), X = (u.flags & 32) !== 0, u.flags &= -33, l === null) {
          if (fn) {
            if (A ? Na(u) : Oa(), fn) {
              var $ = Wi, de;
              (de = $) && ($ = mv(
                $,
                Oi
              ), $ !== null ? (u.memoizedState = {
                dehydrated: $,
                treeContext: So !== null ? { id: Ns, overflow: Os } : null,
                retryLane: 536870912
              }, de = n(18, null, null, 0), de.stateNode = $, de.return = u, u.child = de, ki = u, Wi = null, de = !0) : de = !1), de || $e(u);
            }
            if ($ = u.memoizedState, $ !== null && ($ = $.dehydrated, $ !== null))
              return Hf($) ? u.lanes = 16 : u.lanes = 536870912, null;
            La(u);
          }
          return $ = _.children, _ = _.fallback, A ? (Oa(), A = u.mode, $ = ud(
            { mode: "hidden", children: $ },
            A
          ), _ = ti(
            _,
            A,
            m,
            null
          ), $.return = u, _.return = u, $.sibling = _, u.child = $, A = u.child, A.memoizedState = ld(m), A.childLanes = Fc(
            l,
            X,
            m
          ), u.memoizedState = $f, _) : (Na(u), cd(u, $));
        }
        if (de = l.memoizedState, de !== null && ($ = de.dehydrated, $ !== null)) {
          if (D)
            u.flags & 256 ? (Na(u), u.flags &= -257, u = df(
              l,
              u,
              m
            )) : u.memoizedState !== null ? (Oa(), u.child = l.child, u.flags |= 128, u = null) : (Oa(), A = _.fallback, $ = u.mode, _ = ud(
              { mode: "visible", children: _.children },
              $
            ), A = ti(
              A,
              $,
              m,
              null
            ), A.flags |= 2, _.return = u, A.return = u, _.sibling = A, u.child = _, Eo(
              u,
              l.child,
              null,
              m
            ), _ = u.child, _.memoizedState = ld(m), _.childLanes = Fc(
              l,
              X,
              m
            ), u.memoizedState = $f, u = A);
          else if (Na(u), Hf($))
            X = uv($).digest, _ = Error(r(419)), _.stack = "", _.digest = X, ee({ value: _, source: null, stack: null }), u = df(
              l,
              u,
              m
            );
          else if (zn || qc(
            l,
            u,
            m,
            !1
          ), X = (m & l.childLanes) !== 0, zn || X) {
            if (X = Tn, X !== null) {
              if (_ = m & -m, (_ & 42) !== 0) _ = 1;
              else
                switch (_) {
                  case 2:
                    _ = 1;
                    break;
                  case 8:
                    _ = 4;
                    break;
                  case 32:
                    _ = 16;
                    break;
                  case 128:
                  case 256:
                  case 512:
                  case 1024:
                  case 2048:
                  case 4096:
                  case 8192:
                  case 16384:
                  case 32768:
                  case 65536:
                  case 131072:
                  case 262144:
                  case 524288:
                  case 1048576:
                  case 2097152:
                  case 4194304:
                  case 8388608:
                  case 16777216:
                  case 33554432:
                    _ = 64;
                    break;
                  case 268435456:
                    _ = 134217728;
                    break;
                  default:
                    _ = 0;
                }
              if (_ = (_ & (X.suspendedLanes | m)) !== 0 ? 0 : _, _ !== 0 && _ !== de.retryLane)
                throw de.retryLane = _, Ce(l, _), Ui(X, l, _), Jf;
            }
            If($) || Tr(), u = df(
              l,
              u,
              m
            );
          } else
            If($) ? (u.flags |= 128, u.child = l.child, u = Ar.bind(
              null,
              l
            ), fv($, u), u = null) : (l = de.treeContext, Yi && (Wi = pv($), ki = u, fn = !0, ds = null, Oi = !1, l !== null && (Va[Ga++] = Ns, Va[Ga++] = Os, Va[Ga++] = So, Ns = l.id, Os = l.overflow, So = u)), u = cd(
              u,
              _.children
            ), u.flags |= 4096);
          return u;
        }
        return A ? (Oa(), A = _.fallback, $ = u.mode, de = l.child, D = de.sibling, _ = ls(de, {
          mode: "hidden",
          children: _.children
        }), _.subtreeFlags = de.subtreeFlags & 31457280, D !== null ? A = ls(D, A) : (A = ti(
          A,
          $,
          m,
          null
        ), A.flags |= 2), A.return = u, _.return = u, _.sibling = A, u.child = _, _ = A, A = u.child, $ = l.child.memoizedState, $ === null ? $ = ld(m) : (de = $.cachePool, de !== null ? (D = ca ? Gn._currentValue : Gn._currentValue2, de = de.parent !== D ? { parent: D, pool: D } : de) : de = md(), $ = {
          baseLanes: $.baseLanes | m,
          cachePool: de
        }), A.memoizedState = $, A.childLanes = Fc(
          l,
          X,
          m
        ), u.memoizedState = $f, _) : (Na(u), m = l.child, l = m.sibling, m = ls(m, {
          mode: "visible",
          children: _.children
        }), m.return = u, m.sibling = null, l !== null && (X = u.deletions, X === null ? (u.deletions = [l], u.flags |= 16) : X.push(l)), u.child = m, u.memoizedState = null, m);
      }
      function cd(l, u) {
        return u = ud(
          { mode: "visible", children: u },
          l.mode
        ), u.return = l, l.child = u;
      }
      function ud(l, u) {
        return su(l, u, 0, null);
      }
      function df(l, u, m) {
        return Eo(u, l.child, null, m), l = cd(
          u,
          u.pendingProps.children
        ), l.flags |= 2, u.memoizedState = null, l;
      }
      function Om(l, u, m) {
        l.lanes |= u;
        var _ = l.alternate;
        _ !== null && (_.lanes |= u), Xc(l.return, u, m);
      }
      function fd(l, u, m, _, A) {
        var D = l.memoizedState;
        D === null ? l.memoizedState = {
          isBackwards: u,
          rendering: null,
          renderingStartTime: 0,
          last: _,
          tail: m,
          tailMode: A
        } : (D.isBackwards = u, D.rendering = null, D.renderingStartTime = 0, D.last = _, D.tail = m, D.tailMode = A);
      }
      function Lm(l, u, m) {
        var _ = u.pendingProps, A = _.revealOrder, D = _.tail;
        if (Vi(l, u, _.children, m), _ = Ti.current, (_ & 2) !== 0)
          _ = _ & 1 | 2, u.flags |= 128;
        else {
          if (l !== null && (l.flags & 128) !== 0)
            e: for (l = u.child; l !== null; ) {
              if (l.tag === 13)
                l.memoizedState !== null && Om(l, m, u);
              else if (l.tag === 19)
                Om(l, m, u);
              else if (l.child !== null) {
                l.child.return = l, l = l.child;
                continue;
              }
              if (l === u) break e;
              for (; l.sibling === null; ) {
                if (l.return === null || l.return === u)
                  break e;
                l = l.return;
              }
              l.sibling.return = l.return, l = l.sibling;
            }
          _ &= 1;
        }
        switch (U(Ti, _), A) {
          case "forwards":
            for (m = u.child, A = null; m !== null; )
              l = m.alternate, l !== null && za(l) === null && (A = m), m = m.sibling;
            m = A, m === null ? (A = u.child, u.child = null) : (A = m.sibling, m.sibling = null), fd(
              u,
              !1,
              A,
              m,
              D
            );
            break;
          case "backwards":
            for (m = null, A = u.child, u.child = null; A !== null; ) {
              if (l = A.alternate, l !== null && za(l) === null) {
                u.child = A;
                break;
              }
              l = A.sibling, A.sibling = m, m = A, A = l;
            }
            fd(
              u,
              !0,
              m,
              null,
              D
            );
            break;
          case "together":
            fd(u, !1, null, null, void 0);
            break;
          default:
            u.memoizedState = null;
        }
        return u.child;
      }
      function yr(l, u, m) {
        if (l !== null && (u.dependencies = l.dependencies), Za |= u.lanes, (m & u.childLanes) === 0)
          if (l !== null) {
            if (qc(
              l,
              u,
              m,
              !1
            ), (m & u.childLanes) === 0)
              return null;
          } else return null;
        if (l !== null && u.child !== l.child)
          throw Error(r(153));
        if (u.child !== null) {
          for (l = u.child, m = ls(l, l.pendingProps), u.child = m, m.return = u; l.sibling !== null; )
            l = l.sibling, m = m.sibling = ls(l, l.pendingProps), m.return = u;
          m.sibling = null;
        }
        return u.child;
      }
      function hd(l, u) {
        return (l.lanes & u) !== 0 ? !0 : (l = l.dependencies, !!(l !== null && Yc(l)));
      }
      function _y(l, u, m) {
        switch (u.tag) {
          case 3:
            Ne(
              u,
              u.stateNode.containerInfo
            ), eo(u, Gn, l.memoizedState.cache), Ct();
            break;
          case 27:
          case 5:
            we(u);
            break;
          case 4:
            Ne(
              u,
              u.stateNode.containerInfo
            );
            break;
          case 10:
            eo(
              u,
              u.type,
              u.memoizedProps.value
            );
            break;
          case 13:
            var _ = u.memoizedState;
            if (_ !== null)
              return _.dehydrated !== null ? (Na(u), u.flags |= 128, null) : (m & u.child.childLanes) !== 0 ? Nm(
                l,
                u,
                m
              ) : (Na(u), l = yr(
                l,
                u,
                m
              ), l !== null ? l.sibling : null);
            Na(u);
            break;
          case 19:
            var A = (l.flags & 128) !== 0;
            if (_ = (m & u.childLanes) !== 0, _ || (qc(
              l,
              u,
              m,
              !1
            ), _ = (m & u.childLanes) !== 0), A) {
              if (_)
                return Lm(
                  l,
                  u,
                  m
                );
              u.flags |= 128;
            }
            if (A = u.memoizedState, A !== null && (A.rendering = null, A.tail = null, A.lastEffect = null), U(Ti, Ti.current), _) break;
            return null;
          case 22:
          case 23:
            return u.lanes = 0, Rm(l, u, m);
          case 24:
            eo(u, Gn, l.memoizedState.cache);
        }
        return yr(l, u, m);
      }
      function zm(l, u, m) {
        if (l !== null)
          if (l.memoizedProps !== u.pendingProps)
            zn = !0;
          else {
            if (!hd(l, m) && (u.flags & 128) === 0)
              return zn = !1, _y(
                l,
                u,
                m
              );
            zn = (l.flags & 131072) !== 0;
          }
        else
          zn = !1, fn && (u.flags & 1048576) !== 0 && te(u, Jl, u.index);
        switch (u.lanes = 0, u.tag) {
          case 16:
            e: {
              l = u.pendingProps;
              var _ = u.elementType, A = _._init;
              if (_ = A(_._payload), u.type = _, typeof _ == "function")
                iu(_) ? (l = gr(_, l), u.tag = 1, u = Dm(
                  null,
                  u,
                  _,
                  l,
                  m
                )) : (u.tag = 0, u = hf(
                  null,
                  u,
                  _,
                  l,
                  m
                ));
              else {
                if (_ != null) {
                  if (A = _.$$typeof, A === uu) {
                    u.tag = 11, u = ff(
                      null,
                      u,
                      _,
                      l,
                      m
                    );
                    break e;
                  } else if (A === Nf) {
                    u.tag = 14, u = Tm(
                      null,
                      u,
                      _,
                      l,
                      m
                    );
                    break e;
                  }
                }
                throw u = h(_) || _, Error(r(306, u, ""));
              }
            }
            return u;
          case 0:
            return hf(
              l,
              u,
              u.type,
              u.pendingProps,
              m
            );
          case 1:
            return _ = u.type, A = gr(
              _,
              u.pendingProps
            ), Dm(
              l,
              u,
              _,
              A,
              m
            );
          case 3:
            e: {
              if (Ne(
                u,
                u.stateNode.containerInfo
              ), l === null) throw Error(r(387));
              var D = u.pendingProps;
              A = u.memoizedState, _ = A.element, pt(l, u), Pt(u, D, null, m);
              var X = u.memoizedState;
              if (D = X.cache, eo(u, Gn, D), D !== A.cache && Xo(
                u,
                [Gn],
                m,
                !0
              ), nt(), D = X.element, Yi && A.isDehydrated)
                if (A = {
                  element: D,
                  isDehydrated: !1,
                  cache: X.cache
                }, u.updateQueue.baseState = A, u.memoizedState = A, u.flags & 256) {
                  u = Um(
                    l,
                    u,
                    D,
                    m
                  );
                  break e;
                } else if (D !== _) {
                  _ = fe(
                    Error(r(424)),
                    u
                  ), ee(_), u = Um(
                    l,
                    u,
                    D,
                    m
                  );
                  break e;
                } else
                  for (Yi && (Wi = dv(
                    u.stateNode.containerInfo
                  ), ki = u, fn = !0, ds = null, Oi = !0), m = tr(
                    u,
                    null,
                    D,
                    m
                  ), u.child = m; m; )
                    m.flags = m.flags & -3 | 4096, m = m.sibling;
              else {
                if (Ct(), D === _) {
                  u = yr(
                    l,
                    u,
                    m
                  );
                  break e;
                }
                Vi(l, u, D, m);
              }
              u = u.child;
            }
            return u;
          case 26:
            if (Ha)
              return Gc(l, u), l === null ? (m = Jd(
                u.type,
                null,
                u.pendingProps,
                null
              )) ? u.memoizedState = m : fn || (u.stateNode = qf(
                u.type,
                u.pendingProps,
                $s.current,
                u
              )) : u.memoizedState = Jd(
                u.type,
                l.memoizedProps,
                u.pendingProps,
                l.memoizedState
              ), null;
          case 27:
            if (On)
              return we(u), l === null && On && fn && (_ = u.stateNode = Us(
                u.type,
                u.pendingProps,
                $s.current,
                Ei.current,
                !1
              ), ki = u, Oi = !0, Wi = Vf(_)), _ = u.pendingProps.children, l !== null || fn ? Vi(
                l,
                u,
                _,
                m
              ) : u.child = Eo(
                u,
                null,
                _,
                m
              ), Gc(l, u), u.child;
          case 5:
            return l === null && fn && (Ff(
              u.type,
              u.pendingProps,
              Ei.current
            ), (A = _ = Wi) && (_ = Ay(
              _,
              u.type,
              u.pendingProps,
              Oi
            ), _ !== null ? (u.stateNode = _, ki = u, Wi = Vf(_), Oi = !1, A = !0) : A = !1), A || $e(u)), we(u), A = u.type, D = u.pendingProps, X = l !== null ? l.memoizedProps : null, _ = D.children, Wt(A, D) ? _ = null : X !== null && Wt(A, X) && (u.flags |= 32), u.memoizedState !== null && (A = Ys(
              l,
              u,
              vi,
              null,
              null,
              m
            ), ca ? Ds._currentValue = A : Ds._currentValue2 = A), Gc(l, u), Vi(l, u, _, m), u.child;
          case 6:
            return l === null && fn && (Sv(
              u.pendingProps,
              Ei.current
            ), (l = m = Wi) && (m = Qd(
              m,
              u.pendingProps,
              Oi
            ), m !== null ? (u.stateNode = m, ki = u, Wi = null, l = !0) : l = !1), l || $e(u)), null;
          case 13:
            return Nm(l, u, m);
          case 4:
            return Ne(
              u,
              u.stateNode.containerInfo
            ), _ = u.pendingProps, l === null ? u.child = Eo(
              u,
              null,
              _,
              m
            ) : Vi(
              l,
              u,
              _,
              m
            ), u.child;
          case 11:
            return ff(
              l,
              u,
              u.type,
              u.pendingProps,
              m
            );
          case 7:
            return Vi(
              l,
              u,
              u.pendingProps,
              m
            ), u.child;
          case 8:
            return Vi(
              l,
              u,
              u.pendingProps.children,
              m
            ), u.child;
          case 12:
            return Vi(
              l,
              u,
              u.pendingProps.children,
              m
            ), u.child;
          case 10:
            return _ = u.pendingProps, eo(
              u,
              u.type,
              _.value
            ), Vi(
              l,
              u,
              _.children,
              m
            ), u.child;
          case 9:
            return A = u.type._context, _ = u.pendingProps.children, to(u), A = Gi(A), _ = _(A), u.flags |= 1, Vi(
              l,
              u,
              _,
              m
            ), u.child;
          case 14:
            return Tm(
              l,
              u,
              u.type,
              u.pendingProps,
              m
            );
          case 15:
            return Am(
              l,
              u,
              u.type,
              u.pendingProps,
              m
            );
          case 19:
            return Lm(
              l,
              u,
              m
            );
          case 22:
            return Rm(l, u, m);
          case 24:
            return to(u), _ = Gi(Gn), l === null ? (A = pd(), A === null && (A = Tn, D = no(), A.pooledCache = D, D.refCount++, D !== null && (A.pooledCacheLanes |= m), A = D), u.memoizedState = {
              parent: _,
              cache: A
            }, dt(u), eo(u, Gn, A)) : ((l.lanes & m) !== 0 && (pt(l, u), Pt(u, null, null, m), nt()), A = l.memoizedState, D = u.memoizedState, A.parent !== _ ? (A = { parent: _, cache: _ }, u.memoizedState = A, u.lanes === 0 && (u.memoizedState = u.updateQueue.baseState = A), eo(u, Gn, _)) : (_ = D.cache, eo(u, Gn, _), _ !== A.cache && Xo(
              u,
              [Gn],
              m,
              !0
            ))), Vi(
              l,
              u,
              u.pendingProps.children,
              m
            ), u.child;
          case 29:
            throw u.pendingProps;
        }
        throw Error(r(156, u.tag));
      }
      function eo(l, u, m) {
        ca ? (U(Pr, u._currentValue), u._currentValue = m) : (U(Pr, u._currentValue2), u._currentValue2 = m);
      }
      function _r(l) {
        var u = Pr.current;
        ca ? l._currentValue = u : l._currentValue2 = u, E(Pr);
      }
      function Xc(l, u, m) {
        for (; l !== null; ) {
          var _ = l.alternate;
          if ((l.childLanes & u) !== u ? (l.childLanes |= u, _ !== null && (_.childLanes |= u)) : _ !== null && (_.childLanes & u) !== u && (_.childLanes |= u), l === m) break;
          l = l.return;
        }
      }
      function Xo(l, u, m, _) {
        var A = l.child;
        for (A !== null && (A.return = l); A !== null; ) {
          var D = A.dependencies;
          if (D !== null) {
            var X = A.child;
            D = D.firstContext;
            e: for (; D !== null; ) {
              var $ = D;
              D = A;
              for (var de = 0; de < u.length; de++)
                if ($.context === u[de]) {
                  D.lanes |= m, $ = D.alternate, $ !== null && ($.lanes |= m), Xc(
                    D.return,
                    m,
                    l
                  ), _ || (X = null);
                  break e;
                }
              D = $.next;
            }
          } else if (A.tag === 18) {
            if (X = A.return, X === null) throw Error(r(341));
            X.lanes |= m, D = X.alternate, D !== null && (D.lanes |= m), Xc(X, m, l), X = null;
          } else X = A.child;
          if (X !== null) X.return = A;
          else
            for (X = A; X !== null; ) {
              if (X === l) {
                X = null;
                break;
              }
              if (A = X.sibling, A !== null) {
                A.return = X.return, X = A;
                break;
              }
              X = X.return;
            }
          A = X;
        }
      }
      function qc(l, u, m, _) {
        l = null;
        for (var A = u, D = !1; A !== null; ) {
          if (!D) {
            if ((A.flags & 524288) !== 0) D = !0;
            else if ((A.flags & 262144) !== 0) break;
          }
          if (A.tag === 10) {
            var X = A.alternate;
            if (X === null) throw Error(r(387));
            if (X = X.memoizedProps, X !== null) {
              var $ = A.type;
              ba(A.pendingProps.value, X.value) || (l !== null ? l.push($) : l = [$]);
            }
          } else if (A === $o.current) {
            if (X = A.alternate, X === null) throw Error(r(387));
            X.memoizedState.memoizedState !== A.memoizedState.memoizedState && (l !== null ? l.push(Ds) : l = [Ds]);
          }
          A = A.return;
        }
        l !== null && Xo(
          u,
          l,
          m,
          _
        ), u.flags |= 262144;
      }
      function Yc(l) {
        for (l = l.firstContext; l !== null; ) {
          var u = l.context;
          if (!ba(
            ca ? u._currentValue : u._currentValue2,
            l.memoizedValue
          ))
            return !0;
          l = l.next;
        }
        return !1;
      }
      function to(l) {
        Bs = l, Ya = null, l = l.dependencies, l !== null && (l.firstContext = null);
      }
      function Gi(l) {
        return dd(Bs, l);
      }
      function kc(l, u) {
        return Bs === null && to(l), dd(l, u);
      }
      function dd(l, u) {
        var m = ca ? u._currentValue : u._currentValue2;
        if (u = { context: u, memoizedValue: m, next: null }, Ya === null) {
          if (l === null) throw Error(r(308));
          Ya = u, l.dependencies = { lanes: 0, firstContext: u }, l.flags |= 524288;
        } else Ya = Ya.next = u;
        return m;
      }
      function no() {
        return {
          controller: new ac(),
          data: /* @__PURE__ */ new Map(),
          refCount: 0
        };
      }
      function Wc(l) {
        l.refCount--, l.refCount === 0 && Uv(Nv, function() {
          l.controller.abort();
        });
      }
      function pd() {
        var l = ir.current;
        return l !== null ? l : Tn.pooledCache;
      }
      function pf(l, u) {
        u === null ? U(ir, ir.current) : U(ir, u.pool);
      }
      function md() {
        var l = pd();
        return l === null ? null : {
          parent: ca ? Gn._currentValue : Gn._currentValue2,
          pool: l
        };
      }
      function va(l) {
        l.flags |= 4;
      }
      function Nl(l, u) {
        if (l !== null && l.child === u.child) return !1;
        if ((u.flags & 16) !== 0) return !0;
        for (l = u.child; l !== null; ) {
          if ((l.flags & 13878) !== 0 || (l.subtreeFlags & 13878) !== 0)
            return !0;
          l = l.sibling;
        }
        return !1;
      }
      function qo(l, u, m, _) {
        if (bi)
          for (m = u.child; m !== null; ) {
            if (m.tag === 5 || m.tag === 6)
              hu(l, m.stateNode);
            else if (!(m.tag === 4 || On && m.tag === 27) && m.child !== null) {
              m.child.return = m, m = m.child;
              continue;
            }
            if (m === u) break;
            for (; m.sibling === null; ) {
              if (m.return === null || m.return === u)
                return;
              m = m.return;
            }
            m.sibling.return = m.return, m = m.sibling;
          }
        else if (fs)
          for (var A = u.child; A !== null; ) {
            if (A.tag === 5) {
              var D = A.stateNode;
              m && _ && (D = kd(
                D,
                A.type,
                A.memoizedProps
              )), hu(l, D);
            } else if (A.tag === 6)
              D = A.stateNode, m && _ && (D = Wd(
                D,
                A.memoizedProps
              )), hu(l, D);
            else if (A.tag !== 4) {
              if (A.tag === 22 && A.memoizedState !== null)
                D = A.child, D !== null && (D.return = A), qo(l, A, !0, !0);
              else if (A.child !== null) {
                A.child.return = A, A = A.child;
                continue;
              }
            }
            if (A === u) break;
            for (; A.sibling === null; ) {
              if (A.return === null || A.return === u)
                return;
              A = A.return;
            }
            A.sibling.return = A.return, A = A.sibling;
          }
      }
      function Bm(l, u, m, _) {
        if (fs)
          for (var A = u.child; A !== null; ) {
            if (A.tag === 5) {
              var D = A.stateNode;
              m && _ && (D = kd(
                D,
                A.type,
                A.memoizedProps
              )), Yd(l, D);
            } else if (A.tag === 6)
              D = A.stateNode, m && _ && (D = Wd(
                D,
                A.memoizedProps
              )), Yd(l, D);
            else if (A.tag !== 4) {
              if (A.tag === 22 && A.memoizedState !== null)
                D = A.child, D !== null && (D.return = A), Bm(
                  l,
                  A,
                  !(A.memoizedProps !== null && A.memoizedProps.mode === "manual"),
                  !0
                );
              else if (A.child !== null) {
                A.child.return = A, A = A.child;
                continue;
              }
            }
            if (A === u) break;
            for (; A.sibling === null; ) {
              if (A.return === null || A.return === u) return;
              A = A.return;
            }
            A.sibling.return = A.return, A = A.sibling;
          }
      }
      function Zc(l, u) {
        if (fs && Nl(l, u)) {
          l = u.stateNode;
          var m = l.containerInfo, _ = du();
          Bm(_, u, !1, !1), l.pendingChildren = _, va(u), Pf(m, _);
        }
      }
      function mf(l, u, m, _) {
        if (bi)
          l.memoizedProps !== _ && va(u);
        else if (fs) {
          var A = l.stateNode, D = l.memoizedProps;
          if ((l = Nl(l, u)) || D !== _) {
            var X = Ei.current;
            D = jl(
              A,
              m,
              D,
              _,
              !l,
              null
            ), D === A ? u.stateNode = A : (Dr(
              D,
              m,
              _,
              X
            ) && va(u), u.stateNode = D, l ? qo(D, u, !1, !1) : va(u));
          } else u.stateNode = A;
        }
      }
      function vf(l, u, m) {
        if (Pd(u, m)) {
          if (l.flags |= 16777216, !zf(u, m))
            if (lo()) l.flags |= 8192;
            else
              throw xo = Mu, xu;
        } else l.flags &= -16777217;
      }
      function gf(l, u) {
        if (bv(u)) {
          if (l.flags |= 16777216, !Zo(u))
            if (lo()) l.flags |= 8192;
            else
              throw xo = Mu, xu;
        } else l.flags &= -16777217;
      }
      function Ol(l, u) {
        u !== null && (l.flags |= 4), l.flags & 16384 && (u = l.tag !== 22 ? B() : 536870912, l.lanes |= u, rr |= u);
      }
      function Ll(l, u) {
        if (!fn)
          switch (l.tailMode) {
            case "hidden":
              u = l.tail;
              for (var m = null; u !== null; )
                u.alternate !== null && (m = u), u = u.sibling;
              m === null ? l.tail = null : m.sibling = null;
              break;
            case "collapsed":
              m = l.tail;
              for (var _ = null; m !== null; )
                m.alternate !== null && (_ = m), m = m.sibling;
              _ === null ? u || l.tail === null ? l.tail = null : l.tail.sibling = null : _.sibling = null;
          }
      }
      function Qn(l) {
        var u = l.alternate !== null && l.alternate.child === l.child, m = 0, _ = 0;
        if (u)
          for (var A = l.child; A !== null; )
            m |= A.lanes | A.childLanes, _ |= A.subtreeFlags & 31457280, _ |= A.flags & 31457280, A.return = l, A = A.sibling;
        else
          for (A = l.child; A !== null; )
            m |= A.lanes | A.childLanes, _ |= A.subtreeFlags, _ |= A.flags, A.return = l, A = A.sibling;
        return l.subtreeFlags |= _, l.childLanes = m, u;
      }
      function Pm(l, u, m) {
        var _ = u.pendingProps;
        switch (Re(u), u.tag) {
          case 16:
          case 15:
          case 0:
          case 11:
          case 7:
          case 8:
          case 12:
          case 9:
          case 14:
            return Qn(u), null;
          case 1:
            return Qn(u), null;
          case 3:
            return m = u.stateNode, _ = null, l !== null && (_ = l.memoizedState.cache), u.memoizedState.cache !== _ && (u.flags |= 2048), _r(Gn), he(), m.pendingContext && (m.context = m.pendingContext, m.pendingContext = null), (l === null || l.child === null) && (gn(u) ? va(u) : l === null || l.memoizedState.isDehydrated && (u.flags & 256) === 0 || (u.flags |= 1024, ds !== null && (tu(ds), ds = null))), Zc(l, u), Qn(u), null;
          case 26:
            if (Ha) {
              m = u.type;
              var A = u.memoizedState;
              return l === null ? (va(u), A !== null ? (Qn(u), gf(
                u,
                A
              )) : (Qn(u), vf(
                u,
                m,
                _
              ))) : A ? A !== l.memoizedState ? (va(u), Qn(u), gf(
                u,
                A
              )) : (Qn(u), u.flags &= -16777217) : (bi ? l.memoizedProps !== _ && va(u) : mf(
                l,
                u,
                m,
                _
              ), Qn(u), vf(
                u,
                m,
                _
              )), null;
            }
          case 27:
            if (On) {
              if (Fe(u), m = $s.current, A = u.type, l !== null && u.stateNode != null)
                bi ? l.memoizedProps !== _ && va(u) : mf(
                  l,
                  u,
                  A,
                  _
                );
              else {
                if (!_) {
                  if (u.stateNode === null)
                    throw Error(r(166));
                  return Qn(u), null;
                }
                l = Ei.current, gn(u) ? ut(u, l) : (l = Us(
                  A,
                  _,
                  m,
                  l,
                  !0
                ), u.stateNode = l, va(u));
              }
              return Qn(u), null;
            }
          case 5:
            if (Fe(u), m = u.type, l !== null && u.stateNode != null)
              mf(l, u, m, _);
            else {
              if (!_) {
                if (u.stateNode === null)
                  throw Error(r(166));
                return Qn(u), null;
              }
              l = Ei.current, gn(u) ? ut(u, l) : (A = Bd(
                m,
                _,
                $s.current,
                l,
                u
              ), qo(A, u, !1, !1), u.stateNode = A, Dr(
                A,
                m,
                _,
                l
              ) && va(u));
            }
            return Qn(u), vf(
              u,
              u.type,
              u.pendingProps
            ), null;
          case 6:
            if (l && u.stateNode != null)
              m = l.memoizedProps, bi ? m !== _ && va(u) : fs && (m !== _ ? (u.stateNode = wn(
                _,
                $s.current,
                Ei.current,
                u
              ), va(u)) : u.stateNode = l.stateNode);
            else {
              if (typeof _ != "string" && u.stateNode === null)
                throw Error(r(166));
              if (l = $s.current, m = Ei.current, gn(u)) {
                if (!Yi) throw Error(r(176));
                if (l = u.stateNode, m = u.memoizedProps, _ = null, A = ki, A !== null)
                  switch (A.tag) {
                    case 27:
                    case 5:
                      _ = A.memoizedProps;
                  }
                Kd(
                  l,
                  m,
                  u,
                  _
                ) || $e(u);
              } else
                u.stateNode = wn(
                  _,
                  l,
                  m,
                  u
                );
            }
            return Qn(u), null;
          case 13:
            if (_ = u.memoizedState, l === null || l.memoizedState !== null && l.memoizedState.dehydrated !== null) {
              if (A = gn(u), _ !== null && _.dehydrated !== null) {
                if (l === null) {
                  if (!A) throw Error(r(318));
                  if (!Yi) throw Error(r(344));
                  if (A = u.memoizedState, A = A !== null ? A.dehydrated : null, !A) throw Error(r(317));
                  gv(A, u);
                } else
                  Ct(), (u.flags & 128) === 0 && (u.memoizedState = null), u.flags |= 4;
                Qn(u), A = !1;
              } else
                ds !== null && (tu(ds), ds = null), A = !0;
              if (!A)
                return u.flags & 256 ? (La(u), u) : (La(u), null);
            }
            if (La(u), (u.flags & 128) !== 0)
              return u.lanes = m, u;
            if (m = _ !== null, l = l !== null && l.memoizedState !== null, m) {
              _ = u.child, A = null, _.alternate !== null && _.alternate.memoizedState !== null && _.alternate.memoizedState.cachePool !== null && (A = _.alternate.memoizedState.cachePool.pool);
              var D = null;
              _.memoizedState !== null && _.memoizedState.cachePool !== null && (D = _.memoizedState.cachePool.pool), D !== A && (_.flags |= 2048);
            }
            return m !== l && m && (u.child.flags |= 8192), Ol(u, u.updateQueue), Qn(u), null;
          case 4:
            return he(), Zc(l, u), l === null && oi(u.stateNode.containerInfo), Qn(u), null;
          case 10:
            return _r(u.type), Qn(u), null;
          case 19:
            if (E(Ti), A = u.memoizedState, A === null)
              return Qn(u), null;
            if (_ = (u.flags & 128) !== 0, D = A.rendering, D === null)
              if (_) Ll(A, !1);
              else {
                if (Bn !== 0 || l !== null && (l.flags & 128) !== 0)
                  for (l = u.child; l !== null; ) {
                    if (D = za(l), D !== null) {
                      for (u.flags |= 128, Ll(A, !1), l = D.updateQueue, u.updateQueue = l, Ol(u, l), u.subtreeFlags = 0, l = m, m = u.child; m !== null; )
                        au(m, l), m = m.sibling;
                      return U(
                        Ti,
                        Ti.current & 1 | 2
                      ), u.child;
                    }
                    l = l.sibling;
                  }
                A.tail !== null && hs() > oc && (u.flags |= 128, _ = !0, Ll(A, !1), u.lanes = 4194304);
              }
            else {
              if (!_)
                if (l = za(D), l !== null) {
                  if (u.flags |= 128, _ = !0, l = l.updateQueue, u.updateQueue = l, Ol(u, l), Ll(A, !0), A.tail === null && A.tailMode === "hidden" && !D.alternate && !fn)
                    return Qn(u), null;
                } else
                  2 * hs() - A.renderingStartTime > oc && m !== 536870912 && (u.flags |= 128, _ = !0, Ll(A, !1), u.lanes = 4194304);
              A.isBackwards ? (D.sibling = u.child, u.child = D) : (l = A.last, l !== null ? l.sibling = D : u.child = D, A.last = D);
            }
            return A.tail !== null ? (u = A.tail, A.rendering = u, A.tail = u.sibling, A.renderingStartTime = hs(), u.sibling = null, l = Ti.current, U(
              Ti,
              _ ? l & 1 | 2 : l & 1
            ), u) : (Qn(u), null);
          case 22:
          case 23:
            return La(u), as(), _ = u.memoizedState !== null, l !== null ? l.memoizedState !== null !== _ && (u.flags |= 8192) : _ && (u.flags |= 8192), _ ? (m & 536870912) !== 0 && (u.flags & 128) === 0 && (Qn(u), u.subtreeFlags & 6 && (u.flags |= 8192)) : Qn(u), m = u.updateQueue, m !== null && Ol(u, m.retryQueue), m = null, l !== null && l.memoizedState !== null && l.memoizedState.cachePool !== null && (m = l.memoizedState.cachePool.pool), _ = null, u.memoizedState !== null && u.memoizedState.cachePool !== null && (_ = u.memoizedState.cachePool.pool), _ !== m && (u.flags |= 2048), l !== null && E(ir), null;
          case 24:
            return m = null, l !== null && (m = l.memoizedState.cache), u.memoizedState.cache !== m && (u.flags |= 2048), _r(Gn), Qn(u), null;
          case 25:
            return null;
        }
        throw Error(r(156, u.tag));
      }
      function Sy(l, u) {
        switch (Re(u), u.tag) {
          case 1:
            return l = u.flags, l & 65536 ? (u.flags = l & -65537 | 128, u) : null;
          case 3:
            return _r(Gn), he(), l = u.flags, (l & 65536) !== 0 && (l & 128) === 0 ? (u.flags = l & -65537 | 128, u) : null;
          case 26:
          case 27:
          case 5:
            return Fe(u), null;
          case 13:
            if (La(u), l = u.memoizedState, l !== null && l.dehydrated !== null) {
              if (u.alternate === null)
                throw Error(r(340));
              Ct();
            }
            return l = u.flags, l & 65536 ? (u.flags = l & -65537 | 128, u) : null;
          case 19:
            return E(Ti), null;
          case 4:
            return he(), null;
          case 10:
            return _r(u.type), null;
          case 22:
          case 23:
            return La(u), as(), l !== null && E(ir), l = u.flags, l & 65536 ? (u.flags = l & -65537 | 128, u) : null;
          case 24:
            return _r(Gn), null;
          case 25:
            return null;
          default:
            return null;
        }
      }
      function Im(l, u) {
        switch (Re(u), u.tag) {
          case 3:
            _r(Gn), he();
            break;
          case 26:
          case 27:
          case 5:
            Fe(u);
            break;
          case 4:
            he();
            break;
          case 13:
            La(u);
            break;
          case 19:
            E(Ti);
            break;
          case 10:
            _r(u.type);
            break;
          case 22:
          case 23:
            La(u), as(), l !== null && E(ir);
            break;
          case 24:
            _r(Gn);
        }
      }
      function jc(l, u) {
        try {
          var m = u.updateQueue, _ = m !== null ? m.lastEffect : null;
          if (_ !== null) {
            var A = _.next;
            m = A;
            do {
              if ((m.tag & l) === l) {
                _ = void 0;
                var D = m.create, X = m.inst;
                _ = D(), X.destroy = _;
              }
              m = m.next;
            } while (m !== A);
          }
        } catch ($) {
          bn(u, u.return, $);
        }
      }
      function io(l, u, m) {
        try {
          var _ = u.updateQueue, A = _ !== null ? _.lastEffect : null;
          if (A !== null) {
            var D = A.next;
            _ = D;
            do {
              if ((_.tag & l) === l) {
                var X = _.inst, $ = X.destroy;
                if ($ !== void 0) {
                  X.destroy = void 0, A = u;
                  var de = m;
                  try {
                    $();
                  } catch (Oe) {
                    bn(
                      A,
                      de,
                      Oe
                    );
                  }
                }
              }
              _ = _.next;
            } while (_ !== D);
          }
        } catch (Oe) {
          bn(u, u.return, Oe);
        }
      }
      function Hm(l) {
        var u = l.updateQueue;
        if (u !== null) {
          var m = l.stateNode;
          try {
            ke(u, m);
          } catch (_) {
            bn(l, l.return, _);
          }
        }
      }
      function ga(l, u, m) {
        m.props = gr(
          l.type,
          l.memoizedProps
        ), m.state = l.memoizedState;
        try {
          m.componentWillUnmount();
        } catch (_) {
          bn(l, u, _);
        }
      }
      function Rs(l, u) {
        try {
          var m = l.ref;
          if (m !== null) {
            var _ = l.stateNode;
            switch (l.tag) {
              case 26:
              case 27:
              case 5:
                var A = kl(_);
                break;
              default:
                A = _;
            }
            typeof m == "function" ? l.refCleanup = m(A) : m.current = A;
          }
        } catch (D) {
          bn(l, u, D);
        }
      }
      function ya(l, u) {
        var m = l.ref, _ = l.refCleanup;
        if (m !== null)
          if (typeof _ == "function")
            try {
              _();
            } catch (A) {
              bn(l, u, A);
            } finally {
              l.refCleanup = null, l = l.alternate, l != null && (l.refCleanup = null);
            }
          else if (typeof m == "function")
            try {
              m(null);
            } catch (A) {
              bn(l, u, A);
            }
          else m.current = null;
      }
      function vd(l) {
        var u = l.type, m = l.memoizedProps, _ = l.stateNode;
        try {
          Ey(_, u, m, l);
        } catch (A) {
          bn(l, l.return, A);
        }
      }
      function gd(l, u, m) {
        try {
          nv(
            l.stateNode,
            l.type,
            m,
            u,
            l
          );
        } catch (_) {
          bn(l, l.return, _);
        }
      }
      function yd(l) {
        return l.tag === 5 || l.tag === 3 || (Ha ? l.tag === 26 : !1) || (On ? l.tag === 27 : !1) || l.tag === 4;
      }
      function Qc(l) {
        e: for (; ; ) {
          for (; l.sibling === null; ) {
            if (l.return === null || yd(l.return)) return null;
            l = l.return;
          }
          for (l.sibling.return = l.return, l = l.sibling; l.tag !== 5 && l.tag !== 6 && (!On || l.tag !== 27) && l.tag !== 18; ) {
            if (l.flags & 2 || l.child === null || l.tag === 4) continue e;
            l.child.return = l, l = l.child;
          }
          if (!(l.flags & 2)) return l.stateNode;
        }
      }
      function _d(l, u, m) {
        var _ = l.tag;
        if (_ === 5 || _ === 6)
          l = l.stateNode, u ? av(m, l, u) : Fd(m, l);
        else if (!(_ === 4 || On && _ === 27) && (l = l.child, l !== null))
          for (_d(l, u, m), l = l.sibling; l !== null; )
            _d(l, u, m), l = l.sibling;
      }
      function Sr(l, u, m) {
        var _ = l.tag;
        if (_ === 5 || _ === 6)
          l = l.stateNode, u ? iv(m, l, u) : ev(m, l);
        else if (!(_ === 4 || On && _ === 27) && (l = l.child, l !== null))
          for (Sr(l, u, m), l = l.sibling; l !== null; )
            Sr(l, u, m), l = l.sibling;
      }
      function yf(l, u, m) {
        l = l.containerInfo;
        try {
          Ql(l, m);
        } catch (_) {
          bn(u, u.return, _);
        }
      }
      function Kc(l, u) {
        for (Of(l.containerInfo), Xt = u; Xt !== null; )
          if (l = Xt, u = l.child, (l.subtreeFlags & 1028) !== 0 && u !== null)
            u.return = l, Xt = u;
          else
            for (; Xt !== null; ) {
              l = Xt;
              var m = l.alternate;
              switch (u = l.flags, l.tag) {
                case 0:
                  break;
                case 11:
                case 15:
                  break;
                case 1:
                  if ((u & 1024) !== 0 && m !== null) {
                    u = void 0;
                    var _ = l, A = m.memoizedProps;
                    m = m.memoizedState;
                    var D = _.stateNode;
                    try {
                      var X = gr(
                        _.type,
                        A,
                        _.elementType === _.type
                      );
                      u = D.getSnapshotBeforeUpdate(
                        X,
                        m
                      ), D.__reactInternalSnapshotBeforeUpdate = u;
                    } catch ($) {
                      bn(
                        _,
                        _.return,
                        $
                      );
                    }
                  }
                  break;
                case 3:
                  (u & 1024) !== 0 && bi && cv(l.stateNode.containerInfo);
                  break;
                case 5:
                case 26:
                case 27:
                case 6:
                case 4:
                case 17:
                  break;
                default:
                  if ((u & 1024) !== 0)
                    throw Error(r(163));
              }
              if (u = l.sibling, u !== null) {
                u.return = l.return, Xt = u;
                break;
              }
              Xt = l.return;
            }
        return X = an, an = !1, X;
      }
      function _f(l, u, m) {
        var _ = m.flags;
        switch (m.tag) {
          case 0:
          case 11:
          case 15:
            Mr(l, m), _ & 4 && jc(5, m);
            break;
          case 1:
            if (Mr(l, m), _ & 4)
              if (l = m.stateNode, u === null)
                try {
                  l.componentDidMount();
                } catch ($) {
                  bn(m, m.return, $);
                }
              else {
                var A = gr(
                  m.type,
                  u.memoizedProps
                );
                u = u.memoizedState;
                try {
                  l.componentDidUpdate(
                    A,
                    u,
                    l.__reactInternalSnapshotBeforeUpdate
                  );
                } catch ($) {
                  bn(
                    m,
                    m.return,
                    $
                  );
                }
              }
            _ & 64 && Hm(m), _ & 512 && Rs(m, m.return);
            break;
          case 3:
            if (Mr(l, m), _ & 64 && (_ = m.updateQueue, _ !== null)) {
              if (l = null, m.child !== null)
                switch (m.child.tag) {
                  case 27:
                  case 5:
                    l = kl(m.child.stateNode);
                    break;
                  case 1:
                    l = m.child.stateNode;
                }
              try {
                ke(_, l);
              } catch ($) {
                bn(m, m.return, $);
              }
            }
            break;
          case 26:
            if (Ha) {
              Mr(l, m), _ & 512 && Rs(m, m.return);
              break;
            }
          case 27:
          case 5:
            Mr(l, m), u === null && _ & 4 && vd(m), _ & 512 && Rs(m, m.return);
            break;
          case 12:
            Mr(l, m);
            break;
          case 13:
            Mr(l, m), _ & 4 && Sf(l, m);
            break;
          case 22:
            if (A = m.memoizedState !== null || ar, !A) {
              u = u !== null && u.memoizedState !== null || ii;
              var D = ar, X = ii;
              ar = A, (ii = u) && !X ? br(
                l,
                m,
                (m.subtreeFlags & 8772) !== 0
              ) : Mr(l, m), ar = D, ii = X;
            }
            _ & 512 && (m.memoizedProps.mode === "manual" ? Rs(m, m.return) : ya(m, m.return));
            break;
          default:
            Mr(l, m);
        }
      }
      function Sd(l) {
        var u = l.alternate;
        u !== null && (l.alternate = null, Sd(u)), l.child = null, l.deletions = null, l.sibling = null, l.tag === 5 && (u = l.stateNode, u !== null && by(u)), l.stateNode = null, l.return = null, l.dependencies = null, l.memoizedProps = null, l.memoizedState = null, l.pendingProps = null, l.stateNode = null, l.updateQueue = null;
      }
      function Fi(l, u, m) {
        for (m = m.child; m !== null; )
          ao(
            l,
            u,
            m
          ), m = m.sibling;
      }
      function ao(l, u, m) {
        if (Ma && typeof Ma.onCommitFiberUnmount == "function")
          try {
            Ma.onCommitFiberUnmount(ci, m);
          } catch {
          }
        switch (m.tag) {
          case 26:
            if (Ha) {
              ii || ya(m, u), Fi(
                l,
                u,
                m
              ), m.memoizedState ? Wo(m.memoizedState) : m.stateNode && Kl(m.stateNode);
              break;
            }
          case 27:
            if (On) {
              ii || ya(m, u);
              var _ = Rt, A = jt;
              Rt = m.stateNode, Fi(
                l,
                u,
                m
              ), yo(m.stateNode), Rt = _, jt = A;
              break;
            }
          case 5:
            ii || ya(m, u);
          case 6:
            if (bi) {
              if (_ = Rt, A = jt, Rt = null, Fi(
                l,
                u,
                m
              ), Rt = _, jt = A, Rt !== null)
                if (jt)
                  try {
                    sv(Rt, m.stateNode);
                  } catch (D) {
                    bn(
                      m,
                      u,
                      D
                    );
                  }
                else
                  try {
                    Xd(Rt, m.stateNode);
                  } catch (D) {
                    bn(
                      m,
                      u,
                      D
                    );
                  }
            } else
              Fi(
                l,
                u,
                m
              );
            break;
          case 18:
            bi && Rt !== null && (jt ? pu(
              Rt,
              m.stateNode
            ) : _v(Rt, m.stateNode));
            break;
          case 4:
            bi ? (_ = Rt, A = jt, Rt = m.stateNode.containerInfo, jt = !0, Fi(
              l,
              u,
              m
            ), Rt = _, jt = A) : (fs && yf(
              m.stateNode,
              m,
              du()
            ), Fi(
              l,
              u,
              m
            ));
            break;
          case 0:
          case 11:
          case 14:
          case 15:
            ii || io(2, m, u), ii || io(4, m, u), Fi(
              l,
              u,
              m
            );
            break;
          case 1:
            ii || (ya(m, u), _ = m.stateNode, typeof _.componentWillUnmount == "function" && ga(
              m,
              u,
              _
            )), Fi(
              l,
              u,
              m
            );
            break;
          case 21:
            Fi(
              l,
              u,
              m
            );
            break;
          case 22:
            ii || ya(m, u), ii = (_ = ii) || m.memoizedState !== null, Fi(
              l,
              u,
              m
            ), ii = _;
            break;
          default:
            Fi(
              l,
              u,
              m
            );
        }
      }
      function Sf(l, u) {
        if (Yi && u.memoizedState === null && (l = u.alternate, l !== null && (l = l.memoizedState, l !== null && (l = l.dehydrated, l !== null))))
          try {
            Cy(l);
          } catch (m) {
            bn(u, u.return, m);
          }
      }
      function Vm(l) {
        switch (l.tag) {
          case 13:
          case 19:
            var u = l.stateNode;
            return u === null && (u = l.stateNode = new En()), u;
          case 22:
            return l = l.stateNode, u = l._retryCache, u === null && (u = l._retryCache = new En()), u;
          default:
            throw Error(r(435, l.tag));
        }
      }
      function xr(l, u) {
        var m = Vm(l);
        u.forEach(function(_) {
          var A = fo.bind(null, l, _);
          m.has(_) || (m.add(_), _.then(A, A));
        });
      }
      function oa(l, u) {
        var m = u.deletions;
        if (m !== null)
          for (var _ = 0; _ < m.length; _++) {
            var A = m[_], D = l, X = u;
            if (bi) {
              var $ = X;
              e: for (; $ !== null; ) {
                switch ($.tag) {
                  case 27:
                  case 5:
                    Rt = $.stateNode, jt = !1;
                    break e;
                  case 3:
                    Rt = $.stateNode.containerInfo, jt = !0;
                    break e;
                  case 4:
                    Rt = $.stateNode.containerInfo, jt = !0;
                    break e;
                }
                $ = $.return;
              }
              if (Rt === null) throw Error(r(160));
              ao(D, X, A), Rt = null, jt = !1;
            } else ao(D, X, A);
            D = A.alternate, D !== null && (D.return = null), A.return = null;
          }
        if (u.subtreeFlags & 13878)
          for (u = u.child; u !== null; )
            xd(u, l), u = u.sibling;
      }
      function xd(l, u) {
        var m = l.alternate, _ = l.flags;
        switch (l.tag) {
          case 0:
          case 11:
          case 14:
          case 15:
            oa(u, l), _a(l), _ & 4 && (io(3, l, l.return), jc(3, l), io(5, l, l.return));
            break;
          case 1:
            oa(u, l), _a(l), _ & 512 && (ii || m === null || ya(m, m.return)), _ & 64 && ar && (l = l.updateQueue, l !== null && (_ = l.callbacks, _ !== null && (m = l.shared.hiddenCallbacks, l.shared.hiddenCallbacks = m === null ? _ : m.concat(_))));
            break;
          case 26:
            if (Ha) {
              var A = $n;
              oa(u, l), _a(l), _ & 512 && (ii || m === null || ya(m, m.return)), _ & 4 && (_ = m !== null ? m.memoizedState : null, u = l.memoizedState, m === null ? u === null ? l.stateNode === null ? l.stateNode = vu(
                A,
                l.type,
                l.memoizedProps,
                l
              ) : gu(
                A,
                l.type,
                l.stateNode
              ) : l.stateNode = xv(
                A,
                u,
                l.memoizedProps
              ) : _ !== u ? (_ === null ? m.stateNode !== null && Kl(m.stateNode) : Wo(_), u === null ? gu(
                A,
                l.type,
                l.stateNode
              ) : xv(
                A,
                u,
                l.memoizedProps
              )) : u === null && l.stateNode !== null && gd(
                l,
                l.memoizedProps,
                m.memoizedProps
              ));
              break;
            }
          case 27:
            if (On && _ & 4 && l.alternate === null) {
              A = l.stateNode;
              var D = l.memoizedProps;
              try {
                go(A), Tv(
                  l.type,
                  D,
                  A,
                  l
                );
              } catch (je) {
                bn(l, l.return, je);
              }
            }
          case 5:
            if (oa(u, l), _a(l), _ & 512 && (ii || m === null || ya(m, m.return)), bi) {
              if (l.flags & 32) {
                u = l.stateNode;
                try {
                  qd(u);
                } catch (je) {
                  bn(l, l.return, je);
                }
              }
              _ & 4 && l.stateNode != null && (u = l.memoizedProps, gd(
                l,
                u,
                m !== null ? m.memoizedProps : u
              )), _ & 1024 && (np = !0);
            }
            break;
          case 6:
            if (oa(u, l), _a(l), _ & 4 && bi) {
              if (l.stateNode === null)
                throw Error(r(162));
              _ = l.memoizedProps, m = m !== null ? m.memoizedProps : _, u = l.stateNode;
              try {
                tv(u, m, _);
              } catch (je) {
                bn(l, l.return, je);
              }
            }
            break;
          case 3:
            if (Ha ? (Mv(), A = $n, $n = Xf(u.containerInfo), oa(u, l), $n = A) : oa(u, l), _a(l), _ & 4) {
              if (bi && Yi && m !== null && m.memoizedState.isDehydrated)
                try {
                  Ry(u.containerInfo);
                } catch (je) {
                  bn(l, l.return, je);
                }
              if (fs) {
                _ = u.containerInfo, m = u.pendingChildren;
                try {
                  Ql(_, m);
                } catch (je) {
                  bn(l, l.return, je);
                }
              }
            }
            np && (np = !1, Gm(l));
            break;
          case 4:
            Ha ? (m = $n, $n = Xf(
              l.stateNode.containerInfo
            ), oa(u, l), _a(l), $n = m) : (oa(u, l), _a(l)), _ & 4 && fs && yf(
              l.stateNode,
              l,
              l.stateNode.pendingChildren
            );
            break;
          case 12:
            oa(u, l), _a(l);
            break;
          case 13:
            oa(u, l), _a(l), l.child.flags & 8192 && l.memoizedState !== null != (m !== null && m.memoizedState !== null) && (da = hs()), _ & 4 && (_ = l.updateQueue, _ !== null && (l.updateQueue = null, xr(l, _)));
            break;
          case 22:
            _ & 512 && (ii || m === null || ya(m, m.return)), A = l.memoizedState !== null;
            var X = m !== null && m.memoizedState !== null, $ = ar, de = ii;
            if (ar = $ || A, ii = de || X, oa(u, l), ii = de, ar = $, _a(l), u = l.stateNode, u._current = l, u._visibility &= -3, u._visibility |= u._pendingVisibility & 2, _ & 8192 && (u._visibility = A ? u._visibility & -2 : u._visibility | 1, A && (u = ar || ii, m === null || X || u || zl(l)), bi && (l.memoizedProps === null || l.memoizedProps.mode !== "manual"))) {
              e: if (m = null, bi)
                for (u = l; ; ) {
                  if (u.tag === 5 || Ha && u.tag === 26 || On && u.tag === 27) {
                    if (m === null) {
                      X = m = u;
                      try {
                        D = X.stateNode, A ? rv(D) : lv(
                          X.stateNode,
                          X.memoizedProps
                        );
                      } catch (je) {
                        bn(X, X.return, je);
                      }
                    }
                  } else if (u.tag === 6) {
                    if (m === null) {
                      X = u;
                      try {
                        var Oe = X.stateNode;
                        A ? ov(Oe) : Ty(Oe, X.memoizedProps);
                      } catch (je) {
                        bn(X, X.return, je);
                      }
                    }
                  } else if ((u.tag !== 22 && u.tag !== 23 || u.memoizedState === null || u === l) && u.child !== null) {
                    u.child.return = u, u = u.child;
                    continue;
                  }
                  if (u === l) break e;
                  for (; u.sibling === null; ) {
                    if (u.return === null || u.return === l)
                      break e;
                    m === u && (m = null), u = u.return;
                  }
                  m === u && (m = null), u.sibling.return = u.return, u = u.sibling;
                }
            }
            _ & 4 && (_ = l.updateQueue, _ !== null && (m = _.retryQueue, m !== null && (_.retryQueue = null, xr(l, m))));
            break;
          case 19:
            oa(u, l), _a(l), _ & 4 && (_ = l.updateQueue, _ !== null && (l.updateQueue = null, xr(l, _)));
            break;
          case 21:
            break;
          default:
            oa(u, l), _a(l);
        }
      }
      function _a(l) {
        var u = l.flags;
        if (u & 2) {
          try {
            if (bi && (!On || l.tag !== 27)) {
              e: {
                for (var m = l.return; m !== null; ) {
                  if (yd(m)) {
                    var _ = m;
                    break e;
                  }
                  m = m.return;
                }
                throw Error(r(160));
              }
              switch (_.tag) {
                case 27:
                  if (On) {
                    var A = _.stateNode, D = Qc(l);
                    Sr(
                      l,
                      D,
                      A
                    );
                    break;
                  }
                case 5:
                  var X = _.stateNode;
                  _.flags & 32 && (qd(X), _.flags &= -33);
                  var $ = Qc(l);
                  Sr(l, $, X);
                  break;
                case 3:
                case 4:
                  var de = _.stateNode.containerInfo, Oe = Qc(l);
                  _d(
                    l,
                    Oe,
                    de
                  );
                  break;
                default:
                  throw Error(r(161));
              }
            }
          } catch (je) {
            bn(l, l.return, je);
          }
          l.flags &= -3;
        }
        u & 4096 && (l.flags &= -4097);
      }
      function Gm(l) {
        if (l.subtreeFlags & 1024)
          for (l = l.child; l !== null; ) {
            var u = l;
            Gm(u), u.tag === 5 && u.flags & 1024 && Bf(u.stateNode), l = l.sibling;
          }
      }
      function Mr(l, u) {
        if (u.subtreeFlags & 8772)
          for (u = u.child; u !== null; )
            _f(l, u.alternate, u), u = u.sibling;
      }
      function zl(l) {
        for (l = l.child; l !== null; ) {
          var u = l;
          switch (u.tag) {
            case 0:
            case 11:
            case 14:
            case 15:
              io(4, u, u.return), zl(u);
              break;
            case 1:
              ya(u, u.return);
              var m = u.stateNode;
              typeof m.componentWillUnmount == "function" && ga(
                u,
                u.return,
                m
              ), zl(u);
              break;
            case 26:
            case 27:
            case 5:
              ya(u, u.return), zl(u);
              break;
            case 22:
              ya(u, u.return), u.memoizedState === null && zl(u);
              break;
            default:
              zl(u);
          }
          l = l.sibling;
        }
      }
      function br(l, u, m) {
        for (m = m && (u.subtreeFlags & 8772) !== 0, u = u.child; u !== null; ) {
          var _ = u.alternate, A = l, D = u, X = D.flags;
          switch (D.tag) {
            case 0:
            case 11:
            case 15:
              br(
                A,
                D,
                m
              ), jc(4, D);
              break;
            case 1:
              if (br(
                A,
                D,
                m
              ), _ = D, A = _.stateNode, typeof A.componentDidMount == "function")
                try {
                  A.componentDidMount();
                } catch (Oe) {
                  bn(_, _.return, Oe);
                }
              if (_ = D, A = _.updateQueue, A !== null) {
                var $ = _.stateNode;
                try {
                  var de = A.shared.hiddenCallbacks;
                  if (de !== null)
                    for (A.shared.hiddenCallbacks = null, A = 0; A < de.length; A++)
                      se(de[A], $);
                } catch (Oe) {
                  bn(_, _.return, Oe);
                }
              }
              m && X & 64 && Hm(D), Rs(D, D.return);
              break;
            case 26:
            case 27:
            case 5:
              br(
                A,
                D,
                m
              ), m && _ === null && X & 4 && vd(D), Rs(D, D.return);
              break;
            case 12:
              br(
                A,
                D,
                m
              );
              break;
            case 13:
              br(
                A,
                D,
                m
              ), m && X & 4 && Sf(A, D);
              break;
            case 22:
              D.memoizedState === null && br(
                A,
                D,
                m
              ), Rs(D, D.return);
              break;
            default:
              br(
                A,
                D,
                m
              );
          }
          u = u.sibling;
        }
      }
      function xf(l, u) {
        var m = null;
        l !== null && l.memoizedState !== null && l.memoizedState.cachePool !== null && (m = l.memoizedState.cachePool.pool), l = null, u.memoizedState !== null && u.memoizedState.cachePool !== null && (l = u.memoizedState.cachePool.pool), l !== m && (l != null && l.refCount++, m != null && Wc(m));
      }
      function Jc(l, u) {
        l = null, u.alternate !== null && (l = u.alternate.memoizedState.cache), u = u.memoizedState.cache, u !== l && (u.refCount++, l != null && Wc(l));
      }
      function Di(l, u, m, _) {
        if (u.subtreeFlags & 10256)
          for (u = u.child; u !== null; )
            Md(
              l,
              u,
              m,
              _
            ), u = u.sibling;
      }
      function Md(l, u, m, _) {
        var A = u.flags;
        switch (u.tag) {
          case 0:
          case 11:
          case 15:
            Di(
              l,
              u,
              m,
              _
            ), A & 2048 && jc(9, u);
            break;
          case 3:
            Di(
              l,
              u,
              m,
              _
            ), A & 2048 && (l = null, u.alternate !== null && (l = u.alternate.memoizedState.cache), u = u.memoizedState.cache, u !== l && (u.refCount++, l != null && Wc(l)));
            break;
          case 12:
            if (A & 2048) {
              Di(
                l,
                u,
                m,
                _
              ), l = u.stateNode;
              try {
                var D = u.memoizedProps, X = D.id, $ = D.onPostCommit;
                typeof $ == "function" && $(
                  X,
                  u.alternate === null ? "mount" : "update",
                  l.passiveEffectDuration,
                  -0
                );
              } catch (de) {
                bn(u, u.return, de);
              }
            } else
              Di(
                l,
                u,
                m,
                _
              );
            break;
          case 23:
            break;
          case 22:
            D = u.stateNode, u.memoizedState !== null ? D._visibility & 4 ? Di(
              l,
              u,
              m,
              _
            ) : $i(
              l,
              u
            ) : D._visibility & 4 ? Di(
              l,
              u,
              m,
              _
            ) : (D._visibility |= 4, Xi(
              l,
              u,
              m,
              _,
              (u.subtreeFlags & 10256) !== 0
            )), A & 2048 && xf(
              u.alternate,
              u
            );
            break;
          case 24:
            Di(
              l,
              u,
              m,
              _
            ), A & 2048 && Jc(u.alternate, u);
            break;
          default:
            Di(
              l,
              u,
              m,
              _
            );
        }
      }
      function Xi(l, u, m, _, A) {
        for (A = A && (u.subtreeFlags & 10256) !== 0, u = u.child; u !== null; ) {
          var D = l, X = u, $ = m, de = _, Oe = X.flags;
          switch (X.tag) {
            case 0:
            case 11:
            case 15:
              Xi(
                D,
                X,
                $,
                de,
                A
              ), jc(8, X);
              break;
            case 23:
              break;
            case 22:
              var je = X.stateNode;
              X.memoizedState !== null ? je._visibility & 4 ? Xi(
                D,
                X,
                $,
                de,
                A
              ) : $i(
                D,
                X
              ) : (je._visibility |= 4, Xi(
                D,
                X,
                $,
                de,
                A
              )), A && Oe & 2048 && xf(
                X.alternate,
                X
              );
              break;
            case 24:
              Xi(
                D,
                X,
                $,
                de,
                A
              ), A && Oe & 2048 && Jc(X.alternate, X);
              break;
            default:
              Xi(
                D,
                X,
                $,
                de,
                A
              );
          }
          u = u.sibling;
        }
      }
      function $i(l, u) {
        if (u.subtreeFlags & 10256)
          for (u = u.child; u !== null; ) {
            var m = l, _ = u, A = _.flags;
            switch (_.tag) {
              case 22:
                $i(m, _), A & 2048 && xf(
                  _.alternate,
                  _
                );
                break;
              case 24:
                $i(m, _), A & 2048 && Jc(
                  _.alternate,
                  _
                );
                break;
              default:
                $i(m, _);
            }
            u = u.sibling;
          }
      }
      function rs(l) {
        if (l.subtreeFlags & ka)
          for (l = l.child; l !== null; )
            Mf(l), l = l.sibling;
      }
      function Mf(l) {
        switch (l.tag) {
          case 26:
            rs(l), l.flags & ka && (l.memoizedState !== null ? Ev(
              $n,
              l.memoizedState,
              l.memoizedProps
            ) : ua(l.type, l.memoizedProps));
            break;
          case 5:
            rs(l), l.flags & ka && ua(l.type, l.memoizedProps);
            break;
          case 3:
          case 4:
            if (Ha) {
              var u = $n;
              $n = Xf(
                l.stateNode.containerInfo
              ), rs(l), $n = u;
            } else rs(l);
            break;
          case 22:
            l.memoizedState === null && (u = l.alternate, u !== null && u.memoizedState !== null ? (u = ka, ka = 16777216, rs(l), ka = u) : rs(l));
            break;
          default:
            rs(l);
        }
      }
      function $c(l) {
        var u = l.alternate;
        if (u !== null && (l = u.child, l !== null)) {
          u.child = null;
          do
            u = l.sibling, l.sibling = null, l = u;
          while (l !== null);
        }
      }
      function so(l) {
        var u = l.deletions;
        if ((l.flags & 16) !== 0) {
          if (u !== null)
            for (var m = 0; m < u.length; m++) {
              var _ = u[m];
              Xt = _, bd(
                _,
                l
              );
            }
          $c(l);
        }
        if (l.subtreeFlags & 10256)
          for (l = l.child; l !== null; )
            bf(l), l = l.sibling;
      }
      function bf(l) {
        switch (l.tag) {
          case 0:
          case 11:
          case 15:
            so(l), l.flags & 2048 && io(9, l, l.return);
            break;
          case 3:
            so(l);
            break;
          case 12:
            so(l);
            break;
          case 22:
            var u = l.stateNode;
            l.memoizedState !== null && u._visibility & 4 && (l.return === null || l.return.tag !== 13) ? (u._visibility &= -5, Er(l)) : so(l);
            break;
          default:
            so(l);
        }
      }
      function Er(l) {
        var u = l.deletions;
        if ((l.flags & 16) !== 0) {
          if (u !== null)
            for (var m = 0; m < u.length; m++) {
              var _ = u[m];
              Xt = _, bd(
                _,
                l
              );
            }
          $c(l);
        }
        for (l = l.child; l !== null; ) {
          switch (u = l, u.tag) {
            case 0:
            case 11:
            case 15:
              io(8, u, u.return), Er(u);
              break;
            case 22:
              m = u.stateNode, m._visibility & 4 && (m._visibility &= -5, Er(u));
              break;
            default:
              Er(u);
          }
          l = l.sibling;
        }
      }
      function bd(l, u) {
        for (; Xt !== null; ) {
          var m = Xt;
          switch (m.tag) {
            case 0:
            case 11:
            case 15:
              io(8, m, u);
              break;
            case 23:
            case 22:
              if (m.memoizedState !== null && m.memoizedState.cachePool !== null) {
                var _ = m.memoizedState.cachePool.pool;
                _ != null && _.refCount++;
              }
              break;
            case 24:
              Wc(m.memoizedState.cache);
          }
          if (_ = m.child, _ !== null) _.return = m, Xt = _;
          else
            e: for (m = l; Xt !== null; ) {
              _ = Xt;
              var A = _.sibling, D = _.return;
              if (Sd(_), _ === m) {
                Xt = null;
                break e;
              }
              if (A !== null) {
                A.return = D, Xt = A;
                break e;
              }
              Xt = D;
            }
        }
      }
      function Bl(l) {
        var u = Wm(l);
        if (u != null) {
          if (typeof u.memoizedProps["data-testname"] != "string")
            throw Error(r(364));
          return u;
        }
        if (l = Vd(l), l === null) throw Error(r(362));
        return l.stateNode.current;
      }
      function ro(l, u) {
        var m = l.tag;
        switch (u.$$typeof) {
          case rc:
            if (l.type === u.value) return !0;
            break;
          case vs:
            e: {
              for (u = u.value, l = [l, 0], m = 0; m < l.length; ) {
                var _ = l[m++], A = _.tag, D = l[m++], X = u[D];
                if (A !== 5 && A !== 26 && A !== 27 || !Zl(_)) {
                  for (; X != null && ro(_, X); )
                    D++, X = u[D];
                  if (D === u.length) {
                    u = !0;
                    break e;
                  } else
                    for (_ = _.child; _ !== null; )
                      l.push(_, D), _ = _.sibling;
                }
              }
              u = !1;
            }
            return u;
          case Wn:
            if ((m === 5 || m === 26 || m === 27) && Km(l.stateNode, u.value))
              return !0;
            break;
          case sr:
            if ((m === 5 || m === 6 || m === 26 || m === 27) && (l = Qm(l), l !== null && 0 <= l.indexOf(u.value)))
              return !0;
            break;
          case Ps:
            if ((m === 5 || m === 26 || m === 27) && (l = l.memoizedProps["data-testname"], typeof l == "string" && l.toLowerCase() === u.value.toLowerCase()))
              return !0;
            break;
          default:
            throw Error(r(365));
        }
        return !1;
      }
      function Ed(l) {
        switch (l.$$typeof) {
          case rc:
            return "<" + (h(l.value) || "Unknown") + ">";
          case vs:
            return ":has(" + (Ed(l) || "") + ")";
          case Wn:
            return '[role="' + l.value + '"]';
          case sr:
            return '"' + l.value + '"';
          case Ps:
            return '[data-testname="' + l.value + '"]';
          default:
            throw Error(r(365));
        }
      }
      function Sa(l, u) {
        var m = [];
        l = [l, 0];
        for (var _ = 0; _ < l.length; ) {
          var A = l[_++], D = A.tag, X = l[_++], $ = u[X];
          if (D !== 5 && D !== 26 && D !== 27 || !Zl(A)) {
            for (; $ != null && ro(A, $); )
              X++, $ = u[X];
            if (X === u.length) m.push(A);
            else
              for (A = A.child; A !== null; )
                l.push(A, X), A = A.sibling;
          }
        }
        return m;
      }
      function eu(l, u) {
        if (!vo) throw Error(r(363));
        l = Bl(l), l = Sa(l, u), u = [], l = Array.from(l);
        for (var m = 0; m < l.length; ) {
          var _ = l[m++], A = _.tag;
          if (A === 5 || A === 26 || A === 27)
            Zl(_) || u.push(_.stateNode);
          else
            for (_ = _.child; _ !== null; )
              l.push(_), _ = _.sibling;
        }
        return u;
      }
      function ri() {
        if ((pn & 2) !== 0 && on !== 0)
          return on & -on;
        if (It.T !== null) {
          var l = Fa;
          return l !== 0 ? l : ze();
        }
        return Zm();
      }
      function Td() {
        ja === 0 && (ja = (on & 536870912) === 0 || fn ? k() : 536870912);
        var l = Xa.current;
        return l !== null && (l.flags |= 32), ja;
      }
      function Ui(l, u, m) {
        (l === Tn && Un === 2 || l.cancelPendingCommit !== null) && (qi(l, 0), xa(
          l,
          on,
          ja,
          !1
        )), W(l, m), ((pn & 2) === 0 || l !== Tn) && (l === Tn && ((pn & 2) === 0 && (Ir |= m), Bn === 4 && xa(
          l,
          on,
          ja,
          !1
        )), Ze(l));
      }
      function oo(l, u, m) {
        if ((pn & 6) !== 0) throw Error(r(327));
        var _ = !m && (u & 60) === 0 && (u & l.expiredLanes) === 0 || V(l, u), A = _ ? Rd(l, u) : Tf(l, u, !0), D = _;
        do {
          if (A === 0) {
            Wa && !_ && xa(l, u, 0, !1);
            break;
          } else if (A === 6)
            xa(
              l,
              u,
              0,
              !ys
            );
          else {
            if (m = l.current.alternate, D && !Pl(m)) {
              A = Tf(l, u, !1), D = !1;
              continue;
            }
            if (A === 2) {
              if (D = u, l.errorRecoveryDisabledLanes & D)
                var X = 0;
              else
                X = l.pendingLanes & -536870913, X = X !== 0 ? X : X & 536870912 ? 536870912 : 0;
              if (X !== 0) {
                u = X;
                e: {
                  var $ = l;
                  A = ll;
                  var de = Yi && $.current.memoizedState.isDehydrated;
                  if (de && (qi($, X).flags |= 256), X = Tf(
                    $,
                    X,
                    !1
                  ), X !== 2) {
                    if (Ai && !de) {
                      $.errorRecoveryDisabledLanes |= D, Ir |= D, A = 4;
                      break e;
                    }
                    D = ai, ai = A, D !== null && tu(D);
                  }
                  A = X;
                }
                if (D = !1, A !== 2) continue;
              }
            }
            if (A === 1) {
              qi(l, 0), xa(l, u, 0, !0);
              break;
            }
            e: {
              switch (_ = l, A) {
                case 0:
                case 1:
                  throw Error(r(345));
                case 4:
                  if ((u & 4194176) === u) {
                    xa(
                      _,
                      u,
                      ja,
                      !ys
                    );
                    break e;
                  }
                  break;
                case 2:
                  ai = null;
                  break;
                case 3:
                case 5:
                  break;
                default:
                  throw Error(r(329));
              }
              if (_.finishedWork = m, _.finishedLanes = u, (u & 62914560) === u && (D = da + 300 - hs(), 10 < D)) {
                if (xa(
                  _,
                  u,
                  ja,
                  !ys
                ), I(_, 0) !== 0) break e;
                _.timeoutHandle = yi(
                  Ef.bind(
                    null,
                    _,
                    m,
                    ai,
                    Eu,
                    eh,
                    u,
                    ja,
                    Ir,
                    rr,
                    ys,
                    2,
                    -0,
                    0
                  ),
                  D
                );
                break e;
              }
              Ef(
                _,
                m,
                ai,
                Eu,
                eh,
                u,
                ja,
                Ir,
                rr,
                ys,
                0,
                -0,
                0
              );
            }
          }
          break;
        } while (!0);
        Ze(l);
      }
      function tu(l) {
        ai === null ? ai = l : ai.push.apply(
          ai,
          l
        );
      }
      function Ef(l, u, m, _, A, D, X, $, de, Oe, je, st, ot) {
        var qt = u.subtreeFlags;
        if ((qt & 8192 || (qt & 16785408) === 16785408) && (Id(), Mf(u), u = _i(), u !== null)) {
          l.cancelPendingCommit = u(
            co.bind(
              null,
              l,
              m,
              _,
              A,
              X,
              $,
              de,
              1,
              st,
              ot
            )
          ), xa(l, D, X, !Oe);
          return;
        }
        co(
          l,
          m,
          _,
          A,
          X,
          $,
          de,
          je,
          st,
          ot
        );
      }
      function Pl(l) {
        for (var u = l; ; ) {
          var m = u.tag;
          if ((m === 0 || m === 11 || m === 15) && u.flags & 16384 && (m = u.updateQueue, m !== null && (m = m.stores, m !== null)))
            for (var _ = 0; _ < m.length; _++) {
              var A = m[_], D = A.getSnapshot;
              A = A.value;
              try {
                if (!ba(D(), A)) return !1;
              } catch {
                return !1;
              }
            }
          if (m = u.child, u.subtreeFlags & 16384 && m !== null)
            m.return = u, u = m;
          else {
            if (u === l) break;
            for (; u.sibling === null; ) {
              if (u.return === null || u.return === l) return !0;
              u = u.return;
            }
            u.sibling.return = u.return, u = u.sibling;
          }
        }
        return !0;
      }
      function xa(l, u, m, _) {
        u &= ~bu, u &= ~Ir, l.suspendedLanes |= u, l.pingedLanes &= ~u, _ && (l.warmLanes |= u), _ = l.expirationTimes;
        for (var A = u; 0 < A; ) {
          var D = 31 - fa(A), X = 1 << D;
          _[D] = -1, A &= ~X;
        }
        m !== 0 && ae(l, m, u);
      }
      function nu() {
        return (pn & 6) === 0 ? (At(0), !1) : !0;
      }
      function Il() {
        if (Nt !== null) {
          if (Un === 0)
            var l = Nt.return;
          else
            l = Nt, Ya = Bs = null, F(l), Mo = null, bo = 0, l = Nt;
          for (; l !== null; )
            Im(l.alternate, l), l = l.return;
          Nt = null;
        }
      }
      function qi(l, u) {
        l.finishedWork = null, l.finishedLanes = 0;
        var m = l.timeoutHandle;
        m !== po && (l.timeoutHandle = po, Lf(m)), m = l.cancelPendingCommit, m !== null && (l.cancelPendingCommit = null, m()), Il(), Tn = l, Nt = m = ls(l.current, null), on = u, Un = 0, ta = null, ys = !1, Wa = V(l, u), Ai = !1, rr = ja = bu = Ir = Za = Bn = 0, ai = ll = null, eh = !1, (u & 8) !== 0 && (u |= u & 32);
        var _ = l.entangledLanes;
        if (_ !== 0)
          for (l = l.entanglements, _ &= u; 0 < _; ) {
            var A = 31 - fa(_), D = 1 << A;
            u |= l[A], _ &= ~D;
          }
        return na = u, He(), m;
      }
      function Ba(l, u) {
        Jt = null, It.H = ni, u === nc ? (u = vt(), Un = 3) : u === xu ? (u = vt(), Un = 4) : Un = u === Jf ? 8 : u !== null && typeof u == "object" && typeof u.then == "function" ? 6 : 1, ta = u, Nt === null && (Bn = 1, wl(
          l,
          fe(u, l.current)
        ));
      }
      function lo() {
        var l = Xa.current;
        return l === null ? !0 : (on & 4194176) === on ? Ln === null : (on & 62914560) === on || (on & 536870912) !== 0 ? l === Ln : !1;
      }
      function Ws() {
        var l = It.H;
        return It.H = ni, l === null ? ni : l;
      }
      function Zs() {
        var l = It.A;
        return It.A = sc, l;
      }
      function Tr() {
        Bn = 4, ys || (on & 4194176) !== on && Xa.current !== null || (Wa = !0), (Za & 134217727) === 0 && (Ir & 134217727) === 0 || Tn === null || xa(
          Tn,
          on,
          ja,
          !1
        );
      }
      function Tf(l, u, m) {
        var _ = pn;
        pn |= 2;
        var A = Ws(), D = Zs();
        (Tn !== l || on !== u) && (Eu = null, qi(l, u)), u = !1;
        var X = Bn;
        e: do
          try {
            if (Un !== 0 && Nt !== null) {
              var $ = Nt, de = ta;
              switch (Un) {
                case 8:
                  Il(), X = 6;
                  break e;
                case 3:
                case 2:
                case 6:
                  Xa.current === null && (u = !0);
                  var Oe = Un;
                  if (Un = 0, ta = null, os(l, $, de, Oe), m && Wa) {
                    X = 0;
                    break e;
                  }
                  break;
                default:
                  Oe = Un, Un = 0, ta = null, os(l, $, de, Oe);
              }
            }
            Ad(), X = Bn;
            break;
          } catch (je) {
            Ba(l, je);
          }
        while (!0);
        return u && l.shellSuspendCounter++, Ya = Bs = null, pn = _, It.H = A, It.A = D, Nt === null && (Tn = null, on = 0, He()), X;
      }
      function Ad() {
        for (; Nt !== null; ) Jn(Nt);
      }
      function Rd(l, u) {
        var m = pn;
        pn |= 2;
        var _ = Ws(), A = Zs();
        Tn !== l || on !== u ? (Eu = null, oc = hs() + 500, qi(l, u)) : Wa = V(
          l,
          u
        );
        e: do
          try {
            if (Un !== 0 && Nt !== null) {
              u = Nt;
              var D = ta;
              t: switch (Un) {
                case 1:
                  Un = 0, ta = null, os(l, u, D, 1);
                  break;
                case 2:
                  if (ct(D)) {
                    Un = 0, ta = null, yn(u);
                    break;
                  }
                  u = function() {
                    Un === 2 && Tn === l && (Un = 7), Ze(l);
                  }, D.then(u, u);
                  break e;
                case 3:
                  Un = 7;
                  break e;
                case 4:
                  Un = 5;
                  break e;
                case 7:
                  ct(D) ? (Un = 0, ta = null, yn(u)) : (Un = 0, ta = null, os(l, u, D, 7));
                  break;
                case 5:
                  var X = null;
                  switch (Nt.tag) {
                    case 26:
                      X = Nt.memoizedState;
                    case 5:
                    case 27:
                      var $ = Nt, de = $.type, Oe = $.pendingProps;
                      if (X ? Zo(X) : zf(de, Oe)) {
                        Un = 0, ta = null;
                        var je = $.sibling;
                        if (je !== null) Nt = je;
                        else {
                          var st = $.return;
                          st !== null ? (Nt = st, Pa(st)) : Nt = null;
                        }
                        break t;
                      }
                  }
                  Un = 0, ta = null, os(l, u, D, 5);
                  break;
                case 6:
                  Un = 0, ta = null, os(l, u, D, 6);
                  break;
                case 8:
                  Il(), Bn = 6;
                  break e;
                default:
                  throw Error(r(462));
              }
            }
            la();
            break;
          } catch (ot) {
            Ba(l, ot);
          }
        while (!0);
        return Ya = Bs = null, It.H = _, It.A = A, pn = m, Nt !== null ? 0 : (Tn = null, on = 0, He(), Bn);
      }
      function la() {
        for (; Nt !== null && !Cv(); )
          Jn(Nt);
      }
      function Jn(l) {
        var u = zm(
          l.alternate,
          l,
          na
        );
        l.memoizedProps = l.pendingProps, u === null ? Pa(l) : Nt = u;
      }
      function yn(l) {
        var u = l, m = u.alternate;
        switch (u.tag) {
          case 15:
          case 0:
            u = wm(
              m,
              u,
              u.pendingProps,
              u.type,
              void 0,
              on
            );
            break;
          case 11:
            u = wm(
              m,
              u,
              u.pendingProps,
              u.type.render,
              u.ref,
              on
            );
            break;
          case 5:
            F(u);
          default:
            Im(m, u), u = Nt = au(u, na), u = zm(m, u, na);
        }
        l.memoizedProps = l.pendingProps, u === null ? Pa(l) : Nt = u;
      }
      function os(l, u, m, _) {
        Ya = Bs = null, F(u), Mo = null, bo = 0;
        var A = u.return;
        try {
          if (yy(
            l,
            A,
            u,
            m,
            on
          )) {
            Bn = 1, wl(
              l,
              fe(m, l.current)
            ), Nt = null;
            return;
          }
        } catch (D) {
          if (A !== null) throw Nt = A, D;
          Bn = 1, wl(
            l,
            fe(m, l.current)
          ), Nt = null;
          return;
        }
        u.flags & 32768 ? (fn || _ === 1 ? l = !0 : Wa || (on & 536870912) !== 0 ? l = !1 : (ys = l = !0, (_ === 2 || _ === 3 || _ === 6) && (_ = Xa.current, _ !== null && _.tag === 13 && (_.flags |= 16384))), Af(u, l)) : Pa(u);
      }
      function Pa(l) {
        var u = l;
        do {
          if ((u.flags & 32768) !== 0) {
            Af(
              u,
              ys
            );
            return;
          }
          l = u.return;
          var m = Pm(
            u.alternate,
            u,
            na
          );
          if (m !== null) {
            Nt = m;
            return;
          }
          if (u = u.sibling, u !== null) {
            Nt = u;
            return;
          }
          Nt = u = l;
        } while (u !== null);
        Bn === 0 && (Bn = 5);
      }
      function Af(l, u) {
        do {
          var m = Sy(l.alternate, l);
          if (m !== null) {
            m.flags &= 32767, Nt = m;
            return;
          }
          if (m = l.return, m !== null && (m.flags |= 32768, m.subtreeFlags = 0, m.deletions = null), !u && (l = l.sibling, l !== null)) {
            Nt = l;
            return;
          }
          Nt = l = m;
        } while (l !== null);
        Bn = 6, Nt = null;
      }
      function co(l, u, m, _, A, D, X, $, de, Oe) {
        var je = It.T, st = Ur();
        try {
          ea(2), It.T = null, Fm(
            l,
            u,
            m,
            _,
            st,
            A,
            D,
            X,
            $,
            de,
            Oe
          );
        } finally {
          It.T = je, ea(st);
        }
      }
      function Fm(l, u, m, _, A, D, X, $) {
        do
          Cs();
        while (or !== null);
        if ((pn & 6) !== 0) throw Error(r(327));
        var de = l.finishedWork;
        if (_ = l.finishedLanes, de === null) return null;
        if (l.finishedWork = null, l.finishedLanes = 0, de === l.current) throw Error(r(177));
        l.callbackNode = null, l.callbackPriority = 0, l.cancelPendingCommit = null;
        var Oe = de.lanes | de.childLanes;
        if (Oe |= Ls, le(
          l,
          _,
          Oe,
          D,
          X,
          $
        ), l === Tn && (Nt = Tn = null, on = 0), (de.subtreeFlags & 10256) === 0 && (de.flags & 10256) === 0 || Is || (Is = !0, Co = Oe, th = m, Rr(Zf, function() {
          return Cs(), null;
        })), m = (de.flags & 15990) !== 0, (de.subtreeFlags & 15990) !== 0 || m ? (m = It.T, It.T = null, D = Ur(), ea(2), X = pn, pn |= 4, Kc(l, de), xd(de, l), km(l.containerInfo), l.current = de, _f(l, de.alternate, de), kf(), pn = X, ea(D), It.T = m) : l.current = de, Is ? (Is = !1, or = l, cl = _) : Cd(l, Oe), Oe = l.pendingLanes, Oe === 0 && (Ro = null), P(de.stateNode), Ze(l), u !== null)
          for (A = l.onRecoverableError, de = 0; de < u.length; de++)
            Oe = u[de], A(Oe.value, {
              componentStack: Oe.stack
            });
        return (cl & 3) !== 0 && Cs(), Oe = l.pendingLanes, (_ & 4194218) !== 0 && (Oe & 42) !== 0 ? l === nh ? lc++ : (lc = 0, nh = l) : lc = 0, At(0), null;
      }
      function Cd(l, u) {
        (l.pooledCacheLanes &= u) === 0 && (u = l.pooledCache, u != null && (l.pooledCache = null, Wc(u)));
      }
      function Cs() {
        if (or !== null) {
          var l = or, u = Co;
          Co = 0;
          var m = pe(cl), _ = 32 > m ? 32 : m;
          m = It.T;
          var A = Ur();
          try {
            if (ea(_), It.T = null, or === null)
              var D = !1;
            else {
              _ = th, th = null;
              var X = or, $ = cl;
              if (or = null, cl = 0, (pn & 6) !== 0)
                throw Error(r(331));
              var de = pn;
              if (pn |= 4, bf(X.current), Md(
                X,
                X.current,
                $,
                _
              ), pn = de, At(0, !1), Ma && typeof Ma.onPostCommitFiberRoot == "function")
                try {
                  Ma.onPostCommitFiberRoot(ci, X);
                } catch {
                }
              D = !0;
            }
            return D;
          } finally {
            ea(A), It.T = m, Cd(l, u);
          }
        }
        return !1;
      }
      function Hl(l, u, m) {
        u = fe(m, u), u = Ul(l.stateNode, u, 2), l = tt(l, u, 2), l !== null && (W(l, 2), Ze(l));
      }
      function bn(l, u, m) {
        if (l.tag === 3)
          Hl(l, l, m);
        else
          for (; u !== null; ) {
            if (u.tag === 3) {
              Hl(
                u,
                l,
                m
              );
              break;
            } else if (u.tag === 1) {
              var _ = u.stateNode;
              if (typeof u.type.getDerivedStateFromError == "function" || typeof _.componentDidCatch == "function" && (Ro === null || !Ro.has(_))) {
                l = fe(m, l), m = od(2), _ = tt(u, m, 2), _ !== null && (Em(
                  m,
                  _,
                  u,
                  l
                ), W(_, 2), Ze(_));
                break;
              }
            }
            u = u.return;
          }
      }
      function Yo(l, u, m) {
        var _ = l.pingCache;
        if (_ === null) {
          _ = l.pingCache = new gs();
          var A = /* @__PURE__ */ new Set();
          _.set(u, A);
        } else
          A = _.get(u), A === void 0 && (A = /* @__PURE__ */ new Set(), _.set(u, A));
        A.has(m) || (Ai = !0, A.add(m), l = wd.bind(null, l, u, m), u.then(l, l));
      }
      function wd(l, u, m) {
        var _ = l.pingCache;
        _ !== null && _.delete(u), l.pingedLanes |= l.suspendedLanes & m, l.warmLanes &= ~m, Tn === l && (on & m) === m && (Bn === 4 || Bn === 3 && (on & 62914560) === on && 300 > hs() - da ? (pn & 2) === 0 && qi(l, 0) : bu |= m, rr === on && (rr = 0)), Ze(l);
      }
      function uo(l, u) {
        u === 0 && (u = B()), l = Ce(l, u), l !== null && (W(l, u), Ze(l));
      }
      function Ar(l) {
        var u = l.memoizedState, m = 0;
        u !== null && (m = u.retryLane), uo(l, m);
      }
      function fo(l, u) {
        var m = 0;
        switch (l.tag) {
          case 13:
            var _ = l.stateNode, A = l.memoizedState;
            A !== null && (m = A.retryLane);
            break;
          case 19:
            _ = l.stateNode;
            break;
          case 22:
            _ = l.stateNode._retryCache;
            break;
          default:
            throw Error(r(314));
        }
        _ !== null && _.delete(u), uo(l, m);
      }
      function Rr(l, u) {
        return yu(l, u);
      }
      function Dd(l, u, m, _) {
        this.tag = l, this.key = m, this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null, this.index = 0, this.refCleanup = this.ref = null, this.pendingProps = u, this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null, this.mode = _, this.subtreeFlags = this.flags = 0, this.deletions = null, this.childLanes = this.lanes = 0, this.alternate = null;
      }
      function iu(l) {
        return l = l.prototype, !(!l || !l.isReactComponent);
      }
      function ls(l, u) {
        var m = l.alternate;
        return m === null ? (m = n(
          l.tag,
          u,
          l.key,
          l.mode
        ), m.elementType = l.elementType, m.type = l.type, m.stateNode = l.stateNode, m.alternate = l, l.alternate = m) : (m.pendingProps = u, m.type = l.type, m.flags = 0, m.subtreeFlags = 0, m.deletions = null), m.flags = l.flags & 31457280, m.childLanes = l.childLanes, m.lanes = l.lanes, m.child = l.child, m.memoizedProps = l.memoizedProps, m.memoizedState = l.memoizedState, m.updateQueue = l.updateQueue, u = l.dependencies, m.dependencies = u === null ? null : {
          lanes: u.lanes,
          firstContext: u.firstContext
        }, m.sibling = l.sibling, m.index = l.index, m.ref = l.ref, m.refCleanup = l.refCleanup, m;
      }
      function au(l, u) {
        l.flags &= 31457282;
        var m = l.alternate;
        return m === null ? (l.childLanes = 0, l.lanes = u, l.child = null, l.subtreeFlags = 0, l.memoizedProps = null, l.memoizedState = null, l.updateQueue = null, l.dependencies = null, l.stateNode = null) : (l.childLanes = m.childLanes, l.lanes = m.lanes, l.child = m.child, l.subtreeFlags = 0, l.deletions = null, l.memoizedProps = m.memoizedProps, l.memoizedState = m.memoizedState, l.updateQueue = m.updateQueue, l.type = m.type, u = m.dependencies, l.dependencies = u === null ? null : {
          lanes: u.lanes,
          firstContext: u.firstContext
        }), l;
      }
      function js(l, u, m, _, A, D) {
        var X = 0;
        if (_ = l, typeof l == "function") iu(l) && (X = 1);
        else if (typeof l == "string")
          X = Ha && On ? mu(l, m, Ei.current) ? 26 : Ks(l) ? 27 : 5 : Ha ? mu(
            l,
            m,
            Ei.current
          ) ? 26 : 5 : On && Ks(l) ? 27 : 5;
        else
          e: switch (l) {
            case ho:
              return ti(
                m.children,
                A,
                D,
                u
              );
            case lu:
              X = 8, A |= 24;
              break;
            case Df:
              return l = n(12, m, u, A | 2), l.elementType = Df, l.lanes = D, l;
            case Uf:
              return l = n(13, m, u, A), l.elementType = Uf, l.lanes = D, l;
            case Xl:
              return l = n(19, m, u, A), l.elementType = Xl, l.lanes = D, l;
            case Od:
              return su(m, A, D, u);
            default:
              if (typeof l == "object" && l !== null)
                switch (l.$$typeof) {
                  case cu:
                  case ws:
                    X = 10;
                    break e;
                  case Nd:
                    X = 9;
                    break e;
                  case uu:
                    X = 11;
                    break e;
                  case Nf:
                    X = 14;
                    break e;
                  case us:
                    X = 16, _ = null;
                    break e;
                }
              X = 29, m = Error(
                r(
                  130,
                  l === null ? "null" : typeof l,
                  ""
                )
              ), _ = null;
          }
        return u = n(X, m, u, A), u.elementType = l, u.type = _, u.lanes = D, u;
      }
      function ti(l, u, m, _) {
        return l = n(7, l, _, u), l.lanes = m, l;
      }
      function su(l, u, m, _) {
        l = n(22, l, _, u), l.elementType = Od, l.lanes = m;
        var A = {
          _visibility: 1,
          _pendingVisibility: 1,
          _pendingMarkers: null,
          _retryCache: null,
          _transitions: null,
          _current: null,
          detach: function() {
            var D = A._current;
            if (D === null) throw Error(r(456));
            if ((A._pendingVisibility & 2) === 0) {
              var X = Ce(D, 2);
              X !== null && (A._pendingVisibility |= 2, Ui(X, D, 2));
            }
          },
          attach: function() {
            var D = A._current;
            if (D === null) throw Error(r(456));
            if ((A._pendingVisibility & 2) !== 0) {
              var X = Ce(D, 2);
              X !== null && (A._pendingVisibility &= -3, Ui(X, D, 2));
            }
          }
        };
        return l.stateNode = A, l;
      }
      function Rf(l, u, m) {
        return l = n(6, l, null, u), l.lanes = m, l;
      }
      function Ud(l, u, m) {
        return u = n(
          4,
          l.children !== null ? l.children : [],
          l.key,
          u
        ), u.lanes = m, u.stateNode = {
          containerInfo: l.containerInfo,
          pendingChildren: null,
          implementation: l.implementation
        }, u;
      }
      function xy(l, u, m, _, A, D, X, $) {
        this.tag = 1, this.containerInfo = l, this.finishedWork = this.pingCache = this.current = this.pendingChildren = null, this.timeoutHandle = po, this.callbackNode = this.next = this.pendingContext = this.context = this.cancelPendingCommit = null, this.callbackPriority = 0, this.expirationTimes = z(-1), this.entangledLanes = this.shellSuspendCounter = this.errorRecoveryDisabledLanes = this.finishedLanes = this.expiredLanes = this.warmLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0, this.entanglements = z(0), this.hiddenUpdates = z(null), this.identifierPrefix = _, this.onUncaughtError = A, this.onCaughtError = D, this.onRecoverableError = X, this.pooledCache = null, this.pooledCacheLanes = 0, this.formState = $, this.incompleteTransitions = /* @__PURE__ */ new Map();
      }
      function Xm(l, u, m, _, A, D, X, $, de, Oe, je, st) {
        return l = new xy(
          l,
          u,
          m,
          X,
          $,
          de,
          Oe,
          st
        ), u = 1, D === !0 && (u |= 24), D = n(3, null, null, u), l.current = D, D.stateNode = l, u = no(), u.refCount++, l.pooledCache = u, u.refCount++, D.memoizedState = {
          element: _,
          isDehydrated: m,
          cache: u
        }, dt(D), l;
      }
      function gi(l) {
        return l ? (l = _o, l) : _o;
      }
      function Cf(l) {
        var u = l._reactInternals;
        if (u === void 0)
          throw typeof l.render == "function" ? Error(r(188)) : (l = Object.keys(l).join(","), Error(r(268, l)));
        return l = b(u), l = l !== null ? R(l) : null, l === null ? null : kl(l.stateNode);
      }
      function Vl(l, u, m, _, A, D) {
        A = gi(A), _.context === null ? _.context = A : _.pendingContext = A, _ = Ve(u), _.payload = { element: m }, D = D === void 0 ? null : D, D !== null && (_.callback = D), m = tt(l, _, u), m !== null && (Ui(m, l, u), St(m, l, u));
      }
      function Gl(l, u) {
        if (l = l.memoizedState, l !== null && l.dehydrated !== null) {
          var m = l.retryLane;
          l.retryLane = m !== 0 && m < u ? m : u;
        }
      }
      function ru(l, u) {
        Gl(l, u), (l = l.alternate) && Gl(l, u);
      }
      var kt = {}, Fl = jh(), Ia = G4(), wf = Object.assign, My = Symbol.for("react.element"), ou = Symbol.for("react.transitional.element"), cs = Symbol.for("react.portal"), ho = Symbol.for("react.fragment"), lu = Symbol.for("react.strict_mode"), Df = Symbol.for("react.profiler"), cu = Symbol.for("react.provider"), Nd = Symbol.for("react.consumer"), ws = Symbol.for("react.context"), uu = Symbol.for("react.forward_ref"), Uf = Symbol.for("react.suspense"), Xl = Symbol.for("react.suspense_list"), Nf = Symbol.for("react.memo"), us = Symbol.for("react.lazy"), Od = Symbol.for("react.offscreen"), qm = Symbol.for("react.memo_cache_sentinel"), Cr = Symbol.iterator, Ld = Symbol.for("react.client.reference"), It = Fl.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, Qs, wr, ko = !1, ql = Array.isArray, zd = e.rendererVersion, fu = e.rendererPackageName, Yl = e.extraDevToolsConfig, kl = e.getPublicInstance, Ym = e.getRootHostContext, Wl = e.getChildHostContext, Of = e.prepareForCommit, km = e.resetAfterCommit, Bd = e.createInstance, hu = e.appendInitialChild, Dr = e.finalizeInitialChildren, Wt = e.shouldSetTextContent, wn = e.createTextInstance, yi = e.scheduleTimeout, Lf = e.cancelTimeout, po = e.noTimeout, ca = e.isPrimaryRenderer;
      e.warnsIfNotActing;
      var bi = e.supportsMutation, fs = e.supportsPersistence, Yi = e.supportsHydration, Wm = e.getInstanceFromNode;
      e.beforeActiveInstanceBlur, e.afterActiveInstanceBlur;
      var oi = e.preparePortalMount;
      e.prepareScopeUpdate, e.getInstanceFromScope;
      var ea = e.setCurrentUpdatePriority, Ur = e.getCurrentUpdatePriority, Zm = e.resolveUpdatePriority;
      e.resolveEventType, e.resolveEventTimeStamp;
      var jm = e.shouldAttemptEagerTransition, by = e.detachDeletedInstance;
      e.requestPostPaintCallback;
      var Pd = e.maySuspendCommit, zf = e.preloadInstance, Id = e.startSuspendingCommit, ua = e.suspendInstance, _i = e.waitForCommitToBeReady, mo = e.NotPendingTransition, Ds = e.HostTransitionContext, Bf = e.resetFormInstance;
      e.bindToConsole;
      var Hd = e.supportsMicrotasks, Nr = e.scheduleMicrotask, vo = e.supportsTestSelectors, Vd = e.findFiberRoot, Gd = e.getBoundingRect, Qm = e.getTextContent, Zl = e.isHiddenSubtree, Km = e.matchAccessibilityRole, Jm = e.setFocusIfFocusable, $m = e.setupIntersectionObserver, ev = e.appendChild, Fd = e.appendChildToContainer, tv = e.commitTextUpdate, Ey = e.commitMount, nv = e.commitUpdate, iv = e.insertBefore, av = e.insertInContainerBefore, Xd = e.removeChild, sv = e.removeChildFromContainer, qd = e.resetTextContent, rv = e.hideInstance, ov = e.hideTextInstance, lv = e.unhideInstance, Ty = e.unhideTextInstance, cv = e.clearContainer, jl = e.cloneInstance, du = e.createContainerChildSet, Yd = e.appendChildToContainerChildSet, Pf = e.finalizeContainerChildren, Ql = e.replaceContainerChildren, kd = e.cloneHiddenInstance, Wd = e.cloneHiddenTextInstance, If = e.isSuspenseInstancePending, Hf = e.isSuspenseInstanceFallback, uv = e.getSuspenseInstanceFallbackErrorDetails, fv = e.registerSuspenseInstanceRetry, Zd = e.canHydrateFormStateMarker, hv = e.isFormStateMarkerMatching, jd = e.getNextHydratableSibling, Vf = e.getFirstHydratableChild, dv = e.getFirstHydratableChildWithinContainer, pv = e.getFirstHydratableChildWithinSuspenseInstance, Ay = e.canHydrateInstance, Qd = e.canHydrateTextInstance, mv = e.canHydrateSuspenseInstance, vv = e.hydrateInstance, Kd = e.hydrateTextInstance, gv = e.hydrateSuspenseInstance, yv = e.getNextHydratableInstanceAfterSuspenseInstance, Ry = e.commitHydratedContainer, Cy = e.commitHydratedSuspenseInstance, _v = e.clearSuspenseBoundary, pu = e.clearSuspenseBoundaryFromContainer, Gf = e.shouldDeleteUnhydratedTailInstances;
      e.diffHydratedPropsForDevWarnings, e.diffHydratedTextForDevWarnings, e.describeHydratableInstanceForDevWarnings;
      var Ff = e.validateHydratableInstance, Sv = e.validateHydratableTextInstance, Ha = e.supportsResources, mu = e.isHostHoistableType, Xf = e.getHoistableRoot, Jd = e.getResource, xv = e.acquireResource, Wo = e.releaseResource, vu = e.hydrateHoistable, gu = e.mountHoistable, Kl = e.unmountHoistable, qf = e.createHoistableInstance, Mv = e.prepareToCommitHoistables, bv = e.mayResourceSuspendCommit, Zo = e.preloadResource, Ev = e.suspendResource, On = e.supportsSingletons, Us = e.resolveSingletonInstance, go = e.clearSingleton, Tv = e.acquireSingletonInstance, yo = e.releaseSingletonInstance, Ks = e.isHostSingletonType, li = [], Or = -1, _o = {}, fa = Math.clz32 ? Math.clz32 : N, Av = Math.log, Rv = Math.LN2, Js = 128, jo = 4194304, yu = Ia.unstable_scheduleCallback, Yf = Ia.unstable_cancelCallback, Cv = Ia.unstable_shouldYield, kf = Ia.unstable_requestPaint, hs = Ia.unstable_now, Wf = Ia.unstable_ImmediatePriority, wv = Ia.unstable_UserBlockingPriority, Zf = Ia.unstable_NormalPriority, wy = Ia.unstable_IdlePriority, Dv = Ia.log, Ni = Ia.unstable_setDisableYieldValue, ci = null, Ma = null, ba = typeof Object.is == "function" ? Object.is : Q, $d = /* @__PURE__ */ new WeakMap(), Qo = [], Ko = 0, Jo = null, Jl = 0, Va = [], Ga = 0, So = null, Ns = 1, Os = "", Ei = C(null), $l = C(null), $s = C(null), $o = C(null), ki = null, Wi = null, fn = !1, ds = null, Oi = !1, _u = Error(r(519)), ps = [], el = 0, Ls = 0, Su = null, Lr = null, tl = !1, Hn = !1, ep = !1, ec = 0, tc = null, nl = 0, Fa = 0, il = null, zr = !1, al = !1, er = Object.prototype.hasOwnProperty, nc = Error(r(460)), xu = Error(r(474)), Mu = { then: function() {
      } }, xo = null, Mo = null, bo = 0, Eo = pi(!0), tr = pi(!1), Vn = C(null), ic = C(0), Xa = C(null), Ln = null, Ti = C(0), Br = 0, Jt = null, Dt = null, dn = null, ms = !1, sl = !1, To = !1, jf = 0, rl = 0, Li = null, zs = 0, Qf = function() {
        return { lastEffect: null, events: null, stores: null, memoCache: null };
      }, ni = {
        readContext: Gi,
        use: ce,
        useCallback: In,
        useContext: In,
        useEffect: In,
        useImperativeHandle: In,
        useLayoutEffect: In,
        useInsertionEffect: In,
        useMemo: In,
        useReducer: In,
        useRef: In,
        useState: In,
        useDebugValue: In,
        useDeferredValue: In,
        useTransition: In,
        useSyncExternalStore: In,
        useId: In
      };
      ni.useCacheRefresh = In, ni.useMemoCache = In, ni.useHostTransitionStatus = In, ni.useFormState = In, ni.useActionState = In, ni.useOptimistic = In;
      var Ao = {
        readContext: Gi,
        use: ce,
        useCallback: function(l, u) {
          return re().memoizedState = [
            l,
            u === void 0 ? null : u
          ], l;
        },
        useContext: Gi,
        useEffect: of,
        useImperativeHandle: function(l, u, m) {
          m = m != null ? m.concat([l]) : null, zc(
            4194308,
            4,
            lf.bind(null, u, l),
            m
          );
        },
        useLayoutEffect: function(l, u) {
          return zc(4194308, 4, l, u);
        },
        useInsertionEffect: function(l, u) {
          zc(4, 2, l, u);
        },
        useMemo: function(l, u) {
          var m = re();
          u = u === void 0 ? null : u;
          var _ = l();
          if (To) {
            K(!0);
            try {
              l();
            } finally {
              K(!1);
            }
          }
          return m.memoizedState = [_, u], _;
        },
        useReducer: function(l, u, m) {
          var _ = re();
          if (m !== void 0) {
            var A = m(u);
            if (To) {
              K(!0);
              try {
                m(u);
              } finally {
                K(!1);
              }
            }
          } else A = u;
          return _.memoizedState = _.baseState = A, l = {
            pending: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: l,
            lastRenderedState: A
          }, _.queue = l, l = l.dispatch = uf.bind(
            null,
            Jt,
            l
          ), [_.memoizedState, l];
        },
        useRef: function(l) {
          var u = re();
          return l = { current: l }, u.memoizedState = l;
        },
        useState: function(l) {
          l = Yt(l);
          var u = l.queue, m = rd.bind(
            null,
            Jt,
            u
          );
          return u.dispatch = m, [l.memoizedState, m];
        },
        useDebugValue: Kr,
        useDeferredValue: function(l, u) {
          var m = re();
          return Ic(m, l, u);
        },
        useTransition: function() {
          var l = Yt(!1);
          return l = El.bind(
            null,
            Jt,
            l.queue,
            !0,
            !1
          ), re().memoizedState = l, [!1, l];
        },
        useSyncExternalStore: function(l, u, m) {
          var _ = Jt, A = re();
          if (fn) {
            if (m === void 0)
              throw Error(r(407));
            m = m();
          } else {
            if (m = u(), Tn === null)
              throw Error(r(349));
            (on & 60) !== 0 || _t(_, u, m);
          }
          A.memoizedState = m;
          var D = { value: m, getSnapshot: u };
          return A.queue = D, of(hn.bind(null, _, D, l), [
            l
          ]), _.flags |= 2048, Mi(
            9,
            Zt.bind(
              null,
              _,
              D,
              m,
              u
            ),
            { destroy: void 0 },
            null
          ), m;
        },
        useId: function() {
          var l = re(), u = Tn.identifierPrefix;
          if (fn) {
            var m = Os, _ = Ns;
            m = (_ & ~(1 << 32 - fa(_) - 1)).toString(32) + m, u = ":" + u + "R" + m, m = jf++, 0 < m && (u += "H" + m.toString(32)), u += ":";
          } else
            m = zs++, u = ":" + u + "r" + m.toString(32) + ":";
          return l.memoizedState = u;
        },
        useCacheRefresh: function() {
          return re().memoizedState = sd.bind(
            null,
            Jt
          );
        }
      };
      Ao.useMemoCache = Ye, Ao.useHostTransitionStatus = Hc, Ao.useFormState = Ji, Ao.useActionState = Ji, Ao.useOptimistic = function(l) {
        var u = re();
        u.memoizedState = u.baseState = l;
        var m = {
          pending: null,
          lanes: 0,
          dispatch: null,
          lastRenderedReducer: null,
          lastRenderedState: null
        };
        return u.queue = m, u = Al.bind(
          null,
          Jt,
          !0,
          m
        ), m.dispatch = u, [l, u];
      };
      var ha = {
        readContext: Gi,
        use: ce,
        useCallback: Fo,
        useContext: Gi,
        useEffect: nd,
        useImperativeHandle: cf,
        useInsertionEffect: Mm,
        useLayoutEffect: Pc,
        useMemo: id,
        useReducer: ft,
        useRef: xm,
        useState: function() {
          return ft(Je);
        },
        useDebugValue: Kr,
        useDeferredValue: function(l, u) {
          var m = ve();
          return ad(
            m,
            Dt.memoizedState,
            l,
            u
          );
        },
        useTransition: function() {
          var l = ft(Je)[0], u = ve().memoizedState;
          return [
            typeof l == "boolean" ? l : xe(l),
            u
          ];
        },
        useSyncExternalStore: wt,
        useId: Tl
      };
      ha.useCacheRefresh = vr, ha.useMemoCache = Ye, ha.useHostTransitionStatus = Hc, ha.useFormState = Ii, ha.useActionState = Ii, ha.useOptimistic = function(l, u) {
        var m = ve();
        return bt(m, Dt, l, u);
      };
      var qa = {
        readContext: Gi,
        use: ce,
        useCallback: Fo,
        useContext: Gi,
        useEffect: nd,
        useImperativeHandle: cf,
        useInsertionEffect: Mm,
        useLayoutEffect: Pc,
        useMemo: id,
        useReducer: Mt,
        useRef: xm,
        useState: function() {
          return Mt(Je);
        },
        useDebugValue: Kr,
        useDeferredValue: function(l, u) {
          var m = ve();
          return Dt === null ? Ic(m, l, u) : ad(
            m,
            Dt.memoizedState,
            l,
            u
          );
        },
        useTransition: function() {
          var l = Mt(Je)[0], u = ve().memoizedState;
          return [
            typeof l == "boolean" ? l : xe(l),
            u
          ];
        },
        useSyncExternalStore: wt,
        useId: Tl
      };
      qa.useCacheRefresh = vr, qa.useMemoCache = Ye, qa.useHostTransitionStatus = Hc, qa.useFormState = Go, qa.useActionState = Go, qa.useOptimistic = function(l, u) {
        var m = ve();
        return Dt !== null ? bt(m, Dt, l, u) : (m.baseState = l, [l, m.queue.dispatch]);
      };
      var nr = {
        isMounted: function(l) {
          return (l = l._reactInternals) ? x(l) === l : !1;
        },
        enqueueSetState: function(l, u, m) {
          l = l._reactInternals;
          var _ = ri(), A = Ve(_);
          A.payload = u, m != null && (A.callback = m), u = tt(l, A, _), u !== null && (Ui(u, l, _), St(u, l, _));
        },
        enqueueReplaceState: function(l, u, m) {
          l = l._reactInternals;
          var _ = ri(), A = Ve(_);
          A.tag = 1, A.payload = u, m != null && (A.callback = m), u = tt(l, A, _), u !== null && (Ui(u, l, _), St(u, l, _));
        },
        enqueueForceUpdate: function(l, u) {
          l = l._reactInternals;
          var m = ri(), _ = Ve(m);
          _.tag = 2, u != null && (_.callback = u), u = tt(l, _, m), u !== null && (Ui(u, l, m), St(u, l, m));
        }
      }, Kf = typeof reportError == "function" ? reportError : function(l) {
        if (typeof window == "object" && typeof window.ErrorEvent == "function") {
          var u = new window.ErrorEvent("error", {
            bubbles: !0,
            cancelable: !0,
            message: typeof l == "object" && l !== null && typeof l.message == "string" ? String(l.message) : String(l),
            error: l
          });
          if (!window.dispatchEvent(u)) return;
        } else if (typeof process == "object" && typeof process.emit == "function") {
          process.emit("uncaughtException", l);
          return;
        }
        console.error(l);
      }, Jf = Error(r(461)), zn = !1, $f = { dehydrated: null, treeContext: null, retryLane: 0 }, Pr = C(null), Bs = null, Ya = null, ac = typeof AbortController < "u" ? AbortController : function() {
        var l = [], u = this.signal = {
          aborted: !1,
          addEventListener: function(m, _) {
            l.push(_);
          }
        };
        this.abort = function() {
          u.aborted = !0, l.forEach(function(m) {
            return m();
          });
        };
      }, Uv = Ia.unstable_scheduleCallback, Nv = Ia.unstable_NormalPriority, Gn = {
        $$typeof: ws,
        Consumer: null,
        Provider: null,
        _currentValue: null,
        _currentValue2: null,
        _threadCount: 0
      }, tp = It.S;
      It.S = function(l, u) {
        typeof u == "object" && u !== null && typeof u.then == "function" && Ae(l, u), tp !== null && tp(l, u);
      };
      var ir = C(null), ar = !1, ii = !1, np = !1, En = typeof WeakSet == "function" ? WeakSet : Set, Xt = null, an = !1, Rt = null, jt = !1, $n = null, ka = 8192, sc = {
        getCacheForType: function(l) {
          var u = Gi(Gn), m = u.data.get(l);
          return m === void 0 && (m = l(), u.data.set(l, m)), m;
        }
      }, rc = 0, vs = 1, Wn = 2, Ps = 3, sr = 4;
      if (typeof Symbol == "function" && Symbol.for) {
        var ol = Symbol.for;
        rc = ol("selector.component"), vs = ol("selector.has_pseudo_class"), Wn = ol("selector.role"), Ps = ol("selector.test_id"), sr = ol("selector.text");
      }
      var gs = typeof WeakMap == "function" ? WeakMap : Map, pn = 0, Tn = null, Nt = null, on = 0, Un = 0, ta = null, ys = !1, Wa = !1, Ai = !1, na = 0, Bn = 0, Za = 0, Ir = 0, bu = 0, ja = 0, rr = 0, ll = null, ai = null, eh = !1, da = 0, oc = 1 / 0, Eu = null, Ro = null, Is = !1, or = null, cl = 0, Co = 0, th = null, lc = 0, nh = null;
      return kt.attemptContinuousHydration = function(l) {
        if (l.tag === 13) {
          var u = Ce(l, 67108864);
          u !== null && Ui(u, l, 67108864), ru(l, 67108864);
        }
      }, kt.attemptHydrationAtCurrentPriority = function(l) {
        if (l.tag === 13) {
          var u = ri(), m = Ce(l, u);
          m !== null && Ui(m, l, u), ru(l, u);
        }
      }, kt.attemptSynchronousHydration = function(l) {
        switch (l.tag) {
          case 3:
            if (l = l.stateNode, l.current.memoizedState.isDehydrated) {
              var u = O(l.pendingLanes);
              if (u !== 0) {
                for (l.pendingLanes |= 2, l.entangledLanes |= 2; u; ) {
                  var m = 1 << 31 - fa(u);
                  l.entanglements[1] |= m, u &= ~m;
                }
                Ze(l), (pn & 6) === 0 && (oc = hs() + 500, At(0));
              }
            }
            break;
          case 13:
            u = Ce(l, 2), u !== null && Ui(u, l, 2), nu(), ru(l, 2);
        }
      }, kt.batchedUpdates = function(l, u) {
        return l(u);
      }, kt.createComponentSelector = function(l) {
        return { $$typeof: rc, value: l };
      }, kt.createContainer = function(l, u, m, _, A, D, X, $, de, Oe) {
        return Xm(
          l,
          u,
          !1,
          null,
          m,
          _,
          D,
          X,
          $,
          de,
          Oe,
          null
        );
      }, kt.createHasPseudoClassSelector = function(l) {
        return { $$typeof: vs, value: l };
      }, kt.createHydrationContainer = function(l, u, m, _, A, D, X, $, de, Oe, je, st, ot) {
        return l = Xm(
          m,
          _,
          !0,
          l,
          A,
          D,
          $,
          de,
          Oe,
          je,
          st,
          ot
        ), l.context = gi(null), m = l.current, _ = ri(), A = Ve(_), A.callback = u ?? null, tt(m, A, _), l.current.lanes = _, W(l, _), Ze(l), l;
      }, kt.createPortal = function(l, u, m) {
        var _ = 3 < arguments.length && arguments[3] !== void 0 ? arguments[3] : null;
        return {
          $$typeof: cs,
          key: _ == null ? null : "" + _,
          children: l,
          containerInfo: u,
          implementation: m
        };
      }, kt.createRoleSelector = function(l) {
        return { $$typeof: Wn, value: l };
      }, kt.createTestNameSelector = function(l) {
        return { $$typeof: Ps, value: l };
      }, kt.createTextSelector = function(l) {
        return { $$typeof: sr, value: l };
      }, kt.defaultOnCaughtError = function(l) {
        console.error(l);
      }, kt.defaultOnRecoverableError = function(l) {
        Kf(l);
      }, kt.defaultOnUncaughtError = function(l) {
        Kf(l);
      }, kt.deferredUpdates = function(l) {
        var u = It.T, m = Ur();
        try {
          return ea(32), It.T = null, l();
        } finally {
          ea(m), It.T = u;
        }
      }, kt.discreteUpdates = function(l, u, m, _, A) {
        var D = It.T, X = Ur();
        try {
          return ea(2), It.T = null, l(u, m, _, A);
        } finally {
          ea(X), It.T = D, pn === 0 && (oc = hs() + 500);
        }
      }, kt.findAllNodes = eu, kt.findBoundingRects = function(l, u) {
        if (!vo) throw Error(r(363));
        u = eu(l, u), l = [];
        for (var m = 0; m < u.length; m++)
          l.push(Gd(u[m]));
        for (u = l.length - 1; 0 < u; u--) {
          m = l[u];
          for (var _ = m.x, A = _ + m.width, D = m.y, X = D + m.height, $ = u - 1; 0 <= $; $--)
            if (u !== $) {
              var de = l[$], Oe = de.x, je = Oe + de.width, st = de.y, ot = st + de.height;
              if (_ >= Oe && D >= st && A <= je && X <= ot) {
                l.splice(u, 1);
                break;
              } else if (_ !== Oe || m.width !== de.width || ot < D || st > X) {
                if (!(D !== st || m.height !== de.height || je < _ || Oe > A)) {
                  Oe > _ && (de.width += Oe - _, de.x = _), je < A && (de.width = A - Oe), l.splice(u, 1);
                  break;
                }
              } else {
                st > D && (de.height += st - D, de.y = D), ot < X && (de.height = X - st), l.splice(u, 1);
                break;
              }
            }
        }
        return l;
      }, kt.findHostInstance = Cf, kt.findHostInstanceWithNoPortals = function(l) {
        return l = b(l), l = l !== null ? w(l) : null, l === null ? null : kl(l.stateNode);
      }, kt.findHostInstanceWithWarning = function(l) {
        return Cf(l);
      }, kt.flushPassiveEffects = Cs, kt.flushSyncFromReconciler = function(l) {
        var u = pn;
        pn |= 1;
        var m = It.T, _ = Ur();
        try {
          if (ea(2), It.T = null, l)
            return l();
        } finally {
          ea(_), It.T = m, pn = u, (pn & 6) === 0 && At(0);
        }
      }, kt.flushSyncWork = nu, kt.focusWithin = function(l, u) {
        if (!vo) throw Error(r(363));
        for (l = Bl(l), u = Sa(l, u), u = Array.from(u), l = 0; l < u.length; ) {
          var m = u[l++], _ = m.tag;
          if (!Zl(m)) {
            if ((_ === 5 || _ === 26 || _ === 27) && Jm(m.stateNode))
              return !0;
            for (m = m.child; m !== null; )
              u.push(m), m = m.sibling;
          }
        }
        return !1;
      }, kt.getFindAllNodesFailureDescription = function(l, u) {
        if (!vo) throw Error(r(363));
        var m = 0, _ = [];
        l = [Bl(l), 0];
        for (var A = 0; A < l.length; ) {
          var D = l[A++], X = D.tag, $ = l[A++], de = u[$];
          if ((X !== 5 && X !== 26 && X !== 27 || !Zl(D)) && (ro(D, de) && (_.push(Ed(de)), $++, $ > m && (m = $)), $ < u.length))
            for (D = D.child; D !== null; )
              l.push(D, $), D = D.sibling;
        }
        if (m < u.length) {
          for (l = []; m < u.length; m++)
            l.push(Ed(u[m]));
          return `findAllNodes was able to match part of the selector:
  ` + (_.join(" > ") + `

No matching component was found for:
  `) + l.join(" > ");
        }
        return null;
      }, kt.getPublicRootInstance = function(l) {
        if (l = l.current, !l.child) return null;
        switch (l.child.tag) {
          case 27:
          case 5:
            return kl(l.child.stateNode);
          default:
            return l.child.stateNode;
        }
      }, kt.injectIntoDevTools = function() {
        var l = {
          bundleType: 0,
          version: zd,
          rendererPackageName: fu,
          currentDispatcherRef: It,
          findFiberByHostInstance: Wm,
          reconcilerVersion: "19.0.0"
        };
        if (Yl !== null && (l.rendererConfig = Yl), typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ > "u") l = !1;
        else {
          var u = __REACT_DEVTOOLS_GLOBAL_HOOK__;
          if (u.isDisabled || !u.supportsFiber) l = !0;
          else {
            try {
              ci = u.inject(l), Ma = u;
            } catch {
            }
            l = !!u.checkDCE;
          }
        }
        return l;
      }, kt.isAlreadyRendering = function() {
        return !1;
      }, kt.observeVisibleRects = function(l, u, m, _) {
        if (!vo) throw Error(r(363));
        l = eu(l, u);
        var A = $m(
          l,
          m,
          _
        ).disconnect;
        return {
          disconnect: function() {
            A();
          }
        };
      }, kt.shouldError = function() {
        return null;
      }, kt.shouldSuspend = function() {
        return !1;
      }, kt.startHostTransition = function(l, u, m, _) {
        if (l.tag !== 5) throw Error(r(476));
        var A = ks(l).queue;
        El(
          l,
          A,
          u,
          mo,
          m === null ? i : function() {
            var D = ks(l).next.queue;
            return Jr(
              l,
              D,
              {},
              ri()
            ), m(_);
          }
        );
      }, kt.updateContainer = function(l, u, m, _) {
        var A = u.current, D = ri();
        return Vl(
          A,
          D,
          l,
          u,
          m,
          _
        ), D;
      }, kt.updateContainerSync = function(l, u, m, _) {
        return u.tag === 0 && Cs(), Vl(
          u.current,
          2,
          l,
          u,
          m,
          _
        ), 2;
      }, kt;
    }, s.exports.default = s.exports, Object.defineProperty(s.exports, "__esModule", { value: !0 });
  }(nS)), nS.exports;
}
var ub;
function X4() {
  return ub || (ub = 1, tS.exports = F4()), tS.exports;
}
var q4 = X4();
const Y4 = /* @__PURE__ */ VS(q4);
var sS = { exports: {} }, rS = {};
/**
 * @license React
 * scheduler.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var fb;
function k4() {
  return fb || (fb = 1, function(s) {
    function e(P, K) {
      var Q = P.length;
      P.push(K);
      e: for (; 0 < Q; ) {
        var fe = Q - 1 >>> 1, q = P[fe];
        if (0 < r(q, K))
          P[fe] = K, P[Q] = q, Q = fe;
        else break e;
      }
    }
    function n(P) {
      return P.length === 0 ? null : P[0];
    }
    function i(P) {
      if (P.length === 0) return null;
      var K = P[0], Q = P.pop();
      if (Q !== K) {
        P[0] = Q;
        e: for (var fe = 0, q = P.length, te = q >>> 1; fe < te; ) {
          var Me = 2 * (fe + 1) - 1, Re = P[Me], Ne = Me + 1, he = P[Ne];
          if (0 > r(Re, Q))
            Ne < q && 0 > r(he, Re) ? (P[fe] = he, P[Ne] = Q, fe = Ne) : (P[fe] = Re, P[Me] = Q, fe = Me);
          else if (Ne < q && 0 > r(he, Q))
            P[fe] = he, P[Ne] = Q, fe = Ne;
          else break e;
        }
      }
      return K;
    }
    function r(P, K) {
      var Q = P.sortIndex - K.sortIndex;
      return Q !== 0 ? Q : P.id - K.id;
    }
    if (s.unstable_now = void 0, typeof performance == "object" && typeof performance.now == "function") {
      var c = performance;
      s.unstable_now = function() {
        return c.now();
      };
    } else {
      var h = Date, d = h.now();
      s.unstable_now = function() {
        return h.now() - d;
      };
    }
    var v = [], g = [], S = 1, x = null, M = 3, b = !1, R = !1, w = !1, C = typeof setTimeout == "function" ? setTimeout : null, E = typeof clearTimeout == "function" ? clearTimeout : null, U = typeof setImmediate < "u" ? setImmediate : null;
    function N(P) {
      for (var K = n(g); K !== null; ) {
        if (K.callback === null) i(g);
        else if (K.startTime <= P)
          i(g), K.sortIndex = K.expirationTime, e(v, K);
        else break;
        K = n(g);
      }
    }
    function O(P) {
      if (w = !1, N(P), !R)
        if (n(v) !== null)
          R = !0, oe();
        else {
          var K = n(g);
          K !== null && pe(O, K.startTime - P);
        }
    }
    var I = !1, V = -1, Y = 5, k = -1;
    function B() {
      return !(s.unstable_now() - k < Y);
    }
    function z() {
      if (I) {
        var P = s.unstable_now();
        k = P;
        var K = !0;
        try {
          e: {
            R = !1, w && (w = !1, E(V), V = -1), b = !0;
            var Q = M;
            try {
              t: {
                for (N(P), x = n(v); x !== null && !(x.expirationTime > P && B()); ) {
                  var fe = x.callback;
                  if (typeof fe == "function") {
                    x.callback = null, M = x.priorityLevel;
                    var q = fe(
                      x.expirationTime <= P
                    );
                    if (P = s.unstable_now(), typeof q == "function") {
                      x.callback = q, N(P), K = !0;
                      break t;
                    }
                    x === n(v) && i(v), N(P);
                  } else i(v);
                  x = n(v);
                }
                if (x !== null) K = !0;
                else {
                  var te = n(g);
                  te !== null && pe(
                    O,
                    te.startTime - P
                  ), K = !1;
                }
              }
              break e;
            } finally {
              x = null, M = Q, b = !1;
            }
            K = void 0;
          }
        } finally {
          K ? W() : I = !1;
        }
      }
    }
    var W;
    if (typeof U == "function")
      W = function() {
        U(z);
      };
    else if (typeof MessageChannel < "u") {
      var le = new MessageChannel(), ae = le.port2;
      le.port1.onmessage = z, W = function() {
        ae.postMessage(null);
      };
    } else
      W = function() {
        C(z, 0);
      };
    function oe() {
      I || (I = !0, W());
    }
    function pe(P, K) {
      V = C(function() {
        P(s.unstable_now());
      }, K);
    }
    s.unstable_IdlePriority = 5, s.unstable_ImmediatePriority = 1, s.unstable_LowPriority = 4, s.unstable_NormalPriority = 3, s.unstable_Profiling = null, s.unstable_UserBlockingPriority = 2, s.unstable_cancelCallback = function(P) {
      P.callback = null;
    }, s.unstable_continueExecution = function() {
      R || b || (R = !0, oe());
    }, s.unstable_forceFrameRate = function(P) {
      0 > P || 125 < P ? console.error(
        "forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"
      ) : Y = 0 < P ? Math.floor(1e3 / P) : 5;
    }, s.unstable_getCurrentPriorityLevel = function() {
      return M;
    }, s.unstable_getFirstCallbackNode = function() {
      return n(v);
    }, s.unstable_next = function(P) {
      switch (M) {
        case 1:
        case 2:
        case 3:
          var K = 3;
          break;
        default:
          K = M;
      }
      var Q = M;
      M = K;
      try {
        return P();
      } finally {
        M = Q;
      }
    }, s.unstable_pauseExecution = function() {
    }, s.unstable_requestPaint = function() {
    }, s.unstable_runWithPriority = function(P, K) {
      switch (P) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
          break;
        default:
          P = 3;
      }
      var Q = M;
      M = P;
      try {
        return K();
      } finally {
        M = Q;
      }
    }, s.unstable_scheduleCallback = function(P, K, Q) {
      var fe = s.unstable_now();
      switch (typeof Q == "object" && Q !== null ? (Q = Q.delay, Q = typeof Q == "number" && 0 < Q ? fe + Q : fe) : Q = fe, P) {
        case 1:
          var q = -1;
          break;
        case 2:
          q = 250;
          break;
        case 5:
          q = 1073741823;
          break;
        case 4:
          q = 1e4;
          break;
        default:
          q = 5e3;
      }
      return q = Q + q, P = {
        id: S++,
        callback: K,
        priorityLevel: P,
        startTime: Q,
        expirationTime: q,
        sortIndex: -1
      }, Q > fe ? (P.sortIndex = Q, e(g, P), n(v) === null && P === n(g) && (w ? (E(V), V = -1) : w = !0, pe(O, Q - fe))) : (P.sortIndex = q, e(v, P), R || b || (R = !0, oe())), P;
    }, s.unstable_shouldYield = B, s.unstable_wrapCallback = function(P) {
      var K = M;
      return function() {
        var Q = M;
        M = K;
        try {
          return P.apply(this, arguments);
        } finally {
          M = Q;
        }
      };
    };
  }(rS)), rS;
}
var hb;
function W4() {
  return hb || (hb = 1, sS.exports = k4()), sS.exports;
}
var db = W4();
function Ax(s, e, n) {
  if (!s) return;
  if (n(s) === !0) return s;
  let i = e ? s.return : s.child;
  for (; i; ) {
    const r = Ax(i, e, n);
    if (r) return r;
    i = e ? null : i.sibling;
  }
}
function OT(s) {
  try {
    return Object.defineProperties(s, {
      _currentRenderer: {
        get() {
          return null;
        },
        set() {
        }
      },
      _currentRenderer2: {
        get() {
          return null;
        },
        set() {
        }
      }
    });
  } catch {
    return s;
  }
}
const Rx = /* @__PURE__ */ OT(/* @__PURE__ */ ht.createContext(null));
class LT extends ht.Component {
  render() {
    return /* @__PURE__ */ ht.createElement(Rx.Provider, { value: this._reactInternals }, this.props.children);
  }
}
function zT() {
  const s = ht.useContext(Rx);
  if (s === null) throw new Error("its-fine: useFiber must be called within a <FiberProvider />!");
  const e = ht.useId();
  return ht.useMemo(() => {
    for (const n of [s, s?.alternate]) {
      if (!n) continue;
      const i = Ax(n, !1, (r) => {
        let c = r.memoizedState;
        for (; c; ) {
          if (c.memoizedState === e) return !0;
          c = c.next;
        }
      });
      if (i) return i;
    }
  }, [s, e]);
}
const Z4 = Symbol.for("react.context"), j4 = (s) => s !== null && typeof s == "object" && "$$typeof" in s && s.$$typeof === Z4;
function Q4() {
  const s = zT(), [e] = ht.useState(() => /* @__PURE__ */ new Map());
  e.clear();
  let n = s;
  for (; n; ) {
    const i = n.type;
    j4(i) && i !== Rx && !e.has(i) && e.set(i, ht.use(OT(i))), n = n.return;
  }
  return e;
}
function K4() {
  const s = Q4();
  return ht.useMemo(
    () => Array.from(s.keys()).reduce(
      (e, n) => (i) => /* @__PURE__ */ ht.createElement(e, null, /* @__PURE__ */ ht.createElement(n.Provider, { ...i, value: s.get(n) })),
      (e) => /* @__PURE__ */ ht.createElement(LT, { ...e })
    ),
    [s]
  );
}
function BT(s) {
  let e = s.root;
  for (; e.getState().previousRoot; ) e = e.getState().previousRoot;
  return e;
}
const PT = (s) => s && s.isOrthographicCamera, J4 = (s) => s && s.hasOwnProperty("current"), $4 = (s) => s != null && (typeof s == "string" || typeof s == "number" || s.isColor), Sm = /* @__PURE__ */ ((s, e) => typeof window < "u" && (((s = window.document) == null ? void 0 : s.createElement) || ((e = window.navigator) == null ? void 0 : e.product) === "ReactNative"))() ? ht.useLayoutEffect : ht.useEffect;
function IT(s) {
  const e = ht.useRef(s);
  return Sm(() => void (e.current = s), [s]), e;
}
function eL() {
  const s = zT(), e = K4();
  return ht.useMemo(() => ({
    children: n
  }) => {
    const r = !!Ax(s, !0, (c) => c.type === ht.StrictMode) ? ht.StrictMode : ht.Fragment;
    return /* @__PURE__ */ Ot.jsx(r, {
      children: /* @__PURE__ */ Ot.jsx(e, {
        children: n
      })
    });
  }, [s, e]);
}
function tL({
  set: s
}) {
  return Sm(() => (s(new Promise(() => null)), () => s(!1)), [s]), null;
}
const nL = /* @__PURE__ */ ((s) => (s = class extends ht.Component {
  constructor(...n) {
    super(...n), this.state = {
      error: !1
    };
  }
  componentDidCatch(n) {
    this.props.set(n);
  }
  render() {
    return this.state.error ? null : this.props.children;
  }
}, s.getDerivedStateFromError = () => ({
  error: !0
}), s))();
function HT(s) {
  var e;
  const n = typeof window < "u" ? (e = window.devicePixelRatio) != null ? e : 2 : 1;
  return Array.isArray(s) ? Math.min(Math.max(s[0], n), s[1]) : s;
}
function Dh(s) {
  var e;
  return (e = s.__r3f) == null ? void 0 : e.root.getState();
}
const fi = {
  obj: (s) => s === Object(s) && !fi.arr(s) && typeof s != "function",
  fun: (s) => typeof s == "function",
  str: (s) => typeof s == "string",
  num: (s) => typeof s == "number",
  boo: (s) => typeof s == "boolean",
  und: (s) => s === void 0,
  nul: (s) => s === null,
  arr: (s) => Array.isArray(s),
  equ(s, e, {
    arrays: n = "shallow",
    objects: i = "reference",
    strict: r = !0
  } = {}) {
    if (typeof s != typeof e || !!s != !!e) return !1;
    if (fi.str(s) || fi.num(s) || fi.boo(s)) return s === e;
    const c = fi.obj(s);
    if (c && i === "reference") return s === e;
    const h = fi.arr(s);
    if (h && n === "reference") return s === e;
    if ((h || c) && s === e) return !0;
    let d;
    for (d in s) if (!(d in e)) return !1;
    if (c && n === "shallow" && i === "shallow") {
      for (d in r ? e : s) if (!fi.equ(s[d], e[d], {
        strict: r,
        objects: "reference"
      })) return !1;
    } else
      for (d in r ? e : s) if (s[d] !== e[d]) return !1;
    if (fi.und(d)) {
      if (h && s.length === 0 && e.length === 0 || c && Object.keys(s).length === 0 && Object.keys(e).length === 0) return !0;
      if (s !== e) return !1;
    }
    return !0;
  }
};
function iL(s) {
  s.type !== "Scene" && (s.dispose == null || s.dispose());
  for (const e in s) {
    const n = s[e];
    n?.type !== "Scene" && (n == null || n.dispose == null || n.dispose());
  }
}
const VT = ["children", "key", "ref"];
function aL(s) {
  const e = {};
  for (const n in s)
    VT.includes(n) || (e[n] = s[n]);
  return e;
}
function L0(s, e, n, i) {
  const r = s;
  let c = r?.__r3f;
  return c || (c = {
    root: e,
    type: n,
    parent: null,
    children: [],
    props: aL(i),
    object: r,
    eventCount: 0,
    handlers: {},
    isHidden: !1
  }, r && (r.__r3f = c)), c;
}
function om(s, e) {
  let n = s[e];
  if (!e.includes("-")) return {
    root: s,
    key: e,
    target: n
  };
  n = s;
  for (const r of e.split("-")) {
    var i;
    e = r, s = n, n = (i = n) == null ? void 0 : i[e];
  }
  return {
    root: s,
    key: e,
    target: n
  };
}
const pb = /-\d+$/;
function z0(s, e) {
  if (fi.str(e.props.attach)) {
    if (pb.test(e.props.attach)) {
      const r = e.props.attach.replace(pb, ""), {
        root: c,
        key: h
      } = om(s.object, r);
      Array.isArray(c[h]) || (c[h] = []);
    }
    const {
      root: n,
      key: i
    } = om(s.object, e.props.attach);
    e.previousAttach = n[i], n[i] = e.object;
  } else fi.fun(e.props.attach) && (e.previousAttach = e.props.attach(s.object, e.object));
}
function B0(s, e) {
  if (fi.str(e.props.attach)) {
    const {
      root: n,
      key: i
    } = om(s.object, e.props.attach), r = e.previousAttach;
    r === void 0 ? delete n[i] : n[i] = r;
  } else
    e.previousAttach == null || e.previousAttach(s.object, e.object);
  delete e.previousAttach;
}
const NS = [
  ...VT,
  // Instance props
  "args",
  "dispose",
  "attach",
  "object",
  "onUpdate",
  // Behavior flags
  "dispose"
], mb = /* @__PURE__ */ new Map();
function sL(s) {
  let e = mb.get(s.constructor);
  try {
    e || (e = new s.constructor(), mb.set(s.constructor, e));
  } catch {
  }
  return e;
}
function rL(s, e) {
  const n = {};
  for (const i in e)
    if (!NS.includes(i) && !fi.equ(e[i], s.props[i])) {
      n[i] = e[i];
      for (const r in e)
        r.startsWith(`${i}-`) && (n[r] = e[r]);
    }
  for (const i in s.props) {
    if (NS.includes(i) || e.hasOwnProperty(i)) continue;
    const {
      root: r,
      key: c
    } = om(s.object, i);
    if (r.constructor && r.constructor.length === 0) {
      const h = sL(r);
      fi.und(h) || (n[c] = h[c]);
    } else
      n[c] = 0;
  }
  return n;
}
const oL = ["map", "emissiveMap", "sheenColorMap", "specularColorMap", "envMap"], lL = /^on(Pointer|Click|DoubleClick|ContextMenu|Wheel)/;
function Tc(s, e) {
  var n;
  const i = s.__r3f, r = i && BT(i).getState(), c = i?.eventCount;
  for (const d in e) {
    let v = e[d];
    if (NS.includes(d)) continue;
    if (i && lL.test(d)) {
      typeof v == "function" ? i.handlers[d] = v : delete i.handlers[d], i.eventCount = Object.keys(i.handlers).length;
      continue;
    }
    if (v === void 0) continue;
    let {
      root: g,
      key: S,
      target: x
    } = om(s, d);
    if (x instanceof qh && v instanceof qh)
      x.mask = v.mask;
    else if (x instanceof lt && $4(v))
      x.set(v);
    else if (x !== null && typeof x == "object" && typeof x.set == "function" && typeof x.copy == "function" && v != null && v.constructor && x.constructor === v.constructor)
      x.copy(v);
    else if (x !== null && typeof x == "object" && typeof x.set == "function" && Array.isArray(v))
      typeof x.fromArray == "function" ? x.fromArray(v) : x.set(...v);
    else if (x !== null && typeof x == "object" && typeof x.set == "function" && typeof v == "number")
      typeof x.setScalar == "function" ? x.setScalar(v) : x.set(v);
    else {
      var h;
      g[S] = v, r && !r.linear && oL.includes(S) && (h = g[S]) != null && h.isTexture && // sRGB textures must be RGBA8 since r137 https://github.com/mrdoob/three.js/pull/23129
      g[S].format === Ca && g[S].type === Da && (g[S].colorSpace = ei);
    }
  }
  if (i != null && i.parent && r != null && r.internal && (n = i.object) != null && n.isObject3D && c !== i.eventCount) {
    const d = i.object, v = r.internal.interaction.indexOf(d);
    v > -1 && r.internal.interaction.splice(v, 1), i.eventCount && d.raycast !== null && r.internal.interaction.push(d);
  }
  return i && i.props.attach === void 0 && (i.object.isBufferGeometry ? i.props.attach = "geometry" : i.object.isMaterial && (i.props.attach = "material")), i && td(i), s;
}
function td(s) {
  var e;
  if (!s.parent) return;
  s.props.onUpdate == null || s.props.onUpdate(s.object);
  const n = (e = s.root) == null || e.getState == null ? void 0 : e.getState();
  n && n.internal.frames === 0 && n.invalidate();
}
function cL(s, e) {
  s.manual || (PT(s) ? (s.left = e.width / -2, s.right = e.width / 2, s.top = e.height / 2, s.bottom = e.height / -2) : s.aspect = e.width / e.height, s.updateProjectionMatrix());
}
const xs = (s) => s?.isObject3D;
function Gg(s) {
  return (s.eventObject || s.object).uuid + "/" + s.index + s.instanceId;
}
function GT(s, e, n, i) {
  const r = n.get(e);
  r && (n.delete(e), n.size === 0 && (s.delete(i), r.target.releasePointerCapture(i)));
}
function uL(s, e) {
  const {
    internal: n
  } = s.getState();
  n.interaction = n.interaction.filter((i) => i !== e), n.initialHits = n.initialHits.filter((i) => i !== e), n.hovered.forEach((i, r) => {
    (i.eventObject === e || i.object === e) && n.hovered.delete(r);
  }), n.capturedMap.forEach((i, r) => {
    GT(n.capturedMap, e, i, r);
  });
}
function fL(s) {
  function e(v) {
    const {
      internal: g
    } = s.getState(), S = v.offsetX - g.initialClick[0], x = v.offsetY - g.initialClick[1];
    return Math.round(Math.sqrt(S * S + x * x));
  }
  function n(v) {
    return v.filter((g) => ["Move", "Over", "Enter", "Out", "Leave"].some((S) => {
      var x;
      return (x = g.__r3f) == null ? void 0 : x.handlers["onPointer" + S];
    }));
  }
  function i(v, g) {
    const S = s.getState(), x = /* @__PURE__ */ new Set(), M = [], b = g ? g(S.internal.interaction) : S.internal.interaction;
    for (let E = 0; E < b.length; E++) {
      const U = Dh(b[E]);
      U && (U.raycaster.camera = void 0);
    }
    S.previousRoot || S.events.compute == null || S.events.compute(v, S);
    function R(E) {
      const U = Dh(E);
      if (!U || !U.events.enabled || U.raycaster.camera === null) return [];
      if (U.raycaster.camera === void 0) {
        var N;
        U.events.compute == null || U.events.compute(v, U, (N = U.previousRoot) == null ? void 0 : N.getState()), U.raycaster.camera === void 0 && (U.raycaster.camera = null);
      }
      return U.raycaster.camera ? U.raycaster.intersectObject(E, !0) : [];
    }
    let w = b.flatMap(R).sort((E, U) => {
      const N = Dh(E.object), O = Dh(U.object);
      return !N || !O ? E.distance - U.distance : O.events.priority - N.events.priority || E.distance - U.distance;
    }).filter((E) => {
      const U = Gg(E);
      return x.has(U) ? !1 : (x.add(U), !0);
    });
    S.events.filter && (w = S.events.filter(w, S));
    for (const E of w) {
      let U = E.object;
      for (; U; ) {
        var C;
        (C = U.__r3f) != null && C.eventCount && M.push({
          ...E,
          eventObject: U
        }), U = U.parent;
      }
    }
    if ("pointerId" in v && S.internal.capturedMap.has(v.pointerId))
      for (let E of S.internal.capturedMap.get(v.pointerId).values())
        x.has(Gg(E.intersection)) || M.push(E.intersection);
    return M;
  }
  function r(v, g, S, x) {
    if (v.length) {
      const M = {
        stopped: !1
      };
      for (const b of v) {
        let R = Dh(b.object);
        if (R || b.object.traverseAncestors((w) => {
          const C = Dh(w);
          if (C)
            return R = C, !1;
        }), R) {
          const {
            raycaster: w,
            pointer: C,
            camera: E,
            internal: U
          } = R, N = new j(C.x, C.y, 0).unproject(E), O = (B) => {
            var z, W;
            return (z = (W = U.capturedMap.get(B)) == null ? void 0 : W.has(b.eventObject)) != null ? z : !1;
          }, I = (B) => {
            const z = {
              intersection: b,
              target: g.target
            };
            U.capturedMap.has(B) ? U.capturedMap.get(B).set(b.eventObject, z) : U.capturedMap.set(B, /* @__PURE__ */ new Map([[b.eventObject, z]])), g.target.setPointerCapture(B);
          }, V = (B) => {
            const z = U.capturedMap.get(B);
            z && GT(U.capturedMap, b.eventObject, z, B);
          };
          let Y = {};
          for (let B in g) {
            let z = g[B];
            typeof z != "function" && (Y[B] = z);
          }
          let k = {
            ...b,
            ...Y,
            pointer: C,
            intersections: v,
            stopped: M.stopped,
            delta: S,
            unprojectedPoint: N,
            ray: w.ray,
            camera: E,
            // Hijack stopPropagation, which just sets a flag
            stopPropagation() {
              const B = "pointerId" in g && U.capturedMap.get(g.pointerId);
              if (
                // ...if this pointer hasn't been captured
                (!B || // ... or if the hit object is capturing the pointer
                B.has(b.eventObject)) && (k.stopped = M.stopped = !0, U.hovered.size && Array.from(U.hovered.values()).find((z) => z.eventObject === b.eventObject))
              ) {
                const z = v.slice(0, v.indexOf(b));
                c([...z, b]);
              }
            },
            // there should be a distinction between target and currentTarget
            target: {
              hasPointerCapture: O,
              setPointerCapture: I,
              releasePointerCapture: V
            },
            currentTarget: {
              hasPointerCapture: O,
              setPointerCapture: I,
              releasePointerCapture: V
            },
            nativeEvent: g
          };
          if (x(k), M.stopped === !0) break;
        }
      }
    }
    return v;
  }
  function c(v) {
    const {
      internal: g
    } = s.getState();
    for (const S of g.hovered.values())
      if (!v.length || !v.find((x) => x.object === S.object && x.index === S.index && x.instanceId === S.instanceId)) {
        const M = S.eventObject.__r3f;
        if (g.hovered.delete(Gg(S)), M != null && M.eventCount) {
          const b = M.handlers, R = {
            ...S,
            intersections: v
          };
          b.onPointerOut == null || b.onPointerOut(R), b.onPointerLeave == null || b.onPointerLeave(R);
        }
      }
  }
  function h(v, g) {
    for (let S = 0; S < g.length; S++) {
      const x = g[S].__r3f;
      x == null || x.handlers.onPointerMissed == null || x.handlers.onPointerMissed(v);
    }
  }
  function d(v) {
    switch (v) {
      case "onPointerLeave":
      case "onPointerCancel":
        return () => c([]);
      case "onLostPointerCapture":
        return (g) => {
          const {
            internal: S
          } = s.getState();
          "pointerId" in g && S.capturedMap.has(g.pointerId) && requestAnimationFrame(() => {
            S.capturedMap.has(g.pointerId) && (S.capturedMap.delete(g.pointerId), c([]));
          });
        };
    }
    return function(S) {
      const {
        onPointerMissed: x,
        internal: M
      } = s.getState();
      M.lastEvent.current = S;
      const b = v === "onPointerMove", R = v === "onClick" || v === "onContextMenu" || v === "onDoubleClick", C = i(S, b ? n : void 0), E = R ? e(S) : 0;
      v === "onPointerDown" && (M.initialClick = [S.offsetX, S.offsetY], M.initialHits = C.map((N) => N.eventObject)), R && !C.length && E <= 2 && (h(S, M.interaction), x && x(S)), b && c(C);
      function U(N) {
        const O = N.eventObject, I = O.__r3f;
        if (!(I != null && I.eventCount)) return;
        const V = I.handlers;
        if (b) {
          if (V.onPointerOver || V.onPointerEnter || V.onPointerOut || V.onPointerLeave) {
            const Y = Gg(N), k = M.hovered.get(Y);
            k ? k.stopped && N.stopPropagation() : (M.hovered.set(Y, N), V.onPointerOver == null || V.onPointerOver(N), V.onPointerEnter == null || V.onPointerEnter(N));
          }
          V.onPointerMove == null || V.onPointerMove(N);
        } else {
          const Y = V[v];
          Y ? (!R || M.initialHits.includes(O)) && (h(S, M.interaction.filter((k) => !M.initialHits.includes(k))), Y(N)) : R && M.initialHits.includes(O) && h(S, M.interaction.filter((k) => !M.initialHits.includes(k)));
        }
      }
      r(C, S, E, U);
    };
  }
  return {
    handlePointer: d
  };
}
const vb = (s) => !!(s != null && s.render), FT = /* @__PURE__ */ ht.createContext(null), hL = (s, e) => {
  const n = H4((d, v) => {
    const g = new j(), S = new j(), x = new j();
    function M(E = v().camera, U = S, N = v().size) {
      const {
        width: O,
        height: I,
        top: V,
        left: Y
      } = N, k = O / I;
      U.isVector3 ? x.copy(U) : x.set(...U);
      const B = E.getWorldPosition(g).distanceTo(x);
      if (PT(E))
        return {
          width: O / E.zoom,
          height: I / E.zoom,
          top: V,
          left: Y,
          factor: 1,
          distance: B,
          aspect: k
        };
      {
        const z = E.fov * Math.PI / 180, W = 2 * Math.tan(z / 2) * B, le = W * (O / I);
        return {
          width: le,
          height: W,
          top: V,
          left: Y,
          factor: O / le,
          distance: B,
          aspect: k
        };
      }
    }
    let b;
    const R = (E) => d((U) => ({
      performance: {
        ...U.performance,
        current: E
      }
    })), w = new De();
    return {
      set: d,
      get: v,
      // Mock objects that have to be configured
      gl: null,
      camera: null,
      raycaster: null,
      events: {
        priority: 1,
        enabled: !0,
        connected: !1
      },
      scene: null,
      xr: null,
      invalidate: (E = 1) => s(v(), E),
      advance: (E, U) => e(E, U, v()),
      legacy: !1,
      linear: !1,
      flat: !1,
      controls: null,
      clock: new xx(),
      pointer: w,
      mouse: w,
      frameloop: "always",
      onPointerMissed: void 0,
      performance: {
        current: 1,
        min: 0.5,
        max: 1,
        debounce: 200,
        regress: () => {
          const E = v();
          b && clearTimeout(b), E.performance.current !== E.performance.min && R(E.performance.min), b = setTimeout(() => R(v().performance.max), E.performance.debounce);
        }
      },
      size: {
        width: 0,
        height: 0,
        top: 0,
        left: 0
      },
      viewport: {
        initialDpr: 0,
        dpr: 0,
        width: 0,
        height: 0,
        top: 0,
        left: 0,
        aspect: 0,
        distance: 0,
        factor: 0,
        getCurrentViewport: M
      },
      setEvents: (E) => d((U) => ({
        ...U,
        events: {
          ...U.events,
          ...E
        }
      })),
      setSize: (E, U, N = 0, O = 0) => {
        const I = v().camera, V = {
          width: E,
          height: U,
          top: N,
          left: O
        };
        d((Y) => ({
          size: V,
          viewport: {
            ...Y.viewport,
            ...M(I, S, V)
          }
        }));
      },
      setDpr: (E) => d((U) => {
        const N = HT(E);
        return {
          viewport: {
            ...U.viewport,
            dpr: N,
            initialDpr: U.viewport.initialDpr || N
          }
        };
      }),
      setFrameloop: (E = "always") => {
        const U = v().clock;
        U.stop(), U.elapsedTime = 0, E !== "never" && (U.start(), U.elapsedTime = 0), d(() => ({
          frameloop: E
        }));
      },
      previousRoot: void 0,
      internal: {
        // Events
        interaction: [],
        hovered: /* @__PURE__ */ new Map(),
        subscribers: [],
        initialClick: [0, 0],
        initialHits: [],
        capturedMap: /* @__PURE__ */ new Map(),
        lastEvent: /* @__PURE__ */ ht.createRef(),
        // Updates
        active: !1,
        frames: 0,
        priority: 0,
        subscribe: (E, U, N) => {
          const O = v().internal;
          return O.priority = O.priority + (U > 0 ? 1 : 0), O.subscribers.push({
            ref: E,
            priority: U,
            store: N
          }), O.subscribers = O.subscribers.sort((I, V) => I.priority - V.priority), () => {
            const I = v().internal;
            I != null && I.subscribers && (I.priority = I.priority - (U > 0 ? 1 : 0), I.subscribers = I.subscribers.filter((V) => V.ref !== E));
          };
        }
      }
    };
  }), i = n.getState();
  let r = i.size, c = i.viewport.dpr, h = i.camera;
  return n.subscribe(() => {
    const {
      camera: d,
      size: v,
      viewport: g,
      gl: S,
      set: x
    } = n.getState();
    if (v.width !== r.width || v.height !== r.height || g.dpr !== c) {
      r = v, c = g.dpr, cL(d, v), g.dpr > 0 && S.setPixelRatio(g.dpr);
      const M = typeof HTMLCanvasElement < "u" && S.domElement instanceof HTMLCanvasElement;
      S.setSize(v.width, v.height, M);
    }
    d !== h && (h = d, x((M) => ({
      viewport: {
        ...M.viewport,
        ...M.viewport.getCurrentViewport(d)
      }
    })));
  }), n.subscribe((d) => s(d)), n;
};
function XT() {
  const s = ht.useContext(FT);
  if (!s) throw new Error("R3F: Hooks can only be used within the Canvas component!");
  return s;
}
function Cx(s = (n) => n, e) {
  return XT()(s, e);
}
function qT(s, e = 0) {
  const n = XT(), i = n.getState().internal.subscribe, r = IT(s);
  return Sm(() => i(r, e, n), [e, i, n]), null;
}
function dL(s) {
  const e = Y4(s);
  return e.injectIntoDevTools({
    bundleType: 0,
    rendererPackageName: "@react-three/fiber",
    version: ht.version
  }), e;
}
const YT = 0, Zh = {}, pL = /^three(?=[A-Z])/, gy = (s) => `${s[0].toUpperCase()}${s.slice(1)}`;
let mL = 0;
const vL = (s) => typeof s == "function";
function kT(s) {
  if (vL(s)) {
    const e = `${mL++}`;
    return Zh[e] = s, e;
  } else
    Object.assign(Zh, s);
}
function WT(s, e) {
  const n = gy(s), i = Zh[n];
  if (s !== "primitive" && !i) throw new Error(`R3F: ${n} is not part of the THREE namespace! Did you forget to extend? See: https://docs.pmnd.rs/react-three-fiber/api/objects#using-3rd-party-objects-declaratively`);
  if (s === "primitive" && !e.object) throw new Error("R3F: Primitives without 'object' are invalid!");
  if (e.args !== void 0 && !Array.isArray(e.args)) throw new Error("R3F: The args prop must be an array!");
}
function gL(s, e, n) {
  var i;
  return s = gy(s) in Zh ? s : s.replace(pL, ""), WT(s, e), s === "primitive" && (i = e.object) != null && i.__r3f && delete e.object.__r3f, L0(e.object, n, s, e);
}
function yL(s) {
  if (!s.isHidden) {
    var e;
    s.props.attach && (e = s.parent) != null && e.object ? B0(s.parent, s) : xs(s.object) && (s.object.visible = !1), s.isHidden = !0, td(s);
  }
}
function ZT(s) {
  if (s.isHidden) {
    var e;
    s.props.attach && (e = s.parent) != null && e.object ? z0(s.parent, s) : xs(s.object) && s.props.visible !== !1 && (s.object.visible = !0), s.isHidden = !1, td(s);
  }
}
function wx(s, e, n) {
  const i = e.root.getState();
  if (!(!s.parent && s.object !== i.scene)) {
    if (!e.object) {
      var r, c;
      const h = Zh[gy(e.type)];
      e.object = (r = e.props.object) != null ? r : new h(...(c = e.props.args) != null ? c : []), e.object.__r3f = e;
    }
    if (Tc(e.object, e.props), e.props.attach)
      z0(s, e);
    else if (xs(e.object) && xs(s.object)) {
      const h = s.object.children.indexOf(n?.object);
      if (n && h !== -1) {
        const d = s.object.children.indexOf(e.object);
        if (d !== -1) {
          s.object.children.splice(d, 1);
          const v = d < h ? h - 1 : h;
          s.object.children.splice(v, 0, e.object);
        } else
          e.object.parent = s.object, s.object.children.splice(h, 0, e.object), e.object.dispatchEvent({
            type: "added"
          }), s.object.dispatchEvent({
            type: "childadded",
            child: e.object
          });
      } else
        s.object.add(e.object);
    }
    for (const h of e.children) wx(e, h);
    td(e);
  }
}
function oS(s, e) {
  e && (e.parent = s, s.children.push(e), wx(s, e));
}
function gb(s, e, n) {
  if (!e || !n) return;
  e.parent = s;
  const i = s.children.indexOf(n);
  i !== -1 ? s.children.splice(i, 0, e) : s.children.push(e), wx(s, e, n);
}
function jT(s) {
  if (typeof s.dispose == "function") {
    const e = () => {
      try {
        s.dispose();
      } catch {
      }
    };
    typeof IS_REACT_ACT_ENVIRONMENT < "u" ? e() : db.unstable_scheduleCallback(db.unstable_IdlePriority, e);
  }
}
function OS(s, e, n) {
  if (!e) return;
  e.parent = null;
  const i = s.children.indexOf(e);
  i !== -1 && s.children.splice(i, 1), e.props.attach ? B0(s, e) : xs(e.object) && xs(s.object) && (s.object.remove(e.object), uL(BT(e), e.object));
  const r = e.props.dispose !== null && n !== !1;
  for (let c = e.children.length - 1; c >= 0; c--) {
    const h = e.children[c];
    OS(e, h, r);
  }
  e.children.length = 0, delete e.object.__r3f, r && e.type !== "primitive" && e.object.type !== "Scene" && jT(e.object), n === void 0 && td(e);
}
function _L(s, e) {
  for (const n of [s, s.alternate])
    if (n !== null)
      if (typeof n.ref == "function") {
        n.refCleanup == null || n.refCleanup();
        const i = n.ref(e);
        typeof i == "function" && (n.refCleanup = i);
      } else n.ref && (n.ref.current = e);
}
const Wg = [];
function SL() {
  for (const [n] of Wg) {
    const i = n.parent;
    if (i) {
      n.props.attach ? B0(i, n) : xs(n.object) && xs(i.object) && i.object.remove(n.object);
      for (const r of n.children)
        r.props.attach ? B0(n, r) : xs(r.object) && xs(n.object) && n.object.remove(r.object);
    }
    n.isHidden && ZT(n), n.object.__r3f && delete n.object.__r3f, n.type !== "primitive" && jT(n.object);
  }
  for (const [n, i, r] of Wg) {
    n.props = i;
    const c = n.parent;
    if (c) {
      var s, e;
      const h = Zh[gy(n.type)];
      n.object = (s = n.props.object) != null ? s : new h(...(e = n.props.args) != null ? e : []), n.object.__r3f = n, _L(r, n.object), Tc(n.object, n.props), n.props.attach ? z0(c, n) : xs(n.object) && xs(c.object) && c.object.add(n.object);
      for (const d of n.children)
        d.props.attach ? z0(n, d) : xs(d.object) && xs(n.object) && n.object.add(d.object);
      td(n);
    }
  }
  Wg.length = 0;
}
const lS = () => {
}, yb = {};
let Fg = YT;
const xL = 0, ML = 4, LS = /* @__PURE__ */ dL({
  isPrimaryRenderer: !1,
  warnsIfNotActing: !1,
  supportsMutation: !0,
  supportsPersistence: !1,
  supportsHydration: !1,
  createInstance: gL,
  removeChild: OS,
  appendChild: oS,
  appendInitialChild: oS,
  insertBefore: gb,
  appendChildToContainer(s, e) {
    const n = s.getState().scene.__r3f;
    !e || !n || oS(n, e);
  },
  removeChildFromContainer(s, e) {
    const n = s.getState().scene.__r3f;
    !e || !n || OS(n, e);
  },
  insertInContainerBefore(s, e, n) {
    const i = s.getState().scene.__r3f;
    !e || !n || !i || gb(i, e, n);
  },
  getRootHostContext: () => yb,
  getChildHostContext: () => yb,
  commitUpdate(s, e, n, i, r) {
    var c, h, d;
    WT(e, i);
    let v = !1;
    if ((s.type === "primitive" && n.object !== i.object || ((c = i.args) == null ? void 0 : c.length) !== ((h = n.args) == null ? void 0 : h.length) || (d = i.args) != null && d.some((S, x) => {
      var M;
      return S !== ((M = n.args) == null ? void 0 : M[x]);
    })) && (v = !0), v)
      Wg.push([s, {
        ...i
      }, r]);
    else {
      const S = rL(s, i);
      Object.keys(S).length && (Object.assign(s.props, S), Tc(s.object, S));
    }
    (r.sibling === null || (r.flags & ML) === xL) && SL();
  },
  finalizeInitialChildren: () => !1,
  commitMount() {
  },
  getPublicInstance: (s) => s?.object,
  prepareForCommit: () => null,
  preparePortalMount: (s) => L0(s.getState().scene, s, "", {}),
  resetAfterCommit: () => {
  },
  shouldSetTextContent: () => !1,
  clearContainer: () => !1,
  hideInstance: yL,
  unhideInstance: ZT,
  createTextInstance: lS,
  hideTextInstance: lS,
  unhideTextInstance: lS,
  scheduleTimeout: typeof setTimeout == "function" ? setTimeout : void 0,
  cancelTimeout: typeof clearTimeout == "function" ? clearTimeout : void 0,
  noTimeout: -1,
  getInstanceFromNode: () => null,
  beforeActiveInstanceBlur() {
  },
  afterActiveInstanceBlur() {
  },
  detachDeletedInstance() {
  },
  prepareScopeUpdate() {
  },
  getInstanceFromScope: () => null,
  shouldAttemptEagerTransition: () => !1,
  trackSchedulerEvent: () => {
  },
  resolveEventType: () => null,
  resolveEventTimeStamp: () => -1.1,
  requestPostPaintCallback() {
  },
  maySuspendCommit: () => !1,
  preloadInstance: () => !0,
  // true indicates already loaded
  startSuspendingCommit() {
  },
  suspendInstance() {
  },
  waitForCommitToBeReady: () => null,
  NotPendingTransition: null,
  // The reconciler types use the internal ReactContext with all the hidden properties
  // so we have to cast from the public React.Context type
  HostTransitionContext: /* @__PURE__ */ ht.createContext(null),
  setCurrentUpdatePriority(s) {
    Fg = s;
  },
  getCurrentUpdatePriority() {
    return Fg;
  },
  resolveUpdatePriority() {
    var s;
    if (Fg !== YT) return Fg;
    switch (typeof window < "u" && ((s = window.event) == null ? void 0 : s.type)) {
      case "click":
      case "contextmenu":
      case "dblclick":
      case "pointercancel":
      case "pointerdown":
      case "pointerup":
        return Xg.DiscreteEventPriority;
      case "pointermove":
      case "pointerout":
      case "pointerover":
      case "pointerenter":
      case "pointerleave":
      case "wheel":
        return Xg.ContinuousEventPriority;
      default:
        return Xg.DefaultEventPriority;
    }
  },
  resetFormInstance() {
  }
}), tf = /* @__PURE__ */ new Map(), Uh = {
  objects: "shallow",
  strict: !1
};
function bL(s, e) {
  if (!e && typeof HTMLCanvasElement < "u" && s instanceof HTMLCanvasElement && s.parentElement) {
    const {
      width: n,
      height: i,
      top: r,
      left: c
    } = s.parentElement.getBoundingClientRect();
    return {
      width: n,
      height: i,
      top: r,
      left: c
    };
  } else if (!e && typeof OffscreenCanvas < "u" && s instanceof OffscreenCanvas)
    return {
      width: s.width,
      height: s.height,
      top: 0,
      left: 0
    };
  return {
    width: 0,
    height: 0,
    top: 0,
    left: 0,
    ...e
  };
}
function EL(s) {
  const e = tf.get(s), n = e?.fiber, i = e?.store;
  e && console.warn("R3F.createRoot should only be called once!");
  const r = typeof reportError == "function" ? (
    // In modern browsers, reportError will dispatch an error event,
    // emulating an uncaught JavaScript error.
    reportError
  ) : (
    // In older browsers and test environments, fallback to console.error.
    console.error
  ), c = i || hL(PS, Sb), h = n || LS.createContainer(
    c,
    // container
    Xg.ConcurrentRoot,
    // tag
    null,
    // hydration callbacks
    !1,
    // isStrictMode
    null,
    // concurrentUpdatesByDefaultOverride
    "",
    // identifierPrefix
    r,
    // onUncaughtError
    r,
    // onCaughtError
    r,
    // onRecoverableError
    null
    // transitionCallbacks
  );
  e || tf.set(s, {
    fiber: h,
    store: c
  });
  let d, v, g = !1, S = null;
  return {
    async configure(x = {}) {
      let M;
      S = new Promise((te) => M = te);
      let {
        gl: b,
        size: R,
        scene: w,
        events: C,
        onCreated: E,
        shadows: U = !1,
        linear: N = !1,
        flat: O = !1,
        legacy: I = !1,
        orthographic: V = !1,
        frameloop: Y = "always",
        dpr: k = [1, 2],
        performance: B,
        raycaster: z,
        camera: W,
        onPointerMissed: le
      } = x, ae = c.getState(), oe = ae.gl;
      if (!ae.gl) {
        const te = {
          canvas: s,
          powerPreference: "high-performance",
          antialias: !0,
          alpha: !0
        }, Me = typeof b == "function" ? await b(te) : b;
        vb(Me) ? oe = Me : oe = new NT({
          ...te,
          ...b
        }), ae.set({
          gl: oe
        });
      }
      let pe = ae.raycaster;
      pe || ae.set({
        raycaster: pe = new bT()
      });
      const {
        params: P,
        ...K
      } = z || {};
      if (fi.equ(K, pe, Uh) || Tc(pe, {
        ...K
      }), fi.equ(P, pe.params, Uh) || Tc(pe, {
        params: {
          ...pe.params,
          ...P
        }
      }), !ae.camera || ae.camera === v && !fi.equ(v, W, Uh)) {
        v = W;
        const te = W?.isCamera, Me = te ? W : V ? new _m(0, 0, 0, 0, 0.1, 1e3) : new Zi(75, 0, 0.1, 1e3);
        te || (Me.position.z = 5, W && (Tc(Me, W), Me.manual || ("aspect" in W || "left" in W || "right" in W || "bottom" in W || "top" in W) && (Me.manual = !0, Me.updateProjectionMatrix())), !ae.camera && !(W != null && W.rotation) && Me.lookAt(0, 0, 0)), ae.set({
          camera: Me
        }), pe.camera = Me;
      }
      if (!ae.scene) {
        let te;
        w != null && w.isScene ? (te = w, L0(te, c, "", {})) : (te = new $p(), L0(te, c, "", {}), w && Tc(te, w)), ae.set({
          scene: te
        });
      }
      C && !ae.events.handlers && ae.set({
        events: C(c)
      });
      const Q = bL(s, R);
      if (fi.equ(Q, ae.size, Uh) || ae.setSize(Q.width, Q.height, Q.top, Q.left), k && ae.viewport.dpr !== HT(k) && ae.setDpr(k), ae.frameloop !== Y && ae.setFrameloop(Y), ae.onPointerMissed || ae.set({
        onPointerMissed: le
      }), B && !fi.equ(B, ae.performance, Uh) && ae.set((te) => ({
        performance: {
          ...te.performance,
          ...B
        }
      })), !ae.xr) {
        var fe;
        const te = (Ne, he) => {
          const we = c.getState();
          we.frameloop !== "never" && Sb(Ne, !0, we, he);
        }, Me = () => {
          const Ne = c.getState();
          Ne.gl.xr.enabled = Ne.gl.xr.isPresenting, Ne.gl.xr.setAnimationLoop(Ne.gl.xr.isPresenting ? te : null), Ne.gl.xr.isPresenting || PS(Ne);
        }, Re = {
          connect() {
            const Ne = c.getState().gl;
            Ne.xr.addEventListener("sessionstart", Me), Ne.xr.addEventListener("sessionend", Me);
          },
          disconnect() {
            const Ne = c.getState().gl;
            Ne.xr.removeEventListener("sessionstart", Me), Ne.xr.removeEventListener("sessionend", Me);
          }
        };
        typeof ((fe = oe.xr) == null ? void 0 : fe.addEventListener) == "function" && Re.connect(), ae.set({
          xr: Re
        });
      }
      if (oe.shadowMap) {
        const te = oe.shadowMap.enabled, Me = oe.shadowMap.type;
        if (oe.shadowMap.enabled = !!U, fi.boo(U))
          oe.shadowMap.type = Np;
        else if (fi.str(U)) {
          var q;
          const Re = {
            basic: zb,
            percentage: I0,
            soft: Np,
            variance: Xr
          };
          oe.shadowMap.type = (q = Re[U]) != null ? q : Np;
        } else fi.obj(U) && Object.assign(oe.shadowMap, U);
        (te !== oe.shadowMap.enabled || Me !== oe.shadowMap.type) && (oe.shadowMap.needsUpdate = !0);
      }
      return vn.enabled = !I, g || (oe.outputColorSpace = N ? Ho : ei, oe.toneMapping = O ? Wr : GS), ae.legacy !== I && ae.set(() => ({
        legacy: I
      })), ae.linear !== N && ae.set(() => ({
        linear: N
      })), ae.flat !== O && ae.set(() => ({
        flat: O
      })), b && !fi.fun(b) && !vb(b) && !fi.equ(b, oe, Uh) && Tc(oe, b), d = E, g = !0, M(), this;
    },
    render(x) {
      return !g && !S && this.configure(), S.then(() => {
        LS.updateContainer(/* @__PURE__ */ Ot.jsx(TL, {
          store: c,
          children: x,
          onCreated: d,
          rootElement: s
        }), h, null, () => {
        });
      }), c;
    },
    unmount() {
      QT(s);
    }
  };
}
function TL({
  store: s,
  children: e,
  onCreated: n,
  rootElement: i
}) {
  return Sm(() => {
    const r = s.getState();
    r.set((c) => ({
      internal: {
        ...c.internal,
        active: !0
      }
    })), n && n(r), s.getState().events.connected || r.events.connect == null || r.events.connect(i);
  }, []), /* @__PURE__ */ Ot.jsx(FT.Provider, {
    value: s,
    children: e
  });
}
function QT(s, e) {
  const n = tf.get(s), i = n?.fiber;
  if (i) {
    const r = n?.store.getState();
    r && (r.internal.active = !1), LS.updateContainer(null, i, null, () => {
      r && setTimeout(() => {
        try {
          var c, h, d, v;
          r.events.disconnect == null || r.events.disconnect(), (c = r.gl) == null || (h = c.renderLists) == null || h.dispose == null || h.dispose(), (d = r.gl) == null || d.forceContextLoss == null || d.forceContextLoss(), (v = r.gl) != null && v.xr && r.xr.disconnect(), iL(r.scene), tf.delete(s);
        } catch {
        }
      }, 500);
    });
  }
}
const AL = /* @__PURE__ */ new Set(), RL = /* @__PURE__ */ new Set(), CL = /* @__PURE__ */ new Set();
function cS(s, e) {
  if (s.size)
    for (const {
      callback: n
    } of s.values())
      n(e);
}
function Fp(s, e) {
  switch (s) {
    case "before":
      return cS(AL, e);
    case "after":
      return cS(RL, e);
    case "tail":
      return cS(CL, e);
  }
}
let uS, fS;
function zS(s, e, n) {
  let i = e.clock.getDelta();
  e.frameloop === "never" && typeof s == "number" && (i = s - e.clock.elapsedTime, e.clock.oldTime = e.clock.elapsedTime, e.clock.elapsedTime = s), uS = e.internal.subscribers;
  for (let r = 0; r < uS.length; r++)
    fS = uS[r], fS.ref.current(fS.store.getState(), i, n);
  return !e.internal.priority && e.gl.render && e.gl.render(e.scene, e.camera), e.internal.frames = Math.max(0, e.internal.frames - 1), e.frameloop === "always" ? 1 : e.internal.frames;
}
let P0 = !1, BS = !1, hS, _b, Nh;
function KT(s) {
  _b = requestAnimationFrame(KT), P0 = !0, hS = 0, Fp("before", s), BS = !0;
  for (const n of tf.values()) {
    var e;
    Nh = n.store.getState(), Nh.internal.active && (Nh.frameloop === "always" || Nh.internal.frames > 0) && !((e = Nh.gl.xr) != null && e.isPresenting) && (hS += zS(s, Nh));
  }
  if (BS = !1, Fp("after", s), hS === 0)
    return Fp("tail", s), P0 = !1, cancelAnimationFrame(_b);
}
function PS(s, e = 1) {
  var n;
  if (!s) return tf.forEach((i) => PS(i.store.getState(), e));
  (n = s.gl.xr) != null && n.isPresenting || !s.internal.active || s.frameloop === "never" || (e > 1 ? s.internal.frames = Math.min(60, s.internal.frames + e) : BS ? s.internal.frames = 2 : s.internal.frames = 1, P0 || (P0 = !0, requestAnimationFrame(KT)));
}
function Sb(s, e = !0, n, i) {
  if (e && Fp("before", s), n) zS(s, n, i);
  else for (const r of tf.values()) zS(s, r.store.getState());
  e && Fp("after", s);
}
const dS = {
  onClick: ["click", !1],
  onContextMenu: ["contextmenu", !1],
  onDoubleClick: ["dblclick", !1],
  onWheel: ["wheel", !0],
  onPointerDown: ["pointerdown", !0],
  onPointerUp: ["pointerup", !0],
  onPointerLeave: ["pointerleave", !0],
  onPointerMove: ["pointermove", !0],
  onPointerCancel: ["pointercancel", !0],
  onLostPointerCapture: ["lostpointercapture", !0]
};
function wL(s) {
  const {
    handlePointer: e
  } = fL(s);
  return {
    priority: 1,
    enabled: !0,
    compute(n, i, r) {
      i.pointer.set(n.offsetX / i.size.width * 2 - 1, -(n.offsetY / i.size.height) * 2 + 1), i.raycaster.setFromCamera(i.pointer, i.camera);
    },
    connected: void 0,
    handlers: Object.keys(dS).reduce((n, i) => ({
      ...n,
      [i]: e(i)
    }), {}),
    update: () => {
      var n;
      const {
        events: i,
        internal: r
      } = s.getState();
      (n = r.lastEvent) != null && n.current && i.handlers && i.handlers.onPointerMove(r.lastEvent.current);
    },
    connect: (n) => {
      const {
        set: i,
        events: r
      } = s.getState();
      if (r.disconnect == null || r.disconnect(), i((c) => ({
        events: {
          ...c.events,
          connected: n
        }
      })), r.handlers)
        for (const c in r.handlers) {
          const h = r.handlers[c], [d, v] = dS[c];
          n.addEventListener(d, h, {
            passive: v
          });
        }
    },
    disconnect: () => {
      const {
        set: n,
        events: i
      } = s.getState();
      if (i.connected) {
        if (i.handlers)
          for (const r in i.handlers) {
            const c = i.handlers[r], [h] = dS[r];
            i.connected.removeEventListener(h, c);
          }
        n((r) => ({
          events: {
            ...r.events,
            connected: void 0
          }
        }));
      }
    }
  };
}
function xb(s, e) {
  let n;
  return (...i) => {
    window.clearTimeout(n), n = window.setTimeout(() => s(...i), e);
  };
}
function DL({ debounce: s, scroll: e, polyfill: n, offsetSize: i } = { debounce: 0, scroll: !1, offsetSize: !1 }) {
  const r = n || (typeof window > "u" ? class {
  } : window.ResizeObserver);
  if (!r) throw new Error("This browser does not support ResizeObserver out of the box. See: https://github.com/react-spring/react-use-measure/#resize-observer-polyfills");
  const [c, h] = ht.useState({ left: 0, top: 0, width: 0, height: 0, bottom: 0, right: 0, x: 0, y: 0 }), d = ht.useRef({ element: null, scrollContainers: null, resizeObserver: null, lastBounds: c, orientationHandler: null }), v = s ? typeof s == "number" ? s : s.scroll : null, g = s ? typeof s == "number" ? s : s.resize : null, S = ht.useRef(!1);
  ht.useEffect(() => (S.current = !0, () => void (S.current = !1)));
  const [x, M, b] = ht.useMemo(() => {
    const E = () => {
      if (!d.current.element) return;
      const { left: U, top: N, width: O, height: I, bottom: V, right: Y, x: k, y: B } = d.current.element.getBoundingClientRect(), z = { left: U, top: N, width: O, height: I, bottom: V, right: Y, x: k, y: B };
      d.current.element instanceof HTMLElement && i && (z.height = d.current.element.offsetHeight, z.width = d.current.element.offsetWidth), Object.freeze(z), S.current && !LL(d.current.lastBounds, z) && h(d.current.lastBounds = z);
    };
    return [E, g ? xb(E, g) : E, v ? xb(E, v) : E];
  }, [h, i, v, g]);
  function R() {
    d.current.scrollContainers && (d.current.scrollContainers.forEach((E) => E.removeEventListener("scroll", b, !0)), d.current.scrollContainers = null), d.current.resizeObserver && (d.current.resizeObserver.disconnect(), d.current.resizeObserver = null), d.current.orientationHandler && ("orientation" in screen && "removeEventListener" in screen.orientation ? screen.orientation.removeEventListener("change", d.current.orientationHandler) : "onorientationchange" in window && window.removeEventListener("orientationchange", d.current.orientationHandler));
  }
  function w() {
    d.current.element && (d.current.resizeObserver = new r(b), d.current.resizeObserver.observe(d.current.element), e && d.current.scrollContainers && d.current.scrollContainers.forEach((E) => E.addEventListener("scroll", b, { capture: !0, passive: !0 })), d.current.orientationHandler = () => {
      b();
    }, "orientation" in screen && "addEventListener" in screen.orientation ? screen.orientation.addEventListener("change", d.current.orientationHandler) : "onorientationchange" in window && window.addEventListener("orientationchange", d.current.orientationHandler));
  }
  const C = (E) => {
    !E || E === d.current.element || (R(), d.current.element = E, d.current.scrollContainers = JT(E), w());
  };
  return NL(b, !!e), UL(M), ht.useEffect(() => {
    R(), w();
  }, [e, b, M]), ht.useEffect(() => R, []), [C, c, x];
}
function UL(s) {
  ht.useEffect(() => {
    const e = s;
    return window.addEventListener("resize", e), () => void window.removeEventListener("resize", e);
  }, [s]);
}
function NL(s, e) {
  ht.useEffect(() => {
    if (e) {
      const n = s;
      return window.addEventListener("scroll", n, { capture: !0, passive: !0 }), () => void window.removeEventListener("scroll", n, !0);
    }
  }, [s, e]);
}
function JT(s) {
  const e = [];
  if (!s || s === document.body) return e;
  const { overflow: n, overflowX: i, overflowY: r } = window.getComputedStyle(s);
  return [n, i, r].some((c) => c === "auto" || c === "scroll") && e.push(s), [...e, ...JT(s.parentElement)];
}
const OL = ["x", "y", "top", "bottom", "left", "right", "width", "height"], LL = (s, e) => OL.every((n) => s[n] === e[n]);
function zL({
  ref: s,
  children: e,
  fallback: n,
  resize: i,
  style: r,
  gl: c,
  events: h = wL,
  eventSource: d,
  eventPrefix: v,
  shadows: g,
  linear: S,
  flat: x,
  legacy: M,
  orthographic: b,
  frameloop: R,
  dpr: w,
  performance: C,
  raycaster: E,
  camera: U,
  scene: N,
  onPointerMissed: O,
  onCreated: I,
  ...V
}) {
  ht.useMemo(() => kT(C4), []);
  const Y = eL(), [k, B] = DL({
    scroll: !0,
    debounce: {
      scroll: 50,
      resize: 0
    },
    ...i
  }), z = ht.useRef(null), W = ht.useRef(null);
  ht.useImperativeHandle(s, () => z.current);
  const le = IT(O), [ae, oe] = ht.useState(!1), [pe, P] = ht.useState(!1);
  if (ae) throw ae;
  if (pe) throw pe;
  const K = ht.useRef(null);
  Sm(() => {
    const fe = z.current;
    if (B.width > 0 && B.height > 0 && fe) {
      K.current || (K.current = EL(fe));
      async function q() {
        await K.current.configure({
          gl: c,
          scene: N,
          events: h,
          shadows: g,
          linear: S,
          flat: x,
          legacy: M,
          orthographic: b,
          frameloop: R,
          dpr: w,
          performance: C,
          raycaster: E,
          camera: U,
          size: B,
          // Pass mutable reference to onPointerMissed so it's free to update
          onPointerMissed: (...te) => le.current == null ? void 0 : le.current(...te),
          onCreated: (te) => {
            te.events.connect == null || te.events.connect(d ? J4(d) ? d.current : d : W.current), v && te.setEvents({
              compute: (Me, Re) => {
                const Ne = Me[v + "X"], he = Me[v + "Y"];
                Re.pointer.set(Ne / Re.size.width * 2 - 1, -(he / Re.size.height) * 2 + 1), Re.raycaster.setFromCamera(Re.pointer, Re.camera);
              }
            }), I?.(te);
          }
        }), K.current.render(/* @__PURE__ */ Ot.jsx(Y, {
          children: /* @__PURE__ */ Ot.jsx(nL, {
            set: P,
            children: /* @__PURE__ */ Ot.jsx(ht.Suspense, {
              fallback: /* @__PURE__ */ Ot.jsx(tL, {
                set: oe
              }),
              children: e ?? null
            })
          })
        }));
      }
      q();
    }
  }), ht.useEffect(() => {
    const fe = z.current;
    if (fe) return () => QT(fe);
  }, []);
  const Q = d ? "none" : "auto";
  return /* @__PURE__ */ Ot.jsx("div", {
    ref: W,
    style: {
      position: "relative",
      width: "100%",
      height: "100%",
      overflow: "hidden",
      pointerEvents: Q,
      ...r
    },
    ...V,
    children: /* @__PURE__ */ Ot.jsx("div", {
      ref: k,
      style: {
        width: "100%",
        height: "100%"
      },
      children: /* @__PURE__ */ Ot.jsx("canvas", {
        ref: z,
        style: {
          display: "block"
        },
        children: n
      })
    })
  });
}
function BL(s) {
  return /* @__PURE__ */ Ot.jsx(LT, {
    children: /* @__PURE__ */ Ot.jsx(zL, {
      ...s
    })
  });
}
/**
 * postprocessing v6.37.7 build Mon Aug 04 2025
 * https://github.com/pmndrs/postprocessing
 * Copyright 2015-2025 Raoul van Rüschen
 * @license Zlib
 */
var pS = 1 / 1e3, PL = 1e3, IL = class {
  /**
   * Constructs a new timer.
   */
  constructor() {
    this.startTime = performance.now(), this.previousTime = 0, this.currentTime = 0, this._delta = 0, this._elapsed = 0, this._fixedDelta = 1e3 / 60, this.timescale = 1, this.useFixedDelta = !1, this._autoReset = !1;
  }
  /**
   * Enables or disables auto reset based on page visibility.
   *
   * If enabled, the timer will be reset when the page becomes visible. This effectively pauses the timer when the page
   * is hidden. Has no effect if the API is not supported.
   *
   * @type {Boolean}
   * @see https://developer.mozilla.org/en-US/docs/Web/API/Page_Visibility_API
   */
  get autoReset() {
    return this._autoReset;
  }
  set autoReset(s) {
    typeof document < "u" && document.hidden !== void 0 && (s ? document.addEventListener("visibilitychange", this) : document.removeEventListener("visibilitychange", this), this._autoReset = s);
  }
  get delta() {
    return this._delta * pS;
  }
  get fixedDelta() {
    return this._fixedDelta * pS;
  }
  set fixedDelta(s) {
    this._fixedDelta = s * PL;
  }
  get elapsed() {
    return this._elapsed * pS;
  }
  /**
   * Updates this timer.
   *
   * @param {Boolean} [timestamp] - The current time in milliseconds.
   */
  update(s) {
    this.useFixedDelta ? this._delta = this.fixedDelta : (this.previousTime = this.currentTime, this.currentTime = (s !== void 0 ? s : performance.now()) - this.startTime, this._delta = this.currentTime - this.previousTime), this._delta *= this.timescale, this._elapsed += this._delta;
  }
  /**
   * Resets this timer.
   */
  reset() {
    this._delta = 0, this._elapsed = 0, this.currentTime = performance.now() - this.startTime;
  }
  getDelta() {
    return this.delta;
  }
  getElapsed() {
    return this.elapsed;
  }
  handleEvent(s) {
    document.hidden || (this.currentTime = performance.now() - this.startTime);
  }
  dispose() {
    this.autoReset = !1;
  }
}, HL = /* @__PURE__ */ (() => {
  const s = new Float32Array([-1, -1, 0, 3, -1, 0, -1, 3, 0]), e = new Float32Array([0, 0, 2, 0, 0, 2]), n = new Kt();
  return n.setAttribute("position", new Nn(s, 3)), n.setAttribute("uv", new Nn(e, 2)), n;
})(), jr = class IS {
  /**
   * A shared fullscreen triangle.
   *
   * The screen size is 2x2 units (NDC). A triangle needs to be 4x4 units to fill the screen.
   * @see https://michaldrobot.com/2014/04/01/gcn-execution-patterns-in-full-screen-passes/
   * @type {BufferGeometry}
   * @internal
   */
  static get fullscreenGeometry() {
    return HL;
  }
  /**
   * Constructs a new pass.
   *
   * @param {String} [name] - The name of this pass. Does not have to be unique.
   * @param {Scene} [scene] - The scene to render. The default scene contains a single mesh that fills the screen.
   * @param {Camera} [camera] - A camera. Fullscreen effect passes don't require a camera.
   */
  constructor(e = "Pass", n = new $p(), i = new fm()) {
    this.name = e, this.renderer = null, this.scene = n, this.camera = i, this.screen = null, this.rtt = !0, this.needsSwap = !0, this.needsDepthTexture = !1, this.enabled = !0;
  }
  /**
   * Sets the render to screen flag.
   *
   * If this flag is changed, the fullscreen material will be updated as well.
   *
   * @type {Boolean}
   */
  get renderToScreen() {
    return !this.rtt;
  }
  set renderToScreen(e) {
    if (this.rtt === e) {
      const n = this.fullscreenMaterial;
      n !== null && (n.needsUpdate = !0), this.rtt = !e;
    }
  }
  /**
   * Sets the main scene.
   *
   * @type {Scene}
   */
  set mainScene(e) {
  }
  /**
   * Sets the main camera.
   *
   * @type {Camera}
   */
  set mainCamera(e) {
  }
  /**
   * Sets the renderer
   *
   * @deprecated
   * @param {WebGLRenderer} renderer - The renderer.
   */
  setRenderer(e) {
    this.renderer = e;
  }
  /**
   * Indicates whether this pass is enabled.
   *
   * @deprecated Use enabled instead.
   * @return {Boolean} Whether this pass is enabled.
   */
  isEnabled() {
    return this.enabled;
  }
  /**
   * Enables or disables this pass.
   *
   * @deprecated Use enabled instead.
   * @param {Boolean} value - Whether the pass should be enabled.
   */
  setEnabled(e) {
    this.enabled = e;
  }
  /**
   * The fullscreen material.
   *
   * @type {Material}
   */
  get fullscreenMaterial() {
    return this.screen !== null ? this.screen.material : null;
  }
  set fullscreenMaterial(e) {
    let n = this.screen;
    n !== null ? n.material = e : (n = new Ci(IS.fullscreenGeometry, e), n.frustumCulled = !1, this.scene === null && (this.scene = new $p()), this.scene.add(n), this.screen = n);
  }
  /**
   * Returns the current fullscreen material.
   *
   * @deprecated Use fullscreenMaterial instead.
   * @return {Material} The current fullscreen material, or null if there is none.
   */
  getFullscreenMaterial() {
    return this.fullscreenMaterial;
  }
  /**
   * Sets the fullscreen material.
   *
   * @deprecated Use fullscreenMaterial instead.
   * @protected
   * @param {Material} value - A fullscreen material.
   */
  setFullscreenMaterial(e) {
    this.fullscreenMaterial = e;
  }
  /**
   * Returns the current depth texture.
   *
   * @return {Texture} The current depth texture, or null if there is none.
   */
  getDepthTexture() {
    return null;
  }
  /**
   * Sets the depth texture.
   *
   * This method will be called automatically by the {@link EffectComposer}.
   * You may override this method if your pass relies on the depth information of a preceding {@link RenderPass}.
   *
   * @param {Texture} depthTexture - A depth texture.
   * @param {DepthPackingStrategy} [depthPacking=BasicDepthPacking] - The depth packing.
   */
  setDepthTexture(e, n = wc) {
  }
  /**
   * Renders this pass.
   *
   * This is an abstract method that must be overridden.
   *
   * @abstract
   * @throws {Error} An error is thrown if the method is not overridden.
   * @param {WebGLRenderer} renderer - The renderer.
   * @param {WebGLRenderTarget} inputBuffer - A frame buffer that contains the result of the previous pass.
   * @param {WebGLRenderTarget} outputBuffer - A frame buffer that serves as the output render target unless this pass renders to screen.
   * @param {Number} [deltaTime] - The time between the last frame and the current one in seconds.
   * @param {Boolean} [stencilTest] - Indicates whether a stencil mask is active.
   */
  render(e, n, i, r, c) {
    throw new Error("Render method not implemented!");
  }
  /**
   * Sets the size.
   *
   * You may override this method if you want to be informed about the size of the backbuffer/canvas.
   * This method is called before {@link initialize} and every time the size of the {@link EffectComposer} changes.
   *
   * @param {Number} width - The width.
   * @param {Number} height - The height.
   */
  setSize(e, n) {
  }
  /**
   * Performs initialization tasks.
   *
   * This method is called when this pass is added to an {@link EffectComposer}.
   *
   * @param {WebGLRenderer} renderer - The renderer.
   * @param {Boolean} alpha - Whether the renderer uses the alpha channel or not.
   * @param {Number} frameBufferType - The type of the main frame buffers.
   */
  initialize(e, n, i) {
  }
  /**
   * Performs a shallow search for disposable properties and deletes them.
   *
   * The {@link EffectComposer} calls this method when it is being destroyed. You can use it independently to free
   * memory when you're certain that you don't need this pass anymore.
   */
  dispose() {
    for (const e of Object.keys(this)) {
      const n = this[e];
      (n instanceof Ua || n instanceof sa || n instanceof si || n instanceof IS) && this[e].dispose();
    }
    this.fullscreenMaterial !== null && this.fullscreenMaterial.dispose();
  }
}, VL = class extends jr {
  /**
   * Constructs a new clear mask pass.
   */
  constructor() {
    super("ClearMaskPass", null, null), this.needsSwap = !1;
  }
  /**
   * Disables the global stencil test.
   *
   * @param {WebGLRenderer} renderer - The renderer.
   * @param {WebGLRenderTarget} inputBuffer - A frame buffer that contains the result of the previous pass.
   * @param {WebGLRenderTarget} outputBuffer - A frame buffer that serves as the output render target unless this pass renders to screen.
   * @param {Number} [deltaTime] - The time between the last frame and the current one in seconds.
   * @param {Boolean} [stencilTest] - Indicates whether a stencil mask is active.
   */
  render(s, e, n, i, r) {
    const c = s.state.buffers.stencil;
    c.setLocked(!1), c.setTest(!1);
  }
}, GL = `#include <common>
#include <dithering_pars_fragment>
#ifdef FRAMEBUFFER_PRECISION_HIGH
uniform mediump sampler2D inputBuffer;
#else
uniform lowp sampler2D inputBuffer;
#endif
uniform float opacity;varying vec2 vUv;void main(){vec4 texel=texture2D(inputBuffer,vUv);gl_FragColor=opacity*texel;
#include <colorspace_fragment>
#include <dithering_fragment>
}`, FL = "varying vec2 vUv;void main(){vUv=position.xy*0.5+0.5;gl_Position=vec4(position.xy,1.0,1.0);}", XL = class extends ts {
  /**
   * Constructs a new copy material.
   */
  constructor() {
    super({
      name: "CopyMaterial",
      uniforms: {
        inputBuffer: new qn(null),
        opacity: new qn(1)
      },
      blending: dr,
      toneMapped: !1,
      depthWrite: !1,
      depthTest: !1,
      fragmentShader: GL,
      vertexShader: FL
    });
  }
  /**
   * The input buffer.
   *
   * @type {Texture}
   */
  set inputBuffer(s) {
    this.uniforms.inputBuffer.value = s;
  }
  /**
   * Sets the input buffer.
   *
   * @deprecated Use inputBuffer instead.
   * @param {Number} value - The buffer.
   */
  setInputBuffer(s) {
    this.uniforms.inputBuffer.value = s;
  }
  /**
   * Returns the opacity.
   *
   * @deprecated Use opacity instead.
   * @return {Number} The opacity.
   */
  getOpacity(s) {
    return this.uniforms.opacity.value;
  }
  /**
   * Sets the opacity.
   *
   * @deprecated Use opacity instead.
   * @param {Number} value - The opacity.
   */
  setOpacity(s) {
    this.uniforms.opacity.value = s;
  }
}, qL = class extends jr {
  /**
   * Constructs a new save pass.
   *
   * @param {WebGLRenderTarget} [renderTarget] - A render target.
   * @param {Boolean} [autoResize=true] - Whether the render target size should be updated automatically.
   */
  constructor(s, e = !0) {
    super("CopyPass"), this.fullscreenMaterial = new XL(), this.needsSwap = !1, this.renderTarget = s, s === void 0 && (this.renderTarget = new Ua(1, 1, {
      minFilter: di,
      magFilter: di,
      stencilBuffer: !1,
      depthBuffer: !1
    }), this.renderTarget.texture.name = "CopyPass.Target"), this.autoResize = e;
  }
  /**
   * Enables or disables auto resizing of the render target.
   *
   * @deprecated Use autoResize instead.
   * @type {Boolean}
   */
  get resize() {
    return this.autoResize;
  }
  set resize(s) {
    this.autoResize = s;
  }
  /**
   * The output texture.
   *
   * @type {Texture}
   */
  get texture() {
    return this.renderTarget.texture;
  }
  /**
   * Returns the output texture.
   *
   * @deprecated Use texture instead.
   * @return {Texture} The texture.
   */
  getTexture() {
    return this.renderTarget.texture;
  }
  /**
   * Enables or disables auto resizing of the render target.
   *
   * @deprecated Use autoResize instead.
   * @param {Boolean} value - Whether the render target size should be updated automatically.
   */
  setAutoResizeEnabled(s) {
    this.autoResize = s;
  }
  /**
   * Saves the input buffer.
   *
   * @param {WebGLRenderer} renderer - The renderer.
   * @param {WebGLRenderTarget} inputBuffer - A frame buffer that contains the result of the previous pass.
   * @param {WebGLRenderTarget} outputBuffer - A frame buffer that serves as the output render target unless this pass renders to screen.
   * @param {Number} [deltaTime] - The time between the last frame and the current one in seconds.
   * @param {Boolean} [stencilTest] - Indicates whether a stencil mask is active.
   */
  render(s, e, n, i, r) {
    this.fullscreenMaterial.inputBuffer = e.texture, s.setRenderTarget(this.renderToScreen ? null : this.renderTarget), s.render(this.scene, this.camera);
  }
  /**
   * Updates the size of this pass.
   *
   * @param {Number} width - The width.
   * @param {Number} height - The height.
   */
  setSize(s, e) {
    this.autoResize && this.renderTarget.setSize(s, e);
  }
  /**
   * Performs initialization tasks.
   *
   * @param {WebGLRenderer} renderer - A renderer.
   * @param {Boolean} alpha - Whether the renderer uses the alpha channel.
   * @param {Number} frameBufferType - The type of the main frame buffers.
   */
  initialize(s, e, n) {
    n !== void 0 && (this.renderTarget.texture.type = n, n !== Da ? this.fullscreenMaterial.defines.FRAMEBUFFER_PRECISION_HIGH = "1" : s !== null && s.outputColorSpace === ei && (this.renderTarget.texture.colorSpace = ei));
  }
}, Mb = /* @__PURE__ */ new lt(), $T = class extends jr {
  /**
   * Constructs a new clear pass.
   *
   * @param {Boolean} [color=true] - Determines whether the color buffer should be cleared.
   * @param {Boolean} [depth=true] - Determines whether the depth buffer should be cleared.
   * @param {Boolean} [stencil=false] - Determines whether the stencil buffer should be cleared.
   */
  constructor(s = !0, e = !0, n = !1) {
    super("ClearPass", null, null), this.needsSwap = !1, this.color = s, this.depth = e, this.stencil = n, this.overrideClearColor = null, this.overrideClearAlpha = -1;
  }
  /**
   * Sets the clear flags.
   *
   * @param {Boolean} color - Whether the color buffer should be cleared.
   * @param {Boolean} depth - Whether the depth buffer should be cleared.
   * @param {Boolean} stencil - Whether the stencil buffer should be cleared.
   */
  setClearFlags(s, e, n) {
    this.color = s, this.depth = e, this.stencil = n;
  }
  /**
   * Returns the override clear color. Default is null.
   *
   * @deprecated Use overrideClearColor instead.
   * @return {Color} The clear color.
   */
  getOverrideClearColor() {
    return this.overrideClearColor;
  }
  /**
   * Sets the override clear color.
   *
   * @deprecated Use overrideClearColor instead.
   * @param {Color} value - The clear color.
   */
  setOverrideClearColor(s) {
    this.overrideClearColor = s;
  }
  /**
   * Returns the override clear alpha. Default is -1.
   *
   * @deprecated Use overrideClearAlpha instead.
   * @return {Number} The clear alpha.
   */
  getOverrideClearAlpha() {
    return this.overrideClearAlpha;
  }
  /**
   * Sets the override clear alpha.
   *
   * @deprecated Use overrideClearAlpha instead.
   * @param {Number} value - The clear alpha.
   */
  setOverrideClearAlpha(s) {
    this.overrideClearAlpha = s;
  }
  /**
   * Clears the input buffer or the screen.
   *
   * @param {WebGLRenderer} renderer - The renderer.
   * @param {WebGLRenderTarget} inputBuffer - A frame buffer that contains the result of the previous pass.
   * @param {WebGLRenderTarget} outputBuffer - A frame buffer that serves as the output render target unless this pass renders to screen.
   * @param {Number} [deltaTime] - The time between the last frame and the current one in seconds.
   * @param {Boolean} [stencilTest] - Indicates whether a stencil mask is active.
   */
  render(s, e, n, i, r) {
    const c = this.overrideClearColor, h = this.overrideClearAlpha, d = s.getClearAlpha(), v = c !== null, g = h >= 0;
    v ? (s.getClearColor(Mb), s.setClearColor(c, g ? h : d)) : g && s.setClearAlpha(h), s.setRenderTarget(this.renderToScreen ? null : e), s.clear(this.color, this.depth, this.stencil), v ? s.setClearColor(Mb, d) : g && s.setClearAlpha(d);
  }
}, YL = class extends jr {
  /**
   * Constructs a new mask pass.
   *
   * @param {Scene} scene - The scene to render.
   * @param {Camera} camera - The camera to use.
   */
  constructor(s, e) {
    super("MaskPass", s, e), this.needsSwap = !1, this.clearPass = new $T(!1, !1, !0), this.inverse = !1;
  }
  set mainScene(s) {
    this.scene = s;
  }
  set mainCamera(s) {
    this.camera = s;
  }
  /**
   * Indicates whether the mask should be inverted.
   *
   * @type {Boolean}
   */
  get inverted() {
    return this.inverse;
  }
  set inverted(s) {
    this.inverse = s;
  }
  /**
   * Indicates whether this pass should clear the stencil buffer.
   *
   * @type {Boolean}
   * @deprecated Use clearPass.enabled instead.
   */
  get clear() {
    return this.clearPass.enabled;
  }
  set clear(s) {
    this.clearPass.enabled = s;
  }
  /**
   * Returns the internal clear pass.
   *
   * @deprecated Use clearPass.enabled instead.
   * @return {ClearPass} The clear pass.
   */
  getClearPass() {
    return this.clearPass;
  }
  /**
   * Indicates whether the mask is inverted.
   *
   * @deprecated Use inverted instead.
   * @return {Boolean} Whether the mask is inverted.
   */
  isInverted() {
    return this.inverted;
  }
  /**
   * Enables or disable mask inversion.
   *
   * @deprecated Use inverted instead.
   * @param {Boolean} value - Whether the mask should be inverted.
   */
  setInverted(s) {
    this.inverted = s;
  }
  /**
   * Renders the effect.
   *
   * @param {WebGLRenderer} renderer - The renderer.
   * @param {WebGLRenderTarget} inputBuffer - A frame buffer that contains the result of the previous pass.
   * @param {WebGLRenderTarget} outputBuffer - A frame buffer that serves as the output render target unless this pass renders to screen.
   * @param {Number} [deltaTime] - The time between the last frame and the current one in seconds.
   * @param {Boolean} [stencilTest] - Indicates whether a stencil mask is active.
   */
  render(s, e, n, i, r) {
    const c = s.getContext(), h = s.state.buffers, d = this.scene, v = this.camera, g = this.clearPass, S = this.inverted ? 0 : 1, x = 1 - S;
    h.color.setMask(!1), h.depth.setMask(!1), h.color.setLocked(!0), h.depth.setLocked(!0), h.stencil.setTest(!0), h.stencil.setOp(c.REPLACE, c.REPLACE, c.REPLACE), h.stencil.setFunc(c.ALWAYS, S, 4294967295), h.stencil.setClear(x), h.stencil.setLocked(!0), this.clearPass.enabled && (this.renderToScreen ? g.render(s, null) : (g.render(s, e), g.render(s, n))), this.renderToScreen ? (s.setRenderTarget(null), s.render(d, v)) : (s.setRenderTarget(e), s.render(d, v), s.setRenderTarget(n), s.render(d, v)), h.color.setLocked(!1), h.depth.setLocked(!1), h.stencil.setLocked(!1), h.stencil.setFunc(c.EQUAL, 1, 4294967295), h.stencil.setOp(c.KEEP, c.KEEP, c.KEEP), h.stencil.setLocked(!0);
  }
}, kL = class {
  /**
   * Constructs a new effect composer.
   *
   * @param {WebGLRenderer} renderer - The renderer that should be used.
   * @param {Object} [options] - The options.
   * @param {Boolean} [options.depthBuffer=true] - Whether the main render targets should have a depth buffer.
   * @param {Boolean} [options.stencilBuffer=false] - Whether the main render targets should have a stencil buffer.
   * @param {Boolean} [options.alpha] - Deprecated. Buffers are always RGBA since three r137.
   * @param {Number} [options.multisampling=0] - The number of samples used for multisample antialiasing. Requires WebGL 2.
   * @param {Number} [options.frameBufferType] - The type of the internal frame buffers. It's recommended to use HalfFloatType if possible.
   */
  constructor(s = null, {
    depthBuffer: e = !0,
    stencilBuffer: n = !1,
    multisampling: i = 0,
    frameBufferType: r
  } = {}) {
    this.renderer = null, this.inputBuffer = this.createBuffer(e, n, r, i), this.outputBuffer = this.inputBuffer.clone(), this.copyPass = new qL(), this.depthTexture = null, this.passes = [], this.timer = new IL(), this.autoRenderToScreen = !0, this.setRenderer(s);
  }
  /**
   * The current amount of samples used for multisample anti-aliasing.
   *
   * @type {Number}
   */
  get multisampling() {
    return this.inputBuffer.samples || 0;
  }
  /**
   * Sets the amount of MSAA samples.
   *
   * Requires WebGL 2. Set to zero to disable multisampling.
   *
   * @type {Number}
   */
  set multisampling(s) {
    const e = this.inputBuffer, n = this.multisampling;
    n > 0 && s > 0 ? (this.inputBuffer.samples = s, this.outputBuffer.samples = s, this.inputBuffer.dispose(), this.outputBuffer.dispose()) : n !== s && (this.inputBuffer.dispose(), this.outputBuffer.dispose(), this.inputBuffer = this.createBuffer(
      e.depthBuffer,
      e.stencilBuffer,
      e.texture.type,
      s
    ), this.inputBuffer.depthTexture = this.depthTexture, this.outputBuffer = this.inputBuffer.clone());
  }
  /**
   * Returns the internal timer.
   *
   * @return {Timer} The timer.
   */
  getTimer() {
    return this.timer;
  }
  /**
   * Returns the renderer.
   *
   * @return {WebGLRenderer} The renderer.
   */
  getRenderer() {
    return this.renderer;
  }
  /**
   * Sets the renderer.
   *
   * @param {WebGLRenderer} renderer - The renderer.
   */
  setRenderer(s) {
    if (this.renderer = s, s !== null) {
      const e = s.getSize(new De()), n = s.getContext().getContextAttributes().alpha, i = this.inputBuffer.texture.type;
      i === Da && s.outputColorSpace === ei && (this.inputBuffer.texture.colorSpace = ei, this.outputBuffer.texture.colorSpace = ei, this.inputBuffer.dispose(), this.outputBuffer.dispose()), s.autoClear = !1, this.setSize(e.width, e.height);
      for (const r of this.passes)
        r.initialize(s, n, i);
    }
  }
  /**
   * Replaces the current renderer with the given one.
   *
   * The auto clear mechanism of the provided renderer will be disabled. If the new render size differs from the
   * previous one, all passes will be updated.
   *
   * By default, the DOM element of the current renderer will automatically be removed from its parent node and the DOM
   * element of the new renderer will take its place.
   *
   * @deprecated Use setRenderer instead.
   * @param {WebGLRenderer} renderer - The new renderer.
   * @param {Boolean} updateDOM - Indicates whether the old canvas should be replaced by the new one in the DOM.
   * @return {WebGLRenderer} The old renderer.
   */
  replaceRenderer(s, e = !0) {
    const n = this.renderer, i = n.domElement.parentNode;
    return this.setRenderer(s), e && i !== null && (i.removeChild(n.domElement), i.appendChild(s.domElement)), n;
  }
  /**
   * Creates a depth texture attachment that will be provided to all passes.
   *
   * Note: When a shader reads from a depth texture and writes to a render target that uses the same depth texture
   * attachment, the depth information will be lost. This happens even if `depthWrite` is disabled.
   *
   * @private
   * @return {DepthTexture} The depth texture.
   */
  createDepthTexture() {
    const s = this.depthTexture = new ty();
    return this.inputBuffer.depthTexture = s, this.inputBuffer.dispose(), this.inputBuffer.stencilBuffer ? (s.format = Ju, s.type = Ku) : s.type = Io, s;
  }
  /**
   * Deletes the current depth texture.
   *
   * @private
   */
  deleteDepthTexture() {
    if (this.depthTexture !== null) {
      this.depthTexture.dispose(), this.depthTexture = null, this.inputBuffer.depthTexture = null, this.inputBuffer.dispose();
      for (const s of this.passes)
        s.setDepthTexture(null);
    }
  }
  /**
   * Creates a new render target.
   *
   * @deprecated Create buffers manually via WebGLRenderTarget instead.
   * @param {Boolean} depthBuffer - Whether the render target should have a depth buffer.
   * @param {Boolean} stencilBuffer - Whether the render target should have a stencil buffer.
   * @param {Number} type - The frame buffer type.
   * @param {Number} multisampling - The number of samples to use for antialiasing.
   * @return {WebGLRenderTarget} A new render target that equals the renderer's canvas.
   */
  createBuffer(s, e, n, i) {
    const r = this.renderer, c = r === null ? new De() : r.getDrawingBufferSize(new De()), h = {
      minFilter: di,
      magFilter: di,
      stencilBuffer: e,
      depthBuffer: s,
      type: n
    }, d = new Ua(c.width, c.height, h);
    return i > 0 && (d.ignoreDepthForMultisampleCopy = !1, d.samples = i), n === Da && r !== null && r.outputColorSpace === ei && (d.texture.colorSpace = ei), d.texture.name = "EffectComposer.Buffer", d.texture.generateMipmaps = !1, d;
  }
  /**
   * Can be used to change the main scene for all registered passes and effects.
   *
   * @param {Scene} scene - The scene.
   */
  setMainScene(s) {
    for (const e of this.passes)
      e.mainScene = s;
  }
  /**
   * Can be used to change the main camera for all registered passes and effects.
   *
   * @param {Camera} camera - The camera.
   */
  setMainCamera(s) {
    for (const e of this.passes)
      e.mainCamera = s;
  }
  /**
   * Adds a pass, optionally at a specific index.
   *
   * @param {Pass} pass - A new pass.
   * @param {Number} [index] - An index at which the pass should be inserted.
   */
  addPass(s, e) {
    const n = this.passes, i = this.renderer, r = i.getDrawingBufferSize(new De()), c = i.getContext().getContextAttributes().alpha, h = this.inputBuffer.texture.type;
    if (s.setRenderer(i), s.setSize(r.width, r.height), s.initialize(i, c, h), this.autoRenderToScreen && (n.length > 0 && (n[n.length - 1].renderToScreen = !1), s.renderToScreen && (this.autoRenderToScreen = !1)), e !== void 0 ? n.splice(e, 0, s) : n.push(s), this.autoRenderToScreen && (n[n.length - 1].renderToScreen = !0), s.needsDepthTexture || this.depthTexture !== null)
      if (this.depthTexture === null) {
        const d = this.createDepthTexture();
        for (s of n)
          s.setDepthTexture(d);
      } else
        s.setDepthTexture(this.depthTexture);
  }
  /**
   * Removes a pass.
   *
   * @param {Pass} pass - The pass.
   */
  removePass(s) {
    const e = this.passes, n = e.indexOf(s);
    if (n !== -1 && e.splice(n, 1).length > 0) {
      if (this.depthTexture !== null) {
        const c = (d, v) => d || v.needsDepthTexture;
        e.reduce(c, !1) || (s.getDepthTexture() === this.depthTexture && s.setDepthTexture(null), this.deleteDepthTexture());
      }
      this.autoRenderToScreen && n === e.length && (s.renderToScreen = !1, e.length > 0 && (e[e.length - 1].renderToScreen = !0));
    }
  }
  /**
   * Removes all passes.
   */
  removeAllPasses() {
    const s = this.passes;
    this.deleteDepthTexture(), s.length > 0 && (this.autoRenderToScreen && (s[s.length - 1].renderToScreen = !1), this.passes = []);
  }
  /**
   * Renders all enabled passes in the order in which they were added.
   *
   * @param {Number} [deltaTime] - The time since the last frame in seconds.
   */
  render(s) {
    const e = this.renderer, n = this.copyPass;
    let i = this.inputBuffer, r = this.outputBuffer, c = !1, h, d, v;
    s === void 0 && (this.timer.update(), s = this.timer.getDelta());
    for (const g of this.passes)
      g.enabled && (g.render(e, i, r, s, c), g.needsSwap && (c && (n.renderToScreen = g.renderToScreen, h = e.getContext(), d = e.state.buffers.stencil, d.setFunc(h.NOTEQUAL, 1, 4294967295), n.render(e, i, r, s, c), d.setFunc(h.EQUAL, 1, 4294967295)), v = i, i = r, r = v), g instanceof YL ? c = !0 : g instanceof VL && (c = !1));
  }
  /**
   * Sets the size of the buffers, passes and the renderer.
   *
   * @param {Number} width - The width.
   * @param {Number} height - The height.
   * @param {Boolean} [updateStyle] - Determines whether the style of the canvas should be updated.
   */
  setSize(s, e, n) {
    const i = this.renderer, r = i.getSize(new De());
    (s === void 0 || e === void 0) && (s = r.width, e = r.height), (r.width !== s || r.height !== e) && i.setSize(s, e, n);
    const c = i.getDrawingBufferSize(new De());
    this.inputBuffer.setSize(c.width, c.height), this.outputBuffer.setSize(c.width, c.height);
    for (const h of this.passes)
      h.setSize(c.width, c.height);
  }
  /**
   * Resets this composer by deleting all passes and creating new buffers.
   */
  reset() {
    this.dispose(), this.autoRenderToScreen = !0;
  }
  /**
   * Disposes this composer and all passes.
   */
  dispose() {
    for (const s of this.passes)
      s.dispose();
    this.passes = [], this.inputBuffer !== null && this.inputBuffer.dispose(), this.outputBuffer !== null && this.outputBuffer.dispose(), this.deleteDepthTexture(), this.copyPass.dispose(), this.timer.dispose(), jr.fullscreenGeometry.dispose();
  }
}, ju = {
  NONE: 0,
  DEPTH: 1,
  CONVOLUTION: 2
}, Rn = {
  FRAGMENT_HEAD: "FRAGMENT_HEAD",
  FRAGMENT_MAIN_UV: "FRAGMENT_MAIN_UV",
  FRAGMENT_MAIN_IMAGE: "FRAGMENT_MAIN_IMAGE",
  VERTEX_HEAD: "VERTEX_HEAD",
  VERTEX_MAIN_SUPPORT: "VERTEX_MAIN_SUPPORT"
}, WL = class {
  /**
   * Constructs new shader data.
   */
  constructor() {
    this.shaderParts = /* @__PURE__ */ new Map([
      [Rn.FRAGMENT_HEAD, null],
      [Rn.FRAGMENT_MAIN_UV, null],
      [Rn.FRAGMENT_MAIN_IMAGE, null],
      [Rn.VERTEX_HEAD, null],
      [Rn.VERTEX_MAIN_SUPPORT, null]
    ]), this.defines = /* @__PURE__ */ new Map(), this.uniforms = /* @__PURE__ */ new Map(), this.blendModes = /* @__PURE__ */ new Map(), this.extensions = /* @__PURE__ */ new Set(), this.attributes = ju.NONE, this.varyings = /* @__PURE__ */ new Set(), this.uvTransformation = !1, this.readDepth = !1, this.colorSpace = Ho;
  }
}, mS = !1, bb = class {
  /**
   * Constructs a new override material manager.
   *
   * @param {Material} [material=null] - An override material.
   */
  constructor(s = null) {
    this.originalMaterials = /* @__PURE__ */ new Map(), this.material = null, this.materials = null, this.materialsBackSide = null, this.materialsDoubleSide = null, this.materialsFlatShaded = null, this.materialsFlatShadedBackSide = null, this.materialsFlatShadedDoubleSide = null, this.setMaterial(s), this.meshCount = 0, this.replaceMaterial = (e) => {
      if (e.isMesh) {
        let n;
        if (e.material.flatShading)
          switch (e.material.side) {
            case Ms:
              n = this.materialsFlatShadedDoubleSide;
              break;
            case ji:
              n = this.materialsFlatShadedBackSide;
              break;
            default:
              n = this.materialsFlatShaded;
              break;
          }
        else
          switch (e.material.side) {
            case Ms:
              n = this.materialsDoubleSide;
              break;
            case ji:
              n = this.materialsBackSide;
              break;
            default:
              n = this.materials;
              break;
          }
        this.originalMaterials.set(e, e.material), e.isSkinnedMesh ? e.material = n[2] : e.isInstancedMesh ? e.material = n[1] : e.material = n[0], ++this.meshCount;
      }
    };
  }
  /**
   * Clones the given material.
   *
   * @private
   * @param {Material} material - The material.
   * @return {Material} The cloned material.
   */
  cloneMaterial(s) {
    if (!(s instanceof ts))
      return s.clone();
    const e = s.uniforms, n = /* @__PURE__ */ new Map();
    for (const r in e) {
      const c = e[r].value;
      c.isRenderTargetTexture && (e[r].value = null, n.set(r, c));
    }
    const i = s.clone();
    for (const r of n)
      e[r[0]].value = r[1], i.uniforms[r[0]].value = r[1];
    return i;
  }
  /**
   * Sets the override material.
   *
   * @param {Material} material - The material.
   */
  setMaterial(s) {
    if (this.disposeMaterials(), this.material = s, s !== null) {
      const e = this.materials = [
        this.cloneMaterial(s),
        this.cloneMaterial(s),
        this.cloneMaterial(s)
      ];
      for (const n of e)
        n.uniforms = Object.assign({}, s.uniforms), n.side = Po;
      e[2].skinning = !0, this.materialsBackSide = e.map((n) => {
        const i = this.cloneMaterial(n);
        return i.uniforms = Object.assign({}, s.uniforms), i.side = ji, i;
      }), this.materialsDoubleSide = e.map((n) => {
        const i = this.cloneMaterial(n);
        return i.uniforms = Object.assign({}, s.uniforms), i.side = Ms, i;
      }), this.materialsFlatShaded = e.map((n) => {
        const i = this.cloneMaterial(n);
        return i.uniforms = Object.assign({}, s.uniforms), i.flatShading = !0, i;
      }), this.materialsFlatShadedBackSide = e.map((n) => {
        const i = this.cloneMaterial(n);
        return i.uniforms = Object.assign({}, s.uniforms), i.flatShading = !0, i.side = ji, i;
      }), this.materialsFlatShadedDoubleSide = e.map((n) => {
        const i = this.cloneMaterial(n);
        return i.uniforms = Object.assign({}, s.uniforms), i.flatShading = !0, i.side = Ms, i;
      });
    }
  }
  /**
   * Renders the scene with the override material.
   *
   * @private
   * @param {WebGLRenderer} renderer - The renderer.
   * @param {Scene} scene - A scene.
   * @param {Camera} camera - A camera.
   */
  render(s, e, n) {
    const i = s.shadowMap.enabled;
    if (s.shadowMap.enabled = !1, mS) {
      const r = this.originalMaterials;
      this.meshCount = 0, e.traverse(this.replaceMaterial), s.render(e, n);
      for (const c of r)
        c[0].material = c[1];
      this.meshCount !== r.size && r.clear();
    } else {
      const r = e.overrideMaterial;
      e.overrideMaterial = this.material, s.render(e, n), e.overrideMaterial = r;
    }
    s.shadowMap.enabled = i;
  }
  /**
   * Deletes cloned override materials.
   *
   * @private
   */
  disposeMaterials() {
    if (this.material !== null) {
      const s = this.materials.concat(this.materialsBackSide).concat(this.materialsDoubleSide).concat(this.materialsFlatShaded).concat(this.materialsFlatShadedBackSide).concat(this.materialsFlatShadedDoubleSide);
      for (const e of s)
        e.dispose();
    }
  }
  /**
   * Performs cleanup tasks.
   */
  dispose() {
    this.originalMaterials.clear(), this.disposeMaterials();
  }
  /**
   * Indicates whether the override material workaround is enabled.
   *
   * @type {Boolean}
   */
  static get workaroundEnabled() {
    return mS;
  }
  /**
   * Enables or disables the override material workaround globally.
   *
   * This only affects post processing passes and effects.
   *
   * @type {Boolean}
   */
  static set workaroundEnabled(s) {
    mS = s;
  }
}, Mc = -1, Hh = class extends qs {
  /**
   * Constructs a new resolution.
   *
   * TODO Remove resizable param.
   * @param {Resizable} resizable - A resizable object.
   * @param {Number} [width=Resolution.AUTO_SIZE] - The preferred width.
   * @param {Number} [height=Resolution.AUTO_SIZE] - The preferred height.
   * @param {Number} [scale=1.0] - A resolution scale.
   */
  constructor(s, e = Mc, n = Mc, i = 1) {
    super(), this.resizable = s, this.baseSize = new De(1, 1), this.preferredSize = new De(e, n), this.target = this.preferredSize, this.s = i, this.effectiveSize = new De(), this.addEventListener("change", () => this.updateEffectiveSize()), this.updateEffectiveSize();
  }
  /**
   * Calculates the effective size.
   *
   * @private
   */
  updateEffectiveSize() {
    const s = this.baseSize, e = this.preferredSize, n = this.effectiveSize, i = this.scale;
    e.width !== Mc ? n.width = e.width : e.height !== Mc ? n.width = Math.round(e.height * (s.width / Math.max(s.height, 1))) : n.width = Math.round(s.width * i), e.height !== Mc ? n.height = e.height : e.width !== Mc ? n.height = Math.round(e.width / Math.max(s.width / Math.max(s.height, 1), 1)) : n.height = Math.round(s.height * i);
  }
  /**
   * The effective width.
   *
   * If the preferred width and height are set to {@link Resizer.AUTO_SIZE}, the base width will be returned.
   *
   * @type {Number}
   */
  get width() {
    return this.effectiveSize.width;
  }
  set width(s) {
    this.preferredWidth = s;
  }
  /**
   * The effective height.
   *
   * If the preferred width and height are set to {@link Resizer.AUTO_SIZE}, the base height will be returned.
   *
   * @type {Number}
   */
  get height() {
    return this.effectiveSize.height;
  }
  set height(s) {
    this.preferredHeight = s;
  }
  /**
   * Returns the effective width.
   *
   * If the preferred width and height are set to {@link Resizer.AUTO_SIZE}, the base width will be returned.
   *
   * @deprecated Use width instead.
   * @return {Number} The effective width.
   */
  getWidth() {
    return this.width;
  }
  /**
   * Returns the effective height.
   *
   * If the preferred width and height are set to {@link Resizer.AUTO_SIZE}, the base height will be returned.
   *
   * @deprecated Use height instead.
   * @return {Number} The effective height.
   */
  getHeight() {
    return this.height;
  }
  /**
   * The resolution scale.
   *
   * @type {Number}
   */
  get scale() {
    return this.s;
  }
  set scale(s) {
    this.s !== s && (this.s = s, this.preferredSize.setScalar(Mc), this.dispatchEvent({ type: "change" }), this.resizable.setSize(this.baseSize.width, this.baseSize.height));
  }
  /**
   * Returns the current resolution scale.
   *
   * @deprecated Use scale instead.
   * @return {Number} The scale.
   */
  getScale() {
    return this.scale;
  }
  /**
   * Sets the resolution scale.
   *
   * Also sets the preferred resolution to {@link Resizer.AUTO_SIZE}.
   *
   * @deprecated Use scale instead.
   * @param {Number} value - The scale.
   */
  setScale(s) {
    this.scale = s;
  }
  /**
   * The base width.
   *
   * @type {Number}
   */
  get baseWidth() {
    return this.baseSize.width;
  }
  set baseWidth(s) {
    this.baseSize.width !== s && (this.baseSize.width = s, this.dispatchEvent({ type: "change" }), this.resizable.setSize(this.baseSize.width, this.baseSize.height));
  }
  /**
   * Returns the base width.
   *
   * @deprecated Use baseWidth instead.
   * @return {Number} The base width.
   */
  getBaseWidth() {
    return this.baseWidth;
  }
  /**
   * Sets the base width.
   *
   * @deprecated Use baseWidth instead.
   * @param {Number} value - The width.
   */
  setBaseWidth(s) {
    this.baseWidth = s;
  }
  /**
   * The base height.
   *
   * @type {Number}
   */
  get baseHeight() {
    return this.baseSize.height;
  }
  set baseHeight(s) {
    this.baseSize.height !== s && (this.baseSize.height = s, this.dispatchEvent({ type: "change" }), this.resizable.setSize(this.baseSize.width, this.baseSize.height));
  }
  /**
   * Returns the base height.
   *
   * @deprecated Use baseHeight instead.
   * @return {Number} The base height.
   */
  getBaseHeight() {
    return this.baseHeight;
  }
  /**
   * Sets the base height.
   *
   * @deprecated Use baseHeight instead.
   * @param {Number} value - The height.
   */
  setBaseHeight(s) {
    this.baseHeight = s;
  }
  /**
   * Sets the base size.
   *
   * @param {Number} width - The width.
   * @param {Number} height - The height.
   */
  setBaseSize(s, e) {
    (this.baseSize.width !== s || this.baseSize.height !== e) && (this.baseSize.set(s, e), this.dispatchEvent({ type: "change" }), this.resizable.setSize(this.baseSize.width, this.baseSize.height));
  }
  /**
   * The preferred width.
   *
   * @type {Number}
   */
  get preferredWidth() {
    return this.preferredSize.width;
  }
  set preferredWidth(s) {
    this.preferredSize.width !== s && (this.preferredSize.width = s, this.dispatchEvent({ type: "change" }), this.resizable.setSize(this.baseSize.width, this.baseSize.height));
  }
  /**
   * Returns the preferred width.
   *
   * @deprecated Use preferredWidth instead.
   * @return {Number} The preferred width.
   */
  getPreferredWidth() {
    return this.preferredWidth;
  }
  /**
   * Sets the preferred width.
   *
   * Use {@link Resizer.AUTO_SIZE} to automatically calculate the width based on the height and aspect ratio.
   *
   * @deprecated Use preferredWidth instead.
   * @param {Number} value - The width.
   */
  setPreferredWidth(s) {
    this.preferredWidth = s;
  }
  /**
   * The preferred height.
   *
   * @type {Number}
   */
  get preferredHeight() {
    return this.preferredSize.height;
  }
  set preferredHeight(s) {
    this.preferredSize.height !== s && (this.preferredSize.height = s, this.dispatchEvent({ type: "change" }), this.resizable.setSize(this.baseSize.width, this.baseSize.height));
  }
  /**
   * Returns the preferred height.
   *
   * @deprecated Use preferredHeight instead.
   * @return {Number} The preferred height.
   */
  getPreferredHeight() {
    return this.preferredHeight;
  }
  /**
   * Sets the preferred height.
   *
   * Use {@link Resizer.AUTO_SIZE} to automatically calculate the height based on the width and aspect ratio.
   *
   * @deprecated Use preferredHeight instead.
   * @param {Number} value - The height.
   */
  setPreferredHeight(s) {
    this.preferredHeight = s;
  }
  /**
   * Sets the preferred size.
   *
   * @param {Number} width - The width.
   * @param {Number} height - The height.
   */
  setPreferredSize(s, e) {
    (this.preferredSize.width !== s || this.preferredSize.height !== e) && (this.preferredSize.set(s, e), this.dispatchEvent({ type: "change" }), this.resizable.setSize(this.baseSize.width, this.baseSize.height));
  }
  /**
   * Copies the given resolution.
   *
   * @param {Resolution} resolution - The resolution.
   */
  copy(s) {
    this.s = s.scale, this.baseSize.set(s.baseWidth, s.baseHeight), this.preferredSize.set(s.preferredWidth, s.preferredHeight), this.dispatchEvent({ type: "change" }), this.resizable.setSize(this.baseSize.width, this.baseSize.height);
  }
  /**
   * An auto sizing constant.
   *
   * Can be used to automatically calculate the width or height based on the original aspect ratio.
   *
   * @type {Number}
   */
  static get AUTO_SIZE() {
    return Mc;
  }
}, mn = {
  ADD: 0,
  ALPHA: 1,
  AVERAGE: 2,
  COLOR: 3,
  COLOR_BURN: 4,
  COLOR_DODGE: 5,
  DARKEN: 6,
  DIFFERENCE: 7,
  DIVIDE: 8,
  DST: 9,
  EXCLUSION: 10,
  HARD_LIGHT: 11,
  HARD_MIX: 12,
  HUE: 13,
  INVERT: 14,
  INVERT_RGB: 15,
  LIGHTEN: 16,
  LINEAR_BURN: 17,
  LINEAR_DODGE: 18,
  LINEAR_LIGHT: 19,
  LUMINOSITY: 20,
  MULTIPLY: 21,
  NEGATION: 22,
  NORMAL: 23,
  OVERLAY: 24,
  PIN_LIGHT: 25,
  REFLECT: 26,
  SATURATION: 27,
  SCREEN: 28,
  SOFT_LIGHT: 29,
  SRC: 30,
  SUBTRACT: 31,
  VIVID_LIGHT: 32
}, ZL = "vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,vec4(x.rgb+y.rgb,y.a),opacity);}", jL = "vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,y,y.a*opacity);}", QL = "vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,vec4((x.rgb+y.rgb)*0.5,y.a),opacity);}", KL = "vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec3 xHSL=RGBToHSL(x.rgb);vec3 yHSL=RGBToHSL(y.rgb);vec3 z=HSLToRGB(vec3(yHSL.xy,xHSL.z));return mix(x,vec4(z,y.a),opacity);}", JL = "vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec3 a=x.rgb,b=y.rgb;vec3 z=mix(step(0.0,b)*(1.0-min(vec3(1.0),(1.0-a)/b)),vec3(1.0),step(1.0,a));return mix(x,vec4(z,y.a),opacity);}", $L = "vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec3 a=x.rgb,b=y.rgb;vec3 z=step(0.0,a)*mix(min(vec3(1.0),a/max(1.0-b,1e-9)),vec3(1.0),step(1.0,b));return mix(x,vec4(z,y.a),opacity);}", ez = "vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,vec4(min(x.rgb,y.rgb),y.a),opacity);}", tz = "vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,vec4(abs(x.rgb-y.rgb),y.a),opacity);}", nz = "vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,vec4(x.rgb/max(y.rgb,1e-12),y.a),opacity);}", iz = "vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,vec4((x.rgb+y.rgb-2.0*x.rgb*y.rgb),y.a),opacity);}", az = "vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec3 a=min(x.rgb,1.0);vec3 b=min(y.rgb,1.0);vec3 z=mix(2.0*a*b,1.0-2.0*(1.0-a)*(1.0-b),step(0.5,b));return mix(x,vec4(z,y.a),opacity);}", sz = "vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,vec4(step(1.0,x.rgb+y.rgb),y.a),opacity);}", rz = "vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec3 xHSL=RGBToHSL(x.rgb);vec3 yHSL=RGBToHSL(y.rgb);vec3 z=HSLToRGB(vec3(yHSL.x,xHSL.yz));return mix(x,vec4(z,y.a),opacity);}", oz = "vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,vec4(1.0-y.rgb,y.a),opacity);}", lz = "vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,vec4(y.rgb*(1.0-x.rgb),y.a),opacity);}", cz = "vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,vec4(max(x.rgb,y.rgb),y.a),opacity);}", uz = "vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,vec4(clamp(y.rgb+x.rgb-1.0,0.0,1.0),y.a),opacity);}", fz = "vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,vec4(min(x.rgb+y.rgb,1.0),y.a),opacity);}", hz = "vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,vec4(clamp(2.0*y.rgb+x.rgb-1.0,0.0,1.0),y.a),opacity);}", dz = "vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec3 xHSL=RGBToHSL(x.rgb);vec3 yHSL=RGBToHSL(y.rgb);vec3 z=HSLToRGB(vec3(xHSL.xy,yHSL.z));return mix(x,vec4(z,y.a),opacity);}", pz = "vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,vec4(x.rgb*y.rgb,y.a),opacity);}", mz = "vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,vec4(1.0-abs(1.0-x.rgb-y.rgb),y.a),opacity);}", vz = "vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,y,opacity);}", gz = "vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec3 z=mix(2.0*y.rgb*x.rgb,1.0-2.0*(1.0-y.rgb)*(1.0-x.rgb),step(0.5,x.rgb));return mix(x,vec4(z,y.a),opacity);}", yz = "vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec3 y2=2.0*y.rgb;vec3 z=mix(mix(y2,x.rgb,step(0.5*x.rgb,y.rgb)),max(y2-1.0,vec3(0.0)),step(x.rgb,y2-1.0));return mix(x,vec4(z,y.a),opacity);}", _z = "vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec3 z=mix(min(x.rgb*x.rgb/max(1.0-y.rgb,1e-12),1.0),y.rgb,step(1.0,y.rgb));return mix(x,vec4(z,y.a),opacity);}", Sz = "vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec3 xHSL=RGBToHSL(x.rgb);vec3 yHSL=RGBToHSL(y.rgb);vec3 z=HSLToRGB(vec3(xHSL.x,yHSL.y,xHSL.z));return mix(x,vec4(z,y.a),opacity);}", xz = "vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,vec4(x.rgb+y.rgb-min(x.rgb*y.rgb,1.0),y.a),opacity);}", Mz = "vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec3 a=x.rgb;vec3 b=y.rgb;vec3 y2=2.0*b;vec3 w=step(0.5,b);vec3 c=a-(1.0-y2)*a*(1.0-a);vec3 d=mix(a+(y2-1.0)*(sqrt(a)-a),a+(y2-1.0)*a*((16.0*a-12.0)*a+3.0),w*(1.0-step(0.25,a)));vec3 z=mix(c,d,w);return mix(x,vec4(z,y.a),opacity);}", bz = "vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return y;}", Ez = "vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){return mix(x,vec4(max(x.rgb+y.rgb-1.0,0.0),y.a),opacity);}", Tz = "vec4 blend(const in vec4 x,const in vec4 y,const in float opacity){vec3 z=mix(max(1.0-min((1.0-x.rgb)/(2.0*y.rgb),1.0),0.0),min(x.rgb/(2.0*(1.0-y.rgb)),1.0),step(0.5,y.rgb));return mix(x,vec4(z,y.a),opacity);}", Az = /* @__PURE__ */ new Map([
  [mn.ADD, ZL],
  [mn.ALPHA, jL],
  [mn.AVERAGE, QL],
  [mn.COLOR, KL],
  [mn.COLOR_BURN, JL],
  [mn.COLOR_DODGE, $L],
  [mn.DARKEN, ez],
  [mn.DIFFERENCE, tz],
  [mn.DIVIDE, nz],
  [mn.DST, null],
  [mn.EXCLUSION, iz],
  [mn.HARD_LIGHT, az],
  [mn.HARD_MIX, sz],
  [mn.HUE, rz],
  [mn.INVERT, oz],
  [mn.INVERT_RGB, lz],
  [mn.LIGHTEN, cz],
  [mn.LINEAR_BURN, uz],
  [mn.LINEAR_DODGE, fz],
  [mn.LINEAR_LIGHT, hz],
  [mn.LUMINOSITY, dz],
  [mn.MULTIPLY, pz],
  [mn.NEGATION, mz],
  [mn.NORMAL, vz],
  [mn.OVERLAY, gz],
  [mn.PIN_LIGHT, yz],
  [mn.REFLECT, _z],
  [mn.SATURATION, Sz],
  [mn.SCREEN, xz],
  [mn.SOFT_LIGHT, Mz],
  [mn.SRC, bz],
  [mn.SUBTRACT, Ez],
  [mn.VIVID_LIGHT, Tz]
]), Rz = class extends qs {
  /**
   * Constructs a new blend mode.
   *
   * @param {BlendFunction} blendFunction - The blend function.
   * @param {Number} opacity - The opacity of the color that will be blended with the base color.
   */
  constructor(s, e = 1) {
    super(), this._blendFunction = s, this.opacity = new qn(e);
  }
  /**
   * Returns the opacity.
   *
   * @return {Number} The opacity.
   */
  getOpacity() {
    return this.opacity.value;
  }
  /**
   * Sets the opacity.
   *
   * @param {Number} value - The opacity.
   */
  setOpacity(s) {
    this.opacity.value = s;
  }
  /**
   * The blend function.
   *
   * @type {BlendFunction}
   */
  get blendFunction() {
    return this._blendFunction;
  }
  set blendFunction(s) {
    this._blendFunction = s, this.dispatchEvent({ type: "change" });
  }
  /**
   * Returns the blend function.
   *
   * @deprecated Use blendFunction instead.
   * @return {BlendFunction} The blend function.
   */
  getBlendFunction() {
    return this.blendFunction;
  }
  /**
   * Sets the blend function.
   *
   * @deprecated Use blendFunction instead.
   * @param {BlendFunction} value - The blend function.
   */
  setBlendFunction(s) {
    this.blendFunction = s;
  }
  /**
   * Returns the blend function shader code.
   *
   * @return {String} The blend function shader code.
   */
  getShaderCode() {
    return Az.get(this.blendFunction);
  }
}, HS = class extends qs {
  /**
   * Constructs a new effect.
   *
   * @param {String} name - The name of this effect. Doesn't have to be unique.
   * @param {String} fragmentShader - The fragment shader. This shader is required.
   * @param {Object} [options] - Additional options.
   * @param {EffectAttribute} [options.attributes=EffectAttribute.NONE] - The effect attributes that determine the execution priority and resource requirements.
   * @param {BlendFunction} [options.blendFunction=BlendFunction.NORMAL] - The blend function of this effect.
   * @param {Map<String, String>} [options.defines] - Custom preprocessor macro definitions. Keys are names and values are code.
   * @param {Map<String, Uniform>} [options.uniforms] - Custom shader uniforms. Keys are names and values are uniforms.
   * @param {Set<WebGLExtension>} [options.extensions] - WebGL extensions.
   * @param {String} [options.vertexShader=null] - The vertex shader. Most effects don't need one.
   */
  constructor(s, e, {
    attributes: n = ju.NONE,
    blendFunction: i = mn.NORMAL,
    defines: r = /* @__PURE__ */ new Map(),
    uniforms: c = /* @__PURE__ */ new Map(),
    extensions: h = null,
    vertexShader: d = null
  } = {}) {
    super(), this.name = s, this.renderer = null, this.attributes = n, this.fragmentShader = e, this.vertexShader = d, this.defines = r, this.uniforms = c, this.extensions = h, this.blendMode = new Rz(i), this.blendMode.addEventListener("change", (v) => this.setChanged()), this._inputColorSpace = Ho, this._outputColorSpace = Yr;
  }
  /**
   * The input color space.
   *
   * @type {ColorSpace}
   * @experimental
   */
  get inputColorSpace() {
    return this._inputColorSpace;
  }
  /**
   * @type {ColorSpace}
   * @protected
   * @experimental
   */
  set inputColorSpace(s) {
    this._inputColorSpace = s, this.setChanged();
  }
  /**
   * The output color space.
   *
   * Should only be changed if this effect converts the input colors to a different color space.
   *
   * @type {ColorSpace}
   * @experimental
   */
  get outputColorSpace() {
    return this._outputColorSpace;
  }
  /**
   * @type {ColorSpace}
   * @protected
   * @experimental
   */
  set outputColorSpace(s) {
    this._outputColorSpace = s, this.setChanged();
  }
  /**
   * Sets the main scene.
   *
   * @type {Scene}
   */
  set mainScene(s) {
  }
  /**
   * Sets the main camera.
   *
   * @type {Camera}
   */
  set mainCamera(s) {
  }
  /**
   * Returns the name of this effect.
   *
   * @deprecated Use name instead.
   * @return {String} The name.
   */
  getName() {
    return this.name;
  }
  /**
   * Sets the renderer.
   *
   * @deprecated
   * @param {WebGLRenderer} renderer - The renderer.
   */
  setRenderer(s) {
    this.renderer = s;
  }
  /**
   * Returns the preprocessor macro definitions.
   *
   * @deprecated Use defines instead.
   * @return {Map<String, String>} The extensions.
   */
  getDefines() {
    return this.defines;
  }
  /**
   * Returns the uniforms of this effect.
   *
   * @deprecated Use uniforms instead.
   * @return {Map<String, Uniform>} The extensions.
   */
  getUniforms() {
    return this.uniforms;
  }
  /**
   * Returns the WebGL extensions that are required by this effect.
   *
   * @deprecated Use extensions instead.
   * @return {Set<WebGLExtension>} The extensions.
   */
  getExtensions() {
    return this.extensions;
  }
  /**
   * Returns the blend mode.
   *
   * The result of this effect will be blended with the result of the previous effect using this blend mode.
   *
   * @deprecated Use blendMode instead.
   * @return {BlendMode} The blend mode.
   */
  getBlendMode() {
    return this.blendMode;
  }
  /**
   * Returns the effect attributes.
   *
   * @return {EffectAttribute} The attributes.
   */
  getAttributes() {
    return this.attributes;
  }
  /**
   * Sets the effect attributes.
   *
   * Effects that have the same attributes will be executed in the order in which they were registered. Some attributes
   * imply a higher priority.
   *
   * @protected
   * @param {EffectAttribute} attributes - The attributes.
   */
  setAttributes(s) {
    this.attributes = s, this.setChanged();
  }
  /**
   * Returns the fragment shader.
   *
   * @return {String} The fragment shader.
   */
  getFragmentShader() {
    return this.fragmentShader;
  }
  /**
   * Sets the fragment shader.
   *
   * @protected
   * @param {String} fragmentShader - The fragment shader.
   */
  setFragmentShader(s) {
    this.fragmentShader = s, this.setChanged();
  }
  /**
   * Returns the vertex shader.
   *
   * @return {String} The vertex shader.
   */
  getVertexShader() {
    return this.vertexShader;
  }
  /**
   * Sets the vertex shader.
   *
   * @protected
   * @param {String} vertexShader - The vertex shader.
   */
  setVertexShader(s) {
    this.vertexShader = s, this.setChanged();
  }
  /**
   * Informs the associated {@link EffectPass} that this effect requires a shader recompilation.
   *
   * Should be called after changing macros or extensions and after adding/removing uniforms.
   *
   * @protected
   */
  setChanged() {
    this.dispatchEvent({ type: "change" });
  }
  /**
   * Sets the depth texture.
   *
   * You may override this method if your effect requires direct access to the depth texture that is bound to the
   * associated {@link EffectPass}.
   *
   * @param {Texture} depthTexture - A depth texture.
   * @param {DepthPackingStrategies} [depthPacking=BasicDepthPacking] - The depth packing.
   */
  setDepthTexture(s, e = wc) {
  }
  /**
   * Updates this effect by performing supporting operations.
   *
   * This method is called by the {@link EffectPass} right before the main fullscreen render operation, even if the
   * blend function is set to `SKIP`.
   *
   * You may override this method if you need to update custom uniforms or render additional off-screen textures.
   *
   * @param {WebGLRenderer} renderer - The renderer.
   * @param {WebGLRenderTarget} inputBuffer - A frame buffer that contains the result of the previous pass.
   * @param {Number} [deltaTime] - The time between the last frame and the current one in seconds.
   */
  update(s, e, n) {
  }
  /**
   * Updates the size of this effect.
   *
   * You may override this method if you want to be informed about the size of the backbuffer/canvas.
   * This method is called before {@link initialize} and every time the size of the {@link EffectComposer} changes.
   *
   * @param {Number} width - The width.
   * @param {Number} height - The height.
   */
  setSize(s, e) {
  }
  /**
   * Performs initialization tasks.
   *
   * This method is called when the associated {@link EffectPass} is added to an {@link EffectComposer}.
   *
   * @param {WebGLRenderer} renderer - The renderer.
   * @param {Boolean} alpha - Whether the renderer uses the alpha channel or not.
   * @param {Number} frameBufferType - The type of the main frame buffers.
   * @example if(!alpha && frameBufferType === UnsignedByteType) { this.myRenderTarget.texture.format = RGBFormat; }
   */
  initialize(s, e, n) {
  }
  /**
   * Performs a shallow search for properties that define a dispose method and deletes them.
   *
   * The {@link EffectComposer} calls this method when it is being destroyed.
   */
  dispose() {
    for (const s of Object.keys(this)) {
      const e = this[s];
      (e instanceof Ua || e instanceof sa || e instanceof si || e instanceof jr) && this[s].dispose();
    }
  }
}, eA = class extends jr {
  /**
   * Constructs a new render pass.
   *
   * @param {Scene} scene - The scene to render.
   * @param {Camera} camera - The camera to use to render the scene.
   * @param {Material} [overrideMaterial=null] - An override material.
   */
  constructor(s, e, n = null) {
    super("RenderPass", s, e), this.needsSwap = !1, this.clearPass = new $T(), this.overrideMaterialManager = n === null ? null : new bb(n), this.ignoreBackground = !1, this.skipShadowMapUpdate = !1, this.selection = null;
  }
  set mainScene(s) {
    this.scene = s;
  }
  set mainCamera(s) {
    this.camera = s;
  }
  get renderToScreen() {
    return super.renderToScreen;
  }
  set renderToScreen(s) {
    super.renderToScreen = s, this.clearPass.renderToScreen = s;
  }
  /**
   * The current override material.
   *
   * @type {Material}
   */
  get overrideMaterial() {
    const s = this.overrideMaterialManager;
    return s !== null ? s.material : null;
  }
  set overrideMaterial(s) {
    const e = this.overrideMaterialManager;
    s !== null ? e !== null ? e.setMaterial(s) : this.overrideMaterialManager = new bb(s) : e !== null && (e.dispose(), this.overrideMaterialManager = null);
  }
  /**
   * Returns the current override material.
   *
   * @deprecated Use overrideMaterial instead.
   * @return {Material} The material.
   */
  getOverrideMaterial() {
    return this.overrideMaterial;
  }
  /**
   * Sets the override material.
   *
   * @deprecated Use overrideMaterial instead.
   * @return {Material} value - The material.
   */
  setOverrideMaterial(s) {
    this.overrideMaterial = s;
  }
  /**
   * Indicates whether the target buffer should be cleared before rendering.
   *
   * @type {Boolean}
   * @deprecated Use clearPass.enabled instead.
   */
  get clear() {
    return this.clearPass.enabled;
  }
  set clear(s) {
    this.clearPass.enabled = s;
  }
  /**
   * Returns the selection. Default is `null` (no restriction).
   *
   * @deprecated Use selection instead.
   * @return {Selection} The selection.
   */
  getSelection() {
    return this.selection;
  }
  /**
   * Sets the selection. Set to `null` to disable.
   *
   * @deprecated Use selection instead.
   * @param {Selection} value - The selection.
   */
  setSelection(s) {
    this.selection = s;
  }
  /**
   * Indicates whether the scene background is disabled.
   *
   * @deprecated Use ignoreBackground instead.
   * @return {Boolean} Whether the scene background is disabled.
   */
  isBackgroundDisabled() {
    return this.ignoreBackground;
  }
  /**
   * Enables or disables the scene background.
   *
   * @deprecated Use ignoreBackground instead.
   * @param {Boolean} value - Whether the scene background should be disabled.
   */
  setBackgroundDisabled(s) {
    this.ignoreBackground = s;
  }
  /**
   * Indicates whether the shadow map auto update is disabled.
   *
   * @deprecated Use skipShadowMapUpdate instead.
   * @return {Boolean} Whether the shadow map update is disabled.
   */
  isShadowMapDisabled() {
    return this.skipShadowMapUpdate;
  }
  /**
   * Enables or disables the shadow map auto update.
   *
   * @deprecated Use skipShadowMapUpdate instead.
   * @param {Boolean} value - Whether the shadow map auto update should be disabled.
   */
  setShadowMapDisabled(s) {
    this.skipShadowMapUpdate = s;
  }
  /**
   * Returns the clear pass.
   *
   * @deprecated Use clearPass.enabled instead.
   * @return {ClearPass} The clear pass.
   */
  getClearPass() {
    return this.clearPass;
  }
  /**
   * Renders the scene.
   *
   * @param {WebGLRenderer} renderer - The renderer.
   * @param {WebGLRenderTarget} inputBuffer - A frame buffer that contains the result of the previous pass.
   * @param {WebGLRenderTarget} outputBuffer - A frame buffer that serves as the output render target unless this pass renders to screen.
   * @param {Number} [deltaTime] - The time between the last frame and the current one in seconds.
   * @param {Boolean} [stencilTest] - Indicates whether a stencil mask is active.
   */
  render(s, e, n, i, r) {
    const c = this.scene, h = this.camera, d = this.selection, v = h.layers.mask, g = c.background, S = s.shadowMap.autoUpdate, x = this.renderToScreen ? null : e;
    d !== null && h.layers.set(d.getLayer()), this.skipShadowMapUpdate && (s.shadowMap.autoUpdate = !1), (this.ignoreBackground || this.clearPass.overrideClearColor !== null) && (c.background = null), this.clearPass.enabled && this.clearPass.render(s, e), s.setRenderTarget(x), this.overrideMaterialManager !== null ? this.overrideMaterialManager.render(s, c, h) : s.render(c, h), h.layers.mask = v, c.background = g, s.shadowMap.autoUpdate = S;
  }
}, Cz = `#include <packing>
#ifdef GL_FRAGMENT_PRECISION_HIGH
uniform highp sampler2D depthBuffer;
#else
uniform mediump sampler2D depthBuffer;
#endif
#ifdef DOWNSAMPLE_NORMALS
uniform lowp sampler2D normalBuffer;
#endif
varying vec2 vUv0;varying vec2 vUv1;varying vec2 vUv2;varying vec2 vUv3;float readDepth(const in vec2 uv){
#if DEPTH_PACKING == 3201
return unpackRGBAToDepth(texture2D(depthBuffer,uv));
#else
return texture2D(depthBuffer,uv).r;
#endif
}int findBestDepth(const in float samples[4]){float c=(samples[0]+samples[1]+samples[2]+samples[3])*0.25;float distances[4];distances[0]=abs(c-samples[0]);distances[1]=abs(c-samples[1]);distances[2]=abs(c-samples[2]);distances[3]=abs(c-samples[3]);float maxDistance=max(max(distances[0],distances[1]),max(distances[2],distances[3]));int remaining[3];int rejected[3];int i,j,k;for(i=0,j=0,k=0;i<4;++i){if(distances[i]<maxDistance){remaining[j++]=i;}else{rejected[k++]=i;}}for(;j<3;++j){remaining[j]=rejected[--k];}vec3 s=vec3(samples[remaining[0]],samples[remaining[1]],samples[remaining[2]]);c=(s.x+s.y+s.z)/3.0;distances[0]=abs(c-s.x);distances[1]=abs(c-s.y);distances[2]=abs(c-s.z);float minDistance=min(distances[0],min(distances[1],distances[2]));for(i=0;i<3;++i){if(distances[i]==minDistance){break;}}return remaining[i];}void main(){float d[4];d[0]=readDepth(vUv0);d[1]=readDepth(vUv1);d[2]=readDepth(vUv2);d[3]=readDepth(vUv3);int index=findBestDepth(d);
#ifdef DOWNSAMPLE_NORMALS
vec3 n[4];n[0]=texture2D(normalBuffer,vUv0).rgb;n[1]=texture2D(normalBuffer,vUv1).rgb;n[2]=texture2D(normalBuffer,vUv2).rgb;n[3]=texture2D(normalBuffer,vUv3).rgb;
#else
vec3 n[4];n[0]=vec3(0.0);n[1]=vec3(0.0);n[2]=vec3(0.0);n[3]=vec3(0.0);
#endif
gl_FragColor=vec4(n[index],d[index]);}`, wz = "uniform vec2 texelSize;varying vec2 vUv0;varying vec2 vUv1;varying vec2 vUv2;varying vec2 vUv3;void main(){vec2 uv=position.xy*0.5+0.5;vUv0=uv;vUv1=vec2(uv.x,uv.y+texelSize.y);vUv2=vec2(uv.x+texelSize.x,uv.y);vUv3=uv+texelSize;gl_Position=vec4(position.xy,1.0,1.0);}", Dz = class extends ts {
  /**
   * Constructs a new depth downsampling material.
   */
  constructor() {
    super({
      name: "DepthDownsamplingMaterial",
      defines: {
        DEPTH_PACKING: "0"
      },
      uniforms: {
        depthBuffer: new qn(null),
        normalBuffer: new qn(null),
        texelSize: new qn(new De())
      },
      blending: dr,
      toneMapped: !1,
      depthWrite: !1,
      depthTest: !1,
      fragmentShader: Cz,
      vertexShader: wz
    });
  }
  /**
   * The depth buffer.
   *
   * @type {Texture}
   */
  set depthBuffer(s) {
    this.uniforms.depthBuffer.value = s;
  }
  /**
   * The depth packing strategy.
   *
   * @type {DepthPackingStrategies}
   */
  set depthPacking(s) {
    this.defines.DEPTH_PACKING = s.toFixed(0), this.needsUpdate = !0;
  }
  /**
   * Sets the depth buffer.
   *
   * @deprecated Use depthBuffer and depthPacking instead.
   * @param {Texture} buffer - The depth texture.
   * @param {DepthPackingStrategies} [depthPacking=BasicDepthPacking] - The depth packing strategy.
   */
  setDepthBuffer(s, e = wc) {
    this.depthBuffer = s, this.depthPacking = e;
  }
  /**
   * The normal buffer.
   *
   * @type {Texture}
   */
  set normalBuffer(s) {
    this.uniforms.normalBuffer.value = s, s !== null ? this.defines.DOWNSAMPLE_NORMALS = "1" : delete this.defines.DOWNSAMPLE_NORMALS, this.needsUpdate = !0;
  }
  /**
   * Sets the normal buffer.
   *
   * @deprecated Use normalBuffer instead.
   * @param {Texture} value - The normal buffer.
   */
  setNormalBuffer(s) {
    this.normalBuffer = s;
  }
  /**
   * Sets the texel size.
   *
   * @deprecated Use setSize() instead.
   * @param {Number} x - The texel width.
   * @param {Number} y - The texel height.
   */
  setTexelSize(s, e) {
    this.uniforms.texelSize.value.set(s, e);
  }
  /**
   * Sets the size of this object.
   *
   * @param {Number} width - The width.
   * @param {Number} height - The height.
   */
  setSize(s, e) {
    this.uniforms.texelSize.value.set(1 / s, 1 / e);
  }
}, Uz = class extends jr {
  /**
   * Constructs a new depth downsampling pass.
   *
   * @param {Object} [options] - The options.
   * @param {Texture} [options.normalBuffer=null] - A texture that contains view space normals. See {@link NormalPass}.
   * @param {Number} [options.resolutionScale=0.5] - The resolution scale.
   * @param {Number} [options.resolutionX=Resolution.AUTO_SIZE] - The horizontal resolution.
   * @param {Number} [options.resolutionY=Resolution.AUTO_SIZE] - The vertical resolution.
   * @param {Number} [options.width=Resolution.AUTO_SIZE] - Deprecated. Use resolutionX instead.
   * @param {Number} [options.height=Resolution.AUTO_SIZE] - Deprecated. Use resolutionY instead.
   */
  constructor({
    normalBuffer: s = null,
    resolutionScale: e = 0.5,
    width: n = Hh.AUTO_SIZE,
    height: i = Hh.AUTO_SIZE,
    resolutionX: r = n,
    resolutionY: c = i
  } = {}) {
    super("DepthDownsamplingPass");
    const h = new Dz();
    h.normalBuffer = s, this.fullscreenMaterial = h, this.needsDepthTexture = !0, this.needsSwap = !1, this.renderTarget = new Ua(1, 1, {
      minFilter: wi,
      magFilter: wi,
      depthBuffer: !1,
      type: es
    }), this.renderTarget.texture.name = "DepthDownsamplingPass.Target", this.renderTarget.texture.generateMipmaps = !1;
    const d = this.resolution = new Hh(this, r, c, e);
    d.addEventListener("change", (v) => this.setSize(d.baseWidth, d.baseHeight));
  }
  /**
   * The normal(RGB) + depth(A) texture.
   *
   * @type {Texture}
   */
  get texture() {
    return this.renderTarget.texture;
  }
  /**
   * Returns the normal(RGB) + depth(A) texture.
   *
   * @deprecated Use texture instead.
   * @return {Texture} The texture.
   */
  getTexture() {
    return this.renderTarget.texture;
  }
  /**
   * Returns the resolution settings.
   *
   * @deprecated Use resolution instead.
   * @return {Resolution} The resolution.
   */
  getResolution() {
    return this.resolution;
  }
  /**
   * Sets the depth texture.
   *
   * @param {Texture} depthTexture - A depth texture.
   * @param {DepthPackingStrategies} [depthPacking=BasicDepthPacking] - The depth packing strategy.
   */
  setDepthTexture(s, e = wc) {
    this.fullscreenMaterial.depthBuffer = s, this.fullscreenMaterial.depthPacking = e;
  }
  /**
   * Downsamples depth and scene normals.
   *
   * @param {WebGLRenderer} renderer - The renderer.
   * @param {WebGLRenderTarget} inputBuffer - A frame buffer that contains the result of the previous pass.
   * @param {WebGLRenderTarget} outputBuffer - A frame buffer that serves as the output render target unless this pass renders to screen.
   * @param {Number} [deltaTime] - The time between the last frame and the current one in seconds.
   * @param {Boolean} [stencilTest] - Indicates whether a stencil mask is active.
   */
  render(s, e, n, i, r) {
    s.setRenderTarget(this.renderToScreen ? null : this.renderTarget), s.render(this.scene, this.camera);
  }
  /**
   * Updates the size of this pass.
   *
   * @param {Number} width - The width.
   * @param {Number} height - The height.
   */
  setSize(s, e) {
    const n = this.resolution;
    n.setBaseSize(s, e), this.renderTarget.setSize(n.width, n.height), this.fullscreenMaterial.setSize(s, e);
  }
  /**
   * Performs initialization tasks.
   *
   * @param {WebGLRenderer} renderer - The renderer.
   * @param {Boolean} alpha - Whether the renderer uses the alpha channel or not.
   * @param {Number} frameBufferType - The type of the main frame buffers.
   */
  initialize(s, e, n) {
    const i = s.getContext();
    if (!(i.getExtension("EXT_color_buffer_float") || i.getExtension("EXT_color_buffer_half_float")))
      throw new Error("Rendering to float texture is not supported.");
  }
}, Nz = `#include <common>
#include <packing>
#include <dithering_pars_fragment>
#define packFloatToRGBA(v) packDepthToRGBA(v)
#define unpackRGBAToFloat(v) unpackRGBAToDepth(v)
#ifdef FRAMEBUFFER_PRECISION_HIGH
uniform mediump sampler2D inputBuffer;
#else
uniform lowp sampler2D inputBuffer;
#endif
#if DEPTH_PACKING == 3201
uniform lowp sampler2D depthBuffer;
#elif defined(GL_FRAGMENT_PRECISION_HIGH)
uniform highp sampler2D depthBuffer;
#else
uniform mediump sampler2D depthBuffer;
#endif
uniform vec2 resolution;uniform vec2 texelSize;uniform float cameraNear;uniform float cameraFar;uniform float aspect;uniform float time;varying vec2 vUv;vec4 sRGBToLinear(const in vec4 value){return vec4(mix(pow(value.rgb*0.9478672986+vec3(0.0521327014),vec3(2.4)),value.rgb*0.0773993808,vec3(lessThanEqual(value.rgb,vec3(0.04045)))),value.a);}float readDepth(const in vec2 uv){
#if DEPTH_PACKING == 3201
return unpackRGBAToDepth(texture2D(depthBuffer,uv));
#else
return texture2D(depthBuffer,uv).r;
#endif
}float getViewZ(const in float depth){
#ifdef PERSPECTIVE_CAMERA
return perspectiveDepthToViewZ(depth,cameraNear,cameraFar);
#else
return orthographicDepthToViewZ(depth,cameraNear,cameraFar);
#endif
}vec3 RGBToHCV(const in vec3 RGB){vec4 P=mix(vec4(RGB.bg,-1.0,2.0/3.0),vec4(RGB.gb,0.0,-1.0/3.0),step(RGB.b,RGB.g));vec4 Q=mix(vec4(P.xyw,RGB.r),vec4(RGB.r,P.yzx),step(P.x,RGB.r));float C=Q.x-min(Q.w,Q.y);float H=abs((Q.w-Q.y)/(6.0*C+EPSILON)+Q.z);return vec3(H,C,Q.x);}vec3 RGBToHSL(const in vec3 RGB){vec3 HCV=RGBToHCV(RGB);float L=HCV.z-HCV.y*0.5;float S=HCV.y/(1.0-abs(L*2.0-1.0)+EPSILON);return vec3(HCV.x,S,L);}vec3 HueToRGB(const in float H){float R=abs(H*6.0-3.0)-1.0;float G=2.0-abs(H*6.0-2.0);float B=2.0-abs(H*6.0-4.0);return clamp(vec3(R,G,B),0.0,1.0);}vec3 HSLToRGB(const in vec3 HSL){vec3 RGB=HueToRGB(HSL.x);float C=(1.0-abs(2.0*HSL.z-1.0))*HSL.y;return(RGB-0.5)*C+HSL.z;}FRAGMENT_HEAD void main(){FRAGMENT_MAIN_UV vec4 color0=texture2D(inputBuffer,UV);vec4 color1=vec4(0.0);FRAGMENT_MAIN_IMAGE color0.a=clamp(color0.a,0.0,1.0);gl_FragColor=color0;
#ifdef ENCODE_OUTPUT
#include <colorspace_fragment>
#endif
#include <dithering_fragment>
}`, Oz = "uniform vec2 resolution;uniform vec2 texelSize;uniform float cameraNear;uniform float cameraFar;uniform float aspect;uniform float time;varying vec2 vUv;VERTEX_HEAD void main(){vUv=position.xy*0.5+0.5;VERTEX_MAIN_SUPPORT gl_Position=vec4(position.xy,1.0,1.0);}", Lz = class extends ts {
  /**
   * Constructs a new effect material.
   *
   * @param {Map<String, String>} [shaderParts] - Deprecated. Use setShaderData instead.
   * @param {Map<String, String>} [defines] - Deprecated. Use setShaderData instead.
   * @param {Map<String, Uniform>} [uniforms] - Deprecated. Use setShaderData instead.
   * @param {Camera} [camera] - A camera.
   * @param {Boolean} [dithering=false] - Deprecated.
   */
  constructor(s, e, n, i, r = !1) {
    super({
      name: "EffectMaterial",
      defines: {
        THREE_REVISION: lm.replace(/\D+/g, ""),
        DEPTH_PACKING: "0",
        ENCODE_OUTPUT: "1"
      },
      uniforms: {
        inputBuffer: new qn(null),
        depthBuffer: new qn(null),
        resolution: new qn(new De()),
        texelSize: new qn(new De()),
        cameraNear: new qn(0.3),
        cameraFar: new qn(1e3),
        aspect: new qn(1),
        time: new qn(0)
      },
      blending: dr,
      toneMapped: !1,
      depthWrite: !1,
      depthTest: !1,
      dithering: r
    }), s && this.setShaderParts(s), e && this.setDefines(e), n && this.setUniforms(n), this.copyCameraSettings(i);
  }
  /**
   * The input buffer.
   *
   * @type {Texture}
   */
  set inputBuffer(s) {
    this.uniforms.inputBuffer.value = s;
  }
  /**
   * Sets the input buffer.
   *
   * @deprecated Use inputBuffer instead.
   * @param {Texture} value - The input buffer.
   */
  setInputBuffer(s) {
    this.uniforms.inputBuffer.value = s;
  }
  /**
   * The depth buffer.
   *
   * @type {Texture}
   */
  get depthBuffer() {
    return this.uniforms.depthBuffer.value;
  }
  set depthBuffer(s) {
    this.uniforms.depthBuffer.value = s;
  }
  /**
   * The depth packing strategy.
   *
   * @type {DepthPackingStrategies}
   */
  get depthPacking() {
    return Number(this.defines.DEPTH_PACKING);
  }
  set depthPacking(s) {
    this.defines.DEPTH_PACKING = s.toFixed(0), this.needsUpdate = !0;
  }
  /**
   * Sets the depth buffer.
   *
   * @deprecated Use depthBuffer and depthPacking instead.
   * @param {Texture} buffer - The depth texture.
   * @param {DepthPackingStrategies} [depthPacking=BasicDepthPacking] - The depth packing strategy.
   */
  setDepthBuffer(s, e = wc) {
    this.depthBuffer = s, this.depthPacking = e;
  }
  /**
   * Sets the shader data.
   *
   * @param {EffectShaderData} data - The shader data.
   * @return {EffectMaterial} This material.
   */
  setShaderData(s) {
    this.setShaderParts(s.shaderParts), this.setDefines(s.defines), this.setUniforms(s.uniforms), this.setExtensions(s.extensions);
  }
  /**
   * Sets the shader parts.
   *
   * @deprecated Use setShaderData instead.
   * @param {Map<String, String>} shaderParts - A collection of shader snippets. See {@link EffectShaderSection}.
   * @return {EffectMaterial} This material.
   */
  setShaderParts(s) {
    return this.fragmentShader = Nz.replace(Rn.FRAGMENT_HEAD, s.get(Rn.FRAGMENT_HEAD) || "").replace(Rn.FRAGMENT_MAIN_UV, s.get(Rn.FRAGMENT_MAIN_UV) || "").replace(Rn.FRAGMENT_MAIN_IMAGE, s.get(Rn.FRAGMENT_MAIN_IMAGE) || ""), this.vertexShader = Oz.replace(Rn.VERTEX_HEAD, s.get(Rn.VERTEX_HEAD) || "").replace(Rn.VERTEX_MAIN_SUPPORT, s.get(Rn.VERTEX_MAIN_SUPPORT) || ""), this.needsUpdate = !0, this;
  }
  /**
   * Sets the shader macros.
   *
   * @deprecated Use setShaderData instead.
   * @param {Map<String, String>} defines - A collection of preprocessor macro definitions.
   * @return {EffectMaterial} This material.
   */
  setDefines(s) {
    for (const e of s.entries())
      this.defines[e[0]] = e[1];
    return this.needsUpdate = !0, this;
  }
  /**
   * Sets the shader uniforms.
   *
   * @deprecated Use setShaderData instead.
   * @param {Map<String, Uniform>} uniforms - A collection of uniforms.
   * @return {EffectMaterial} This material.
   */
  setUniforms(s) {
    for (const e of s.entries())
      this.uniforms[e[0]] = e[1];
    return this;
  }
  /**
   * Sets the required shader extensions.
   *
   * @deprecated Use setShaderData instead.
   * @param {Set<WebGLExtension>} extensions - A collection of extensions.
   * @return {EffectMaterial} This material.
   */
  setExtensions(s) {
    this.extensions = {};
    for (const e of s)
      this.extensions[e] = !0;
    return this;
  }
  /**
   * Indicates whether output encoding is enabled.
   *
   * @type {Boolean}
   */
  get encodeOutput() {
    return this.defines.ENCODE_OUTPUT !== void 0;
  }
  set encodeOutput(s) {
    this.encodeOutput !== s && (s ? this.defines.ENCODE_OUTPUT = "1" : delete this.defines.ENCODE_OUTPUT, this.needsUpdate = !0);
  }
  /**
   * Indicates whether output encoding is enabled.
   *
   * @deprecated Use encodeOutput instead.
   * @return {Boolean} Whether output encoding is enabled.
   */
  isOutputEncodingEnabled(s) {
    return this.encodeOutput;
  }
  /**
   * Enables or disables output encoding.
   *
   * @deprecated Use encodeOutput instead.
   * @param {Boolean} value - Whether output encoding should be enabled.
   */
  setOutputEncodingEnabled(s) {
    this.encodeOutput = s;
  }
  /**
   * The time in seconds.
   *
   * @type {Number}
   */
  get time() {
    return this.uniforms.time.value;
  }
  set time(s) {
    this.uniforms.time.value = s;
  }
  /**
   * Sets the delta time.
   *
   * @deprecated Use time instead.
   * @param {Number} value - The delta time in seconds.
   */
  setDeltaTime(s) {
    this.uniforms.time.value += s;
  }
  /**
   * Copies the settings of the given camera.
   *
   * @deprecated Use copyCameraSettings instead.
   * @param {Camera} camera - A camera.
   */
  adoptCameraSettings(s) {
    this.copyCameraSettings(s);
  }
  /**
   * Copies the settings of the given camera.
   *
   * @param {Camera} camera - A camera.
   */
  copyCameraSettings(s) {
    s && (this.uniforms.cameraNear.value = s.near, this.uniforms.cameraFar.value = s.far, s instanceof Zi ? this.defines.PERSPECTIVE_CAMERA = "1" : delete this.defines.PERSPECTIVE_CAMERA, this.needsUpdate = !0);
  }
  /**
   * Sets the resolution.
   *
   * @param {Number} width - The width.
   * @param {Number} height - The height.
   */
  setSize(s, e) {
    const n = this.uniforms;
    n.resolution.value.set(s, e), n.texelSize.value.set(1 / s, 1 / e), n.aspect.value = s / e;
  }
  /**
   * An enumeration of shader code placeholders.
   *
   * @deprecated Use EffectShaderSection instead.
   * @type {Object}
   */
  static get Section() {
    return Rn;
  }
};
function Eb(s, e, n) {
  for (const i of e) {
    const r = "$1" + s + i.charAt(0).toUpperCase() + i.slice(1), c = new RegExp("([^\\.])(\\b" + i + "\\b)", "g");
    for (const h of n.entries())
      h[1] !== null && n.set(h[0], h[1].replace(c, r));
  }
}
function zz(s, e, n) {
  let i = e.getFragmentShader(), r = e.getVertexShader();
  const c = i !== void 0 && /mainImage/.test(i), h = i !== void 0 && /mainUv/.test(i);
  if (n.attributes |= e.getAttributes(), i === void 0)
    throw new Error(`Missing fragment shader (${e.name})`);
  if (h && (n.attributes & ju.CONVOLUTION) !== 0)
    throw new Error(`Effects that transform UVs are incompatible with convolution effects (${e.name})`);
  if (!c && !h)
    throw new Error(`Could not find mainImage or mainUv function (${e.name})`);
  {
    const d = /\w+\s+(\w+)\([\w\s,]*\)\s*{/g, v = n.shaderParts;
    let g = v.get(Rn.FRAGMENT_HEAD) || "", S = v.get(Rn.FRAGMENT_MAIN_UV) || "", x = v.get(Rn.FRAGMENT_MAIN_IMAGE) || "", M = v.get(Rn.VERTEX_HEAD) || "", b = v.get(Rn.VERTEX_MAIN_SUPPORT) || "";
    const R = /* @__PURE__ */ new Set(), w = /* @__PURE__ */ new Set();
    if (h && (S += `	${s}MainUv(UV);
`, n.uvTransformation = !0), r !== null && /mainSupport/.test(r)) {
      const U = /mainSupport *\([\w\s]*?uv\s*?\)/.test(r);
      b += `	${s}MainSupport(`, b += U ? `vUv);
` : `);
`;
      for (const N of r.matchAll(/(?:varying\s+\w+\s+([\S\s]*?);)/g))
        for (const O of N[1].split(/\s*,\s*/))
          n.varyings.add(O), R.add(O), w.add(O);
      for (const N of r.matchAll(d))
        w.add(N[1]);
    }
    for (const U of i.matchAll(d))
      w.add(U[1]);
    for (const U of e.defines.keys())
      w.add(U.replace(/\([\w\s,]*\)/g, ""));
    for (const U of e.uniforms.keys())
      w.add(U);
    w.delete("while"), w.delete("for"), w.delete("if"), e.uniforms.forEach((U, N) => n.uniforms.set(s + N.charAt(0).toUpperCase() + N.slice(1), U)), e.defines.forEach((U, N) => n.defines.set(s + N.charAt(0).toUpperCase() + N.slice(1), U));
    const C = /* @__PURE__ */ new Map([["fragment", i], ["vertex", r]]);
    Eb(s, w, n.defines), Eb(s, w, C), i = C.get("fragment"), r = C.get("vertex");
    const E = e.blendMode;
    if (n.blendModes.set(E.blendFunction, E), c) {
      e.inputColorSpace !== null && e.inputColorSpace !== n.colorSpace && (x += e.inputColorSpace === ei ? `color0 = sRGBTransferOETF(color0);
	` : `color0 = sRGBToLinear(color0);
	`), e.outputColorSpace !== Yr ? n.colorSpace = e.outputColorSpace : e.inputColorSpace !== null && (n.colorSpace = e.inputColorSpace);
      const U = /MainImage *\([\w\s,]*?depth[\w\s,]*?\)/;
      x += `${s}MainImage(color0, UV, `, (n.attributes & ju.DEPTH) !== 0 && U.test(i) && (x += "depth, ", n.readDepth = !0), x += `color1);
	`;
      const N = s + "BlendOpacity";
      n.uniforms.set(N, E.opacity), x += `color0 = blend${E.blendFunction}(color0, color1, ${N});

	`, g += `uniform float ${N};

`;
    }
    if (g += i + `
`, r !== null && (M += r + `
`), v.set(Rn.FRAGMENT_HEAD, g), v.set(Rn.FRAGMENT_MAIN_UV, S), v.set(Rn.FRAGMENT_MAIN_IMAGE, x), v.set(Rn.VERTEX_HEAD, M), v.set(Rn.VERTEX_MAIN_SUPPORT, b), e.extensions !== null)
      for (const U of e.extensions)
        n.extensions.add(U);
  }
}
var Bz = class extends jr {
  /**
   * Constructs a new effect pass.
   *
   * @param {Camera} camera - The main camera.
   * @param {...Effect} effects - The effects that will be rendered by this pass.
   */
  constructor(s, ...e) {
    super("EffectPass"), this.fullscreenMaterial = new Lz(null, null, null, s), this.listener = (n) => this.handleEvent(n), this.effects = [], this.setEffects(e), this.skipRendering = !1, this.minTime = 1, this.maxTime = Number.POSITIVE_INFINITY, this.timeScale = 1;
  }
  set mainScene(s) {
    for (const e of this.effects)
      e.mainScene = s;
  }
  set mainCamera(s) {
    this.fullscreenMaterial.copyCameraSettings(s);
    for (const e of this.effects)
      e.mainCamera = s;
  }
  /**
   * Indicates whether this pass encodes its output when rendering to screen.
   *
   * @type {Boolean}
   * @deprecated Use fullscreenMaterial.encodeOutput instead.
   */
  get encodeOutput() {
    return this.fullscreenMaterial.encodeOutput;
  }
  set encodeOutput(s) {
    this.fullscreenMaterial.encodeOutput = s;
  }
  /**
   * Indicates whether dithering is enabled.
   *
   * @type {Boolean}
   */
  get dithering() {
    return this.fullscreenMaterial.dithering;
  }
  set dithering(s) {
    const e = this.fullscreenMaterial;
    e.dithering = s, e.needsUpdate = !0;
  }
  /**
   * Sets the effects.
   *
   * @param {Effect[]} effects - The effects.
   * @protected
   */
  setEffects(s) {
    for (const e of this.effects)
      e.removeEventListener("change", this.listener);
    this.effects = s.sort((e, n) => n.attributes - e.attributes);
    for (const e of this.effects)
      e.addEventListener("change", this.listener);
  }
  /**
   * Updates the compound shader material.
   *
   * @protected
   */
  updateMaterial() {
    const s = new WL();
    let e = 0;
    for (const h of this.effects)
      if (h.blendMode.blendFunction === mn.DST)
        s.attributes |= h.getAttributes() & ju.DEPTH;
      else {
        if ((s.attributes & h.getAttributes() & ju.CONVOLUTION) !== 0)
          throw new Error(`Convolution effects cannot be merged (${h.name})`);
        zz("e" + e++, h, s);
      }
    let n = s.shaderParts.get(Rn.FRAGMENT_HEAD), i = s.shaderParts.get(Rn.FRAGMENT_MAIN_IMAGE), r = s.shaderParts.get(Rn.FRAGMENT_MAIN_UV);
    const c = /\bblend\b/g;
    for (const h of s.blendModes.values())
      n += h.getShaderCode().replace(c, `blend${h.blendFunction}`) + `
`;
    (s.attributes & ju.DEPTH) !== 0 ? (s.readDepth && (i = `float depth = readDepth(UV);

	` + i), this.needsDepthTexture = this.getDepthTexture() === null) : this.needsDepthTexture = !1, s.colorSpace === ei && (i += `color0 = sRGBToLinear(color0);
	`), s.uvTransformation ? (r = `vec2 transformedUv = vUv;
` + r, s.defines.set("UV", "transformedUv")) : s.defines.set("UV", "vUv"), s.shaderParts.set(Rn.FRAGMENT_HEAD, n), s.shaderParts.set(Rn.FRAGMENT_MAIN_IMAGE, i), s.shaderParts.set(Rn.FRAGMENT_MAIN_UV, r);
    for (const [h, d] of s.shaderParts)
      d !== null && s.shaderParts.set(h, d.trim().replace(/^#/, `
#`));
    this.skipRendering = e === 0, this.needsSwap = !this.skipRendering, this.fullscreenMaterial.setShaderData(s);
  }
  /**
   * Rebuilds the shader material.
   */
  recompile() {
    this.updateMaterial();
  }
  /**
   * Returns the current depth texture.
   *
   * @return {Texture} The current depth texture, or null if there is none.
   */
  getDepthTexture() {
    return this.fullscreenMaterial.depthBuffer;
  }
  /**
   * Sets the depth texture.
   *
   * @param {Texture} depthTexture - A depth texture.
   * @param {DepthPackingStrategies} [depthPacking=BasicDepthPacking] - The depth packing.
   */
  setDepthTexture(s, e = wc) {
    this.fullscreenMaterial.depthBuffer = s, this.fullscreenMaterial.depthPacking = e;
    for (const n of this.effects)
      n.setDepthTexture(s, e);
  }
  /**
   * Renders the effect.
   *
   * @param {WebGLRenderer} renderer - The renderer.
   * @param {WebGLRenderTarget} inputBuffer - A frame buffer that contains the result of the previous pass.
   * @param {WebGLRenderTarget} outputBuffer - A frame buffer that serves as the output render target unless this pass renders to screen.
   * @param {Number} [deltaTime] - The time between the last frame and the current one in seconds.
   * @param {Boolean} [stencilTest] - Indicates whether a stencil mask is active.
   */
  render(s, e, n, i, r) {
    for (const c of this.effects)
      c.update(s, e, i);
    if (!this.skipRendering || this.renderToScreen) {
      const c = this.fullscreenMaterial;
      c.inputBuffer = e.texture, c.time += i * this.timeScale, s.setRenderTarget(this.renderToScreen ? null : n), s.render(this.scene, this.camera);
    }
  }
  /**
   * Updates the size of this pass.
   *
   * @param {Number} width - The width.
   * @param {Number} height - The height.
   */
  setSize(s, e) {
    this.fullscreenMaterial.setSize(s, e);
    for (const n of this.effects)
      n.setSize(s, e);
  }
  /**
   * Performs initialization tasks.
   *
   * @param {WebGLRenderer} renderer - The renderer.
   * @param {Boolean} alpha - Whether the renderer uses the alpha channel or not.
   * @param {Number} frameBufferType - The type of the main frame buffers.
   */
  initialize(s, e, n) {
    this.renderer = s;
    for (const i of this.effects)
      i.initialize(s, e, n);
    this.updateMaterial(), n !== void 0 && n !== Da && (this.fullscreenMaterial.defines.FRAMEBUFFER_PRECISION_HIGH = "1");
  }
  /**
   * Deletes disposable objects.
   */
  dispose() {
    super.dispose();
    for (const s of this.effects)
      s.removeEventListener("change", this.listener), s.dispose();
  }
  /**
   * Handles events.
   *
   * @param {Event} event - An event.
   */
  handleEvent(s) {
    switch (s.type) {
      case "change":
        this.recompile();
        break;
    }
  }
}, Pz = class extends jr {
  /**
   * Constructs a new normal pass.
   *
   * @param {Scene} scene - The scene to render.
   * @param {Camera} camera - The camera to use to render the scene.
   * @param {Object} [options] - The options.
   * @param {WebGLRenderTarget} [options.renderTarget] - A custom render target.
   * @param {Number} [options.resolutionScale=1.0] - The resolution scale.
   * @param {Number} [options.resolutionX=Resolution.AUTO_SIZE] - The horizontal resolution.
   * @param {Number} [options.resolutionY=Resolution.AUTO_SIZE] - The vertical resolution.
   * @param {Number} [options.width=Resolution.AUTO_SIZE] - Deprecated. Use resolutionX instead.
   * @param {Number} [options.height=Resolution.AUTO_SIZE] - Deprecated. Use resolutionY instead.
   */
  constructor(s, e, {
    renderTarget: n,
    resolutionScale: i = 1,
    width: r = Hh.AUTO_SIZE,
    height: c = Hh.AUTO_SIZE,
    resolutionX: h = r,
    resolutionY: d = c
  } = {}) {
    super("NormalPass"), this.needsSwap = !1, this.renderPass = new eA(s, e, new hx());
    const v = this.renderPass;
    v.ignoreBackground = !0, v.skipShadowMapUpdate = !0;
    const g = v.getClearPass();
    g.overrideClearColor = new lt(7829503), g.overrideClearAlpha = 1, this.renderTarget = n, this.renderTarget === void 0 && (this.renderTarget = new Ua(1, 1, {
      minFilter: wi,
      magFilter: wi
    }), this.renderTarget.texture.name = "NormalPass.Target");
    const S = this.resolution = new Hh(this, h, d, i);
    S.addEventListener("change", (x) => this.setSize(S.baseWidth, S.baseHeight));
  }
  set mainScene(s) {
    this.renderPass.mainScene = s;
  }
  set mainCamera(s) {
    this.renderPass.mainCamera = s;
  }
  /**
   * The normal texture.
   *
   * @type {Texture}
   */
  get texture() {
    return this.renderTarget.texture;
  }
  /**
   * The normal texture.
   *
   * @deprecated Use texture instead.
   * @return {Texture} The texture.
   */
  getTexture() {
    return this.renderTarget.texture;
  }
  /**
   * Returns the resolution settings.
   *
   * @deprecated Use resolution instead.
   * @return {Resolution} The resolution.
   */
  getResolution() {
    return this.resolution;
  }
  /**
   * Returns the current resolution scale.
   *
   * @return {Number} The resolution scale.
   * @deprecated Use resolution.preferredWidth or resolution.preferredHeight instead.
   */
  getResolutionScale() {
    return this.resolution.scale;
  }
  /**
   * Sets the resolution scale.
   *
   * @param {Number} scale - The new resolution scale.
   * @deprecated Use resolution.preferredWidth or resolution.preferredHeight instead.
   */
  setResolutionScale(s) {
    this.resolution.scale = s;
  }
  /**
   * Renders the scene normals.
   *
   * @param {WebGLRenderer} renderer - The renderer.
   * @param {WebGLRenderTarget} inputBuffer - A frame buffer that contains the result of the previous pass.
   * @param {WebGLRenderTarget} outputBuffer - A frame buffer that serves as the output render target unless this pass renders to screen.
   * @param {Number} [deltaTime] - The time between the last frame and the current one in seconds.
   * @param {Boolean} [stencilTest] - Indicates whether a stencil mask is active.
   */
  render(s, e, n, i, r) {
    const c = this.renderToScreen ? null : this.renderTarget;
    this.renderPass.render(s, c, c);
  }
  /**
   * Updates the size of this pass.
   *
   * @param {Number} width - The width.
   * @param {Number} height - The height.
   */
  setSize(s, e) {
    const n = this.resolution;
    n.setBaseSize(s, e), this.renderTarget.setSize(n.width, n.height);
  }
};
function Xp(s, e, n) {
  return e in s ? Object.defineProperty(s, e, {
    value: n,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : s[e] = n, s;
}
new De();
new De();
function tA(s, e) {
  if (!(s instanceof e))
    throw new TypeError("Cannot call a class as a function");
}
var fr = function s(e, n, i) {
  var r = this;
  tA(this, s), Xp(this, "dot2", function(c, h) {
    return r.x * c + r.y * h;
  }), Xp(this, "dot3", function(c, h, d) {
    return r.x * c + r.y * h + r.z * d;
  }), this.x = e, this.y = n, this.z = i;
}, Iz = [new fr(1, 1, 0), new fr(-1, 1, 0), new fr(1, -1, 0), new fr(-1, -1, 0), new fr(1, 0, 1), new fr(-1, 0, 1), new fr(1, 0, -1), new fr(-1, 0, -1), new fr(0, 1, 1), new fr(0, -1, 1), new fr(0, 1, -1), new fr(0, -1, -1)], Tb = [151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180], Ab = new Array(512), Rb = new Array(512), Hz = function(e) {
  e > 0 && e < 1 && (e *= 65536), e = Math.floor(e), e < 256 && (e |= e << 8);
  for (var n = 0; n < 256; n++) {
    var i;
    n & 1 ? i = Tb[n] ^ e & 255 : i = Tb[n] ^ e >> 8 & 255, Ab[n] = Ab[n + 256] = i, Rb[n] = Rb[n + 256] = Iz[i % 12];
  }
};
Hz(0);
function Vz(s) {
  if (typeof s == "number")
    s = Math.abs(s);
  else if (typeof s == "string") {
    var e = s;
    s = 0;
    for (var n = 0; n < e.length; n++)
      s = (s + (n + 1) * (e.charCodeAt(n) % 96)) % 2147483647;
  }
  return s === 0 && (s = 311), s;
}
function Cb(s) {
  var e = Vz(s);
  return function() {
    var n = e * 48271 % 2147483647;
    return e = n, n / 2147483647;
  };
}
var Gz = function s(e) {
  var n = this;
  tA(this, s), Xp(this, "seed", 0), Xp(this, "init", function(i) {
    n.seed = i, n.value = Cb(i);
  }), Xp(this, "value", Cb(this.seed)), this.init(e);
};
new Gz(Math.random());
const Fz = /* @__PURE__ */ ht.createContext(null), wb = (s) => (s.getAttributes() & 2) === 2, Xz = /* @__PURE__ */ ht.memo(/* @__PURE__ */ ht.forwardRef(({ children: s, camera: e, scene: n, resolutionScale: i, enabled: r = !0, renderPriority: c = 1, autoClear: h = !0, depthBuffer: d, enableNormalPass: v, stencilBuffer: g, multisampling: S = 8, frameBufferType: x = nf }, M) => {
  const { gl: b, scene: R, camera: w, size: C } = Cx(), E = n || R, U = e || w, [N, O, I] = ht.useMemo(() => {
    const k = new kL(b, { depthBuffer: d, stencilBuffer: g, multisampling: S, frameBufferType: x });
    k.addPass(new eA(E, U));
    let B = null, z = null;
    return v && (z = new Pz(E, U), z.enabled = !1, k.addPass(z), i !== void 0 && (B = new Uz({ normalBuffer: z.texture, resolutionScale: i }), B.enabled = !1, k.addPass(B))), [k, z, B];
  }, [U, b, d, g, S, x, E, v, i]);
  ht.useEffect(() => N?.setSize(C.width, C.height), [N, C]), qT((k, B) => {
    if (r) {
      const z = b.autoClear;
      b.autoClear = h, g && !h && b.clearStencil(), N.render(B), b.autoClear = z;
    }
  }, r ? c : 0);
  const V = ht.useRef(null);
  ht.useLayoutEffect(() => {
    const k = [], B = V.current.__r3f;
    if (B && N) {
      const z = B.children;
      for (let W = 0; W < z.length; W++) {
        const le = z[W].object;
        if (le instanceof HS) {
          const ae = [le];
          if (!wb(le)) {
            let pe = null;
            for (; (pe = z[W + 1]?.object) instanceof HS && !wb(pe); ) ae.push(pe), W++;
          }
          const oe = new Bz(U, ...ae);
          k.push(oe);
        } else le instanceof jr && k.push(le);
      }
      for (const W of k) N?.addPass(W);
      O && (O.enabled = !0), I && (I.enabled = !0);
    }
    return () => {
      for (const z of k) N?.removePass(z);
      O && (O.enabled = !1), I && (I.enabled = !1);
    };
  }, [N, s, U, O, I]), ht.useEffect(() => {
    const k = b.toneMapping;
    return b.toneMapping = Wr, () => {
      b.toneMapping = k;
    };
  }, [b]);
  const Y = ht.useMemo(() => ({ composer: N, normalPass: O, downSamplingPass: I, resolutionScale: i, camera: U, scene: E }), [N, O, I, i, U, E]);
  return ht.useImperativeHandle(M, () => N, [N]), /* @__PURE__ */ Ot.jsx(Fz.Provider, { value: Y, children: /* @__PURE__ */ Ot.jsx("group", { ref: V, children: s }) });
}));
let qz = 0;
const Db = /* @__PURE__ */ new WeakMap(), Yz = (s, e) => function({ blendFunction: n = e?.blendFunction, opacity: i = e?.opacity, ...r }) {
  let c = Db.get(s);
  if (!c) {
    const v = `@react-three/postprocessing/${s.name}-${qz++}`;
    kT({ [v]: s }), Db.set(s, c = v);
  }
  const h = Cx((v) => v.camera), d = Nb.useMemo(() => [...e?.args ?? [], ...r.args ?? [{ ...e, ...r }]], [JSON.stringify(r)]);
  return /* @__PURE__ */ Ot.jsx(c, { camera: h, "blendMode-blendFunction": n, "blendMode-opacity-value": i, ...r, args: d });
}, kz = `
precision highp float;
varying vec2 vUv;
void main() {
  vUv = uv;
  vec4 modelPosition = modelMatrix * vec4(position, 1.0);
  vec4 viewPosition = viewMatrix * modelPosition;
  gl_Position = projectionMatrix * viewPosition;
}
`, Wz = `
precision highp float;
uniform vec2 resolution;
uniform float time;
uniform float waveSpeed;
uniform float waveFrequency;
uniform float waveAmplitude;
uniform vec3 waveColor;
uniform vec2 mousePos;
uniform int enableMouseInteraction;
uniform float mouseRadius;

vec4 mod289(vec4 x) { return x - floor(x * (1.0/289.0)) * 289.0; }
vec4 permute(vec4 x) { return mod289(((x * 34.0) + 1.0) * x); }
vec4 taylorInvSqrt(vec4 r) { return 1.79284291400159 - 0.85373472095314 * r; }
vec2 fade(vec2 t) { return t*t*t*(t*(t*6.0-15.0)+10.0); }

float cnoise(vec2 P) {
  vec4 Pi = floor(P.xyxy) + vec4(0.0,0.0,1.0,1.0);
  vec4 Pf = fract(P.xyxy) - vec4(0.0,0.0,1.0,1.0);
  Pi = mod289(Pi);
  vec4 ix = Pi.xzxz;
  vec4 iy = Pi.yyww;
  vec4 fx = Pf.xzxz;
  vec4 fy = Pf.yyww;
  vec4 i = permute(permute(ix) + iy);
  vec4 gx = fract(i * (1.0/41.0)) * 2.0 - 1.0;
  vec4 gy = abs(gx) - 0.5;
  vec4 tx = floor(gx + 0.5);
  gx = gx - tx;
  vec2 g00 = vec2(gx.x, gy.x);
  vec2 g10 = vec2(gx.y, gy.y);
  vec2 g01 = vec2(gx.z, gy.z);
  vec2 g11 = vec2(gx.w, gy.w);
  vec4 norm = taylorInvSqrt(vec4(dot(g00,g00), dot(g01,g01), dot(g10,g10), dot(g11,g11)));
  g00 *= norm.x; g01 *= norm.y; g10 *= norm.z; g11 *= norm.w;
  float n00 = dot(g00, vec2(fx.x, fy.x));
  float n10 = dot(g10, vec2(fx.y, fy.y));
  float n01 = dot(g01, vec2(fx.z, fy.z));
  float n11 = dot(g11, vec2(fx.w, fy.w));
  vec2 fade_xy = fade(Pf.xy);
  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);
  return 2.3 * mix(n_x.x, n_x.y, fade_xy.y);
}

const int OCTAVES = 4;
float fbm(vec2 p) {
  float value = 0.0;
  float amp = 1.0;
  float freq = waveFrequency;
  for (int i = 0; i < OCTAVES; i++) {
    value += amp * abs(cnoise(p));
    p *= freq;
    amp *= waveAmplitude;
  }
  return value;
}

float pattern(vec2 p) {
  vec2 p2 = p - time * waveSpeed;
  return fbm(p + fbm(p2)); 
}

void main() {
  vec2 uv = gl_FragCoord.xy / resolution.xy;
  uv -= 0.5;
  uv.x *= resolution.x / resolution.y;
  float f = pattern(uv);
  if (enableMouseInteraction == 1) {
    vec2 mouseNDC = (mousePos / resolution - 0.5) * vec2(1.0, -1.0);
    mouseNDC.x *= resolution.x / resolution.y;
    float dist = length(uv - mouseNDC);
    float effect = 1.0 - smoothstep(0.0, mouseRadius, dist);
    f -= 0.5 * effect;
  }
  vec3 col = mix(vec3(0.0), waveColor, f);
  gl_FragColor = vec4(col, 1.0);
}
`, Zz = `
precision highp float;
uniform float colorNum;
uniform float pixelSize;
const float bayerMatrix8x8[64] = float[64](
  0.0/64.0, 48.0/64.0, 12.0/64.0, 60.0/64.0,  3.0/64.0, 51.0/64.0, 15.0/64.0, 63.0/64.0,
  32.0/64.0,16.0/64.0, 44.0/64.0, 28.0/64.0, 35.0/64.0,19.0/64.0, 47.0/64.0, 31.0/64.0,
  8.0/64.0, 56.0/64.0,  4.0/64.0, 52.0/64.0, 11.0/64.0,59.0/64.0,  7.0/64.0, 55.0/64.0,
  40.0/64.0,24.0/64.0, 36.0/64.0, 20.0/64.0, 43.0/64.0,27.0/64.0, 39.0/64.0, 23.0/64.0,
  2.0/64.0, 50.0/64.0, 14.0/64.0, 62.0/64.0,  1.0/64.0,49.0/64.0, 13.0/64.0, 61.0/64.0,
  34.0/64.0,18.0/64.0, 46.0/64.0, 30.0/64.0, 33.0/64.0,17.0/64.0, 45.0/64.0, 29.0/64.0,
  10.0/64.0,58.0/64.0,  6.0/64.0, 54.0/64.0,  9.0/64.0,57.0/64.0,  5.0/64.0, 53.0/64.0,
  42.0/64.0,26.0/64.0, 38.0/64.0, 22.0/64.0, 41.0/64.0,25.0/64.0, 37.0/64.0, 21.0/64.0
);

vec3 dither(vec2 uv, vec3 color) {
  vec2 scaledCoord = floor(uv * resolution / pixelSize);
  int x = int(mod(scaledCoord.x, 8.0));
  int y = int(mod(scaledCoord.y, 8.0));
  float threshold = bayerMatrix8x8[y * 8 + x] - 0.25;
  float step = 1.0 / (colorNum - 1.0);
  color += threshold * step;
  float bias = 0.2;
  color = clamp(color - bias, 0.0, 1.0);
  return floor(color * (colorNum - 1.0) + 0.5) / (colorNum - 1.0);
}

void mainImage(in vec4 inputColor, in vec2 uv, out vec4 outputColor) {
  vec2 normalizedPixelSize = pixelSize / resolution;
  vec2 uvPixel = normalizedPixelSize * floor(uv / normalizedPixelSize);
  vec4 color = texture2D(inputBuffer, uvPixel);
  color.rgb = dither(uv, color.rgb);
  outputColor = color;
}
`;
class jz extends HS {
  constructor() {
    const e = /* @__PURE__ */ new Map([
      ["colorNum", new qn(4)],
      ["pixelSize", new qn(2)]
    ]);
    super("RetroEffect", Zz, { uniforms: e }), this.uniforms = e;
  }
  set colorNum(e) {
    this.uniforms.get("colorNum").value = e;
  }
  get colorNum() {
    return this.uniforms.get("colorNum").value;
  }
  set pixelSize(e) {
    this.uniforms.get("pixelSize").value = e;
  }
  get pixelSize() {
    return this.uniforms.get("pixelSize").value;
  }
}
const Qz = Yz(jz), nA = ht.forwardRef((s, e) => {
  const { colorNum: n, pixelSize: i } = s;
  return /* @__PURE__ */ Ot.jsx(Qz, { ref: e, colorNum: n, pixelSize: i });
});
nA.displayName = "RetroEffect";
function Kz({
  waveSpeed: s,
  waveFrequency: e,
  waveAmplitude: n,
  waveColor: i,
  colorNum: r,
  pixelSize: c,
  disableAnimation: h,
  enableMouseInteraction: d,
  mouseRadius: v
}) {
  const g = ht.useRef(null), S = ht.useRef(new De()), { viewport: x, size: M, gl: b } = Cx(), R = ht.useRef({
    time: new qn(0),
    resolution: new qn(new De(0, 0)),
    waveSpeed: new qn(s),
    waveFrequency: new qn(e),
    waveAmplitude: new qn(n),
    waveColor: new qn(new lt(...i)),
    mousePos: new qn(new De(0, 0)),
    enableMouseInteraction: new qn(d ? 1 : 0),
    mouseRadius: new qn(v)
  });
  ht.useEffect(() => {
    const E = b.getPixelRatio(), U = Math.floor(M.width * E), N = Math.floor(M.height * E), O = R.current.resolution.value;
    (O.x !== U || O.y !== N) && O.set(U, N);
  }, [M, b]);
  const w = ht.useRef([...i]);
  qT(({ clock: E }) => {
    const U = R.current;
    h || (U.time.value = E.getElapsedTime()), U.waveSpeed.value !== s && (U.waveSpeed.value = s), U.waveFrequency.value !== e && (U.waveFrequency.value = e), U.waveAmplitude.value !== n && (U.waveAmplitude.value = n), w.current.every((N, O) => N === i[O]) || (U.waveColor.value.set(...i), w.current = [...i]), U.enableMouseInteraction.value = d ? 1 : 0, U.mouseRadius.value = v, d && U.mousePos.value.copy(S.current);
  });
  const C = (E) => {
    if (!d) return;
    const U = b.domElement.getBoundingClientRect(), N = b.getPixelRatio();
    S.current.set(
      (E.clientX - U.left) * N,
      (E.clientY - U.top) * N
    );
  };
  return /* @__PURE__ */ Ot.jsxs(Ot.Fragment, { children: [
    /* @__PURE__ */ Ot.jsxs("mesh", { ref: g, scale: [x.width, x.height, 1], children: [
      /* @__PURE__ */ Ot.jsx("planeGeometry", { args: [1, 1] }),
      /* @__PURE__ */ Ot.jsx(
        "shaderMaterial",
        {
          vertexShader: kz,
          fragmentShader: Wz,
          uniforms: R.current
        }
      )
    ] }),
    /* @__PURE__ */ Ot.jsx(Xz, { children: /* @__PURE__ */ Ot.jsx(nA, { colorNum: r, pixelSize: c }) }),
    /* @__PURE__ */ Ot.jsxs(
      "mesh",
      {
        onPointerMove: C,
        position: [0, 0, 0.01],
        scale: [x.width, x.height, 1],
        visible: !1,
        children: [
          /* @__PURE__ */ Ot.jsx("planeGeometry", { args: [1, 1] }),
          /* @__PURE__ */ Ot.jsx("meshBasicMaterial", { transparent: !0, opacity: 0 })
        ]
      }
    )
  ] });
}
function iA({
  waveSpeed: s = 0.05,
  waveFrequency: e = 3,
  waveAmplitude: n = 0.3,
  waveColor: i = [0.5, 0.5, 0.5],
  colorNum: r = 4,
  pixelSize: c = 2,
  disableAnimation: h = !1,
  enableMouseInteraction: d = !0,
  mouseRadius: v = 1
}) {
  return /* @__PURE__ */ Ot.jsx(
    BL,
    {
      className: "dither-container",
      camera: { position: [0, 0, 6] },
      dpr: window.devicePixelRatio,
      gl: { antialias: !0, preserveDrawingBuffer: !0 },
      children: /* @__PURE__ */ Ot.jsx(
        Kz,
        {
          waveSpeed: s,
          waveFrequency: e,
          waveAmplitude: n,
          waveColor: i,
          colorNum: r,
          pixelSize: c,
          disableAnimation: h,
          enableMouseInteraction: d,
          mouseRadius: v
        }
      )
    }
  );
}
document.addEventListener("DOMContentLoaded", () => {
  document.querySelector(".core-values") && $A(), document.getElementById("exec-list") && iR();
});
function eB() {
  return /* @__PURE__ */ Ot.jsx("div", { style: { width: "100%", height: "600px", position: "relative" }, children: /* @__PURE__ */ Ot.jsx(
    iA,
    {
      waveColor: [0.5, 0.5, 0.5],
      disableAnimation: !1,
      enableMouseInteraction: !0,
      mouseRadius: 0.3,
      colorNum: 4,
      waveAmplitude: 0.3,
      waveFrequency: 3,
      waveSpeed: 0.05,
      pixelSize: 2
    }
  ) });
}
function tB(s, e = {}) {
  const n = Ub.createRoot(s);
  return n.render(/* @__PURE__ */ Ot.jsx(sR, { ...e })), () => n.unmount();
}
function nB(s, e = {}) {
  const n = Ub.createRoot(s);
  return n.render(
    /* @__PURE__ */ Ot.jsx("div", { style: { width: "100%", height: "600px", position: "relative" }, children: /* @__PURE__ */ Ot.jsx(iA, { ...e }) })
  ), () => n.unmount();
}
export {
  eB as App,
  tB as mount,
  nB as mountDither
};
